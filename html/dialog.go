// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type DialogElement struct {
	attributes dialogAttrs
	children   []htemel.Node
	skipRender bool
}

// Dialog creates a tag <dialog> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The dialog element represents a transitory part of an application, in the form of a small window ("dialog box"), which the user interacts with to perform a task or gather information. Once the user is done, the dialog can be automatically closed by the application, or manually closed by the user.
func Dialog(children ...htemel.Node) *DialogElement {
	node := &DialogElement{
		children: children, attributes: make(dialogAttrs),
	}

	return node
}

func DialogIf(condition bool, children ...htemel.Node) *DialogElement {
	if condition {
		return Dialog(children...)
	}

	return &DialogElement{
		skipRender: true,
	}
}

func DialogTernary(condition bool, true htemel.Node, false htemel.Node) *DialogElement {
	if condition {
		return Dialog(true)
	}

	return Dialog(false)
}

type DialogAutocapitalizeEnum string

const (
	DialogAutocapitalizeEnumWords      DialogAutocapitalizeEnum = "words"
	DialogAutocapitalizeEnumCharacters DialogAutocapitalizeEnum = "characters"
	DialogAutocapitalizeEnumNone       DialogAutocapitalizeEnum = "none"
	DialogAutocapitalizeEnumOff        DialogAutocapitalizeEnum = "off"
	DialogAutocapitalizeEnumOn         DialogAutocapitalizeEnum = "on"
	DialogAutocapitalizeEnumSentences  DialogAutocapitalizeEnum = "sentences"
)

type DialogAutocorrectEnum string

const (
	DialogAutocorrectEnumOff   DialogAutocorrectEnum = "off"
	DialogAutocorrectEnumOn    DialogAutocorrectEnum = "on"
	DialogAutocorrectEnumEmpty DialogAutocorrectEnum = ""
)

type DialogContenteditableEnum string

const (
	DialogContenteditableEnumFalse         DialogContenteditableEnum = "false"
	DialogContenteditableEnumPlaintextOnly DialogContenteditableEnum = "plaintext-only"
	DialogContenteditableEnumTrue          DialogContenteditableEnum = "true"
	DialogContenteditableEnumEmpty         DialogContenteditableEnum = ""
)

type DialogDirEnum string

const (
	DialogDirEnumAuto DialogDirEnum = "auto"
	DialogDirEnumLtr  DialogDirEnum = "ltr"
	DialogDirEnumRtl  DialogDirEnum = "rtl"
)

type DialogDraggableEnum string

const (
	DialogDraggableEnumFalse DialogDraggableEnum = "false"
	DialogDraggableEnumTrue  DialogDraggableEnum = "true"
)

type DialogEnterkeyhintEnum string

const (
	DialogEnterkeyhintEnumPrevious DialogEnterkeyhintEnum = "previous"
	DialogEnterkeyhintEnumSearch   DialogEnterkeyhintEnum = "search"
	DialogEnterkeyhintEnumSend     DialogEnterkeyhintEnum = "send"
	DialogEnterkeyhintEnumDone     DialogEnterkeyhintEnum = "done"
	DialogEnterkeyhintEnumEnter    DialogEnterkeyhintEnum = "enter"
	DialogEnterkeyhintEnumGo       DialogEnterkeyhintEnum = "go"
	DialogEnterkeyhintEnumNext     DialogEnterkeyhintEnum = "next"
)

type DialogHiddenEnum string

const (
	DialogHiddenEnumHidden     DialogHiddenEnum = "hidden"
	DialogHiddenEnumUntilFound DialogHiddenEnum = "until-found"
	DialogHiddenEnumEmpty      DialogHiddenEnum = ""
)

type DialogInputmodeEnum string

const (
	DialogInputmodeEnumUrl     DialogInputmodeEnum = "url"
	DialogInputmodeEnumDecimal DialogInputmodeEnum = "decimal"
	DialogInputmodeEnumEmail   DialogInputmodeEnum = "email"
	DialogInputmodeEnumNone    DialogInputmodeEnum = "none"
	DialogInputmodeEnumNumeric DialogInputmodeEnum = "numeric"
	DialogInputmodeEnumSearch  DialogInputmodeEnum = "search"
	DialogInputmodeEnumTel     DialogInputmodeEnum = "tel"
	DialogInputmodeEnumText    DialogInputmodeEnum = "text"
)

type DialogSpellcheckEnum string

const (
	DialogSpellcheckEnumFalse DialogSpellcheckEnum = "false"
	DialogSpellcheckEnumTrue  DialogSpellcheckEnum = "true"
	DialogSpellcheckEnumEmpty DialogSpellcheckEnum = ""
)

type DialogTranslateEnum string

const (
	DialogTranslateEnumNo    DialogTranslateEnum = "no"
	DialogTranslateEnumYes   DialogTranslateEnum = "yes"
	DialogTranslateEnumEmpty DialogTranslateEnum = ""
)

type DialogWritingsuggestionsEnum string

const (
	DialogWritingsuggestionsEnumFalse DialogWritingsuggestionsEnum = "false"
	DialogWritingsuggestionsEnumTrue  DialogWritingsuggestionsEnum = "true"
	DialogWritingsuggestionsEnumEmpty DialogWritingsuggestionsEnum = ""
)

type dialogAttrs map[string]any

func (e *DialogElement) Autocapitalize(a DialogAutocapitalizeEnum) *DialogElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *DialogElement) Autocorrect(a DialogAutocorrectEnum) *DialogElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *DialogElement) Autofocus(b bool) *DialogElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *DialogElement) Class(s ...string) *DialogElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *DialogElement) Contenteditable(a DialogContenteditableEnum) *DialogElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *DialogElement) DataUnsafe(name string, s string) *DialogElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *DialogElement) Data(name string, s string) *DialogElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *DialogElement) Dir(a DialogDirEnum) *DialogElement {
	e.attributes["dir"] = a

	return e
}

func (e *DialogElement) Draggable(a DialogDraggableEnum) *DialogElement {
	e.attributes["draggable"] = a

	return e
}

func (e *DialogElement) Enterkeyhint(a DialogEnterkeyhintEnum) *DialogElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *DialogElement) Hidden(a DialogHiddenEnum) *DialogElement {
	e.attributes["hidden"] = a

	return e
}

func (e *DialogElement) Id(s string) *DialogElement {
	e.attributes["id"] = s

	return e
}

func (e *DialogElement) Inert(b bool) *DialogElement {
	e.attributes["inert"] = b

	return e
}

func (e *DialogElement) Inputmode(a DialogInputmodeEnum) *DialogElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *DialogElement) Itemid(s string) *DialogElement {
	e.attributes["itemid"] = s

	return e
}

func (e *DialogElement) Itemprop(s ...string) *DialogElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *DialogElement) Itemref(s ...string) *DialogElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *DialogElement) Itemscope(b bool) *DialogElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *DialogElement) Itemtype(s ...string) *DialogElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *DialogElement) Lang(s string) *DialogElement {
	e.attributes["lang"] = s

	return e
}

func (e *DialogElement) Nonce(s string) *DialogElement {
	e.attributes["nonce"] = s

	return e
}

func (e *DialogElement) Popover(s string) *DialogElement {
	e.attributes["popover"] = s

	return e
}

func (e *DialogElement) Slot(s string) *DialogElement {
	e.attributes["slot"] = s

	return e
}

func (e *DialogElement) Spellcheck(a DialogSpellcheckEnum) *DialogElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *DialogElement) Style(s string) *DialogElement {
	e.attributes["style"] = s

	return e
}

func (e *DialogElement) Tabindex(i int) *DialogElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *DialogElement) Title(s string) *DialogElement {
	e.attributes["title"] = s

	return e
}

func (e *DialogElement) Translate(a DialogTranslateEnum) *DialogElement {
	e.attributes["translate"] = a

	return e
}

func (e *DialogElement) Writingsuggestions(a DialogWritingsuggestionsEnum) *DialogElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *DialogElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<dialog")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}
	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</dialog>")); err != nil {
		return err
	}

	return nil
}
