// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type DialogElement struct {
	attributes dialogAttrs
	children   []htemel.Node
	skipRender bool
}

// Dialog creates a tag <dialog> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The dialog element represents a transitory part of an application, in the form of a small window ("dialog box"), which the user interacts with to perform a task or gather information. Once the user is done, the dialog can be automatically closed by the application, or manually closed by the user.
func Dialog(children ...htemel.Node) *DialogElement {
	node := &DialogElement{
		children:   children,
		attributes: make(dialogAttrs),
	}

	return node
}

func DialogIf(condition bool, children ...htemel.Node) *DialogElement {
	if condition {
		return Dialog(children...)
	}

	return &DialogElement{
		skipRender: true,
	}
}

type DialogAutocapitalizeAttrEnum string

const (
	DialogAutocapitalizeAttrEnumCharacters DialogAutocapitalizeAttrEnum = "characters"
	DialogAutocapitalizeAttrEnumNone       DialogAutocapitalizeAttrEnum = "none"
	DialogAutocapitalizeAttrEnumOff        DialogAutocapitalizeAttrEnum = "off"
	DialogAutocapitalizeAttrEnumOn         DialogAutocapitalizeAttrEnum = "on"
	DialogAutocapitalizeAttrEnumSentences  DialogAutocapitalizeAttrEnum = "sentences"
	DialogAutocapitalizeAttrEnumWords      DialogAutocapitalizeAttrEnum = "words"
)

type DialogAutocorrectAttrEnum string

const (
	DialogAutocorrectAttrEnumOff DialogAutocorrectAttrEnum = "off"
	DialogAutocorrectAttrEnumOn  DialogAutocorrectAttrEnum = "on"
)

type DialogContenteditableAttrEnum string

const (
	DialogContenteditableAttrEnumFalse         DialogContenteditableAttrEnum = "false"
	DialogContenteditableAttrEnumPlaintextOnly DialogContenteditableAttrEnum = "plaintext-only"
	DialogContenteditableAttrEnumTrue          DialogContenteditableAttrEnum = "true"
)

type dialogAttrs map[string]any

func (e *DialogElement) Autocapitalize(a DialogAutocapitalizeAttrEnum) *DialogElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *DialogElement) Autocorrect(a DialogAutocorrectAttrEnum) *DialogElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *DialogElement) Autofocus(b bool) *DialogElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *DialogElement) Class(s ...string) *DialogElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *DialogElement) Contenteditable(a DialogContenteditableAttrEnum) *DialogElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *DialogElement) Id(s string) *DialogElement {
	e.attributes["id"] = s

	return e
}

func (e *DialogElement) Slot(s string) *DialogElement {
	e.attributes["slot"] = s

	return e
}

func (e *DialogElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<dialog")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		w.Write([]byte(" " + key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</dialog>")); err != nil {
		return err
	}

	return nil
}
