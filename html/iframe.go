// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type IframeElement struct {
	attributes iframeAttrs
	children []htemel.Node
	skipRender bool
}

// Iframe creates a tag <iframe> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The iframe element represents its content navigable.
func Iframe(children ...htemel.Node) *IframeElement {
	node := &IframeElement{
		children: children,
		attributes: make(iframeAttrs),
	}

	return node
}

func IframeIf(condition bool, children ...htemel.Node) *IframeElement {
	if condition {
		return Iframe(children...)
	}

	return &IframeElement{
		skipRender: true,
	}
}

type IframeAutocapitalizeEnum string

const (
	IframeAutocapitalizeEnumOff IframeAutocapitalizeEnum = "off"
	IframeAutocapitalizeEnumOn IframeAutocapitalizeEnum = "on"
	IframeAutocapitalizeEnumSentences IframeAutocapitalizeEnum = "sentences"
	IframeAutocapitalizeEnumWords IframeAutocapitalizeEnum = "words"
	IframeAutocapitalizeEnumCharacters IframeAutocapitalizeEnum = "characters"
	IframeAutocapitalizeEnumNone IframeAutocapitalizeEnum = "none"
)

type IframeAutocorrectEnum string

const (
	IframeAutocorrectEnumOff IframeAutocorrectEnum = "off"
	IframeAutocorrectEnumOn IframeAutocorrectEnum = "on"
)

type IframeContenteditableEnum string

const (
	IframeContenteditableEnumFalse IframeContenteditableEnum = "false"
	IframeContenteditableEnumPlaintextOnly IframeContenteditableEnum = "plaintext-only"
	IframeContenteditableEnumTrue IframeContenteditableEnum = "true"
)

type IframeDirEnum string

const (
	IframeDirEnumLtr IframeDirEnum = "ltr"
	IframeDirEnumRtl IframeDirEnum = "rtl"
	IframeDirEnumAuto IframeDirEnum = "auto"
)

type IframeDraggableEnum string

const (
	IframeDraggableEnumFalse IframeDraggableEnum = "false"
	IframeDraggableEnumTrue IframeDraggableEnum = "true"
)

type IframeEnterkeyhintEnum string

const (
	IframeEnterkeyhintEnumGo IframeEnterkeyhintEnum = "go"
	IframeEnterkeyhintEnumNext IframeEnterkeyhintEnum = "next"
	IframeEnterkeyhintEnumPrevious IframeEnterkeyhintEnum = "previous"
	IframeEnterkeyhintEnumSearch IframeEnterkeyhintEnum = "search"
	IframeEnterkeyhintEnumSend IframeEnterkeyhintEnum = "send"
	IframeEnterkeyhintEnumDone IframeEnterkeyhintEnum = "done"
	IframeEnterkeyhintEnumEnter IframeEnterkeyhintEnum = "enter"
)

type IframeHiddenEnum string

const (
	IframeHiddenEnumHidden IframeHiddenEnum = "hidden"
	IframeHiddenEnumUntilFound IframeHiddenEnum = "until-found"
)

type iframeAttrs map[string]any

func (e *IframeElement) Autocapitalize(a IframeAutocapitalizeEnum) *IframeElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *IframeElement) Autocorrect(a IframeAutocorrectEnum) *IframeElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *IframeElement) Autofocus(b bool) *IframeElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *IframeElement) Class(s ...string) *IframeElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *IframeElement) Contenteditable(a IframeContenteditableEnum) *IframeElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *IframeElement) Dir(a IframeDirEnum) *IframeElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *IframeElement) Draggable(a IframeDraggableEnum) *IframeElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *IframeElement) Enterkeyhint(a IframeEnterkeyhintEnum) *IframeElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *IframeElement) Hidden(a IframeHiddenEnum) *IframeElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *IframeElement) Id(s string) *IframeElement {
	e.attributes["id"] = s
	
	return e
}

func (e *IframeElement) Slot(s string) *IframeElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *IframeElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<iframe")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</iframe>")); err != nil {
		return err
	}

	return nil
}
