// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type IframeElement struct {
	attributes iframeAttrs
	children   []htemel.Node
	skipRender bool
}

// Iframe creates a tag <iframe> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The iframe element represents its content navigable.
func Iframe(children ...htemel.Node) *IframeElement {
	node := &IframeElement{
		children:   children,
		attributes: make(iframeAttrs),
	}

	return node
}

func IframeIf(condition bool, children ...htemel.Node) *IframeElement {
	if condition {
		return Iframe(children...)
	}

	return &IframeElement{
		skipRender: true,
	}
}

func IframeTernary(condition bool, true htemel.Node, false htemel.Node) *IframeElement {
	if condition {
		return Iframe(true)
	}

	return Iframe(false)
}

type IframeAutocapitalizeEnum string

const (
	IframeAutocapitalizeEnumCharacters IframeAutocapitalizeEnum = "characters"
	IframeAutocapitalizeEnumNone       IframeAutocapitalizeEnum = "none"
	IframeAutocapitalizeEnumOff        IframeAutocapitalizeEnum = "off"
	IframeAutocapitalizeEnumOn         IframeAutocapitalizeEnum = "on"
	IframeAutocapitalizeEnumSentences  IframeAutocapitalizeEnum = "sentences"
	IframeAutocapitalizeEnumWords      IframeAutocapitalizeEnum = "words"
)

type IframeAutocorrectEnum string

const (
	IframeAutocorrectEnumOff   IframeAutocorrectEnum = "off"
	IframeAutocorrectEnumOn    IframeAutocorrectEnum = "on"
	IframeAutocorrectEnumEmpty IframeAutocorrectEnum = ""
)

type IframeContenteditableEnum string

const (
	IframeContenteditableEnumFalse         IframeContenteditableEnum = "false"
	IframeContenteditableEnumPlaintextOnly IframeContenteditableEnum = "plaintext-only"
	IframeContenteditableEnumTrue          IframeContenteditableEnum = "true"
	IframeContenteditableEnumEmpty         IframeContenteditableEnum = ""
)

type IframeDirEnum string

const (
	IframeDirEnumAuto IframeDirEnum = "auto"
	IframeDirEnumLtr  IframeDirEnum = "ltr"
	IframeDirEnumRtl  IframeDirEnum = "rtl"
)

type IframeDraggableEnum string

const (
	IframeDraggableEnumFalse IframeDraggableEnum = "false"
	IframeDraggableEnumTrue  IframeDraggableEnum = "true"
)

type IframeEnterkeyhintEnum string

const (
	IframeEnterkeyhintEnumSend     IframeEnterkeyhintEnum = "send"
	IframeEnterkeyhintEnumDone     IframeEnterkeyhintEnum = "done"
	IframeEnterkeyhintEnumEnter    IframeEnterkeyhintEnum = "enter"
	IframeEnterkeyhintEnumGo       IframeEnterkeyhintEnum = "go"
	IframeEnterkeyhintEnumNext     IframeEnterkeyhintEnum = "next"
	IframeEnterkeyhintEnumPrevious IframeEnterkeyhintEnum = "previous"
	IframeEnterkeyhintEnumSearch   IframeEnterkeyhintEnum = "search"
)

type IframeHiddenEnum string

const (
	IframeHiddenEnumHidden     IframeHiddenEnum = "hidden"
	IframeHiddenEnumUntilFound IframeHiddenEnum = "until-found"
	IframeHiddenEnumEmpty      IframeHiddenEnum = ""
)

type IframeInputmodeEnum string

const (
	IframeInputmodeEnumNone    IframeInputmodeEnum = "none"
	IframeInputmodeEnumNumeric IframeInputmodeEnum = "numeric"
	IframeInputmodeEnumSearch  IframeInputmodeEnum = "search"
	IframeInputmodeEnumTel     IframeInputmodeEnum = "tel"
	IframeInputmodeEnumText    IframeInputmodeEnum = "text"
	IframeInputmodeEnumUrl     IframeInputmodeEnum = "url"
	IframeInputmodeEnumDecimal IframeInputmodeEnum = "decimal"
	IframeInputmodeEnumEmail   IframeInputmodeEnum = "email"
)

type IframeSpellcheckEnum string

const (
	IframeSpellcheckEnumFalse IframeSpellcheckEnum = "false"
	IframeSpellcheckEnumTrue  IframeSpellcheckEnum = "true"
	IframeSpellcheckEnumEmpty IframeSpellcheckEnum = ""
)

type IframeTranslateEnum string

const (
	IframeTranslateEnumNo    IframeTranslateEnum = "no"
	IframeTranslateEnumYes   IframeTranslateEnum = "yes"
	IframeTranslateEnumEmpty IframeTranslateEnum = ""
)

type IframeWritingsuggestionsEnum string

const (
	IframeWritingsuggestionsEnumFalse IframeWritingsuggestionsEnum = "false"
	IframeWritingsuggestionsEnumTrue  IframeWritingsuggestionsEnum = "true"
	IframeWritingsuggestionsEnumEmpty IframeWritingsuggestionsEnum = ""
)

type iframeAttrs map[string]any

func (e *IframeElement) Autocapitalize(a IframeAutocapitalizeEnum) *IframeElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *IframeElement) Autocorrect(a IframeAutocorrectEnum) *IframeElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *IframeElement) Autofocus(b bool) *IframeElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *IframeElement) Class(s ...string) *IframeElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *IframeElement) Contenteditable(a IframeContenteditableEnum) *IframeElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *IframeElement) DataUnsafe(name string, s string) *IframeElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *IframeElement) Data(name string, s string) *IframeElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *IframeElement) Dir(a IframeDirEnum) *IframeElement {
	e.attributes["dir"] = a

	return e
}

func (e *IframeElement) Draggable(a IframeDraggableEnum) *IframeElement {
	e.attributes["draggable"] = a

	return e
}

func (e *IframeElement) Enterkeyhint(a IframeEnterkeyhintEnum) *IframeElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *IframeElement) Hidden(a IframeHiddenEnum) *IframeElement {
	e.attributes["hidden"] = a

	return e
}

func (e *IframeElement) Id(s string) *IframeElement {
	e.attributes["id"] = s

	return e
}

func (e *IframeElement) Inert(b bool) *IframeElement {
	e.attributes["inert"] = b

	return e
}

func (e *IframeElement) Inputmode(a IframeInputmodeEnum) *IframeElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *IframeElement) Itemid(s string) *IframeElement {
	e.attributes["itemid"] = s

	return e
}

func (e *IframeElement) Itemprop(s ...string) *IframeElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *IframeElement) Itemref(s ...string) *IframeElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *IframeElement) Itemscope(b bool) *IframeElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *IframeElement) Itemtype(s ...string) *IframeElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *IframeElement) Lang(s string) *IframeElement {
	e.attributes["lang"] = s

	return e
}

func (e *IframeElement) Nonce(s string) *IframeElement {
	e.attributes["nonce"] = s

	return e
}

func (e *IframeElement) Popover(s string) *IframeElement {
	e.attributes["popover"] = s

	return e
}

func (e *IframeElement) Slot(s string) *IframeElement {
	e.attributes["slot"] = s

	return e
}

func (e *IframeElement) Spellcheck(a IframeSpellcheckEnum) *IframeElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *IframeElement) Style(s string) *IframeElement {
	e.attributes["style"] = s

	return e
}

func (e *IframeElement) Tabindex(i int) *IframeElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *IframeElement) Title(s string) *IframeElement {
	e.attributes["title"] = s

	return e
}

func (e *IframeElement) Translate(a IframeTranslateEnum) *IframeElement {
	e.attributes["translate"] = a

	return e
}

func (e *IframeElement) Writingsuggestions(a IframeWritingsuggestionsEnum) *IframeElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *IframeElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<iframe")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</iframe>")); err != nil {
		return err
	}

	return nil
}
