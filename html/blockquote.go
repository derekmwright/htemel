// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type BlockquoteElement struct {
	attributes blockquoteAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// Blockquote creates a tag <blockquote> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The blockquote element represents a section that is quoted from another source.
func Blockquote(children ...htemel.Node) *BlockquoteElement {
	node := &BlockquoteElement{
		children: children, attributes: make(blockquoteAttrs),
	}

	return node
}

func BlockquoteIf(condition bool, children ...htemel.Node) *BlockquoteElement {
	if condition {
		return Blockquote(children...)
	}

	return &BlockquoteElement{
		skipRender: true,
	}
}

func BlockquoteTernary(condition bool, true htemel.Node, false htemel.Node) *BlockquoteElement {
	if condition {
		return Blockquote(true)
	}

	return Blockquote(false)
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *BlockquoteElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *BlockquoteElement) AddIndent(i int) {
	e.indent = i + 1
}

type BlockquoteAutocapitalizeEnum string

const (
	BlockquoteAutocapitalizeEnumCharacters BlockquoteAutocapitalizeEnum = "characters"
	BlockquoteAutocapitalizeEnumNone       BlockquoteAutocapitalizeEnum = "none"
	BlockquoteAutocapitalizeEnumOff        BlockquoteAutocapitalizeEnum = "off"
	BlockquoteAutocapitalizeEnumOn         BlockquoteAutocapitalizeEnum = "on"
	BlockquoteAutocapitalizeEnumSentences  BlockquoteAutocapitalizeEnum = "sentences"
	BlockquoteAutocapitalizeEnumWords      BlockquoteAutocapitalizeEnum = "words"
)

type BlockquoteAutocorrectEnum string

const (
	BlockquoteAutocorrectEnumOff   BlockquoteAutocorrectEnum = "off"
	BlockquoteAutocorrectEnumOn    BlockquoteAutocorrectEnum = "on"
	BlockquoteAutocorrectEnumEmpty BlockquoteAutocorrectEnum = ""
)

type BlockquoteContenteditableEnum string

const (
	BlockquoteContenteditableEnumFalse         BlockquoteContenteditableEnum = "false"
	BlockquoteContenteditableEnumPlaintextOnly BlockquoteContenteditableEnum = "plaintext-only"
	BlockquoteContenteditableEnumTrue          BlockquoteContenteditableEnum = "true"
	BlockquoteContenteditableEnumEmpty         BlockquoteContenteditableEnum = ""
)

type BlockquoteDirEnum string

const (
	BlockquoteDirEnumAuto BlockquoteDirEnum = "auto"
	BlockquoteDirEnumLtr  BlockquoteDirEnum = "ltr"
	BlockquoteDirEnumRtl  BlockquoteDirEnum = "rtl"
)

type BlockquoteDraggableEnum string

const (
	BlockquoteDraggableEnumFalse BlockquoteDraggableEnum = "false"
	BlockquoteDraggableEnumTrue  BlockquoteDraggableEnum = "true"
)

type BlockquoteEnterkeyhintEnum string

const (
	BlockquoteEnterkeyhintEnumDone     BlockquoteEnterkeyhintEnum = "done"
	BlockquoteEnterkeyhintEnumEnter    BlockquoteEnterkeyhintEnum = "enter"
	BlockquoteEnterkeyhintEnumGo       BlockquoteEnterkeyhintEnum = "go"
	BlockquoteEnterkeyhintEnumNext     BlockquoteEnterkeyhintEnum = "next"
	BlockquoteEnterkeyhintEnumPrevious BlockquoteEnterkeyhintEnum = "previous"
	BlockquoteEnterkeyhintEnumSearch   BlockquoteEnterkeyhintEnum = "search"
	BlockquoteEnterkeyhintEnumSend     BlockquoteEnterkeyhintEnum = "send"
)

type BlockquoteHiddenEnum string

const (
	BlockquoteHiddenEnumHidden     BlockquoteHiddenEnum = "hidden"
	BlockquoteHiddenEnumUntilFound BlockquoteHiddenEnum = "until-found"
	BlockquoteHiddenEnumEmpty      BlockquoteHiddenEnum = ""
)

type BlockquoteInputmodeEnum string

const (
	BlockquoteInputmodeEnumUrl     BlockquoteInputmodeEnum = "url"
	BlockquoteInputmodeEnumDecimal BlockquoteInputmodeEnum = "decimal"
	BlockquoteInputmodeEnumEmail   BlockquoteInputmodeEnum = "email"
	BlockquoteInputmodeEnumNone    BlockquoteInputmodeEnum = "none"
	BlockquoteInputmodeEnumNumeric BlockquoteInputmodeEnum = "numeric"
	BlockquoteInputmodeEnumSearch  BlockquoteInputmodeEnum = "search"
	BlockquoteInputmodeEnumTel     BlockquoteInputmodeEnum = "tel"
	BlockquoteInputmodeEnumText    BlockquoteInputmodeEnum = "text"
)

type BlockquoteSpellcheckEnum string

const (
	BlockquoteSpellcheckEnumFalse BlockquoteSpellcheckEnum = "false"
	BlockquoteSpellcheckEnumTrue  BlockquoteSpellcheckEnum = "true"
	BlockquoteSpellcheckEnumEmpty BlockquoteSpellcheckEnum = ""
)

type BlockquoteTranslateEnum string

const (
	BlockquoteTranslateEnumNo    BlockquoteTranslateEnum = "no"
	BlockquoteTranslateEnumYes   BlockquoteTranslateEnum = "yes"
	BlockquoteTranslateEnumEmpty BlockquoteTranslateEnum = ""
)

type BlockquoteWritingsuggestionsEnum string

const (
	BlockquoteWritingsuggestionsEnumFalse BlockquoteWritingsuggestionsEnum = "false"
	BlockquoteWritingsuggestionsEnumTrue  BlockquoteWritingsuggestionsEnum = "true"
	BlockquoteWritingsuggestionsEnumEmpty BlockquoteWritingsuggestionsEnum = ""
)

type blockquoteAttrs map[string]any

func (e *BlockquoteElement) Cite(s string) *BlockquoteElement {
	e.attributes["cite"] = s

	return e
}

func (e *BlockquoteElement) Autocapitalize(a BlockquoteAutocapitalizeEnum) *BlockquoteElement {
	e.attributes["autocapitalize"] = a

	return e
}

func BlockquoteAutocapitalizeCustom(s string) BlockquoteAutocapitalizeEnum {
	return BlockquoteAutocapitalizeEnum(s)
}

func (e *BlockquoteElement) Autocorrect(a BlockquoteAutocorrectEnum) *BlockquoteElement {
	e.attributes["autocorrect"] = a

	return e
}

func BlockquoteAutocorrectCustom(s string) BlockquoteAutocorrectEnum {
	return BlockquoteAutocorrectEnum(s)
}

func (e *BlockquoteElement) Autofocus(b bool) *BlockquoteElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *BlockquoteElement) Class(s ...string) *BlockquoteElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *BlockquoteElement) Contenteditable(a BlockquoteContenteditableEnum) *BlockquoteElement {
	e.attributes["contenteditable"] = a

	return e
}

func BlockquoteContenteditableCustom(s string) BlockquoteContenteditableEnum {
	return BlockquoteContenteditableEnum(s)
}

func (e *BlockquoteElement) DataUnsafe(name string, s string) *BlockquoteElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *BlockquoteElement) Data(name string, s string) *BlockquoteElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *BlockquoteElement) Dir(a BlockquoteDirEnum) *BlockquoteElement {
	e.attributes["dir"] = a

	return e
}

func BlockquoteDirCustom(s string) BlockquoteDirEnum {
	return BlockquoteDirEnum(s)
}

func (e *BlockquoteElement) Draggable(a BlockquoteDraggableEnum) *BlockquoteElement {
	e.attributes["draggable"] = a

	return e
}

func BlockquoteDraggableCustom(s string) BlockquoteDraggableEnum {
	return BlockquoteDraggableEnum(s)
}

func (e *BlockquoteElement) Enterkeyhint(a BlockquoteEnterkeyhintEnum) *BlockquoteElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func BlockquoteEnterkeyhintCustom(s string) BlockquoteEnterkeyhintEnum {
	return BlockquoteEnterkeyhintEnum(s)
}

func (e *BlockquoteElement) Hidden(a BlockquoteHiddenEnum) *BlockquoteElement {
	e.attributes["hidden"] = a

	return e
}

func BlockquoteHiddenCustom(s string) BlockquoteHiddenEnum {
	return BlockquoteHiddenEnum(s)
}

func (e *BlockquoteElement) Id(s string) *BlockquoteElement {
	e.attributes["id"] = s

	return e
}

func (e *BlockquoteElement) Inert(b bool) *BlockquoteElement {
	e.attributes["inert"] = b

	return e
}

func (e *BlockquoteElement) Inputmode(a BlockquoteInputmodeEnum) *BlockquoteElement {
	e.attributes["inputmode"] = a

	return e
}

func BlockquoteInputmodeCustom(s string) BlockquoteInputmodeEnum {
	return BlockquoteInputmodeEnum(s)
}

func (e *BlockquoteElement) Itemid(s string) *BlockquoteElement {
	e.attributes["itemid"] = s

	return e
}

func (e *BlockquoteElement) Itemprop(s ...string) *BlockquoteElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *BlockquoteElement) Itemref(s ...string) *BlockquoteElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *BlockquoteElement) Itemscope(b bool) *BlockquoteElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *BlockquoteElement) Itemtype(s ...string) *BlockquoteElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *BlockquoteElement) Lang(s string) *BlockquoteElement {
	e.attributes["lang"] = s

	return e
}

func (e *BlockquoteElement) Nonce(s string) *BlockquoteElement {
	e.attributes["nonce"] = s

	return e
}

func (e *BlockquoteElement) Popover(s string) *BlockquoteElement {
	e.attributes["popover"] = s

	return e
}

func (e *BlockquoteElement) Slot(s string) *BlockquoteElement {
	e.attributes["slot"] = s

	return e
}

func (e *BlockquoteElement) Spellcheck(a BlockquoteSpellcheckEnum) *BlockquoteElement {
	e.attributes["spellcheck"] = a

	return e
}

func BlockquoteSpellcheckCustom(s string) BlockquoteSpellcheckEnum {
	return BlockquoteSpellcheckEnum(s)
}

func (e *BlockquoteElement) Style(s string) *BlockquoteElement {
	e.attributes["style"] = s

	return e
}

func (e *BlockquoteElement) Tabindex(i int) *BlockquoteElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *BlockquoteElement) Title(s string) *BlockquoteElement {
	e.attributes["title"] = s

	return e
}

func (e *BlockquoteElement) Translate(a BlockquoteTranslateEnum) *BlockquoteElement {
	e.attributes["translate"] = a

	return e
}

func BlockquoteTranslateCustom(s string) BlockquoteTranslateEnum {
	return BlockquoteTranslateEnum(s)
}

func (e *BlockquoteElement) Writingsuggestions(a BlockquoteWritingsuggestionsEnum) *BlockquoteElement {
	e.attributes["writingsuggestions"] = a

	return e
}

func BlockquoteWritingsuggestionsCustom(s string) BlockquoteWritingsuggestionsEnum {
	return BlockquoteWritingsuggestionsEnum(s)
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *BlockquoteElement) Render(w io.Writer) error {
	indent := htemel.SetIndent(e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<blockquote")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}
	for _, child := range e.children {
		child.AddIndent(e.Indent())
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(indent + "</blockquote>\n")); err != nil {
		return err
	}

	return nil
}
