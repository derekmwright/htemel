// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type BlockquoteElement struct {
	attributes blockquoteAttrs
	children []htemel.Node
	skipRender bool
}

// Blockquote creates a tag <blockquote> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The blockquote element represents a section that is quoted from another source.
func Blockquote(children ...htemel.Node) *BlockquoteElement {
	node := &BlockquoteElement{
		children: children,
		attributes: make(blockquoteAttrs),
	}

	return node
}

func BlockquoteIf(condition bool, children ...htemel.Node) *BlockquoteElement {
	if condition {
		return Blockquote(children...)
	}

	return &BlockquoteElement{
		skipRender: true,
	}
}

type BlockquoteAutocapitalizeEnum string

const (
	BlockquoteAutocapitalizeEnumSentences BlockquoteAutocapitalizeEnum = "sentences"
	BlockquoteAutocapitalizeEnumWords BlockquoteAutocapitalizeEnum = "words"
	BlockquoteAutocapitalizeEnumCharacters BlockquoteAutocapitalizeEnum = "characters"
	BlockquoteAutocapitalizeEnumNone BlockquoteAutocapitalizeEnum = "none"
	BlockquoteAutocapitalizeEnumOff BlockquoteAutocapitalizeEnum = "off"
	BlockquoteAutocapitalizeEnumOn BlockquoteAutocapitalizeEnum = "on"
)

type BlockquoteAutocorrectEnum string

const (
	BlockquoteAutocorrectEnumOff BlockquoteAutocorrectEnum = "off"
	BlockquoteAutocorrectEnumOn BlockquoteAutocorrectEnum = "on"
)

type BlockquoteContenteditableEnum string

const (
	BlockquoteContenteditableEnumFalse BlockquoteContenteditableEnum = "false"
	BlockquoteContenteditableEnumPlaintextOnly BlockquoteContenteditableEnum = "plaintext-only"
	BlockquoteContenteditableEnumTrue BlockquoteContenteditableEnum = "true"
)

type BlockquoteDirEnum string

const (
	BlockquoteDirEnumAuto BlockquoteDirEnum = "auto"
	BlockquoteDirEnumLtr BlockquoteDirEnum = "ltr"
	BlockquoteDirEnumRtl BlockquoteDirEnum = "rtl"
)

type BlockquoteDraggableEnum string

const (
	BlockquoteDraggableEnumFalse BlockquoteDraggableEnum = "false"
	BlockquoteDraggableEnumTrue BlockquoteDraggableEnum = "true"
)

type BlockquoteEnterkeyhintEnum string

const (
	BlockquoteEnterkeyhintEnumDone BlockquoteEnterkeyhintEnum = "done"
	BlockquoteEnterkeyhintEnumEnter BlockquoteEnterkeyhintEnum = "enter"
	BlockquoteEnterkeyhintEnumGo BlockquoteEnterkeyhintEnum = "go"
	BlockquoteEnterkeyhintEnumNext BlockquoteEnterkeyhintEnum = "next"
	BlockquoteEnterkeyhintEnumPrevious BlockquoteEnterkeyhintEnum = "previous"
	BlockquoteEnterkeyhintEnumSearch BlockquoteEnterkeyhintEnum = "search"
	BlockquoteEnterkeyhintEnumSend BlockquoteEnterkeyhintEnum = "send"
)

type BlockquoteHiddenEnum string

const (
	BlockquoteHiddenEnumHidden BlockquoteHiddenEnum = "hidden"
	BlockquoteHiddenEnumUntilFound BlockquoteHiddenEnum = "until-found"
)

type blockquoteAttrs map[string]any

func (e *BlockquoteElement) Autocapitalize(a BlockquoteAutocapitalizeEnum) *BlockquoteElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *BlockquoteElement) Autocorrect(a BlockquoteAutocorrectEnum) *BlockquoteElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *BlockquoteElement) Autofocus(b bool) *BlockquoteElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *BlockquoteElement) Class(s ...string) *BlockquoteElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *BlockquoteElement) Contenteditable(a BlockquoteContenteditableEnum) *BlockquoteElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *BlockquoteElement) Dir(a BlockquoteDirEnum) *BlockquoteElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *BlockquoteElement) Draggable(a BlockquoteDraggableEnum) *BlockquoteElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *BlockquoteElement) Enterkeyhint(a BlockquoteEnterkeyhintEnum) *BlockquoteElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *BlockquoteElement) Hidden(a BlockquoteHiddenEnum) *BlockquoteElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *BlockquoteElement) Id(s string) *BlockquoteElement {
	e.attributes["id"] = s
	
	return e
}

func (e *BlockquoteElement) Slot(s string) *BlockquoteElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *BlockquoteElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<blockquote")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</blockquote>")); err != nil {
		return err
	}

	return nil
}
