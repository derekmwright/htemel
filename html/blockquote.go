// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type BlockquoteElement struct {
	attributes blockquoteAttrs
	children   []htemel.Node
	skipRender bool
}

// Blockquote creates a tag <blockquote> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The blockquote element represents a section that is quoted from another source.
func Blockquote(children ...htemel.Node) *BlockquoteElement {
	node := &BlockquoteElement{
		children:   children,
		attributes: make(blockquoteAttrs),
	}

	return node
}

func BlockquoteIf(condition bool, children ...htemel.Node) *BlockquoteElement {
	if condition {
		return Blockquote(children...)
	}

	return &BlockquoteElement{
		skipRender: true,
	}
}

type BlockquoteAutocapitalizeAttrEnum string

const (
	BlockquoteAutocapitalizeAttrEnumWords      BlockquoteAutocapitalizeAttrEnum = "words"
	BlockquoteAutocapitalizeAttrEnumCharacters BlockquoteAutocapitalizeAttrEnum = "characters"
	BlockquoteAutocapitalizeAttrEnumNone       BlockquoteAutocapitalizeAttrEnum = "none"
	BlockquoteAutocapitalizeAttrEnumOff        BlockquoteAutocapitalizeAttrEnum = "off"
	BlockquoteAutocapitalizeAttrEnumOn         BlockquoteAutocapitalizeAttrEnum = "on"
	BlockquoteAutocapitalizeAttrEnumSentences  BlockquoteAutocapitalizeAttrEnum = "sentences"
)

type BlockquoteAutocorrectAttrEnum string

const (
	BlockquoteAutocorrectAttrEnumOn  BlockquoteAutocorrectAttrEnum = "on"
	BlockquoteAutocorrectAttrEnumOff BlockquoteAutocorrectAttrEnum = "off"
)

type BlockquoteContenteditableAttrEnum string

const (
	BlockquoteContenteditableAttrEnumTrue          BlockquoteContenteditableAttrEnum = "true"
	BlockquoteContenteditableAttrEnumFalse         BlockquoteContenteditableAttrEnum = "false"
	BlockquoteContenteditableAttrEnumPlaintextOnly BlockquoteContenteditableAttrEnum = "plaintext-only"
)

type blockquoteAttrs map[string]any

func (e *BlockquoteElement) Autocapitalize(a BlockquoteAutocapitalizeAttrEnum) *BlockquoteElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *BlockquoteElement) Autocorrect(a BlockquoteAutocorrectAttrEnum) *BlockquoteElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *BlockquoteElement) Autofocus(b bool) *BlockquoteElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *BlockquoteElement) Class(s ...string) *BlockquoteElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *BlockquoteElement) Contenteditable(a BlockquoteContenteditableAttrEnum) *BlockquoteElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *BlockquoteElement) Id(s string) *BlockquoteElement {
	e.attributes["id"] = s

	return e
}

func (e *BlockquoteElement) Slot(s string) *BlockquoteElement {
	e.attributes["slot"] = s

	return e
}

func (e *BlockquoteElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<blockquote")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</blockquote>")); err != nil {
		return err
	}

	return nil
}
