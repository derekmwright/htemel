// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type ObjectElement struct {
	attributes objectAttrs
	children   []htemel.Node
	skipRender bool
}

// Object creates a tag <object> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The object element can represent an external resource, which, depending on the type of the resource, will either be treated as an image or as a child navigable.
func Object(children ...htemel.Node) *ObjectElement {
	node := &ObjectElement{
		children:   children,
		attributes: make(objectAttrs),
	}

	return node
}

func ObjectIf(condition bool, children ...htemel.Node) *ObjectElement {
	if condition {
		return Object(children...)
	}

	return &ObjectElement{
		skipRender: true,
	}
}

func ObjectTernary(condition bool, true htemel.Node, false htemel.Node) *ObjectElement {
	if condition {
		return Object(true)
	}

	return Object(false)
}

type ObjectAutocapitalizeEnum string

const (
	ObjectAutocapitalizeEnumSentences  ObjectAutocapitalizeEnum = "sentences"
	ObjectAutocapitalizeEnumWords      ObjectAutocapitalizeEnum = "words"
	ObjectAutocapitalizeEnumCharacters ObjectAutocapitalizeEnum = "characters"
	ObjectAutocapitalizeEnumNone       ObjectAutocapitalizeEnum = "none"
	ObjectAutocapitalizeEnumOff        ObjectAutocapitalizeEnum = "off"
	ObjectAutocapitalizeEnumOn         ObjectAutocapitalizeEnum = "on"
)

type ObjectAutocorrectEnum string

const (
	ObjectAutocorrectEnumOff   ObjectAutocorrectEnum = "off"
	ObjectAutocorrectEnumOn    ObjectAutocorrectEnum = "on"
	ObjectAutocorrectEnumEmpty ObjectAutocorrectEnum = ""
)

type ObjectContenteditableEnum string

const (
	ObjectContenteditableEnumFalse         ObjectContenteditableEnum = "false"
	ObjectContenteditableEnumPlaintextOnly ObjectContenteditableEnum = "plaintext-only"
	ObjectContenteditableEnumTrue          ObjectContenteditableEnum = "true"
	ObjectContenteditableEnumEmpty         ObjectContenteditableEnum = ""
)

type ObjectDirEnum string

const (
	ObjectDirEnumAuto ObjectDirEnum = "auto"
	ObjectDirEnumLtr  ObjectDirEnum = "ltr"
	ObjectDirEnumRtl  ObjectDirEnum = "rtl"
)

type ObjectDraggableEnum string

const (
	ObjectDraggableEnumFalse ObjectDraggableEnum = "false"
	ObjectDraggableEnumTrue  ObjectDraggableEnum = "true"
)

type ObjectEnterkeyhintEnum string

const (
	ObjectEnterkeyhintEnumDone     ObjectEnterkeyhintEnum = "done"
	ObjectEnterkeyhintEnumEnter    ObjectEnterkeyhintEnum = "enter"
	ObjectEnterkeyhintEnumGo       ObjectEnterkeyhintEnum = "go"
	ObjectEnterkeyhintEnumNext     ObjectEnterkeyhintEnum = "next"
	ObjectEnterkeyhintEnumPrevious ObjectEnterkeyhintEnum = "previous"
	ObjectEnterkeyhintEnumSearch   ObjectEnterkeyhintEnum = "search"
	ObjectEnterkeyhintEnumSend     ObjectEnterkeyhintEnum = "send"
)

type ObjectHiddenEnum string

const (
	ObjectHiddenEnumHidden     ObjectHiddenEnum = "hidden"
	ObjectHiddenEnumUntilFound ObjectHiddenEnum = "until-found"
	ObjectHiddenEnumEmpty      ObjectHiddenEnum = ""
)

type ObjectInputmodeEnum string

const (
	ObjectInputmodeEnumUrl     ObjectInputmodeEnum = "url"
	ObjectInputmodeEnumDecimal ObjectInputmodeEnum = "decimal"
	ObjectInputmodeEnumEmail   ObjectInputmodeEnum = "email"
	ObjectInputmodeEnumNone    ObjectInputmodeEnum = "none"
	ObjectInputmodeEnumNumeric ObjectInputmodeEnum = "numeric"
	ObjectInputmodeEnumSearch  ObjectInputmodeEnum = "search"
	ObjectInputmodeEnumTel     ObjectInputmodeEnum = "tel"
	ObjectInputmodeEnumText    ObjectInputmodeEnum = "text"
)

type ObjectSpellcheckEnum string

const (
	ObjectSpellcheckEnumFalse ObjectSpellcheckEnum = "false"
	ObjectSpellcheckEnumTrue  ObjectSpellcheckEnum = "true"
	ObjectSpellcheckEnumEmpty ObjectSpellcheckEnum = ""
)

type ObjectTranslateEnum string

const (
	ObjectTranslateEnumNo    ObjectTranslateEnum = "no"
	ObjectTranslateEnumYes   ObjectTranslateEnum = "yes"
	ObjectTranslateEnumEmpty ObjectTranslateEnum = ""
)

type ObjectWritingsuggestionsEnum string

const (
	ObjectWritingsuggestionsEnumFalse ObjectWritingsuggestionsEnum = "false"
	ObjectWritingsuggestionsEnumTrue  ObjectWritingsuggestionsEnum = "true"
	ObjectWritingsuggestionsEnumEmpty ObjectWritingsuggestionsEnum = ""
)

type objectAttrs map[string]any

func (e *ObjectElement) Autocapitalize(a ObjectAutocapitalizeEnum) *ObjectElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *ObjectElement) Autocorrect(a ObjectAutocorrectEnum) *ObjectElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *ObjectElement) Autofocus(b bool) *ObjectElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *ObjectElement) Class(s ...string) *ObjectElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *ObjectElement) Contenteditable(a ObjectContenteditableEnum) *ObjectElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *ObjectElement) DataUnsafe(name string, s string) *ObjectElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *ObjectElement) Data(name string, s string) *ObjectElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *ObjectElement) Dir(a ObjectDirEnum) *ObjectElement {
	e.attributes["dir"] = a

	return e
}

func (e *ObjectElement) Draggable(a ObjectDraggableEnum) *ObjectElement {
	e.attributes["draggable"] = a

	return e
}

func (e *ObjectElement) Enterkeyhint(a ObjectEnterkeyhintEnum) *ObjectElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *ObjectElement) Hidden(a ObjectHiddenEnum) *ObjectElement {
	e.attributes["hidden"] = a

	return e
}

func (e *ObjectElement) Id(s string) *ObjectElement {
	e.attributes["id"] = s

	return e
}

func (e *ObjectElement) Inert(b bool) *ObjectElement {
	e.attributes["inert"] = b

	return e
}

func (e *ObjectElement) Inputmode(a ObjectInputmodeEnum) *ObjectElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *ObjectElement) Itemid(s string) *ObjectElement {
	e.attributes["itemid"] = s

	return e
}

func (e *ObjectElement) Itemprop(s ...string) *ObjectElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *ObjectElement) Itemref(s ...string) *ObjectElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *ObjectElement) Itemscope(b bool) *ObjectElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *ObjectElement) Itemtype(s ...string) *ObjectElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *ObjectElement) Lang(s string) *ObjectElement {
	e.attributes["lang"] = s

	return e
}

func (e *ObjectElement) Nonce(s string) *ObjectElement {
	e.attributes["nonce"] = s

	return e
}

func (e *ObjectElement) Popover(s string) *ObjectElement {
	e.attributes["popover"] = s

	return e
}

func (e *ObjectElement) Slot(s string) *ObjectElement {
	e.attributes["slot"] = s

	return e
}

func (e *ObjectElement) Spellcheck(a ObjectSpellcheckEnum) *ObjectElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *ObjectElement) Style(s string) *ObjectElement {
	e.attributes["style"] = s

	return e
}

func (e *ObjectElement) Tabindex(i int) *ObjectElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *ObjectElement) Title(s string) *ObjectElement {
	e.attributes["title"] = s

	return e
}

func (e *ObjectElement) Translate(a ObjectTranslateEnum) *ObjectElement {
	e.attributes["translate"] = a

	return e
}

func (e *ObjectElement) Writingsuggestions(a ObjectWritingsuggestionsEnum) *ObjectElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *ObjectElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<object")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</object>")); err != nil {
		return err
	}

	return nil
}
