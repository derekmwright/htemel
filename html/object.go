// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type ObjectElement struct {
	attributes objectAttrs
	children []htemel.Node
	skipRender bool
}

// Object creates a tag <object> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The object element can represent an external resource, which, depending on the type of the resource, will either be treated as an image or as a child navigable.
func Object(children ...htemel.Node) *ObjectElement {
	node := &ObjectElement{
		children: children,
		attributes: make(objectAttrs),
	}

	return node
}

func ObjectIf(condition bool, children ...htemel.Node) *ObjectElement {
	if condition {
		return Object(children...)
	}

	return &ObjectElement{
		skipRender: true,
	}
}

type ObjectAutocapitalizeEnum string

const (
	ObjectAutocapitalizeEnumOn ObjectAutocapitalizeEnum = "on"
	ObjectAutocapitalizeEnumSentences ObjectAutocapitalizeEnum = "sentences"
	ObjectAutocapitalizeEnumWords ObjectAutocapitalizeEnum = "words"
	ObjectAutocapitalizeEnumCharacters ObjectAutocapitalizeEnum = "characters"
	ObjectAutocapitalizeEnumNone ObjectAutocapitalizeEnum = "none"
	ObjectAutocapitalizeEnumOff ObjectAutocapitalizeEnum = "off"
)

type ObjectAutocorrectEnum string

const (
	ObjectAutocorrectEnumOff ObjectAutocorrectEnum = "off"
	ObjectAutocorrectEnumOn ObjectAutocorrectEnum = "on"
)

type ObjectContenteditableEnum string

const (
	ObjectContenteditableEnumFalse ObjectContenteditableEnum = "false"
	ObjectContenteditableEnumPlaintextOnly ObjectContenteditableEnum = "plaintext-only"
	ObjectContenteditableEnumTrue ObjectContenteditableEnum = "true"
)

type ObjectDirEnum string

const (
	ObjectDirEnumAuto ObjectDirEnum = "auto"
	ObjectDirEnumLtr ObjectDirEnum = "ltr"
	ObjectDirEnumRtl ObjectDirEnum = "rtl"
)

type ObjectDraggableEnum string

const (
	ObjectDraggableEnumFalse ObjectDraggableEnum = "false"
	ObjectDraggableEnumTrue ObjectDraggableEnum = "true"
)

type ObjectEnterkeyhintEnum string

const (
	ObjectEnterkeyhintEnumSend ObjectEnterkeyhintEnum = "send"
	ObjectEnterkeyhintEnumDone ObjectEnterkeyhintEnum = "done"
	ObjectEnterkeyhintEnumEnter ObjectEnterkeyhintEnum = "enter"
	ObjectEnterkeyhintEnumGo ObjectEnterkeyhintEnum = "go"
	ObjectEnterkeyhintEnumNext ObjectEnterkeyhintEnum = "next"
	ObjectEnterkeyhintEnumPrevious ObjectEnterkeyhintEnum = "previous"
	ObjectEnterkeyhintEnumSearch ObjectEnterkeyhintEnum = "search"
)

type ObjectHiddenEnum string

const (
	ObjectHiddenEnumHidden ObjectHiddenEnum = "hidden"
	ObjectHiddenEnumUntilFound ObjectHiddenEnum = "until-found"
)

type objectAttrs map[string]any

func (e *ObjectElement) Autocapitalize(a ObjectAutocapitalizeEnum) *ObjectElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *ObjectElement) Autocorrect(a ObjectAutocorrectEnum) *ObjectElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *ObjectElement) Autofocus(b bool) *ObjectElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *ObjectElement) Class(s ...string) *ObjectElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *ObjectElement) Contenteditable(a ObjectContenteditableEnum) *ObjectElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *ObjectElement) Dir(a ObjectDirEnum) *ObjectElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *ObjectElement) Draggable(a ObjectDraggableEnum) *ObjectElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *ObjectElement) Enterkeyhint(a ObjectEnterkeyhintEnum) *ObjectElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *ObjectElement) Hidden(a ObjectHiddenEnum) *ObjectElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *ObjectElement) Id(s string) *ObjectElement {
	e.attributes["id"] = s
	
	return e
}

func (e *ObjectElement) Slot(s string) *ObjectElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *ObjectElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<object")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</object>")); err != nil {
		return err
	}

	return nil
}
