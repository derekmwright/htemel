// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
)

type ObjectElement struct {
	attributes objectAttrs
	children []htemel.Node
	skipRender bool
}

// Object creates a tag <object> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The object element can represent an external resource, which, depending on the type of the resource, will either be treated as an image or as a child navigable.
func Object(children ...htemel.Node) *ObjectElement {
	node := &ObjectElement{
		children: children,
	}

	return node
}

func ObjectIf(condition bool, children ...htemel.Node) *ObjectElement {
	if condition {
		return Object(children...)
	}

	return &ObjectElement{
		skipRender: true,
	}
}

type ObjectAutocapitalizeAttrEnum string

const (
	ObjectAutocapitalizeAttrEnumOn ObjectAutocapitalizeAttrEnum = "on"
	ObjectAutocapitalizeAttrEnumSentences ObjectAutocapitalizeAttrEnum = "sentences"
	ObjectAutocapitalizeAttrEnumWords ObjectAutocapitalizeAttrEnum = "words"
	ObjectAutocapitalizeAttrEnumCharacters ObjectAutocapitalizeAttrEnum = "characters"
	ObjectAutocapitalizeAttrEnumNone ObjectAutocapitalizeAttrEnum = "none"
	ObjectAutocapitalizeAttrEnumOff ObjectAutocapitalizeAttrEnum = "off"
)

type ObjectAutocorrectAttrEnum string

const (
	ObjectAutocorrectAttrEnumOff ObjectAutocorrectAttrEnum = "off"
	ObjectAutocorrectAttrEnumOn ObjectAutocorrectAttrEnum = "on"
)

type ObjectContenteditableAttrEnum string

const (
	ObjectContenteditableAttrEnumPlaintextOnly ObjectContenteditableAttrEnum = "plaintext-only"
	ObjectContenteditableAttrEnumTrue ObjectContenteditableAttrEnum = "true"
	ObjectContenteditableAttrEnumFalse ObjectContenteditableAttrEnum = "false"
)

type objectAttrs map[string]any

func (e *ObjectElement) Autocapitalize(a ObjectAutocapitalizeAttrEnum) *ObjectElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *ObjectElement) Autocorrect(a ObjectAutocorrectAttrEnum) *ObjectElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *ObjectElement) Class(s ...string) *ObjectElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *ObjectElement) Contenteditable(a ObjectContenteditableAttrEnum) *ObjectElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *ObjectElement) Id(s string) *ObjectElement {
	e.attributes["id"] = s
	
	return e
}

func (e *ObjectElement) Slot(s string) *ObjectElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *ObjectElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<object")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 0
	for key, v := range e.attributes {
		w.Write([]byte(key + "="))
		w.Write([]byte(html.EscapeString(fmt.Sprintf("'%v'", v))))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</object>")); err != nil {
		return err
	}

	return nil
}
