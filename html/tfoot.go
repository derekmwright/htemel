// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type TfootElement struct {
	attributes tfootAttrs
	children []htemel.Node
	skipRender bool
}

// Tfoot creates a tag <tfoot> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The tfoot element represents the block of rows that consist of the column summaries (footers) for the parent table element, if the tfoot element has a parent and it is a table.
func Tfoot(children ...htemel.Node) *TfootElement {
	node := &TfootElement{
		children: children,
		attributes: make(tfootAttrs),
	}

	return node
}

func TfootIf(condition bool, children ...htemel.Node) *TfootElement {
	if condition {
		return Tfoot(children...)
	}

	return &TfootElement{
		skipRender: true,
	}
}

type TfootAutocapitalizeAttrEnum string

const (
	TfootAutocapitalizeAttrEnumWords TfootAutocapitalizeAttrEnum = "words"
	TfootAutocapitalizeAttrEnumCharacters TfootAutocapitalizeAttrEnum = "characters"
	TfootAutocapitalizeAttrEnumNone TfootAutocapitalizeAttrEnum = "none"
	TfootAutocapitalizeAttrEnumOff TfootAutocapitalizeAttrEnum = "off"
	TfootAutocapitalizeAttrEnumOn TfootAutocapitalizeAttrEnum = "on"
	TfootAutocapitalizeAttrEnumSentences TfootAutocapitalizeAttrEnum = "sentences"
)

type TfootAutocorrectAttrEnum string

const (
	TfootAutocorrectAttrEnumOff TfootAutocorrectAttrEnum = "off"
	TfootAutocorrectAttrEnumOn TfootAutocorrectAttrEnum = "on"
)

type TfootContenteditableAttrEnum string

const (
	TfootContenteditableAttrEnumPlaintextOnly TfootContenteditableAttrEnum = "plaintext-only"
	TfootContenteditableAttrEnumTrue TfootContenteditableAttrEnum = "true"
	TfootContenteditableAttrEnumFalse TfootContenteditableAttrEnum = "false"
)

type tfootAttrs map[string]any

func (e *TfootElement) Autocapitalize(a TfootAutocapitalizeAttrEnum) *TfootElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *TfootElement) Autocorrect(a TfootAutocorrectAttrEnum) *TfootElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *TfootElement) Class(s ...string) *TfootElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *TfootElement) Contenteditable(a TfootContenteditableAttrEnum) *TfootElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *TfootElement) Id(s string) *TfootElement {
	e.attributes["id"] = s
	
	return e
}

func (e *TfootElement) Slot(s string) *TfootElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *TfootElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<tfoot")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		w.Write([]byte(" " + key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</tfoot>")); err != nil {
		return err
	}

	return nil
}
