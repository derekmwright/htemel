// Code generated by htemel. DO NOT EDIT.
package html

import (
  "github.com/derekmwright/htemel"
  "io"
)

type TfootElement struct {
	children []htemel.Node
	skipRender bool
}

// Tfoot creates a tag <tfoot> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The tfoot element represents the block of rows that consist of the column summaries (footers) for the parent table element, if the tfoot element has a parent and it is a table.
func Tfoot(children ...htemel.Node) *TfootElement {
	node := &TfootElement{
		children: children,
	}

	return node
}

func TfootIf(condition bool, children ...htemel.Node) *TfootElement {
	if condition {
		return Tfoot(children...)
	}

	return &TfootElement{
		skipRender: true,
	}
}

func (e *TfootElement) Autocapitalize() *TfootElement {
	return e
}

func (e *TfootElement) Autocorrect() *TfootElement {
	return e
}

func (e *TfootElement) Autofocus() *TfootElement {
	return e
}

func (e *TfootElement) Class() *TfootElement {
	return e
}

func (e *TfootElement) Contenteditable() *TfootElement {
	return e
}

func (e *TfootElement) Id() *TfootElement {
	return e
}

func (e *TfootElement) Slot() *TfootElement {
	return e
}

func (e *TfootElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<tfoot")); err != nil {
		return err
	}

	// TODO: Attribute stuff here

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</tfoot>")); err != nil {
		return err
	}

	return nil
}
