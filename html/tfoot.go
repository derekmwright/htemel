// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type TfootElement struct {
	attributes tfootAttrs
	children []htemel.Node
	skipRender bool
}

// Tfoot creates a tag <tfoot> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The tfoot element represents the block of rows that consist of the column summaries (footers) for the parent table element, if the tfoot element has a parent and it is a table.
func Tfoot(children ...htemel.Node) *TfootElement {
	node := &TfootElement{
		children: children,
		attributes: make(tfootAttrs),
	}

	return node
}

func TfootIf(condition bool, children ...htemel.Node) *TfootElement {
	if condition {
		return Tfoot(children...)
	}

	return &TfootElement{
		skipRender: true,
	}
}

type TfootAutocapitalizeEnum string

const (
	TfootAutocapitalizeEnumOn TfootAutocapitalizeEnum = "on"
	TfootAutocapitalizeEnumSentences TfootAutocapitalizeEnum = "sentences"
	TfootAutocapitalizeEnumWords TfootAutocapitalizeEnum = "words"
	TfootAutocapitalizeEnumCharacters TfootAutocapitalizeEnum = "characters"
	TfootAutocapitalizeEnumNone TfootAutocapitalizeEnum = "none"
	TfootAutocapitalizeEnumOff TfootAutocapitalizeEnum = "off"
)

type TfootAutocorrectEnum string

const (
	TfootAutocorrectEnumOff TfootAutocorrectEnum = "off"
	TfootAutocorrectEnumOn TfootAutocorrectEnum = "on"
)

type TfootContenteditableEnum string

const (
	TfootContenteditableEnumFalse TfootContenteditableEnum = "false"
	TfootContenteditableEnumPlaintextOnly TfootContenteditableEnum = "plaintext-only"
	TfootContenteditableEnumTrue TfootContenteditableEnum = "true"
)

type TfootDirEnum string

const (
	TfootDirEnumAuto TfootDirEnum = "auto"
	TfootDirEnumLtr TfootDirEnum = "ltr"
	TfootDirEnumRtl TfootDirEnum = "rtl"
)

type TfootDraggableEnum string

const (
	TfootDraggableEnumFalse TfootDraggableEnum = "false"
	TfootDraggableEnumTrue TfootDraggableEnum = "true"
)

type TfootEnterkeyhintEnum string

const (
	TfootEnterkeyhintEnumNext TfootEnterkeyhintEnum = "next"
	TfootEnterkeyhintEnumPrevious TfootEnterkeyhintEnum = "previous"
	TfootEnterkeyhintEnumSearch TfootEnterkeyhintEnum = "search"
	TfootEnterkeyhintEnumSend TfootEnterkeyhintEnum = "send"
	TfootEnterkeyhintEnumDone TfootEnterkeyhintEnum = "done"
	TfootEnterkeyhintEnumEnter TfootEnterkeyhintEnum = "enter"
	TfootEnterkeyhintEnumGo TfootEnterkeyhintEnum = "go"
)

type TfootHiddenEnum string

const (
	TfootHiddenEnumHidden TfootHiddenEnum = "hidden"
	TfootHiddenEnumUntilFound TfootHiddenEnum = "until-found"
)

type tfootAttrs map[string]any

func (e *TfootElement) Autocapitalize(a TfootAutocapitalizeEnum) *TfootElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *TfootElement) Autocorrect(a TfootAutocorrectEnum) *TfootElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *TfootElement) Autofocus(b bool) *TfootElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *TfootElement) Class(s ...string) *TfootElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *TfootElement) Contenteditable(a TfootContenteditableEnum) *TfootElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *TfootElement) Dir(a TfootDirEnum) *TfootElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *TfootElement) Draggable(a TfootDraggableEnum) *TfootElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *TfootElement) Enterkeyhint(a TfootEnterkeyhintEnum) *TfootElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *TfootElement) Hidden(a TfootHiddenEnum) *TfootElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *TfootElement) Id(s string) *TfootElement {
	e.attributes["id"] = s
	
	return e
}

func (e *TfootElement) Slot(s string) *TfootElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *TfootElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<tfoot")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</tfoot>")); err != nil {
		return err
	}

	return nil
}
