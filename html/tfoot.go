// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type TfootElement struct {
	attributes tfootAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// Tfoot creates a tag <tfoot> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The tfoot element represents the block of rows that consist of the column summaries (footers) for the parent table element, if the tfoot element has a parent and it is a table.
func Tfoot(children ...htemel.Node) *TfootElement {
	node := &TfootElement{
		children: children, attributes: make(tfootAttrs),
	}

	return node
}

func TfootIf(condition bool, children ...htemel.Node) *TfootElement {
	if condition {
		return Tfoot(children...)
	}

	return &TfootElement{
		skipRender: true,
	}
}

func TfootTernary(condition bool, true htemel.Node, false htemel.Node) *TfootElement {
	if condition {
		return Tfoot(true)
	}

	return Tfoot(false)
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *TfootElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *TfootElement) AddIndent(i int) {
	e.indent = i + 1
}

type TfootAutocapitalizeEnum string

const (
	TfootAutocapitalizeEnumSentences  TfootAutocapitalizeEnum = "sentences"
	TfootAutocapitalizeEnumWords      TfootAutocapitalizeEnum = "words"
	TfootAutocapitalizeEnumCharacters TfootAutocapitalizeEnum = "characters"
	TfootAutocapitalizeEnumNone       TfootAutocapitalizeEnum = "none"
	TfootAutocapitalizeEnumOff        TfootAutocapitalizeEnum = "off"
	TfootAutocapitalizeEnumOn         TfootAutocapitalizeEnum = "on"
)

type TfootAutocorrectEnum string

const (
	TfootAutocorrectEnumOff   TfootAutocorrectEnum = "off"
	TfootAutocorrectEnumOn    TfootAutocorrectEnum = "on"
	TfootAutocorrectEnumEmpty TfootAutocorrectEnum = ""
)

type TfootContenteditableEnum string

const (
	TfootContenteditableEnumFalse         TfootContenteditableEnum = "false"
	TfootContenteditableEnumPlaintextOnly TfootContenteditableEnum = "plaintext-only"
	TfootContenteditableEnumTrue          TfootContenteditableEnum = "true"
	TfootContenteditableEnumEmpty         TfootContenteditableEnum = ""
)

type TfootDirEnum string

const (
	TfootDirEnumAuto TfootDirEnum = "auto"
	TfootDirEnumLtr  TfootDirEnum = "ltr"
	TfootDirEnumRtl  TfootDirEnum = "rtl"
)

type TfootDraggableEnum string

const (
	TfootDraggableEnumTrue  TfootDraggableEnum = "true"
	TfootDraggableEnumFalse TfootDraggableEnum = "false"
)

type TfootEnterkeyhintEnum string

const (
	TfootEnterkeyhintEnumPrevious TfootEnterkeyhintEnum = "previous"
	TfootEnterkeyhintEnumSearch   TfootEnterkeyhintEnum = "search"
	TfootEnterkeyhintEnumSend     TfootEnterkeyhintEnum = "send"
	TfootEnterkeyhintEnumDone     TfootEnterkeyhintEnum = "done"
	TfootEnterkeyhintEnumEnter    TfootEnterkeyhintEnum = "enter"
	TfootEnterkeyhintEnumGo       TfootEnterkeyhintEnum = "go"
	TfootEnterkeyhintEnumNext     TfootEnterkeyhintEnum = "next"
)

type TfootHiddenEnum string

const (
	TfootHiddenEnumUntilFound TfootHiddenEnum = "until-found"
	TfootHiddenEnumHidden     TfootHiddenEnum = "hidden"
	TfootHiddenEnumEmpty      TfootHiddenEnum = ""
)

type TfootInputmodeEnum string

const (
	TfootInputmodeEnumTel     TfootInputmodeEnum = "tel"
	TfootInputmodeEnumText    TfootInputmodeEnum = "text"
	TfootInputmodeEnumUrl     TfootInputmodeEnum = "url"
	TfootInputmodeEnumDecimal TfootInputmodeEnum = "decimal"
	TfootInputmodeEnumEmail   TfootInputmodeEnum = "email"
	TfootInputmodeEnumNone    TfootInputmodeEnum = "none"
	TfootInputmodeEnumNumeric TfootInputmodeEnum = "numeric"
	TfootInputmodeEnumSearch  TfootInputmodeEnum = "search"
)

type TfootSpellcheckEnum string

const (
	TfootSpellcheckEnumFalse TfootSpellcheckEnum = "false"
	TfootSpellcheckEnumTrue  TfootSpellcheckEnum = "true"
	TfootSpellcheckEnumEmpty TfootSpellcheckEnum = ""
)

type TfootTranslateEnum string

const (
	TfootTranslateEnumNo    TfootTranslateEnum = "no"
	TfootTranslateEnumYes   TfootTranslateEnum = "yes"
	TfootTranslateEnumEmpty TfootTranslateEnum = ""
)

type TfootWritingsuggestionsEnum string

const (
	TfootWritingsuggestionsEnumFalse TfootWritingsuggestionsEnum = "false"
	TfootWritingsuggestionsEnumTrue  TfootWritingsuggestionsEnum = "true"
	TfootWritingsuggestionsEnumEmpty TfootWritingsuggestionsEnum = ""
)

type tfootAttrs map[string]any

func (e *TfootElement) Autocapitalize(a TfootAutocapitalizeEnum) *TfootElement {
	e.attributes["autocapitalize"] = a

	return e
}

func TfootAutocapitalizeCustom(s string) TfootAutocapitalizeEnum {
	return TfootAutocapitalizeEnum(s)
}

func (e *TfootElement) Autocorrect(a TfootAutocorrectEnum) *TfootElement {
	e.attributes["autocorrect"] = a

	return e
}

func TfootAutocorrectCustom(s string) TfootAutocorrectEnum {
	return TfootAutocorrectEnum(s)
}

func (e *TfootElement) Autofocus(b bool) *TfootElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *TfootElement) Class(s ...string) *TfootElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *TfootElement) Contenteditable(a TfootContenteditableEnum) *TfootElement {
	e.attributes["contenteditable"] = a

	return e
}

func TfootContenteditableCustom(s string) TfootContenteditableEnum {
	return TfootContenteditableEnum(s)
}

func (e *TfootElement) DataUnsafe(name string, s string) *TfootElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *TfootElement) Data(name string, s string) *TfootElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *TfootElement) Dir(a TfootDirEnum) *TfootElement {
	e.attributes["dir"] = a

	return e
}

func TfootDirCustom(s string) TfootDirEnum {
	return TfootDirEnum(s)
}

func (e *TfootElement) Draggable(a TfootDraggableEnum) *TfootElement {
	e.attributes["draggable"] = a

	return e
}

func TfootDraggableCustom(s string) TfootDraggableEnum {
	return TfootDraggableEnum(s)
}

func (e *TfootElement) Enterkeyhint(a TfootEnterkeyhintEnum) *TfootElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func TfootEnterkeyhintCustom(s string) TfootEnterkeyhintEnum {
	return TfootEnterkeyhintEnum(s)
}

func (e *TfootElement) Hidden(a TfootHiddenEnum) *TfootElement {
	e.attributes["hidden"] = a

	return e
}

func TfootHiddenCustom(s string) TfootHiddenEnum {
	return TfootHiddenEnum(s)
}

func (e *TfootElement) Id(s string) *TfootElement {
	e.attributes["id"] = s

	return e
}

func (e *TfootElement) Inert(b bool) *TfootElement {
	e.attributes["inert"] = b

	return e
}

func (e *TfootElement) Inputmode(a TfootInputmodeEnum) *TfootElement {
	e.attributes["inputmode"] = a

	return e
}

func TfootInputmodeCustom(s string) TfootInputmodeEnum {
	return TfootInputmodeEnum(s)
}

func (e *TfootElement) Itemid(s string) *TfootElement {
	e.attributes["itemid"] = s

	return e
}

func (e *TfootElement) Itemprop(s ...string) *TfootElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *TfootElement) Itemref(s ...string) *TfootElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *TfootElement) Itemscope(b bool) *TfootElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *TfootElement) Itemtype(s ...string) *TfootElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *TfootElement) Lang(s string) *TfootElement {
	e.attributes["lang"] = s

	return e
}

func (e *TfootElement) Nonce(s string) *TfootElement {
	e.attributes["nonce"] = s

	return e
}

func (e *TfootElement) Popover(s string) *TfootElement {
	e.attributes["popover"] = s

	return e
}

func (e *TfootElement) Slot(s string) *TfootElement {
	e.attributes["slot"] = s

	return e
}

func (e *TfootElement) Spellcheck(a TfootSpellcheckEnum) *TfootElement {
	e.attributes["spellcheck"] = a

	return e
}

func TfootSpellcheckCustom(s string) TfootSpellcheckEnum {
	return TfootSpellcheckEnum(s)
}

func (e *TfootElement) Style(s string) *TfootElement {
	e.attributes["style"] = s

	return e
}

func (e *TfootElement) Tabindex(i int) *TfootElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *TfootElement) Title(s string) *TfootElement {
	e.attributes["title"] = s

	return e
}

func (e *TfootElement) Translate(a TfootTranslateEnum) *TfootElement {
	e.attributes["translate"] = a

	return e
}

func TfootTranslateCustom(s string) TfootTranslateEnum {
	return TfootTranslateEnum(s)
}

func (e *TfootElement) Writingsuggestions(a TfootWritingsuggestionsEnum) *TfootElement {
	e.attributes["writingsuggestions"] = a

	return e
}

func TfootWritingsuggestionsCustom(s string) TfootWritingsuggestionsEnum {
	return TfootWritingsuggestionsEnum(s)
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *TfootElement) Render(w io.Writer) error {
	indent := htemel.SetIndent(e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<tfoot")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}
	for _, child := range e.children {
		child.AddIndent(e.Indent())
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(indent + "</tfoot>\n")); err != nil {
		return err
	}

	return nil
}
