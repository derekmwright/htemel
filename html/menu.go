// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type MenuElement struct {
	attributes menuAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// Menu creates a tag <menu> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The menu element represents a toolbar consisting of its contents, in the form of an unordered list of items (represented by li elements), each of which represents a command that the user can perform or activate.
func Menu(children ...htemel.Node) *MenuElement {
	node := &MenuElement{
		children: children, attributes: make(menuAttrs),
	}

	return node
}

func MenuIf(condition bool, children ...htemel.Node) *MenuElement {
	if condition {
		return Menu(children...)
	}

	return &MenuElement{
		skipRender: true,
	}
}

func MenuTernary(condition bool, true htemel.Node, false htemel.Node) *MenuElement {
	if condition {
		return Menu(true)
	}

	return Menu(false)
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *MenuElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *MenuElement) AddIndent(i int) {
	e.indent = i + 1
}

type MenuAutocapitalizeEnum string

const (
	MenuAutocapitalizeEnumOff        MenuAutocapitalizeEnum = "off"
	MenuAutocapitalizeEnumOn         MenuAutocapitalizeEnum = "on"
	MenuAutocapitalizeEnumSentences  MenuAutocapitalizeEnum = "sentences"
	MenuAutocapitalizeEnumWords      MenuAutocapitalizeEnum = "words"
	MenuAutocapitalizeEnumCharacters MenuAutocapitalizeEnum = "characters"
	MenuAutocapitalizeEnumNone       MenuAutocapitalizeEnum = "none"
)

type MenuAutocorrectEnum string

const (
	MenuAutocorrectEnumOff   MenuAutocorrectEnum = "off"
	MenuAutocorrectEnumOn    MenuAutocorrectEnum = "on"
	MenuAutocorrectEnumEmpty MenuAutocorrectEnum = ""
)

type MenuContenteditableEnum string

const (
	MenuContenteditableEnumFalse         MenuContenteditableEnum = "false"
	MenuContenteditableEnumPlaintextOnly MenuContenteditableEnum = "plaintext-only"
	MenuContenteditableEnumTrue          MenuContenteditableEnum = "true"
	MenuContenteditableEnumEmpty         MenuContenteditableEnum = ""
)

type MenuDirEnum string

const (
	MenuDirEnumRtl  MenuDirEnum = "rtl"
	MenuDirEnumAuto MenuDirEnum = "auto"
	MenuDirEnumLtr  MenuDirEnum = "ltr"
)

type MenuDraggableEnum string

const (
	MenuDraggableEnumFalse MenuDraggableEnum = "false"
	MenuDraggableEnumTrue  MenuDraggableEnum = "true"
)

type MenuEnterkeyhintEnum string

const (
	MenuEnterkeyhintEnumDone     MenuEnterkeyhintEnum = "done"
	MenuEnterkeyhintEnumEnter    MenuEnterkeyhintEnum = "enter"
	MenuEnterkeyhintEnumGo       MenuEnterkeyhintEnum = "go"
	MenuEnterkeyhintEnumNext     MenuEnterkeyhintEnum = "next"
	MenuEnterkeyhintEnumPrevious MenuEnterkeyhintEnum = "previous"
	MenuEnterkeyhintEnumSearch   MenuEnterkeyhintEnum = "search"
	MenuEnterkeyhintEnumSend     MenuEnterkeyhintEnum = "send"
)

type MenuHiddenEnum string

const (
	MenuHiddenEnumHidden     MenuHiddenEnum = "hidden"
	MenuHiddenEnumUntilFound MenuHiddenEnum = "until-found"
	MenuHiddenEnumEmpty      MenuHiddenEnum = ""
)

type MenuInputmodeEnum string

const (
	MenuInputmodeEnumSearch  MenuInputmodeEnum = "search"
	MenuInputmodeEnumTel     MenuInputmodeEnum = "tel"
	MenuInputmodeEnumText    MenuInputmodeEnum = "text"
	MenuInputmodeEnumUrl     MenuInputmodeEnum = "url"
	MenuInputmodeEnumDecimal MenuInputmodeEnum = "decimal"
	MenuInputmodeEnumEmail   MenuInputmodeEnum = "email"
	MenuInputmodeEnumNone    MenuInputmodeEnum = "none"
	MenuInputmodeEnumNumeric MenuInputmodeEnum = "numeric"
)

type MenuSpellcheckEnum string

const (
	MenuSpellcheckEnumFalse MenuSpellcheckEnum = "false"
	MenuSpellcheckEnumTrue  MenuSpellcheckEnum = "true"
	MenuSpellcheckEnumEmpty MenuSpellcheckEnum = ""
)

type MenuTranslateEnum string

const (
	MenuTranslateEnumYes   MenuTranslateEnum = "yes"
	MenuTranslateEnumNo    MenuTranslateEnum = "no"
	MenuTranslateEnumEmpty MenuTranslateEnum = ""
)

type MenuWritingsuggestionsEnum string

const (
	MenuWritingsuggestionsEnumFalse MenuWritingsuggestionsEnum = "false"
	MenuWritingsuggestionsEnumTrue  MenuWritingsuggestionsEnum = "true"
	MenuWritingsuggestionsEnumEmpty MenuWritingsuggestionsEnum = ""
)

type menuAttrs map[string]any

func (e *MenuElement) Autocapitalize(a MenuAutocapitalizeEnum) *MenuElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *MenuElement) Autocorrect(a MenuAutocorrectEnum) *MenuElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *MenuElement) Autofocus(b bool) *MenuElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *MenuElement) Class(s ...string) *MenuElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *MenuElement) Contenteditable(a MenuContenteditableEnum) *MenuElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *MenuElement) DataUnsafe(name string, s string) *MenuElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *MenuElement) Data(name string, s string) *MenuElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *MenuElement) Dir(a MenuDirEnum) *MenuElement {
	e.attributes["dir"] = a

	return e
}

func (e *MenuElement) Draggable(a MenuDraggableEnum) *MenuElement {
	e.attributes["draggable"] = a

	return e
}

func (e *MenuElement) Enterkeyhint(a MenuEnterkeyhintEnum) *MenuElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *MenuElement) Hidden(a MenuHiddenEnum) *MenuElement {
	e.attributes["hidden"] = a

	return e
}

func (e *MenuElement) Id(s string) *MenuElement {
	e.attributes["id"] = s

	return e
}

func (e *MenuElement) Inert(b bool) *MenuElement {
	e.attributes["inert"] = b

	return e
}

func (e *MenuElement) Inputmode(a MenuInputmodeEnum) *MenuElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *MenuElement) Itemid(s string) *MenuElement {
	e.attributes["itemid"] = s

	return e
}

func (e *MenuElement) Itemprop(s ...string) *MenuElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *MenuElement) Itemref(s ...string) *MenuElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *MenuElement) Itemscope(b bool) *MenuElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *MenuElement) Itemtype(s ...string) *MenuElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *MenuElement) Lang(s string) *MenuElement {
	e.attributes["lang"] = s

	return e
}

func (e *MenuElement) Nonce(s string) *MenuElement {
	e.attributes["nonce"] = s

	return e
}

func (e *MenuElement) Popover(s string) *MenuElement {
	e.attributes["popover"] = s

	return e
}

func (e *MenuElement) Slot(s string) *MenuElement {
	e.attributes["slot"] = s

	return e
}

func (e *MenuElement) Spellcheck(a MenuSpellcheckEnum) *MenuElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *MenuElement) Style(s string) *MenuElement {
	e.attributes["style"] = s

	return e
}

func (e *MenuElement) Tabindex(i int) *MenuElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *MenuElement) Title(s string) *MenuElement {
	e.attributes["title"] = s

	return e
}

func (e *MenuElement) Translate(a MenuTranslateEnum) *MenuElement {
	e.attributes["translate"] = a

	return e
}

func (e *MenuElement) Writingsuggestions(a MenuWritingsuggestionsEnum) *MenuElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *MenuElement) Render(w io.Writer) error {
	indent := strings.Repeat("  ", e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<menu")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}
	for _, child := range e.children {
		child.AddIndent(e.Indent())
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(indent + "</menu>\n")); err != nil {
		return err
	}

	return nil
}
