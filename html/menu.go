// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type MenuElement struct {
	attributes menuAttrs
	children   []htemel.Node
	skipRender bool
}

// Menu creates a tag <menu> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The menu element represents a toolbar consisting of its contents, in the form of an unordered list of items (represented by li elements), each of which represents a command that the user can perform or activate.
func Menu(children ...htemel.Node) *MenuElement {
	node := &MenuElement{
		children:   children,
		attributes: make(menuAttrs),
	}

	return node
}

func MenuIf(condition bool, children ...htemel.Node) *MenuElement {
	if condition {
		return Menu(children...)
	}

	return &MenuElement{
		skipRender: true,
	}
}

type MenuAutocapitalizeAttrEnum string

const (
	MenuAutocapitalizeAttrEnumCharacters MenuAutocapitalizeAttrEnum = "characters"
	MenuAutocapitalizeAttrEnumNone       MenuAutocapitalizeAttrEnum = "none"
	MenuAutocapitalizeAttrEnumOff        MenuAutocapitalizeAttrEnum = "off"
	MenuAutocapitalizeAttrEnumOn         MenuAutocapitalizeAttrEnum = "on"
	MenuAutocapitalizeAttrEnumSentences  MenuAutocapitalizeAttrEnum = "sentences"
	MenuAutocapitalizeAttrEnumWords      MenuAutocapitalizeAttrEnum = "words"
)

type MenuAutocorrectAttrEnum string

const (
	MenuAutocorrectAttrEnumOff MenuAutocorrectAttrEnum = "off"
	MenuAutocorrectAttrEnumOn  MenuAutocorrectAttrEnum = "on"
)

type MenuContenteditableAttrEnum string

const (
	MenuContenteditableAttrEnumPlaintextOnly MenuContenteditableAttrEnum = "plaintext-only"
	MenuContenteditableAttrEnumTrue          MenuContenteditableAttrEnum = "true"
	MenuContenteditableAttrEnumFalse         MenuContenteditableAttrEnum = "false"
)

type menuAttrs map[string]any

func (e *MenuElement) Autocapitalize(a MenuAutocapitalizeAttrEnum) *MenuElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *MenuElement) Autocorrect(a MenuAutocorrectAttrEnum) *MenuElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *MenuElement) Autofocus(b bool) *MenuElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *MenuElement) Class(s ...string) *MenuElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *MenuElement) Contenteditable(a MenuContenteditableAttrEnum) *MenuElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *MenuElement) Id(s string) *MenuElement {
	e.attributes["id"] = s

	return e
}

func (e *MenuElement) Slot(s string) *MenuElement {
	e.attributes["slot"] = s

	return e
}

func (e *MenuElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<menu")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</menu>")); err != nil {
		return err
	}

	return nil
}
