// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type VideoElement struct {
	attributes videoAttrs
	children   []htemel.Node
	skipRender bool
}

// Video creates a tag <video> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: A video element is used for playing videos or movies, and audio files with captions.
func Video(children ...htemel.Node) *VideoElement {
	node := &VideoElement{
		children: children, attributes: make(videoAttrs),
	}

	return node
}

func VideoIf(condition bool, children ...htemel.Node) *VideoElement {
	if condition {
		return Video(children...)
	}

	return &VideoElement{
		skipRender: true,
	}
}

func VideoTernary(condition bool, true htemel.Node, false htemel.Node) *VideoElement {
	if condition {
		return Video(true)
	}

	return Video(false)
}

type VideoAutocapitalizeEnum string

const (
	VideoAutocapitalizeEnumNone       VideoAutocapitalizeEnum = "none"
	VideoAutocapitalizeEnumOff        VideoAutocapitalizeEnum = "off"
	VideoAutocapitalizeEnumOn         VideoAutocapitalizeEnum = "on"
	VideoAutocapitalizeEnumSentences  VideoAutocapitalizeEnum = "sentences"
	VideoAutocapitalizeEnumWords      VideoAutocapitalizeEnum = "words"
	VideoAutocapitalizeEnumCharacters VideoAutocapitalizeEnum = "characters"
)

type VideoAutocorrectEnum string

const (
	VideoAutocorrectEnumOff   VideoAutocorrectEnum = "off"
	VideoAutocorrectEnumOn    VideoAutocorrectEnum = "on"
	VideoAutocorrectEnumEmpty VideoAutocorrectEnum = ""
)

type VideoContenteditableEnum string

const (
	VideoContenteditableEnumPlaintextOnly VideoContenteditableEnum = "plaintext-only"
	VideoContenteditableEnumTrue          VideoContenteditableEnum = "true"
	VideoContenteditableEnumFalse         VideoContenteditableEnum = "false"
	VideoContenteditableEnumEmpty         VideoContenteditableEnum = ""
)

type VideoDirEnum string

const (
	VideoDirEnumAuto VideoDirEnum = "auto"
	VideoDirEnumLtr  VideoDirEnum = "ltr"
	VideoDirEnumRtl  VideoDirEnum = "rtl"
)

type VideoDraggableEnum string

const (
	VideoDraggableEnumFalse VideoDraggableEnum = "false"
	VideoDraggableEnumTrue  VideoDraggableEnum = "true"
)

type VideoEnterkeyhintEnum string

const (
	VideoEnterkeyhintEnumNext     VideoEnterkeyhintEnum = "next"
	VideoEnterkeyhintEnumPrevious VideoEnterkeyhintEnum = "previous"
	VideoEnterkeyhintEnumSearch   VideoEnterkeyhintEnum = "search"
	VideoEnterkeyhintEnumSend     VideoEnterkeyhintEnum = "send"
	VideoEnterkeyhintEnumDone     VideoEnterkeyhintEnum = "done"
	VideoEnterkeyhintEnumEnter    VideoEnterkeyhintEnum = "enter"
	VideoEnterkeyhintEnumGo       VideoEnterkeyhintEnum = "go"
)

type VideoHiddenEnum string

const (
	VideoHiddenEnumHidden     VideoHiddenEnum = "hidden"
	VideoHiddenEnumUntilFound VideoHiddenEnum = "until-found"
	VideoHiddenEnumEmpty      VideoHiddenEnum = ""
)

type VideoInputmodeEnum string

const (
	VideoInputmodeEnumSearch  VideoInputmodeEnum = "search"
	VideoInputmodeEnumTel     VideoInputmodeEnum = "tel"
	VideoInputmodeEnumText    VideoInputmodeEnum = "text"
	VideoInputmodeEnumUrl     VideoInputmodeEnum = "url"
	VideoInputmodeEnumDecimal VideoInputmodeEnum = "decimal"
	VideoInputmodeEnumEmail   VideoInputmodeEnum = "email"
	VideoInputmodeEnumNone    VideoInputmodeEnum = "none"
	VideoInputmodeEnumNumeric VideoInputmodeEnum = "numeric"
)

type VideoSpellcheckEnum string

const (
	VideoSpellcheckEnumFalse VideoSpellcheckEnum = "false"
	VideoSpellcheckEnumTrue  VideoSpellcheckEnum = "true"
	VideoSpellcheckEnumEmpty VideoSpellcheckEnum = ""
)

type VideoTranslateEnum string

const (
	VideoTranslateEnumNo    VideoTranslateEnum = "no"
	VideoTranslateEnumYes   VideoTranslateEnum = "yes"
	VideoTranslateEnumEmpty VideoTranslateEnum = ""
)

type VideoWritingsuggestionsEnum string

const (
	VideoWritingsuggestionsEnumFalse VideoWritingsuggestionsEnum = "false"
	VideoWritingsuggestionsEnumTrue  VideoWritingsuggestionsEnum = "true"
	VideoWritingsuggestionsEnumEmpty VideoWritingsuggestionsEnum = ""
)

type videoAttrs map[string]any

func (e *VideoElement) Autocapitalize(a VideoAutocapitalizeEnum) *VideoElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *VideoElement) Autocorrect(a VideoAutocorrectEnum) *VideoElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *VideoElement) Autofocus(b bool) *VideoElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *VideoElement) Class(s ...string) *VideoElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *VideoElement) Contenteditable(a VideoContenteditableEnum) *VideoElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *VideoElement) DataUnsafe(name string, s string) *VideoElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *VideoElement) Data(name string, s string) *VideoElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *VideoElement) Dir(a VideoDirEnum) *VideoElement {
	e.attributes["dir"] = a

	return e
}

func (e *VideoElement) Draggable(a VideoDraggableEnum) *VideoElement {
	e.attributes["draggable"] = a

	return e
}

func (e *VideoElement) Enterkeyhint(a VideoEnterkeyhintEnum) *VideoElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *VideoElement) Hidden(a VideoHiddenEnum) *VideoElement {
	e.attributes["hidden"] = a

	return e
}

func (e *VideoElement) Id(s string) *VideoElement {
	e.attributes["id"] = s

	return e
}

func (e *VideoElement) Inert(b bool) *VideoElement {
	e.attributes["inert"] = b

	return e
}

func (e *VideoElement) Inputmode(a VideoInputmodeEnum) *VideoElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *VideoElement) Itemid(s string) *VideoElement {
	e.attributes["itemid"] = s

	return e
}

func (e *VideoElement) Itemprop(s ...string) *VideoElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *VideoElement) Itemref(s ...string) *VideoElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *VideoElement) Itemscope(b bool) *VideoElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *VideoElement) Itemtype(s ...string) *VideoElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *VideoElement) Lang(s string) *VideoElement {
	e.attributes["lang"] = s

	return e
}

func (e *VideoElement) Nonce(s string) *VideoElement {
	e.attributes["nonce"] = s

	return e
}

func (e *VideoElement) Popover(s string) *VideoElement {
	e.attributes["popover"] = s

	return e
}

func (e *VideoElement) Slot(s string) *VideoElement {
	e.attributes["slot"] = s

	return e
}

func (e *VideoElement) Spellcheck(a VideoSpellcheckEnum) *VideoElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *VideoElement) Style(s string) *VideoElement {
	e.attributes["style"] = s

	return e
}

func (e *VideoElement) Tabindex(i int) *VideoElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *VideoElement) Title(s string) *VideoElement {
	e.attributes["title"] = s

	return e
}

func (e *VideoElement) Translate(a VideoTranslateEnum) *VideoElement {
	e.attributes["translate"] = a

	return e
}

func (e *VideoElement) Writingsuggestions(a VideoWritingsuggestionsEnum) *VideoElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *VideoElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<video")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}
	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</video>")); err != nil {
		return err
	}

	return nil
}
