// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type VideoElement struct {
	attributes videoAttrs
	children []htemel.Node
	skipRender bool
}

// Video creates a tag <video> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: A video element is used for playing videos or movies, and audio files with captions.
func Video(children ...htemel.Node) *VideoElement {
	node := &VideoElement{
		children: children,
		attributes: make(videoAttrs),
	}

	return node
}

func VideoIf(condition bool, children ...htemel.Node) *VideoElement {
	if condition {
		return Video(children...)
	}

	return &VideoElement{
		skipRender: true,
	}
}

type VideoAutocapitalizeEnum string

const (
	VideoAutocapitalizeEnumSentences VideoAutocapitalizeEnum = "sentences"
	VideoAutocapitalizeEnumWords VideoAutocapitalizeEnum = "words"
	VideoAutocapitalizeEnumCharacters VideoAutocapitalizeEnum = "characters"
	VideoAutocapitalizeEnumNone VideoAutocapitalizeEnum = "none"
	VideoAutocapitalizeEnumOff VideoAutocapitalizeEnum = "off"
	VideoAutocapitalizeEnumOn VideoAutocapitalizeEnum = "on"
)

type VideoAutocorrectEnum string

const (
	VideoAutocorrectEnumOff VideoAutocorrectEnum = "off"
	VideoAutocorrectEnumOn VideoAutocorrectEnum = "on"
)

type VideoContenteditableEnum string

const (
	VideoContenteditableEnumFalse VideoContenteditableEnum = "false"
	VideoContenteditableEnumPlaintextOnly VideoContenteditableEnum = "plaintext-only"
	VideoContenteditableEnumTrue VideoContenteditableEnum = "true"
)

type VideoDirEnum string

const (
	VideoDirEnumAuto VideoDirEnum = "auto"
	VideoDirEnumLtr VideoDirEnum = "ltr"
	VideoDirEnumRtl VideoDirEnum = "rtl"
)

type VideoDraggableEnum string

const (
	VideoDraggableEnumFalse VideoDraggableEnum = "false"
	VideoDraggableEnumTrue VideoDraggableEnum = "true"
)

type VideoEnterkeyhintEnum string

const (
	VideoEnterkeyhintEnumDone VideoEnterkeyhintEnum = "done"
	VideoEnterkeyhintEnumEnter VideoEnterkeyhintEnum = "enter"
	VideoEnterkeyhintEnumGo VideoEnterkeyhintEnum = "go"
	VideoEnterkeyhintEnumNext VideoEnterkeyhintEnum = "next"
	VideoEnterkeyhintEnumPrevious VideoEnterkeyhintEnum = "previous"
	VideoEnterkeyhintEnumSearch VideoEnterkeyhintEnum = "search"
	VideoEnterkeyhintEnumSend VideoEnterkeyhintEnum = "send"
)

type VideoHiddenEnum string

const (
	VideoHiddenEnumHidden VideoHiddenEnum = "hidden"
	VideoHiddenEnumUntilFound VideoHiddenEnum = "until-found"
)

type videoAttrs map[string]any

func (e *VideoElement) Autocapitalize(a VideoAutocapitalizeEnum) *VideoElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *VideoElement) Autocorrect(a VideoAutocorrectEnum) *VideoElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *VideoElement) Autofocus(b bool) *VideoElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *VideoElement) Class(s ...string) *VideoElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *VideoElement) Contenteditable(a VideoContenteditableEnum) *VideoElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *VideoElement) Dir(a VideoDirEnum) *VideoElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *VideoElement) Draggable(a VideoDraggableEnum) *VideoElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *VideoElement) Enterkeyhint(a VideoEnterkeyhintEnum) *VideoElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *VideoElement) Hidden(a VideoHiddenEnum) *VideoElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *VideoElement) Id(s string) *VideoElement {
	e.attributes["id"] = s
	
	return e
}

func (e *VideoElement) Slot(s string) *VideoElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *VideoElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<video")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</video>")); err != nil {
		return err
	}

	return nil
}
