// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type VideoElement struct {
	attributes videoAttrs
	children []htemel.Node
	skipRender bool
}

// Video creates a tag <video> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: A video element is used for playing videos or movies, and audio files with captions.
func Video(children ...htemel.Node) *VideoElement {
	node := &VideoElement{
		children: children,
		attributes: make(videoAttrs),
	}

	return node
}

func VideoIf(condition bool, children ...htemel.Node) *VideoElement {
	if condition {
		return Video(children...)
	}

	return &VideoElement{
		skipRender: true,
	}
}

type VideoAutocapitalizeAttrEnum string

const (
	VideoAutocapitalizeAttrEnumOff VideoAutocapitalizeAttrEnum = "off"
	VideoAutocapitalizeAttrEnumOn VideoAutocapitalizeAttrEnum = "on"
	VideoAutocapitalizeAttrEnumSentences VideoAutocapitalizeAttrEnum = "sentences"
	VideoAutocapitalizeAttrEnumWords VideoAutocapitalizeAttrEnum = "words"
	VideoAutocapitalizeAttrEnumCharacters VideoAutocapitalizeAttrEnum = "characters"
	VideoAutocapitalizeAttrEnumNone VideoAutocapitalizeAttrEnum = "none"
)

type VideoAutocorrectAttrEnum string

const (
	VideoAutocorrectAttrEnumOff VideoAutocorrectAttrEnum = "off"
	VideoAutocorrectAttrEnumOn VideoAutocorrectAttrEnum = "on"
)

type VideoContenteditableAttrEnum string

const (
	VideoContenteditableAttrEnumFalse VideoContenteditableAttrEnum = "false"
	VideoContenteditableAttrEnumPlaintextOnly VideoContenteditableAttrEnum = "plaintext-only"
	VideoContenteditableAttrEnumTrue VideoContenteditableAttrEnum = "true"
)

type videoAttrs map[string]any

func (e *VideoElement) Autocapitalize(a VideoAutocapitalizeAttrEnum) *VideoElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *VideoElement) Autocorrect(a VideoAutocorrectAttrEnum) *VideoElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *VideoElement) Class(s ...string) *VideoElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *VideoElement) Contenteditable(a VideoContenteditableAttrEnum) *VideoElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *VideoElement) Id(s string) *VideoElement {
	e.attributes["id"] = s
	
	return e
}

func (e *VideoElement) Slot(s string) *VideoElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *VideoElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<video")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		w.Write([]byte(" " + key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</video>")); err != nil {
		return err
	}

	return nil
}
