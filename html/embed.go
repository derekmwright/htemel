// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type EmbedElement struct {
	attributes embedAttrs
	children []htemel.Node
	skipRender bool
}

// Embed creates a tag <embed> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The embed element provides an integration point for an external application or interactive content.
func Embed(children ...htemel.Node) *EmbedElement {
	node := &EmbedElement{
		children: children,
		attributes: make(embedAttrs),
	}

	return node
}

func EmbedIf(condition bool, children ...htemel.Node) *EmbedElement {
	if condition {
		return Embed(children...)
	}

	return &EmbedElement{
		skipRender: true,
	}
}

type EmbedAutocapitalizeEnum string

const (
	EmbedAutocapitalizeEnumSentences EmbedAutocapitalizeEnum = "sentences"
	EmbedAutocapitalizeEnumWords EmbedAutocapitalizeEnum = "words"
	EmbedAutocapitalizeEnumCharacters EmbedAutocapitalizeEnum = "characters"
	EmbedAutocapitalizeEnumNone EmbedAutocapitalizeEnum = "none"
	EmbedAutocapitalizeEnumOff EmbedAutocapitalizeEnum = "off"
	EmbedAutocapitalizeEnumOn EmbedAutocapitalizeEnum = "on"
)

type EmbedAutocorrectEnum string

const (
	EmbedAutocorrectEnumOff EmbedAutocorrectEnum = "off"
	EmbedAutocorrectEnumOn EmbedAutocorrectEnum = "on"
)

type EmbedContenteditableEnum string

const (
	EmbedContenteditableEnumFalse EmbedContenteditableEnum = "false"
	EmbedContenteditableEnumPlaintextOnly EmbedContenteditableEnum = "plaintext-only"
	EmbedContenteditableEnumTrue EmbedContenteditableEnum = "true"
)

type EmbedDirEnum string

const (
	EmbedDirEnumAuto EmbedDirEnum = "auto"
	EmbedDirEnumLtr EmbedDirEnum = "ltr"
	EmbedDirEnumRtl EmbedDirEnum = "rtl"
)

type EmbedDraggableEnum string

const (
	EmbedDraggableEnumFalse EmbedDraggableEnum = "false"
	EmbedDraggableEnumTrue EmbedDraggableEnum = "true"
)

type EmbedEnterkeyhintEnum string

const (
	EmbedEnterkeyhintEnumPrevious EmbedEnterkeyhintEnum = "previous"
	EmbedEnterkeyhintEnumSearch EmbedEnterkeyhintEnum = "search"
	EmbedEnterkeyhintEnumSend EmbedEnterkeyhintEnum = "send"
	EmbedEnterkeyhintEnumDone EmbedEnterkeyhintEnum = "done"
	EmbedEnterkeyhintEnumEnter EmbedEnterkeyhintEnum = "enter"
	EmbedEnterkeyhintEnumGo EmbedEnterkeyhintEnum = "go"
	EmbedEnterkeyhintEnumNext EmbedEnterkeyhintEnum = "next"
)

type EmbedHiddenEnum string

const (
	EmbedHiddenEnumUntilFound EmbedHiddenEnum = "until-found"
	EmbedHiddenEnumHidden EmbedHiddenEnum = "hidden"
)

type embedAttrs map[string]any

func (e *EmbedElement) Autocapitalize(a EmbedAutocapitalizeEnum) *EmbedElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *EmbedElement) Autocorrect(a EmbedAutocorrectEnum) *EmbedElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *EmbedElement) Autofocus(b bool) *EmbedElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *EmbedElement) Class(s ...string) *EmbedElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *EmbedElement) Contenteditable(a EmbedContenteditableEnum) *EmbedElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *EmbedElement) Dir(a EmbedDirEnum) *EmbedElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *EmbedElement) Draggable(a EmbedDraggableEnum) *EmbedElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *EmbedElement) Enterkeyhint(a EmbedEnterkeyhintEnum) *EmbedElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *EmbedElement) Hidden(a EmbedHiddenEnum) *EmbedElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *EmbedElement) Id(s string) *EmbedElement {
	e.attributes["id"] = s
	
	return e
}

func (e *EmbedElement) Slot(s string) *EmbedElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *EmbedElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<embed")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</embed>")); err != nil {
		return err
	}

	return nil
}
