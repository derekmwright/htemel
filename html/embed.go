// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type EmbedElement struct {
	attributes embedAttrs

	skipRender bool
	indent     int
}

// Embed creates a tag <embed> instance and returns it for further modification.
//
// Spec Description: The embed element provides an integration point for an external application or interactive content.
func Embed() *EmbedElement {
	node := &EmbedElement{
		attributes: make(embedAttrs),
	}

	return node
}

func EmbedIf(condition bool) *EmbedElement {
	if condition {
		return Embed()
	}

	return &EmbedElement{
		skipRender: true,
	}
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *EmbedElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *EmbedElement) AddIndent(i int) {
	e.indent = i + 1
}

type EmbedAutocapitalizeEnum string

const (
	EmbedAutocapitalizeEnumOff        EmbedAutocapitalizeEnum = "off"
	EmbedAutocapitalizeEnumOn         EmbedAutocapitalizeEnum = "on"
	EmbedAutocapitalizeEnumSentences  EmbedAutocapitalizeEnum = "sentences"
	EmbedAutocapitalizeEnumWords      EmbedAutocapitalizeEnum = "words"
	EmbedAutocapitalizeEnumCharacters EmbedAutocapitalizeEnum = "characters"
	EmbedAutocapitalizeEnumNone       EmbedAutocapitalizeEnum = "none"
)

type EmbedAutocorrectEnum string

const (
	EmbedAutocorrectEnumOff   EmbedAutocorrectEnum = "off"
	EmbedAutocorrectEnumOn    EmbedAutocorrectEnum = "on"
	EmbedAutocorrectEnumEmpty EmbedAutocorrectEnum = ""
)

type EmbedContenteditableEnum string

const (
	EmbedContenteditableEnumFalse         EmbedContenteditableEnum = "false"
	EmbedContenteditableEnumPlaintextOnly EmbedContenteditableEnum = "plaintext-only"
	EmbedContenteditableEnumTrue          EmbedContenteditableEnum = "true"
	EmbedContenteditableEnumEmpty         EmbedContenteditableEnum = ""
)

type EmbedDirEnum string

const (
	EmbedDirEnumAuto EmbedDirEnum = "auto"
	EmbedDirEnumLtr  EmbedDirEnum = "ltr"
	EmbedDirEnumRtl  EmbedDirEnum = "rtl"
)

type EmbedDraggableEnum string

const (
	EmbedDraggableEnumFalse EmbedDraggableEnum = "false"
	EmbedDraggableEnumTrue  EmbedDraggableEnum = "true"
)

type EmbedEnterkeyhintEnum string

const (
	EmbedEnterkeyhintEnumGo       EmbedEnterkeyhintEnum = "go"
	EmbedEnterkeyhintEnumNext     EmbedEnterkeyhintEnum = "next"
	EmbedEnterkeyhintEnumPrevious EmbedEnterkeyhintEnum = "previous"
	EmbedEnterkeyhintEnumSearch   EmbedEnterkeyhintEnum = "search"
	EmbedEnterkeyhintEnumSend     EmbedEnterkeyhintEnum = "send"
	EmbedEnterkeyhintEnumDone     EmbedEnterkeyhintEnum = "done"
	EmbedEnterkeyhintEnumEnter    EmbedEnterkeyhintEnum = "enter"
)

type EmbedHiddenEnum string

const (
	EmbedHiddenEnumHidden     EmbedHiddenEnum = "hidden"
	EmbedHiddenEnumUntilFound EmbedHiddenEnum = "until-found"
	EmbedHiddenEnumEmpty      EmbedHiddenEnum = ""
)

type EmbedInputmodeEnum string

const (
	EmbedInputmodeEnumSearch  EmbedInputmodeEnum = "search"
	EmbedInputmodeEnumTel     EmbedInputmodeEnum = "tel"
	EmbedInputmodeEnumText    EmbedInputmodeEnum = "text"
	EmbedInputmodeEnumUrl     EmbedInputmodeEnum = "url"
	EmbedInputmodeEnumDecimal EmbedInputmodeEnum = "decimal"
	EmbedInputmodeEnumEmail   EmbedInputmodeEnum = "email"
	EmbedInputmodeEnumNone    EmbedInputmodeEnum = "none"
	EmbedInputmodeEnumNumeric EmbedInputmodeEnum = "numeric"
)

type EmbedSpellcheckEnum string

const (
	EmbedSpellcheckEnumFalse EmbedSpellcheckEnum = "false"
	EmbedSpellcheckEnumTrue  EmbedSpellcheckEnum = "true"
	EmbedSpellcheckEnumEmpty EmbedSpellcheckEnum = ""
)

type EmbedTranslateEnum string

const (
	EmbedTranslateEnumNo    EmbedTranslateEnum = "no"
	EmbedTranslateEnumYes   EmbedTranslateEnum = "yes"
	EmbedTranslateEnumEmpty EmbedTranslateEnum = ""
)

type EmbedWritingsuggestionsEnum string

const (
	EmbedWritingsuggestionsEnumFalse EmbedWritingsuggestionsEnum = "false"
	EmbedWritingsuggestionsEnumTrue  EmbedWritingsuggestionsEnum = "true"
	EmbedWritingsuggestionsEnumEmpty EmbedWritingsuggestionsEnum = ""
)

type embedAttrs map[string]any

func (e *EmbedElement) Src(s string) *EmbedElement {
	e.attributes["src"] = s

	return e
}

func (e *EmbedElement) Type(s string) *EmbedElement {
	e.attributes["type"] = s

	return e
}

func (e *EmbedElement) Width(i int) *EmbedElement {
	e.attributes["width"] = i

	return e
}

func (e *EmbedElement) Height(i int) *EmbedElement {
	e.attributes["height"] = i

	return e
}

func (e *EmbedElement) Autocapitalize(a EmbedAutocapitalizeEnum) *EmbedElement {
	e.attributes["autocapitalize"] = a

	return e
}

func EmbedAutocapitalizeCustom(s string) EmbedAutocapitalizeEnum {
	return EmbedAutocapitalizeEnum(s)
}

func (e *EmbedElement) Autocorrect(a EmbedAutocorrectEnum) *EmbedElement {
	e.attributes["autocorrect"] = a

	return e
}

func EmbedAutocorrectCustom(s string) EmbedAutocorrectEnum {
	return EmbedAutocorrectEnum(s)
}

func (e *EmbedElement) Autofocus(b bool) *EmbedElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *EmbedElement) Class(s ...string) *EmbedElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *EmbedElement) Contenteditable(a EmbedContenteditableEnum) *EmbedElement {
	e.attributes["contenteditable"] = a

	return e
}

func EmbedContenteditableCustom(s string) EmbedContenteditableEnum {
	return EmbedContenteditableEnum(s)
}

func (e *EmbedElement) DataUnsafe(name string, s string) *EmbedElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *EmbedElement) Data(name string, s string) *EmbedElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *EmbedElement) Dir(a EmbedDirEnum) *EmbedElement {
	e.attributes["dir"] = a

	return e
}

func EmbedDirCustom(s string) EmbedDirEnum {
	return EmbedDirEnum(s)
}

func (e *EmbedElement) Draggable(a EmbedDraggableEnum) *EmbedElement {
	e.attributes["draggable"] = a

	return e
}

func EmbedDraggableCustom(s string) EmbedDraggableEnum {
	return EmbedDraggableEnum(s)
}

func (e *EmbedElement) Enterkeyhint(a EmbedEnterkeyhintEnum) *EmbedElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func EmbedEnterkeyhintCustom(s string) EmbedEnterkeyhintEnum {
	return EmbedEnterkeyhintEnum(s)
}

func (e *EmbedElement) Hidden(a EmbedHiddenEnum) *EmbedElement {
	e.attributes["hidden"] = a

	return e
}

func EmbedHiddenCustom(s string) EmbedHiddenEnum {
	return EmbedHiddenEnum(s)
}

func (e *EmbedElement) Id(s string) *EmbedElement {
	e.attributes["id"] = s

	return e
}

func (e *EmbedElement) Inert(b bool) *EmbedElement {
	e.attributes["inert"] = b

	return e
}

func (e *EmbedElement) Inputmode(a EmbedInputmodeEnum) *EmbedElement {
	e.attributes["inputmode"] = a

	return e
}

func EmbedInputmodeCustom(s string) EmbedInputmodeEnum {
	return EmbedInputmodeEnum(s)
}

func (e *EmbedElement) Itemid(s string) *EmbedElement {
	e.attributes["itemid"] = s

	return e
}

func (e *EmbedElement) Itemprop(s ...string) *EmbedElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *EmbedElement) Itemref(s ...string) *EmbedElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *EmbedElement) Itemscope(b bool) *EmbedElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *EmbedElement) Itemtype(s ...string) *EmbedElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *EmbedElement) Lang(s string) *EmbedElement {
	e.attributes["lang"] = s

	return e
}

func (e *EmbedElement) Nonce(s string) *EmbedElement {
	e.attributes["nonce"] = s

	return e
}

func (e *EmbedElement) Popover(s string) *EmbedElement {
	e.attributes["popover"] = s

	return e
}

func (e *EmbedElement) Slot(s string) *EmbedElement {
	e.attributes["slot"] = s

	return e
}

func (e *EmbedElement) Spellcheck(a EmbedSpellcheckEnum) *EmbedElement {
	e.attributes["spellcheck"] = a

	return e
}

func EmbedSpellcheckCustom(s string) EmbedSpellcheckEnum {
	return EmbedSpellcheckEnum(s)
}

func (e *EmbedElement) Style(s string) *EmbedElement {
	e.attributes["style"] = s

	return e
}

func (e *EmbedElement) Tabindex(i int) *EmbedElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *EmbedElement) Title(s string) *EmbedElement {
	e.attributes["title"] = s

	return e
}

func (e *EmbedElement) Translate(a EmbedTranslateEnum) *EmbedElement {
	e.attributes["translate"] = a

	return e
}

func EmbedTranslateCustom(s string) EmbedTranslateEnum {
	return EmbedTranslateEnum(s)
}

func (e *EmbedElement) Writingsuggestions(a EmbedWritingsuggestionsEnum) *EmbedElement {
	e.attributes["writingsuggestions"] = a

	return e
}

func EmbedWritingsuggestionsCustom(s string) EmbedWritingsuggestionsEnum {
	return EmbedWritingsuggestionsEnum(s)
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *EmbedElement) Render(w io.Writer) error {
	indent := htemel.SetIndent(e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<embed")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}

	return nil
}
