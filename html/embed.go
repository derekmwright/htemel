// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type EmbedElement struct {
	attributes embedAttrs
	children   []htemel.Node
	skipRender bool
}

// Embed creates a tag <embed> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The embed element provides an integration point for an external application or interactive content.
func Embed(children ...htemel.Node) *EmbedElement {
	node := &EmbedElement{
		children:   children,
		attributes: make(embedAttrs),
	}

	return node
}

func EmbedIf(condition bool, children ...htemel.Node) *EmbedElement {
	if condition {
		return Embed(children...)
	}

	return &EmbedElement{
		skipRender: true,
	}
}

type EmbedAutocapitalizeAttrEnum string

const (
	EmbedAutocapitalizeAttrEnumOff        EmbedAutocapitalizeAttrEnum = "off"
	EmbedAutocapitalizeAttrEnumOn         EmbedAutocapitalizeAttrEnum = "on"
	EmbedAutocapitalizeAttrEnumSentences  EmbedAutocapitalizeAttrEnum = "sentences"
	EmbedAutocapitalizeAttrEnumWords      EmbedAutocapitalizeAttrEnum = "words"
	EmbedAutocapitalizeAttrEnumCharacters EmbedAutocapitalizeAttrEnum = "characters"
	EmbedAutocapitalizeAttrEnumNone       EmbedAutocapitalizeAttrEnum = "none"
)

type EmbedAutocorrectAttrEnum string

const (
	EmbedAutocorrectAttrEnumOff EmbedAutocorrectAttrEnum = "off"
	EmbedAutocorrectAttrEnumOn  EmbedAutocorrectAttrEnum = "on"
)

type EmbedContenteditableAttrEnum string

const (
	EmbedContenteditableAttrEnumFalse         EmbedContenteditableAttrEnum = "false"
	EmbedContenteditableAttrEnumPlaintextOnly EmbedContenteditableAttrEnum = "plaintext-only"
	EmbedContenteditableAttrEnumTrue          EmbedContenteditableAttrEnum = "true"
)

type embedAttrs map[string]any

func (e *EmbedElement) Autocapitalize(a EmbedAutocapitalizeAttrEnum) *EmbedElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *EmbedElement) Autocorrect(a EmbedAutocorrectAttrEnum) *EmbedElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *EmbedElement) Autofocus(b bool) *EmbedElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *EmbedElement) Class(s ...string) *EmbedElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *EmbedElement) Contenteditable(a EmbedContenteditableAttrEnum) *EmbedElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *EmbedElement) Id(s string) *EmbedElement {
	e.attributes["id"] = s

	return e
}

func (e *EmbedElement) Slot(s string) *EmbedElement {
	e.attributes["slot"] = s

	return e
}

func (e *EmbedElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<embed")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		w.Write([]byte(" " + key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</embed>")); err != nil {
		return err
	}

	return nil
}
