// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type TheadElement struct {
	attributes theadAttrs
	children   []htemel.Node
	skipRender bool
}

// Thead creates a tag <thead> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The thead element represents the block of rows that consist of the column labels (headers) and any ancillary non-header cells for the parent table element, if the thead element has a parent and it is a table.
func Thead(children ...htemel.Node) *TheadElement {
	node := &TheadElement{
		children: children, attributes: make(theadAttrs),
	}

	return node
}

func TheadIf(condition bool, children ...htemel.Node) *TheadElement {
	if condition {
		return Thead(children...)
	}

	return &TheadElement{
		skipRender: true,
	}
}

func TheadTernary(condition bool, true htemel.Node, false htemel.Node) *TheadElement {
	if condition {
		return Thead(true)
	}

	return Thead(false)
}

type TheadAutocapitalizeEnum string

const (
	TheadAutocapitalizeEnumWords      TheadAutocapitalizeEnum = "words"
	TheadAutocapitalizeEnumCharacters TheadAutocapitalizeEnum = "characters"
	TheadAutocapitalizeEnumNone       TheadAutocapitalizeEnum = "none"
	TheadAutocapitalizeEnumOff        TheadAutocapitalizeEnum = "off"
	TheadAutocapitalizeEnumOn         TheadAutocapitalizeEnum = "on"
	TheadAutocapitalizeEnumSentences  TheadAutocapitalizeEnum = "sentences"
)

type TheadAutocorrectEnum string

const (
	TheadAutocorrectEnumOff   TheadAutocorrectEnum = "off"
	TheadAutocorrectEnumOn    TheadAutocorrectEnum = "on"
	TheadAutocorrectEnumEmpty TheadAutocorrectEnum = ""
)

type TheadContenteditableEnum string

const (
	TheadContenteditableEnumTrue          TheadContenteditableEnum = "true"
	TheadContenteditableEnumFalse         TheadContenteditableEnum = "false"
	TheadContenteditableEnumPlaintextOnly TheadContenteditableEnum = "plaintext-only"
	TheadContenteditableEnumEmpty         TheadContenteditableEnum = ""
)

type TheadDirEnum string

const (
	TheadDirEnumAuto TheadDirEnum = "auto"
	TheadDirEnumLtr  TheadDirEnum = "ltr"
	TheadDirEnumRtl  TheadDirEnum = "rtl"
)

type TheadDraggableEnum string

const (
	TheadDraggableEnumFalse TheadDraggableEnum = "false"
	TheadDraggableEnumTrue  TheadDraggableEnum = "true"
)

type TheadEnterkeyhintEnum string

const (
	TheadEnterkeyhintEnumSend     TheadEnterkeyhintEnum = "send"
	TheadEnterkeyhintEnumDone     TheadEnterkeyhintEnum = "done"
	TheadEnterkeyhintEnumEnter    TheadEnterkeyhintEnum = "enter"
	TheadEnterkeyhintEnumGo       TheadEnterkeyhintEnum = "go"
	TheadEnterkeyhintEnumNext     TheadEnterkeyhintEnum = "next"
	TheadEnterkeyhintEnumPrevious TheadEnterkeyhintEnum = "previous"
	TheadEnterkeyhintEnumSearch   TheadEnterkeyhintEnum = "search"
)

type TheadHiddenEnum string

const (
	TheadHiddenEnumHidden     TheadHiddenEnum = "hidden"
	TheadHiddenEnumUntilFound TheadHiddenEnum = "until-found"
	TheadHiddenEnumEmpty      TheadHiddenEnum = ""
)

type TheadInputmodeEnum string

const (
	TheadInputmodeEnumNone    TheadInputmodeEnum = "none"
	TheadInputmodeEnumNumeric TheadInputmodeEnum = "numeric"
	TheadInputmodeEnumSearch  TheadInputmodeEnum = "search"
	TheadInputmodeEnumTel     TheadInputmodeEnum = "tel"
	TheadInputmodeEnumText    TheadInputmodeEnum = "text"
	TheadInputmodeEnumUrl     TheadInputmodeEnum = "url"
	TheadInputmodeEnumDecimal TheadInputmodeEnum = "decimal"
	TheadInputmodeEnumEmail   TheadInputmodeEnum = "email"
)

type TheadSpellcheckEnum string

const (
	TheadSpellcheckEnumFalse TheadSpellcheckEnum = "false"
	TheadSpellcheckEnumTrue  TheadSpellcheckEnum = "true"
	TheadSpellcheckEnumEmpty TheadSpellcheckEnum = ""
)

type TheadTranslateEnum string

const (
	TheadTranslateEnumNo    TheadTranslateEnum = "no"
	TheadTranslateEnumYes   TheadTranslateEnum = "yes"
	TheadTranslateEnumEmpty TheadTranslateEnum = ""
)

type TheadWritingsuggestionsEnum string

const (
	TheadWritingsuggestionsEnumFalse TheadWritingsuggestionsEnum = "false"
	TheadWritingsuggestionsEnumTrue  TheadWritingsuggestionsEnum = "true"
	TheadWritingsuggestionsEnumEmpty TheadWritingsuggestionsEnum = ""
)

type theadAttrs map[string]any

func (e *TheadElement) Autocapitalize(a TheadAutocapitalizeEnum) *TheadElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *TheadElement) Autocorrect(a TheadAutocorrectEnum) *TheadElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *TheadElement) Autofocus(b bool) *TheadElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *TheadElement) Class(s ...string) *TheadElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *TheadElement) Contenteditable(a TheadContenteditableEnum) *TheadElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *TheadElement) DataUnsafe(name string, s string) *TheadElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *TheadElement) Data(name string, s string) *TheadElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *TheadElement) Dir(a TheadDirEnum) *TheadElement {
	e.attributes["dir"] = a

	return e
}

func (e *TheadElement) Draggable(a TheadDraggableEnum) *TheadElement {
	e.attributes["draggable"] = a

	return e
}

func (e *TheadElement) Enterkeyhint(a TheadEnterkeyhintEnum) *TheadElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *TheadElement) Hidden(a TheadHiddenEnum) *TheadElement {
	e.attributes["hidden"] = a

	return e
}

func (e *TheadElement) Id(s string) *TheadElement {
	e.attributes["id"] = s

	return e
}

func (e *TheadElement) Inert(b bool) *TheadElement {
	e.attributes["inert"] = b

	return e
}

func (e *TheadElement) Inputmode(a TheadInputmodeEnum) *TheadElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *TheadElement) Itemid(s string) *TheadElement {
	e.attributes["itemid"] = s

	return e
}

func (e *TheadElement) Itemprop(s ...string) *TheadElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *TheadElement) Itemref(s ...string) *TheadElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *TheadElement) Itemscope(b bool) *TheadElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *TheadElement) Itemtype(s ...string) *TheadElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *TheadElement) Lang(s string) *TheadElement {
	e.attributes["lang"] = s

	return e
}

func (e *TheadElement) Nonce(s string) *TheadElement {
	e.attributes["nonce"] = s

	return e
}

func (e *TheadElement) Popover(s string) *TheadElement {
	e.attributes["popover"] = s

	return e
}

func (e *TheadElement) Slot(s string) *TheadElement {
	e.attributes["slot"] = s

	return e
}

func (e *TheadElement) Spellcheck(a TheadSpellcheckEnum) *TheadElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *TheadElement) Style(s string) *TheadElement {
	e.attributes["style"] = s

	return e
}

func (e *TheadElement) Tabindex(i int) *TheadElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *TheadElement) Title(s string) *TheadElement {
	e.attributes["title"] = s

	return e
}

func (e *TheadElement) Translate(a TheadTranslateEnum) *TheadElement {
	e.attributes["translate"] = a

	return e
}

func (e *TheadElement) Writingsuggestions(a TheadWritingsuggestionsEnum) *TheadElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *TheadElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<thead")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}
	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</thead>")); err != nil {
		return err
	}

	return nil
}
