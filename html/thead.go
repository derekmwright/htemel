// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type TheadElement struct {
	attributes theadAttrs
	children []htemel.Node
	skipRender bool
}

// Thead creates a tag <thead> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The thead element represents the block of rows that consist of the column labels (headers) and any ancillary non-header cells for the parent table element, if the thead element has a parent and it is a table.
func Thead(children ...htemel.Node) *TheadElement {
	node := &TheadElement{
		children: children,
		attributes: make(theadAttrs),
	}

	return node
}

func TheadIf(condition bool, children ...htemel.Node) *TheadElement {
	if condition {
		return Thead(children...)
	}

	return &TheadElement{
		skipRender: true,
	}
}

type TheadAutocapitalizeAttrEnum string

const (
	TheadAutocapitalizeAttrEnumSentences TheadAutocapitalizeAttrEnum = "sentences"
	TheadAutocapitalizeAttrEnumWords TheadAutocapitalizeAttrEnum = "words"
	TheadAutocapitalizeAttrEnumCharacters TheadAutocapitalizeAttrEnum = "characters"
	TheadAutocapitalizeAttrEnumNone TheadAutocapitalizeAttrEnum = "none"
	TheadAutocapitalizeAttrEnumOff TheadAutocapitalizeAttrEnum = "off"
	TheadAutocapitalizeAttrEnumOn TheadAutocapitalizeAttrEnum = "on"
)

type TheadAutocorrectAttrEnum string

const (
	TheadAutocorrectAttrEnumOff TheadAutocorrectAttrEnum = "off"
	TheadAutocorrectAttrEnumOn TheadAutocorrectAttrEnum = "on"
)

type TheadContenteditableAttrEnum string

const (
	TheadContenteditableAttrEnumFalse TheadContenteditableAttrEnum = "false"
	TheadContenteditableAttrEnumPlaintextOnly TheadContenteditableAttrEnum = "plaintext-only"
	TheadContenteditableAttrEnumTrue TheadContenteditableAttrEnum = "true"
)

type theadAttrs map[string]any

func (e *TheadElement) Autocapitalize(a TheadAutocapitalizeAttrEnum) *TheadElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *TheadElement) Autocorrect(a TheadAutocorrectAttrEnum) *TheadElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *TheadElement) Class(s ...string) *TheadElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *TheadElement) Contenteditable(a TheadContenteditableAttrEnum) *TheadElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *TheadElement) Id(s string) *TheadElement {
	e.attributes["id"] = s
	
	return e
}

func (e *TheadElement) Slot(s string) *TheadElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *TheadElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<thead")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		w.Write([]byte(" " + key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</thead>")); err != nil {
		return err
	}

	return nil
}
