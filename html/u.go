// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type UElement struct {
	attributes uAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// U creates a tag <u> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The u element represents a span of text with an unarticulated, though explicitly rendered, non-textual annotation, such as labeling the text as being a proper name in Chinese text (a Chinese proper name mark), or labeling the text as being misspelt.
func U(children ...htemel.Node) *UElement {
	node := &UElement{
		children:   children,
		attributes: make(uAttrs),
	}

	return node
}

func UIf(condition bool, children ...htemel.Node) *UElement {
	if condition {
		return U(children...)
	}

	return &UElement{
		children:   children,
		attributes: make(uAttrs),
		skipRender: true,
	}
}

func UTernary(condition bool, true htemel.Node, false htemel.Node) *UElement {
	if condition {
		return U(true)
	}

	return U(false)
}

type UAutocapitalizeEnum string

const (
	UAutocapitalizeEnumOn         UAutocapitalizeEnum = "on"
	UAutocapitalizeEnumSentences  UAutocapitalizeEnum = "sentences"
	UAutocapitalizeEnumWords      UAutocapitalizeEnum = "words"
	UAutocapitalizeEnumCharacters UAutocapitalizeEnum = "characters"
	UAutocapitalizeEnumNone       UAutocapitalizeEnum = "none"
	UAutocapitalizeEnumOff        UAutocapitalizeEnum = "off"
)

type UAutocorrectEnum string

const (
	UAutocorrectEnumOff   UAutocorrectEnum = "off"
	UAutocorrectEnumOn    UAutocorrectEnum = "on"
	UAutocorrectEnumEmpty UAutocorrectEnum = ""
)

type UContenteditableEnum string

const (
	UContenteditableEnumFalse         UContenteditableEnum = "false"
	UContenteditableEnumPlaintextOnly UContenteditableEnum = "plaintext-only"
	UContenteditableEnumTrue          UContenteditableEnum = "true"
	UContenteditableEnumEmpty         UContenteditableEnum = ""
)

type UDirEnum string

const (
	UDirEnumAuto UDirEnum = "auto"
	UDirEnumLtr  UDirEnum = "ltr"
	UDirEnumRtl  UDirEnum = "rtl"
)

type UDraggableEnum string

const (
	UDraggableEnumFalse UDraggableEnum = "false"
	UDraggableEnumTrue  UDraggableEnum = "true"
)

type UEnterkeyhintEnum string

const (
	UEnterkeyhintEnumEnter    UEnterkeyhintEnum = "enter"
	UEnterkeyhintEnumGo       UEnterkeyhintEnum = "go"
	UEnterkeyhintEnumNext     UEnterkeyhintEnum = "next"
	UEnterkeyhintEnumPrevious UEnterkeyhintEnum = "previous"
	UEnterkeyhintEnumSearch   UEnterkeyhintEnum = "search"
	UEnterkeyhintEnumSend     UEnterkeyhintEnum = "send"
	UEnterkeyhintEnumDone     UEnterkeyhintEnum = "done"
)

type UHiddenEnum string

const (
	UHiddenEnumHidden     UHiddenEnum = "hidden"
	UHiddenEnumUntilFound UHiddenEnum = "until-found"
	UHiddenEnumEmpty      UHiddenEnum = ""
)

type UInputmodeEnum string

const (
	UInputmodeEnumEmail   UInputmodeEnum = "email"
	UInputmodeEnumNone    UInputmodeEnum = "none"
	UInputmodeEnumNumeric UInputmodeEnum = "numeric"
	UInputmodeEnumSearch  UInputmodeEnum = "search"
	UInputmodeEnumTel     UInputmodeEnum = "tel"
	UInputmodeEnumText    UInputmodeEnum = "text"
	UInputmodeEnumUrl     UInputmodeEnum = "url"
	UInputmodeEnumDecimal UInputmodeEnum = "decimal"
)

type USpellcheckEnum string

const (
	USpellcheckEnumFalse USpellcheckEnum = "false"
	USpellcheckEnumTrue  USpellcheckEnum = "true"
	USpellcheckEnumEmpty USpellcheckEnum = ""
)

type UTranslateEnum string

const (
	UTranslateEnumNo    UTranslateEnum = "no"
	UTranslateEnumYes   UTranslateEnum = "yes"
	UTranslateEnumEmpty UTranslateEnum = ""
)

type UWritingsuggestionsEnum string

const (
	UWritingsuggestionsEnumFalse UWritingsuggestionsEnum = "false"
	UWritingsuggestionsEnumTrue  UWritingsuggestionsEnum = "true"
	UWritingsuggestionsEnumEmpty UWritingsuggestionsEnum = ""
)

type uAttrs map[string]any

func (e *UElement) Autocapitalize(a UAutocapitalizeEnum) *UElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *UElement) Autocorrect(a UAutocorrectEnum) *UElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *UElement) Autofocus(b bool) *UElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *UElement) Class(s ...string) *UElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *UElement) Contenteditable(a UContenteditableEnum) *UElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *UElement) DataUnsafe(name string, s string) *UElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *UElement) Data(name string, s string) *UElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *UElement) Dir(a UDirEnum) *UElement {
	e.attributes["dir"] = a

	return e
}

func (e *UElement) Draggable(a UDraggableEnum) *UElement {
	e.attributes["draggable"] = a

	return e
}

func (e *UElement) Enterkeyhint(a UEnterkeyhintEnum) *UElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *UElement) Hidden(a UHiddenEnum) *UElement {
	e.attributes["hidden"] = a

	return e
}

func (e *UElement) Id(s string) *UElement {
	e.attributes["id"] = s

	return e
}

func (e *UElement) Inert(b bool) *UElement {
	e.attributes["inert"] = b

	return e
}

func (e *UElement) Inputmode(a UInputmodeEnum) *UElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *UElement) Itemid(s string) *UElement {
	e.attributes["itemid"] = s

	return e
}

func (e *UElement) Itemprop(s ...string) *UElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *UElement) Itemref(s ...string) *UElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *UElement) Itemscope(b bool) *UElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *UElement) Itemtype(s ...string) *UElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *UElement) Lang(s string) *UElement {
	e.attributes["lang"] = s

	return e
}

func (e *UElement) Nonce(s string) *UElement {
	e.attributes["nonce"] = s

	return e
}

func (e *UElement) Popover(s string) *UElement {
	e.attributes["popover"] = s

	return e
}

func (e *UElement) Slot(s string) *UElement {
	e.attributes["slot"] = s

	return e
}

func (e *UElement) Spellcheck(a USpellcheckEnum) *UElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *UElement) Style(s string) *UElement {
	e.attributes["style"] = s

	return e
}

func (e *UElement) Tabindex(i int) *UElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *UElement) Title(s string) *UElement {
	e.attributes["title"] = s

	return e
}

func (e *UElement) Translate(a UTranslateEnum) *UElement {
	e.attributes["translate"] = a

	return e
}

func (e *UElement) Writingsuggestions(a UWritingsuggestionsEnum) *UElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *UElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<u")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}
	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</u>")); err != nil {
		return err
	}

	return nil
}
