// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type UElement struct {
	attributes uAttrs
	children []htemel.Node
	skipRender bool
}

// U creates a tag <u> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The u element represents a span of text with an unarticulated, though explicitly rendered, non-textual annotation, such as labeling the text as being a proper name in Chinese text (a Chinese proper name mark), or labeling the text as being misspelt.
func U(children ...htemel.Node) *UElement {
	node := &UElement{
		children: children,
		attributes: make(uAttrs),
	}

	return node
}

func UIf(condition bool, children ...htemel.Node) *UElement {
	if condition {
		return U(children...)
	}

	return &UElement{
		skipRender: true,
	}
}

type UAutocapitalizeAttrEnum string

const (
	UAutocapitalizeAttrEnumCharacters UAutocapitalizeAttrEnum = "characters"
	UAutocapitalizeAttrEnumNone UAutocapitalizeAttrEnum = "none"
	UAutocapitalizeAttrEnumOff UAutocapitalizeAttrEnum = "off"
	UAutocapitalizeAttrEnumOn UAutocapitalizeAttrEnum = "on"
	UAutocapitalizeAttrEnumSentences UAutocapitalizeAttrEnum = "sentences"
	UAutocapitalizeAttrEnumWords UAutocapitalizeAttrEnum = "words"
)

type UAutocorrectAttrEnum string

const (
	UAutocorrectAttrEnumOff UAutocorrectAttrEnum = "off"
	UAutocorrectAttrEnumOn UAutocorrectAttrEnum = "on"
)

type UContenteditableAttrEnum string

const (
	UContenteditableAttrEnumFalse UContenteditableAttrEnum = "false"
	UContenteditableAttrEnumPlaintextOnly UContenteditableAttrEnum = "plaintext-only"
	UContenteditableAttrEnumTrue UContenteditableAttrEnum = "true"
)

type uAttrs map[string]any

func (e *UElement) Autocapitalize(a UAutocapitalizeAttrEnum) *UElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *UElement) Autocorrect(a UAutocorrectAttrEnum) *UElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *UElement) Class(s ...string) *UElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *UElement) Contenteditable(a UContenteditableAttrEnum) *UElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *UElement) Id(s string) *UElement {
	e.attributes["id"] = s
	
	return e
}

func (e *UElement) Slot(s string) *UElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *UElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<u")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		w.Write([]byte(" " + key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</u>")); err != nil {
		return err
	}

	return nil
}
