// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type InputElement struct {
	attributes inputAttrs
	children   []htemel.Node
	skipRender bool
}

// Input creates a tag <input> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The input element represents a typed data field, usually with a form control to allow the user to edit the data.
func Input(children ...htemel.Node) *InputElement {
	node := &InputElement{
		children:   children,
		attributes: make(inputAttrs),
	}

	return node
}

func InputIf(condition bool, children ...htemel.Node) *InputElement {
	if condition {
		return Input(children...)
	}

	return &InputElement{
		skipRender: true,
	}
}

type InputAutocapitalizeAttrEnum string

const (
	InputAutocapitalizeAttrEnumNone       InputAutocapitalizeAttrEnum = "none"
	InputAutocapitalizeAttrEnumOff        InputAutocapitalizeAttrEnum = "off"
	InputAutocapitalizeAttrEnumOn         InputAutocapitalizeAttrEnum = "on"
	InputAutocapitalizeAttrEnumSentences  InputAutocapitalizeAttrEnum = "sentences"
	InputAutocapitalizeAttrEnumWords      InputAutocapitalizeAttrEnum = "words"
	InputAutocapitalizeAttrEnumCharacters InputAutocapitalizeAttrEnum = "characters"
)

type InputAutocorrectAttrEnum string

const (
	InputAutocorrectAttrEnumOff InputAutocorrectAttrEnum = "off"
	InputAutocorrectAttrEnumOn  InputAutocorrectAttrEnum = "on"
)

type InputContenteditableAttrEnum string

const (
	InputContenteditableAttrEnumFalse         InputContenteditableAttrEnum = "false"
	InputContenteditableAttrEnumPlaintextOnly InputContenteditableAttrEnum = "plaintext-only"
	InputContenteditableAttrEnumTrue          InputContenteditableAttrEnum = "true"
)

type inputAttrs map[string]any

func (e *InputElement) Autocapitalize(a InputAutocapitalizeAttrEnum) *InputElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *InputElement) Autocorrect(a InputAutocorrectAttrEnum) *InputElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *InputElement) Autofocus(b bool) *InputElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *InputElement) Class(s ...string) *InputElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *InputElement) Contenteditable(a InputContenteditableAttrEnum) *InputElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *InputElement) Id(s string) *InputElement {
	e.attributes["id"] = s

	return e
}

func (e *InputElement) Slot(s string) *InputElement {
	e.attributes["slot"] = s

	return e
}

func (e *InputElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<input")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		w.Write([]byte(" " + key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</input>")); err != nil {
		return err
	}

	return nil
}
