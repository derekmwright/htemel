// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"golang.org/x/net/html"
)

type InputElement struct {
	attributes inputAttrs

	skipRender bool
	indent     int
}

// Input creates a tag <input> instance and returns it for further modification.
//
// Spec Description: The input element represents a typed data field, usually with a form control to allow the user to edit the data.
func Input() *InputElement {
	node := &InputElement{

		attributes: make(inputAttrs),
	}

	return node
}

func InputIf(condition bool) *InputElement {
	if condition {
		return Input()
	}

	return &InputElement{

		attributes: make(inputAttrs),
		skipRender: true,
	}
}

type InputColorspaceEnum string

const (
	InputColorspaceEnumDisplayP3   InputColorspaceEnum = "display-p3"
	InputColorspaceEnumLimitedSrgb InputColorspaceEnum = "limited-srgb"
)

type InputFormmethodEnum string

const (
	InputFormmethodEnumGet    InputFormmethodEnum = "get"
	InputFormmethodEnumPost   InputFormmethodEnum = "post"
	InputFormmethodEnumDialog InputFormmethodEnum = "dialog"
)

type InputPopovertargetactionEnum string

const (
	InputPopovertargetactionEnumHide   InputPopovertargetactionEnum = "hide"
	InputPopovertargetactionEnumShow   InputPopovertargetactionEnum = "show"
	InputPopovertargetactionEnumToggle InputPopovertargetactionEnum = "toggle"
)

type InputTypeEnum string

const (
	InputTypeEnumDatetimeLocal InputTypeEnum = "datetime-local"
	InputTypeEnumNumber        InputTypeEnum = "number"
	InputTypeEnumPassword      InputTypeEnum = "password"
	InputTypeEnumTime          InputTypeEnum = "time"
	InputTypeEnumWeek          InputTypeEnum = "week"
	InputTypeEnumColor         InputTypeEnum = "color"
	InputTypeEnumDate          InputTypeEnum = "date"
	InputTypeEnumHidden        InputTypeEnum = "hidden"
	InputTypeEnumImage         InputTypeEnum = "image"
	InputTypeEnumMonth         InputTypeEnum = "month"
	InputTypeEnumRadio         InputTypeEnum = "radio"
	InputTypeEnumSubmit        InputTypeEnum = "submit"
	InputTypeEnumTel           InputTypeEnum = "tel"
	InputTypeEnumUrl           InputTypeEnum = "url"
	InputTypeEnumButton        InputTypeEnum = "button"
	InputTypeEnumEmail         InputTypeEnum = "email"
	InputTypeEnumFile          InputTypeEnum = "file"
	InputTypeEnumReset         InputTypeEnum = "reset"
	InputTypeEnumSearch        InputTypeEnum = "search"
	InputTypeEnumText          InputTypeEnum = "text"
	InputTypeEnumRange         InputTypeEnum = "range"
	InputTypeEnumCheckbox      InputTypeEnum = "checkbox"
)

type InputAutocapitalizeEnum string

const (
	InputAutocapitalizeEnumSentences  InputAutocapitalizeEnum = "sentences"
	InputAutocapitalizeEnumWords      InputAutocapitalizeEnum = "words"
	InputAutocapitalizeEnumCharacters InputAutocapitalizeEnum = "characters"
	InputAutocapitalizeEnumNone       InputAutocapitalizeEnum = "none"
	InputAutocapitalizeEnumOff        InputAutocapitalizeEnum = "off"
	InputAutocapitalizeEnumOn         InputAutocapitalizeEnum = "on"
)

type InputAutocorrectEnum string

const (
	InputAutocorrectEnumOff   InputAutocorrectEnum = "off"
	InputAutocorrectEnumOn    InputAutocorrectEnum = "on"
	InputAutocorrectEnumEmpty InputAutocorrectEnum = ""
)

type InputContenteditableEnum string

const (
	InputContenteditableEnumFalse         InputContenteditableEnum = "false"
	InputContenteditableEnumPlaintextOnly InputContenteditableEnum = "plaintext-only"
	InputContenteditableEnumTrue          InputContenteditableEnum = "true"
	InputContenteditableEnumEmpty         InputContenteditableEnum = ""
)

type InputDirEnum string

const (
	InputDirEnumLtr  InputDirEnum = "ltr"
	InputDirEnumRtl  InputDirEnum = "rtl"
	InputDirEnumAuto InputDirEnum = "auto"
)

type InputDraggableEnum string

const (
	InputDraggableEnumFalse InputDraggableEnum = "false"
	InputDraggableEnumTrue  InputDraggableEnum = "true"
)

type InputEnterkeyhintEnum string

const (
	InputEnterkeyhintEnumSend     InputEnterkeyhintEnum = "send"
	InputEnterkeyhintEnumDone     InputEnterkeyhintEnum = "done"
	InputEnterkeyhintEnumEnter    InputEnterkeyhintEnum = "enter"
	InputEnterkeyhintEnumGo       InputEnterkeyhintEnum = "go"
	InputEnterkeyhintEnumNext     InputEnterkeyhintEnum = "next"
	InputEnterkeyhintEnumPrevious InputEnterkeyhintEnum = "previous"
	InputEnterkeyhintEnumSearch   InputEnterkeyhintEnum = "search"
)

type InputHiddenEnum string

const (
	InputHiddenEnumHidden     InputHiddenEnum = "hidden"
	InputHiddenEnumUntilFound InputHiddenEnum = "until-found"
	InputHiddenEnumEmpty      InputHiddenEnum = ""
)

type InputInputmodeEnum string

const (
	InputInputmodeEnumNumeric InputInputmodeEnum = "numeric"
	InputInputmodeEnumSearch  InputInputmodeEnum = "search"
	InputInputmodeEnumTel     InputInputmodeEnum = "tel"
	InputInputmodeEnumText    InputInputmodeEnum = "text"
	InputInputmodeEnumUrl     InputInputmodeEnum = "url"
	InputInputmodeEnumDecimal InputInputmodeEnum = "decimal"
	InputInputmodeEnumEmail   InputInputmodeEnum = "email"
	InputInputmodeEnumNone    InputInputmodeEnum = "none"
)

type InputSpellcheckEnum string

const (
	InputSpellcheckEnumFalse InputSpellcheckEnum = "false"
	InputSpellcheckEnumTrue  InputSpellcheckEnum = "true"
	InputSpellcheckEnumEmpty InputSpellcheckEnum = ""
)

type InputTranslateEnum string

const (
	InputTranslateEnumNo    InputTranslateEnum = "no"
	InputTranslateEnumYes   InputTranslateEnum = "yes"
	InputTranslateEnumEmpty InputTranslateEnum = ""
)

type InputWritingsuggestionsEnum string

const (
	InputWritingsuggestionsEnumFalse InputWritingsuggestionsEnum = "false"
	InputWritingsuggestionsEnumTrue  InputWritingsuggestionsEnum = "true"
	InputWritingsuggestionsEnumEmpty InputWritingsuggestionsEnum = ""
)

type inputAttrs map[string]any

func (e *InputElement) Accept(s string) *InputElement {
	e.attributes["accept"] = s

	return e
}

func (e *InputElement) Alpha(b bool) *InputElement {
	e.attributes["alpha"] = b

	return e
}

func (e *InputElement) Alt(s string) *InputElement {
	e.attributes["alt"] = s

	return e
}

func (e *InputElement) Autocomplete(s ...string) *InputElement {
	e.attributes["autocomplete"] = strings.Join(s, " ")

	return e
}

func (e *InputElement) Checked(b bool) *InputElement {
	e.attributes["checked"] = b

	return e
}

func (e *InputElement) Colorspace(a InputColorspaceEnum) *InputElement {
	e.attributes["colorspace"] = a

	return e
}

func (e *InputElement) Dirname(s string) *InputElement {
	e.attributes["dirname"] = s

	return e
}

func (e *InputElement) Disabled(b bool) *InputElement {
	e.attributes["disabled"] = b

	return e
}

func (e *InputElement) Form(s string) *InputElement {
	e.attributes["form"] = s

	return e
}

func (e *InputElement) Formaction(s string) *InputElement {
	e.attributes["formaction"] = s

	return e
}

func (e *InputElement) Formenctype(s string) *InputElement {
	e.attributes["formenctype"] = s

	return e
}

func (e *InputElement) Formmethod(a InputFormmethodEnum) *InputElement {
	e.attributes["formmethod"] = a

	return e
}

func (e *InputElement) Formnovalidate(b bool) *InputElement {
	e.attributes["formnovalidate"] = b

	return e
}

func (e *InputElement) Formtarget(s string) *InputElement {
	e.attributes["formtarget"] = s

	return e
}

func (e *InputElement) Height(i int) *InputElement {
	e.attributes["height"] = i

	return e
}

func (e *InputElement) List(s string) *InputElement {
	e.attributes["list"] = s

	return e
}

func (e *InputElement) Max(i int) *InputElement {
	e.attributes["max"] = i

	return e
}

func (e *InputElement) Maxlength(i int) *InputElement {
	e.attributes["maxlength"] = i

	return e
}

func (e *InputElement) Min(i int) *InputElement {
	e.attributes["min"] = i

	return e
}

func (e *InputElement) Minlength(i int) *InputElement {
	e.attributes["minlength"] = i

	return e
}

func (e *InputElement) Multiple(b bool) *InputElement {
	e.attributes["multiple"] = b

	return e
}

func (e *InputElement) Name(s string) *InputElement {
	e.attributes["name"] = s

	return e
}

func (e *InputElement) Pattern(s string) *InputElement {
	e.attributes["pattern"] = s

	return e
}

func (e *InputElement) Placeholder(s string) *InputElement {
	e.attributes["placeholder"] = s

	return e
}

func (e *InputElement) Popovertarget(s string) *InputElement {
	e.attributes["popovertarget"] = s

	return e
}

func (e *InputElement) Popovertargetaction(a InputPopovertargetactionEnum) *InputElement {
	e.attributes["popovertargetaction"] = a

	return e
}

func (e *InputElement) Readonly(b bool) *InputElement {
	e.attributes["readonly"] = b

	return e
}

func (e *InputElement) Required(b bool) *InputElement {
	e.attributes["required"] = b

	return e
}

func (e *InputElement) Size(i int) *InputElement {
	e.attributes["size"] = i

	return e
}

func (e *InputElement) Src(s string) *InputElement {
	e.attributes["src"] = s

	return e
}

func (e *InputElement) Step(s string) *InputElement {
	e.attributes["step"] = s

	return e
}

func (e *InputElement) Type(a InputTypeEnum) *InputElement {
	e.attributes["type"] = a

	return e
}

func (e *InputElement) Value(s string) *InputElement {
	e.attributes["value"] = s

	return e
}

func (e *InputElement) Width(i int) *InputElement {
	e.attributes["width"] = i

	return e
}

func (e *InputElement) Autocapitalize(a InputAutocapitalizeEnum) *InputElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *InputElement) Autocorrect(a InputAutocorrectEnum) *InputElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *InputElement) Autofocus(b bool) *InputElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *InputElement) Class(s ...string) *InputElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *InputElement) Contenteditable(a InputContenteditableEnum) *InputElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *InputElement) DataUnsafe(name string, s string) *InputElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *InputElement) Data(name string, s string) *InputElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *InputElement) Dir(a InputDirEnum) *InputElement {
	e.attributes["dir"] = a

	return e
}

func (e *InputElement) Draggable(a InputDraggableEnum) *InputElement {
	e.attributes["draggable"] = a

	return e
}

func (e *InputElement) Enterkeyhint(a InputEnterkeyhintEnum) *InputElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *InputElement) Hidden(a InputHiddenEnum) *InputElement {
	e.attributes["hidden"] = a

	return e
}

func (e *InputElement) Id(s string) *InputElement {
	e.attributes["id"] = s

	return e
}

func (e *InputElement) Inert(b bool) *InputElement {
	e.attributes["inert"] = b

	return e
}

func (e *InputElement) Inputmode(a InputInputmodeEnum) *InputElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *InputElement) Itemid(s string) *InputElement {
	e.attributes["itemid"] = s

	return e
}

func (e *InputElement) Itemprop(s ...string) *InputElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *InputElement) Itemref(s ...string) *InputElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *InputElement) Itemscope(b bool) *InputElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *InputElement) Itemtype(s ...string) *InputElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *InputElement) Lang(s string) *InputElement {
	e.attributes["lang"] = s

	return e
}

func (e *InputElement) Nonce(s string) *InputElement {
	e.attributes["nonce"] = s

	return e
}

func (e *InputElement) Popover(s string) *InputElement {
	e.attributes["popover"] = s

	return e
}

func (e *InputElement) Slot(s string) *InputElement {
	e.attributes["slot"] = s

	return e
}

func (e *InputElement) Spellcheck(a InputSpellcheckEnum) *InputElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *InputElement) Style(s string) *InputElement {
	e.attributes["style"] = s

	return e
}

func (e *InputElement) Tabindex(i int) *InputElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *InputElement) Title(s string) *InputElement {
	e.attributes["title"] = s

	return e
}

func (e *InputElement) Translate(a InputTranslateEnum) *InputElement {
	e.attributes["translate"] = a

	return e
}

func (e *InputElement) Writingsuggestions(a InputWritingsuggestionsEnum) *InputElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *InputElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<input")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	return nil
}
