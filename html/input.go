// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type InputElement struct {
	attributes inputAttrs
	children []htemel.Node
	skipRender bool
}

// Input creates a tag <input> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The input element represents a typed data field, usually with a form control to allow the user to edit the data.
func Input(children ...htemel.Node) *InputElement {
	node := &InputElement{
		children: children,
		attributes: make(inputAttrs),
	}

	return node
}

func InputIf(condition bool, children ...htemel.Node) *InputElement {
	if condition {
		return Input(children...)
	}

	return &InputElement{
		skipRender: true,
	}
}

type InputAutocapitalizeEnum string

const (
	InputAutocapitalizeEnumCharacters InputAutocapitalizeEnum = "characters"
	InputAutocapitalizeEnumNone InputAutocapitalizeEnum = "none"
	InputAutocapitalizeEnumOff InputAutocapitalizeEnum = "off"
	InputAutocapitalizeEnumOn InputAutocapitalizeEnum = "on"
	InputAutocapitalizeEnumSentences InputAutocapitalizeEnum = "sentences"
	InputAutocapitalizeEnumWords InputAutocapitalizeEnum = "words"
)

type InputAutocorrectEnum string

const (
	InputAutocorrectEnumOff InputAutocorrectEnum = "off"
	InputAutocorrectEnumOn InputAutocorrectEnum = "on"
)

type InputContenteditableEnum string

const (
	InputContenteditableEnumTrue InputContenteditableEnum = "true"
	InputContenteditableEnumFalse InputContenteditableEnum = "false"
	InputContenteditableEnumPlaintextOnly InputContenteditableEnum = "plaintext-only"
)

type InputDirEnum string

const (
	InputDirEnumAuto InputDirEnum = "auto"
	InputDirEnumLtr InputDirEnum = "ltr"
	InputDirEnumRtl InputDirEnum = "rtl"
)

type InputDraggableEnum string

const (
	InputDraggableEnumFalse InputDraggableEnum = "false"
	InputDraggableEnumTrue InputDraggableEnum = "true"
)

type InputEnterkeyhintEnum string

const (
	InputEnterkeyhintEnumGo InputEnterkeyhintEnum = "go"
	InputEnterkeyhintEnumNext InputEnterkeyhintEnum = "next"
	InputEnterkeyhintEnumPrevious InputEnterkeyhintEnum = "previous"
	InputEnterkeyhintEnumSearch InputEnterkeyhintEnum = "search"
	InputEnterkeyhintEnumSend InputEnterkeyhintEnum = "send"
	InputEnterkeyhintEnumDone InputEnterkeyhintEnum = "done"
	InputEnterkeyhintEnumEnter InputEnterkeyhintEnum = "enter"
)

type InputHiddenEnum string

const (
	InputHiddenEnumHidden InputHiddenEnum = "hidden"
	InputHiddenEnumUntilFound InputHiddenEnum = "until-found"
)

type inputAttrs map[string]any

func (e *InputElement) Autocapitalize(a InputAutocapitalizeEnum) *InputElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *InputElement) Autocorrect(a InputAutocorrectEnum) *InputElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *InputElement) Autofocus(b bool) *InputElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *InputElement) Class(s ...string) *InputElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *InputElement) Contenteditable(a InputContenteditableEnum) *InputElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *InputElement) Dir(a InputDirEnum) *InputElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *InputElement) Draggable(a InputDraggableEnum) *InputElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *InputElement) Enterkeyhint(a InputEnterkeyhintEnum) *InputElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *InputElement) Hidden(a InputHiddenEnum) *InputElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *InputElement) Id(s string) *InputElement {
	e.attributes["id"] = s
	
	return e
}

func (e *InputElement) Slot(s string) *InputElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *InputElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<input")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</input>")); err != nil {
		return err
	}

	return nil
}
