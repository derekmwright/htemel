// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type UlElement struct {
	attributes ulAttrs
	children []htemel.Node
	skipRender bool
}

// Ul creates a tag <ul> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The ul element represents a list of items, where the order of the items is not important â€” that is, where changing the order would not materially change the meaning of the document.
func Ul(children ...htemel.Node) *UlElement {
	node := &UlElement{
		children: children,
		attributes: make(ulAttrs),
	}

	return node
}

func UlIf(condition bool, children ...htemel.Node) *UlElement {
	if condition {
		return Ul(children...)
	}

	return &UlElement{
		skipRender: true,
	}
}

type UlAutocapitalizeEnum string

const (
	UlAutocapitalizeEnumWords UlAutocapitalizeEnum = "words"
	UlAutocapitalizeEnumCharacters UlAutocapitalizeEnum = "characters"
	UlAutocapitalizeEnumNone UlAutocapitalizeEnum = "none"
	UlAutocapitalizeEnumOff UlAutocapitalizeEnum = "off"
	UlAutocapitalizeEnumOn UlAutocapitalizeEnum = "on"
	UlAutocapitalizeEnumSentences UlAutocapitalizeEnum = "sentences"
)

type UlAutocorrectEnum string

const (
	UlAutocorrectEnumOff UlAutocorrectEnum = "off"
	UlAutocorrectEnumOn UlAutocorrectEnum = "on"
)

type UlContenteditableEnum string

const (
	UlContenteditableEnumFalse UlContenteditableEnum = "false"
	UlContenteditableEnumPlaintextOnly UlContenteditableEnum = "plaintext-only"
	UlContenteditableEnumTrue UlContenteditableEnum = "true"
)

type UlDirEnum string

const (
	UlDirEnumRtl UlDirEnum = "rtl"
	UlDirEnumAuto UlDirEnum = "auto"
	UlDirEnumLtr UlDirEnum = "ltr"
)

type UlDraggableEnum string

const (
	UlDraggableEnumFalse UlDraggableEnum = "false"
	UlDraggableEnumTrue UlDraggableEnum = "true"
)

type UlEnterkeyhintEnum string

const (
	UlEnterkeyhintEnumDone UlEnterkeyhintEnum = "done"
	UlEnterkeyhintEnumEnter UlEnterkeyhintEnum = "enter"
	UlEnterkeyhintEnumGo UlEnterkeyhintEnum = "go"
	UlEnterkeyhintEnumNext UlEnterkeyhintEnum = "next"
	UlEnterkeyhintEnumPrevious UlEnterkeyhintEnum = "previous"
	UlEnterkeyhintEnumSearch UlEnterkeyhintEnum = "search"
	UlEnterkeyhintEnumSend UlEnterkeyhintEnum = "send"
)

type UlHiddenEnum string

const (
	UlHiddenEnumHidden UlHiddenEnum = "hidden"
	UlHiddenEnumUntilFound UlHiddenEnum = "until-found"
)

type ulAttrs map[string]any

func (e *UlElement) Autocapitalize(a UlAutocapitalizeEnum) *UlElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *UlElement) Autocorrect(a UlAutocorrectEnum) *UlElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *UlElement) Autofocus(b bool) *UlElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *UlElement) Class(s ...string) *UlElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *UlElement) Contenteditable(a UlContenteditableEnum) *UlElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *UlElement) Dir(a UlDirEnum) *UlElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *UlElement) Draggable(a UlDraggableEnum) *UlElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *UlElement) Enterkeyhint(a UlEnterkeyhintEnum) *UlElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *UlElement) Hidden(a UlHiddenEnum) *UlElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *UlElement) Id(s string) *UlElement {
	e.attributes["id"] = s
	
	return e
}

func (e *UlElement) Slot(s string) *UlElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *UlElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<ul")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</ul>")); err != nil {
		return err
	}

	return nil
}
