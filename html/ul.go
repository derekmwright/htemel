// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
)

type UlElement struct {
	attributes ulAttrs
	children []htemel.Node
	skipRender bool
}

// Ul creates a tag <ul> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The ul element represents a list of items, where the order of the items is not important â€” that is, where changing the order would not materially change the meaning of the document.
func Ul(children ...htemel.Node) *UlElement {
	node := &UlElement{
		children: children,
	}

	return node
}

func UlIf(condition bool, children ...htemel.Node) *UlElement {
	if condition {
		return Ul(children...)
	}

	return &UlElement{
		skipRender: true,
	}
}

type UlAutocapitalizeAttrEnum string

const (
	UlAutocapitalizeAttrEnumWords UlAutocapitalizeAttrEnum = "words"
	UlAutocapitalizeAttrEnumCharacters UlAutocapitalizeAttrEnum = "characters"
	UlAutocapitalizeAttrEnumNone UlAutocapitalizeAttrEnum = "none"
	UlAutocapitalizeAttrEnumOff UlAutocapitalizeAttrEnum = "off"
	UlAutocapitalizeAttrEnumOn UlAutocapitalizeAttrEnum = "on"
	UlAutocapitalizeAttrEnumSentences UlAutocapitalizeAttrEnum = "sentences"
)

type UlAutocorrectAttrEnum string

const (
	UlAutocorrectAttrEnumOff UlAutocorrectAttrEnum = "off"
	UlAutocorrectAttrEnumOn UlAutocorrectAttrEnum = "on"
)

type UlContenteditableAttrEnum string

const (
	UlContenteditableAttrEnumFalse UlContenteditableAttrEnum = "false"
	UlContenteditableAttrEnumPlaintextOnly UlContenteditableAttrEnum = "plaintext-only"
	UlContenteditableAttrEnumTrue UlContenteditableAttrEnum = "true"
)

type ulAttrs map[string]any

func (e *UlElement) Autocapitalize(a UlAutocapitalizeAttrEnum) *UlElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *UlElement) Autocorrect(a UlAutocorrectAttrEnum) *UlElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *UlElement) Class(s ...string) *UlElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *UlElement) Contenteditable(a UlContenteditableAttrEnum) *UlElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *UlElement) Id(s string) *UlElement {
	e.attributes["id"] = s
	
	return e
}

func (e *UlElement) Slot(s string) *UlElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *UlElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<ul")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 0
	for key, v := range e.attributes {
		w.Write([]byte(key + "="))
		w.Write([]byte(html.EscapeString(fmt.Sprintf("'%v'", v))))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</ul>")); err != nil {
		return err
	}

	return nil
}
