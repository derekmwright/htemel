// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type UlElement struct {
	attributes ulAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// Ul creates a tag <ul> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The ul element represents a list of items, where the order of the items is not important â€” that is, where changing the order would not materially change the meaning of the document.
func Ul(children ...htemel.Node) *UlElement {
	node := &UlElement{
		children: children, attributes: make(ulAttrs),
	}

	return node
}

func UlIf(condition bool, children ...htemel.Node) *UlElement {
	if condition {
		return Ul(children...)
	}

	return &UlElement{
		skipRender: true,
	}
}

func UlTernary(condition bool, true htemel.Node, false htemel.Node) *UlElement {
	if condition {
		return Ul(true)
	}

	return Ul(false)
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *UlElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *UlElement) AddIndent(i int) {
	e.indent = i + 1
}

type UlAutocapitalizeEnum string

const (
	UlAutocapitalizeEnumCharacters UlAutocapitalizeEnum = "characters"
	UlAutocapitalizeEnumNone       UlAutocapitalizeEnum = "none"
	UlAutocapitalizeEnumOff        UlAutocapitalizeEnum = "off"
	UlAutocapitalizeEnumOn         UlAutocapitalizeEnum = "on"
	UlAutocapitalizeEnumSentences  UlAutocapitalizeEnum = "sentences"
	UlAutocapitalizeEnumWords      UlAutocapitalizeEnum = "words"
)

type UlAutocorrectEnum string

const (
	UlAutocorrectEnumOn    UlAutocorrectEnum = "on"
	UlAutocorrectEnumOff   UlAutocorrectEnum = "off"
	UlAutocorrectEnumEmpty UlAutocorrectEnum = ""
)

type UlContenteditableEnum string

const (
	UlContenteditableEnumTrue          UlContenteditableEnum = "true"
	UlContenteditableEnumFalse         UlContenteditableEnum = "false"
	UlContenteditableEnumPlaintextOnly UlContenteditableEnum = "plaintext-only"
	UlContenteditableEnumEmpty         UlContenteditableEnum = ""
)

type UlDirEnum string

const (
	UlDirEnumAuto UlDirEnum = "auto"
	UlDirEnumLtr  UlDirEnum = "ltr"
	UlDirEnumRtl  UlDirEnum = "rtl"
)

type UlDraggableEnum string

const (
	UlDraggableEnumFalse UlDraggableEnum = "false"
	UlDraggableEnumTrue  UlDraggableEnum = "true"
)

type UlEnterkeyhintEnum string

const (
	UlEnterkeyhintEnumNext     UlEnterkeyhintEnum = "next"
	UlEnterkeyhintEnumPrevious UlEnterkeyhintEnum = "previous"
	UlEnterkeyhintEnumSearch   UlEnterkeyhintEnum = "search"
	UlEnterkeyhintEnumSend     UlEnterkeyhintEnum = "send"
	UlEnterkeyhintEnumDone     UlEnterkeyhintEnum = "done"
	UlEnterkeyhintEnumEnter    UlEnterkeyhintEnum = "enter"
	UlEnterkeyhintEnumGo       UlEnterkeyhintEnum = "go"
)

type UlHiddenEnum string

const (
	UlHiddenEnumHidden     UlHiddenEnum = "hidden"
	UlHiddenEnumUntilFound UlHiddenEnum = "until-found"
	UlHiddenEnumEmpty      UlHiddenEnum = ""
)

type UlInputmodeEnum string

const (
	UlInputmodeEnumText    UlInputmodeEnum = "text"
	UlInputmodeEnumUrl     UlInputmodeEnum = "url"
	UlInputmodeEnumDecimal UlInputmodeEnum = "decimal"
	UlInputmodeEnumEmail   UlInputmodeEnum = "email"
	UlInputmodeEnumNone    UlInputmodeEnum = "none"
	UlInputmodeEnumNumeric UlInputmodeEnum = "numeric"
	UlInputmodeEnumSearch  UlInputmodeEnum = "search"
	UlInputmodeEnumTel     UlInputmodeEnum = "tel"
)

type UlSpellcheckEnum string

const (
	UlSpellcheckEnumFalse UlSpellcheckEnum = "false"
	UlSpellcheckEnumTrue  UlSpellcheckEnum = "true"
	UlSpellcheckEnumEmpty UlSpellcheckEnum = ""
)

type UlTranslateEnum string

const (
	UlTranslateEnumYes   UlTranslateEnum = "yes"
	UlTranslateEnumNo    UlTranslateEnum = "no"
	UlTranslateEnumEmpty UlTranslateEnum = ""
)

type UlWritingsuggestionsEnum string

const (
	UlWritingsuggestionsEnumFalse UlWritingsuggestionsEnum = "false"
	UlWritingsuggestionsEnumTrue  UlWritingsuggestionsEnum = "true"
	UlWritingsuggestionsEnumEmpty UlWritingsuggestionsEnum = ""
)

type ulAttrs map[string]any

func (e *UlElement) Autocapitalize(a UlAutocapitalizeEnum) *UlElement {
	e.attributes["autocapitalize"] = a

	return e
}

func UlAutocapitalizeCustom(s string) UlAutocapitalizeEnum {
	return UlAutocapitalizeEnum(s)
}

func (e *UlElement) Autocorrect(a UlAutocorrectEnum) *UlElement {
	e.attributes["autocorrect"] = a

	return e
}

func UlAutocorrectCustom(s string) UlAutocorrectEnum {
	return UlAutocorrectEnum(s)
}

func (e *UlElement) Autofocus(b bool) *UlElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *UlElement) Class(s ...string) *UlElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *UlElement) Contenteditable(a UlContenteditableEnum) *UlElement {
	e.attributes["contenteditable"] = a

	return e
}

func UlContenteditableCustom(s string) UlContenteditableEnum {
	return UlContenteditableEnum(s)
}

func (e *UlElement) DataUnsafe(name string, s string) *UlElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *UlElement) Data(name string, s string) *UlElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *UlElement) Dir(a UlDirEnum) *UlElement {
	e.attributes["dir"] = a

	return e
}

func UlDirCustom(s string) UlDirEnum {
	return UlDirEnum(s)
}

func (e *UlElement) Draggable(a UlDraggableEnum) *UlElement {
	e.attributes["draggable"] = a

	return e
}

func UlDraggableCustom(s string) UlDraggableEnum {
	return UlDraggableEnum(s)
}

func (e *UlElement) Enterkeyhint(a UlEnterkeyhintEnum) *UlElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func UlEnterkeyhintCustom(s string) UlEnterkeyhintEnum {
	return UlEnterkeyhintEnum(s)
}

func (e *UlElement) Hidden(a UlHiddenEnum) *UlElement {
	e.attributes["hidden"] = a

	return e
}

func UlHiddenCustom(s string) UlHiddenEnum {
	return UlHiddenEnum(s)
}

func (e *UlElement) Id(s string) *UlElement {
	e.attributes["id"] = s

	return e
}

func (e *UlElement) Inert(b bool) *UlElement {
	e.attributes["inert"] = b

	return e
}

func (e *UlElement) Inputmode(a UlInputmodeEnum) *UlElement {
	e.attributes["inputmode"] = a

	return e
}

func UlInputmodeCustom(s string) UlInputmodeEnum {
	return UlInputmodeEnum(s)
}

func (e *UlElement) Itemid(s string) *UlElement {
	e.attributes["itemid"] = s

	return e
}

func (e *UlElement) Itemprop(s ...string) *UlElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *UlElement) Itemref(s ...string) *UlElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *UlElement) Itemscope(b bool) *UlElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *UlElement) Itemtype(s ...string) *UlElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *UlElement) Lang(s string) *UlElement {
	e.attributes["lang"] = s

	return e
}

func (e *UlElement) Nonce(s string) *UlElement {
	e.attributes["nonce"] = s

	return e
}

func (e *UlElement) Popover(s string) *UlElement {
	e.attributes["popover"] = s

	return e
}

func (e *UlElement) Slot(s string) *UlElement {
	e.attributes["slot"] = s

	return e
}

func (e *UlElement) Spellcheck(a UlSpellcheckEnum) *UlElement {
	e.attributes["spellcheck"] = a

	return e
}

func UlSpellcheckCustom(s string) UlSpellcheckEnum {
	return UlSpellcheckEnum(s)
}

func (e *UlElement) Style(s string) *UlElement {
	e.attributes["style"] = s

	return e
}

func (e *UlElement) Tabindex(i int) *UlElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *UlElement) Title(s string) *UlElement {
	e.attributes["title"] = s

	return e
}

func (e *UlElement) Translate(a UlTranslateEnum) *UlElement {
	e.attributes["translate"] = a

	return e
}

func UlTranslateCustom(s string) UlTranslateEnum {
	return UlTranslateEnum(s)
}

func (e *UlElement) Writingsuggestions(a UlWritingsuggestionsEnum) *UlElement {
	e.attributes["writingsuggestions"] = a

	return e
}

func UlWritingsuggestionsCustom(s string) UlWritingsuggestionsEnum {
	return UlWritingsuggestionsEnum(s)
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *UlElement) Render(w io.Writer) error {
	indent := htemel.SetIndent(e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<ul")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}
	for _, child := range e.children {
		child.AddIndent(e.Indent())
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(indent + "</ul>\n")); err != nil {
		return err
	}

	return nil
}
