// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type SelectElement struct {
	attributes selectAttrs
	children   []htemel.Node
	skipRender bool
}

// Select creates a tag <select> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The select element represents a control for selecting amongst a set of options.
func Select(children ...htemel.Node) *SelectElement {
	node := &SelectElement{
		children:   children,
		attributes: make(selectAttrs),
	}

	return node
}

func SelectIf(condition bool, children ...htemel.Node) *SelectElement {
	if condition {
		return Select(children...)
	}

	return &SelectElement{
		skipRender: true,
	}
}

type SelectAutocapitalizeAttrEnum string

const (
	SelectAutocapitalizeAttrEnumWords      SelectAutocapitalizeAttrEnum = "words"
	SelectAutocapitalizeAttrEnumCharacters SelectAutocapitalizeAttrEnum = "characters"
	SelectAutocapitalizeAttrEnumNone       SelectAutocapitalizeAttrEnum = "none"
	SelectAutocapitalizeAttrEnumOff        SelectAutocapitalizeAttrEnum = "off"
	SelectAutocapitalizeAttrEnumOn         SelectAutocapitalizeAttrEnum = "on"
	SelectAutocapitalizeAttrEnumSentences  SelectAutocapitalizeAttrEnum = "sentences"
)

type SelectAutocorrectAttrEnum string

const (
	SelectAutocorrectAttrEnumOn  SelectAutocorrectAttrEnum = "on"
	SelectAutocorrectAttrEnumOff SelectAutocorrectAttrEnum = "off"
)

type SelectContenteditableAttrEnum string

const (
	SelectContenteditableAttrEnumFalse         SelectContenteditableAttrEnum = "false"
	SelectContenteditableAttrEnumPlaintextOnly SelectContenteditableAttrEnum = "plaintext-only"
	SelectContenteditableAttrEnumTrue          SelectContenteditableAttrEnum = "true"
)

type selectAttrs map[string]any

func (e *SelectElement) Autocapitalize(a SelectAutocapitalizeAttrEnum) *SelectElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *SelectElement) Autocorrect(a SelectAutocorrectAttrEnum) *SelectElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *SelectElement) Autofocus(b bool) *SelectElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *SelectElement) Class(s ...string) *SelectElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *SelectElement) Contenteditable(a SelectContenteditableAttrEnum) *SelectElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *SelectElement) Id(s string) *SelectElement {
	e.attributes["id"] = s

	return e
}

func (e *SelectElement) Slot(s string) *SelectElement {
	e.attributes["slot"] = s

	return e
}

func (e *SelectElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<select")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</select>")); err != nil {
		return err
	}

	return nil
}
