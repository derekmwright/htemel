// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type SelectElement struct {
	attributes selectAttrs
	children []htemel.Node
	skipRender bool
}

// Select creates a tag <select> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The select element represents a control for selecting amongst a set of options.
func Select(children ...htemel.Node) *SelectElement {
	node := &SelectElement{
		children: children,
		attributes: make(selectAttrs),
	}

	return node
}

func SelectIf(condition bool, children ...htemel.Node) *SelectElement {
	if condition {
		return Select(children...)
	}

	return &SelectElement{
		skipRender: true,
	}
}

type SelectAutocapitalizeEnum string

const (
	SelectAutocapitalizeEnumOn SelectAutocapitalizeEnum = "on"
	SelectAutocapitalizeEnumSentences SelectAutocapitalizeEnum = "sentences"
	SelectAutocapitalizeEnumWords SelectAutocapitalizeEnum = "words"
	SelectAutocapitalizeEnumCharacters SelectAutocapitalizeEnum = "characters"
	SelectAutocapitalizeEnumNone SelectAutocapitalizeEnum = "none"
	SelectAutocapitalizeEnumOff SelectAutocapitalizeEnum = "off"
)

type SelectAutocorrectEnum string

const (
	SelectAutocorrectEnumOff SelectAutocorrectEnum = "off"
	SelectAutocorrectEnumOn SelectAutocorrectEnum = "on"
)

type SelectContenteditableEnum string

const (
	SelectContenteditableEnumFalse SelectContenteditableEnum = "false"
	SelectContenteditableEnumPlaintextOnly SelectContenteditableEnum = "plaintext-only"
	SelectContenteditableEnumTrue SelectContenteditableEnum = "true"
)

type SelectDirEnum string

const (
	SelectDirEnumRtl SelectDirEnum = "rtl"
	SelectDirEnumAuto SelectDirEnum = "auto"
	SelectDirEnumLtr SelectDirEnum = "ltr"
)

type SelectDraggableEnum string

const (
	SelectDraggableEnumFalse SelectDraggableEnum = "false"
	SelectDraggableEnumTrue SelectDraggableEnum = "true"
)

type SelectEnterkeyhintEnum string

const (
	SelectEnterkeyhintEnumDone SelectEnterkeyhintEnum = "done"
	SelectEnterkeyhintEnumEnter SelectEnterkeyhintEnum = "enter"
	SelectEnterkeyhintEnumGo SelectEnterkeyhintEnum = "go"
	SelectEnterkeyhintEnumNext SelectEnterkeyhintEnum = "next"
	SelectEnterkeyhintEnumPrevious SelectEnterkeyhintEnum = "previous"
	SelectEnterkeyhintEnumSearch SelectEnterkeyhintEnum = "search"
	SelectEnterkeyhintEnumSend SelectEnterkeyhintEnum = "send"
)

type SelectHiddenEnum string

const (
	SelectHiddenEnumHidden SelectHiddenEnum = "hidden"
	SelectHiddenEnumUntilFound SelectHiddenEnum = "until-found"
)

type selectAttrs map[string]any

func (e *SelectElement) Autocapitalize(a SelectAutocapitalizeEnum) *SelectElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *SelectElement) Autocorrect(a SelectAutocorrectEnum) *SelectElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *SelectElement) Autofocus(b bool) *SelectElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *SelectElement) Class(s ...string) *SelectElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *SelectElement) Contenteditable(a SelectContenteditableEnum) *SelectElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *SelectElement) Dir(a SelectDirEnum) *SelectElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *SelectElement) Draggable(a SelectDraggableEnum) *SelectElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *SelectElement) Enterkeyhint(a SelectEnterkeyhintEnum) *SelectElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *SelectElement) Hidden(a SelectHiddenEnum) *SelectElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *SelectElement) Id(s string) *SelectElement {
	e.attributes["id"] = s
	
	return e
}

func (e *SelectElement) Slot(s string) *SelectElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *SelectElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<select")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</select>")); err != nil {
		return err
	}

	return nil
}
