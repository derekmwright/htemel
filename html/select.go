// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type SelectElement struct {
	attributes selectAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// Select creates a tag <select> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The select element represents a control for selecting amongst a set of options.
func Select(children ...htemel.Node) *SelectElement {
	node := &SelectElement{
		children:   children,
		attributes: make(selectAttrs),
	}

	return node
}

func SelectIf(condition bool, children ...htemel.Node) *SelectElement {
	if condition {
		return Select(children...)
	}

	return &SelectElement{
		children:   children,
		attributes: make(selectAttrs),
		skipRender: true,
	}
}

func SelectTernary(condition bool, true htemel.Node, false htemel.Node) *SelectElement {
	if condition {
		return Select(true)
	}

	return Select(false)
}

type SelectAutocapitalizeEnum string

const (
	SelectAutocapitalizeEnumCharacters SelectAutocapitalizeEnum = "characters"
	SelectAutocapitalizeEnumNone       SelectAutocapitalizeEnum = "none"
	SelectAutocapitalizeEnumOff        SelectAutocapitalizeEnum = "off"
	SelectAutocapitalizeEnumOn         SelectAutocapitalizeEnum = "on"
	SelectAutocapitalizeEnumSentences  SelectAutocapitalizeEnum = "sentences"
	SelectAutocapitalizeEnumWords      SelectAutocapitalizeEnum = "words"
)

type SelectAutocorrectEnum string

const (
	SelectAutocorrectEnumOff   SelectAutocorrectEnum = "off"
	SelectAutocorrectEnumOn    SelectAutocorrectEnum = "on"
	SelectAutocorrectEnumEmpty SelectAutocorrectEnum = ""
)

type SelectContenteditableEnum string

const (
	SelectContenteditableEnumFalse         SelectContenteditableEnum = "false"
	SelectContenteditableEnumPlaintextOnly SelectContenteditableEnum = "plaintext-only"
	SelectContenteditableEnumTrue          SelectContenteditableEnum = "true"
	SelectContenteditableEnumEmpty         SelectContenteditableEnum = ""
)

type SelectDirEnum string

const (
	SelectDirEnumAuto SelectDirEnum = "auto"
	SelectDirEnumLtr  SelectDirEnum = "ltr"
	SelectDirEnumRtl  SelectDirEnum = "rtl"
)

type SelectDraggableEnum string

const (
	SelectDraggableEnumFalse SelectDraggableEnum = "false"
	SelectDraggableEnumTrue  SelectDraggableEnum = "true"
)

type SelectEnterkeyhintEnum string

const (
	SelectEnterkeyhintEnumEnter    SelectEnterkeyhintEnum = "enter"
	SelectEnterkeyhintEnumGo       SelectEnterkeyhintEnum = "go"
	SelectEnterkeyhintEnumNext     SelectEnterkeyhintEnum = "next"
	SelectEnterkeyhintEnumPrevious SelectEnterkeyhintEnum = "previous"
	SelectEnterkeyhintEnumSearch   SelectEnterkeyhintEnum = "search"
	SelectEnterkeyhintEnumSend     SelectEnterkeyhintEnum = "send"
	SelectEnterkeyhintEnumDone     SelectEnterkeyhintEnum = "done"
)

type SelectHiddenEnum string

const (
	SelectHiddenEnumHidden     SelectHiddenEnum = "hidden"
	SelectHiddenEnumUntilFound SelectHiddenEnum = "until-found"
	SelectHiddenEnumEmpty      SelectHiddenEnum = ""
)

type SelectInputmodeEnum string

const (
	SelectInputmodeEnumSearch  SelectInputmodeEnum = "search"
	SelectInputmodeEnumTel     SelectInputmodeEnum = "tel"
	SelectInputmodeEnumText    SelectInputmodeEnum = "text"
	SelectInputmodeEnumUrl     SelectInputmodeEnum = "url"
	SelectInputmodeEnumDecimal SelectInputmodeEnum = "decimal"
	SelectInputmodeEnumEmail   SelectInputmodeEnum = "email"
	SelectInputmodeEnumNone    SelectInputmodeEnum = "none"
	SelectInputmodeEnumNumeric SelectInputmodeEnum = "numeric"
)

type SelectSpellcheckEnum string

const (
	SelectSpellcheckEnumFalse SelectSpellcheckEnum = "false"
	SelectSpellcheckEnumTrue  SelectSpellcheckEnum = "true"
	SelectSpellcheckEnumEmpty SelectSpellcheckEnum = ""
)

type SelectTranslateEnum string

const (
	SelectTranslateEnumNo    SelectTranslateEnum = "no"
	SelectTranslateEnumYes   SelectTranslateEnum = "yes"
	SelectTranslateEnumEmpty SelectTranslateEnum = ""
)

type SelectWritingsuggestionsEnum string

const (
	SelectWritingsuggestionsEnumFalse SelectWritingsuggestionsEnum = "false"
	SelectWritingsuggestionsEnumTrue  SelectWritingsuggestionsEnum = "true"
	SelectWritingsuggestionsEnumEmpty SelectWritingsuggestionsEnum = ""
)

type selectAttrs map[string]any

func (e *SelectElement) Autocomplete(s string) *SelectElement {
	e.attributes["autocomplete"] = s

	return e
}

func (e *SelectElement) Disabled(b bool) *SelectElement {
	e.attributes["disabled"] = b

	return e
}

func (e *SelectElement) Form(s string) *SelectElement {
	e.attributes["form"] = s

	return e
}

func (e *SelectElement) Multiple(b bool) *SelectElement {
	e.attributes["multiple"] = b

	return e
}

func (e *SelectElement) Name(s string) *SelectElement {
	e.attributes["name"] = s

	return e
}

func (e *SelectElement) Required(b bool) *SelectElement {
	e.attributes["required"] = b

	return e
}

func (e *SelectElement) Size(i int) *SelectElement {
	e.attributes["size"] = i

	return e
}

func (e *SelectElement) Autocapitalize(a SelectAutocapitalizeEnum) *SelectElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *SelectElement) Autocorrect(a SelectAutocorrectEnum) *SelectElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *SelectElement) Autofocus(b bool) *SelectElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *SelectElement) Class(s ...string) *SelectElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *SelectElement) Contenteditable(a SelectContenteditableEnum) *SelectElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *SelectElement) DataUnsafe(name string, s string) *SelectElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *SelectElement) Data(name string, s string) *SelectElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *SelectElement) Dir(a SelectDirEnum) *SelectElement {
	e.attributes["dir"] = a

	return e
}

func (e *SelectElement) Draggable(a SelectDraggableEnum) *SelectElement {
	e.attributes["draggable"] = a

	return e
}

func (e *SelectElement) Enterkeyhint(a SelectEnterkeyhintEnum) *SelectElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *SelectElement) Hidden(a SelectHiddenEnum) *SelectElement {
	e.attributes["hidden"] = a

	return e
}

func (e *SelectElement) Id(s string) *SelectElement {
	e.attributes["id"] = s

	return e
}

func (e *SelectElement) Inert(b bool) *SelectElement {
	e.attributes["inert"] = b

	return e
}

func (e *SelectElement) Inputmode(a SelectInputmodeEnum) *SelectElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *SelectElement) Itemid(s string) *SelectElement {
	e.attributes["itemid"] = s

	return e
}

func (e *SelectElement) Itemprop(s ...string) *SelectElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *SelectElement) Itemref(s ...string) *SelectElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *SelectElement) Itemscope(b bool) *SelectElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *SelectElement) Itemtype(s ...string) *SelectElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *SelectElement) Lang(s string) *SelectElement {
	e.attributes["lang"] = s

	return e
}

func (e *SelectElement) Nonce(s string) *SelectElement {
	e.attributes["nonce"] = s

	return e
}

func (e *SelectElement) Popover(s string) *SelectElement {
	e.attributes["popover"] = s

	return e
}

func (e *SelectElement) Slot(s string) *SelectElement {
	e.attributes["slot"] = s

	return e
}

func (e *SelectElement) Spellcheck(a SelectSpellcheckEnum) *SelectElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *SelectElement) Style(s string) *SelectElement {
	e.attributes["style"] = s

	return e
}

func (e *SelectElement) Tabindex(i int) *SelectElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *SelectElement) Title(s string) *SelectElement {
	e.attributes["title"] = s

	return e
}

func (e *SelectElement) Translate(a SelectTranslateEnum) *SelectElement {
	e.attributes["translate"] = a

	return e
}

func (e *SelectElement) Writingsuggestions(a SelectWritingsuggestionsEnum) *SelectElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *SelectElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<select")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}
	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</select>")); err != nil {
		return err
	}

	return nil
}
