// Code generated by htemel. DO NOT EDIT.
package html

import (
  "github.com/derekmwright/htemel"
  "io"
)

type AsideElement struct {
	children []htemel.Node
	skipRender bool
}

// Aside creates a tag <aside> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The aside element represents a section of a page that consists of content that is tangentially related to the content around the aside element, and which could be considered separate from that content. Such sections are often represented as sidebars in printed typography.
func Aside(children ...htemel.Node) *AsideElement {
	node := &AsideElement{
		children: children,
	}

	return node
}

func AsideIf(condition bool, children ...htemel.Node) *AsideElement {
	if condition {
		return Aside(children...)
	}

	return &AsideElement{
		skipRender: true,
	}
}

func (e *AsideElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<aside")); err != nil {
		return err
	}

	// TODO: Attribute stuff here

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</aside>")); err != nil {
		return err
	}

	return nil
}
