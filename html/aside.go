// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type AsideElement struct {
	attributes asideAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// Aside creates a tag <aside> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The aside element represents a section of a page that consists of content that is tangentially related to the content around the aside element, and which could be considered separate from that content. Such sections are often represented as sidebars in printed typography.
func Aside(children ...htemel.Node) *AsideElement {
	node := &AsideElement{
		children: children, attributes: make(asideAttrs),
	}

	return node
}

func AsideIf(condition bool, children ...htemel.Node) *AsideElement {
	if condition {
		return Aside(children...)
	}

	return &AsideElement{
		skipRender: true,
	}
}

func AsideTernary(condition bool, true htemel.Node, false htemel.Node) *AsideElement {
	if condition {
		return Aside(true)
	}

	return Aside(false)
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *AsideElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *AsideElement) AddIndent(i int) {
	e.indent = i + 1
}

type AsideAutocapitalizeEnum string

const (
	AsideAutocapitalizeEnumNone       AsideAutocapitalizeEnum = "none"
	AsideAutocapitalizeEnumOff        AsideAutocapitalizeEnum = "off"
	AsideAutocapitalizeEnumOn         AsideAutocapitalizeEnum = "on"
	AsideAutocapitalizeEnumSentences  AsideAutocapitalizeEnum = "sentences"
	AsideAutocapitalizeEnumWords      AsideAutocapitalizeEnum = "words"
	AsideAutocapitalizeEnumCharacters AsideAutocapitalizeEnum = "characters"
)

type AsideAutocorrectEnum string

const (
	AsideAutocorrectEnumOff   AsideAutocorrectEnum = "off"
	AsideAutocorrectEnumOn    AsideAutocorrectEnum = "on"
	AsideAutocorrectEnumEmpty AsideAutocorrectEnum = ""
)

type AsideContenteditableEnum string

const (
	AsideContenteditableEnumFalse         AsideContenteditableEnum = "false"
	AsideContenteditableEnumPlaintextOnly AsideContenteditableEnum = "plaintext-only"
	AsideContenteditableEnumTrue          AsideContenteditableEnum = "true"
	AsideContenteditableEnumEmpty         AsideContenteditableEnum = ""
)

type AsideDirEnum string

const (
	AsideDirEnumAuto AsideDirEnum = "auto"
	AsideDirEnumLtr  AsideDirEnum = "ltr"
	AsideDirEnumRtl  AsideDirEnum = "rtl"
)

type AsideDraggableEnum string

const (
	AsideDraggableEnumFalse AsideDraggableEnum = "false"
	AsideDraggableEnumTrue  AsideDraggableEnum = "true"
)

type AsideEnterkeyhintEnum string

const (
	AsideEnterkeyhintEnumSend     AsideEnterkeyhintEnum = "send"
	AsideEnterkeyhintEnumDone     AsideEnterkeyhintEnum = "done"
	AsideEnterkeyhintEnumEnter    AsideEnterkeyhintEnum = "enter"
	AsideEnterkeyhintEnumGo       AsideEnterkeyhintEnum = "go"
	AsideEnterkeyhintEnumNext     AsideEnterkeyhintEnum = "next"
	AsideEnterkeyhintEnumPrevious AsideEnterkeyhintEnum = "previous"
	AsideEnterkeyhintEnumSearch   AsideEnterkeyhintEnum = "search"
)

type AsideHiddenEnum string

const (
	AsideHiddenEnumHidden     AsideHiddenEnum = "hidden"
	AsideHiddenEnumUntilFound AsideHiddenEnum = "until-found"
	AsideHiddenEnumEmpty      AsideHiddenEnum = ""
)

type AsideInputmodeEnum string

const (
	AsideInputmodeEnumDecimal AsideInputmodeEnum = "decimal"
	AsideInputmodeEnumEmail   AsideInputmodeEnum = "email"
	AsideInputmodeEnumNone    AsideInputmodeEnum = "none"
	AsideInputmodeEnumNumeric AsideInputmodeEnum = "numeric"
	AsideInputmodeEnumSearch  AsideInputmodeEnum = "search"
	AsideInputmodeEnumTel     AsideInputmodeEnum = "tel"
	AsideInputmodeEnumText    AsideInputmodeEnum = "text"
	AsideInputmodeEnumUrl     AsideInputmodeEnum = "url"
)

type AsideSpellcheckEnum string

const (
	AsideSpellcheckEnumFalse AsideSpellcheckEnum = "false"
	AsideSpellcheckEnumTrue  AsideSpellcheckEnum = "true"
	AsideSpellcheckEnumEmpty AsideSpellcheckEnum = ""
)

type AsideTranslateEnum string

const (
	AsideTranslateEnumNo    AsideTranslateEnum = "no"
	AsideTranslateEnumYes   AsideTranslateEnum = "yes"
	AsideTranslateEnumEmpty AsideTranslateEnum = ""
)

type AsideWritingsuggestionsEnum string

const (
	AsideWritingsuggestionsEnumFalse AsideWritingsuggestionsEnum = "false"
	AsideWritingsuggestionsEnumTrue  AsideWritingsuggestionsEnum = "true"
	AsideWritingsuggestionsEnumEmpty AsideWritingsuggestionsEnum = ""
)

type asideAttrs map[string]any

func (e *AsideElement) Autocapitalize(a AsideAutocapitalizeEnum) *AsideElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *AsideElement) Autocorrect(a AsideAutocorrectEnum) *AsideElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *AsideElement) Autofocus(b bool) *AsideElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *AsideElement) Class(s ...string) *AsideElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *AsideElement) Contenteditable(a AsideContenteditableEnum) *AsideElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *AsideElement) DataUnsafe(name string, s string) *AsideElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *AsideElement) Data(name string, s string) *AsideElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *AsideElement) Dir(a AsideDirEnum) *AsideElement {
	e.attributes["dir"] = a

	return e
}

func (e *AsideElement) Draggable(a AsideDraggableEnum) *AsideElement {
	e.attributes["draggable"] = a

	return e
}

func (e *AsideElement) Enterkeyhint(a AsideEnterkeyhintEnum) *AsideElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *AsideElement) Hidden(a AsideHiddenEnum) *AsideElement {
	e.attributes["hidden"] = a

	return e
}

func (e *AsideElement) Id(s string) *AsideElement {
	e.attributes["id"] = s

	return e
}

func (e *AsideElement) Inert(b bool) *AsideElement {
	e.attributes["inert"] = b

	return e
}

func (e *AsideElement) Inputmode(a AsideInputmodeEnum) *AsideElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *AsideElement) Itemid(s string) *AsideElement {
	e.attributes["itemid"] = s

	return e
}

func (e *AsideElement) Itemprop(s ...string) *AsideElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *AsideElement) Itemref(s ...string) *AsideElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *AsideElement) Itemscope(b bool) *AsideElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *AsideElement) Itemtype(s ...string) *AsideElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *AsideElement) Lang(s string) *AsideElement {
	e.attributes["lang"] = s

	return e
}

func (e *AsideElement) Nonce(s string) *AsideElement {
	e.attributes["nonce"] = s

	return e
}

func (e *AsideElement) Popover(s string) *AsideElement {
	e.attributes["popover"] = s

	return e
}

func (e *AsideElement) Slot(s string) *AsideElement {
	e.attributes["slot"] = s

	return e
}

func (e *AsideElement) Spellcheck(a AsideSpellcheckEnum) *AsideElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *AsideElement) Style(s string) *AsideElement {
	e.attributes["style"] = s

	return e
}

func (e *AsideElement) Tabindex(i int) *AsideElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *AsideElement) Title(s string) *AsideElement {
	e.attributes["title"] = s

	return e
}

func (e *AsideElement) Translate(a AsideTranslateEnum) *AsideElement {
	e.attributes["translate"] = a

	return e
}

func (e *AsideElement) Writingsuggestions(a AsideWritingsuggestionsEnum) *AsideElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *AsideElement) Render(w io.Writer) error {
	indent := htemel.SetIndent(e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<aside")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}
	for _, child := range e.children {
		child.AddIndent(e.Indent())
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(indent + "</aside>\n")); err != nil {
		return err
	}

	return nil
}
