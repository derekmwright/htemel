// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type AsideElement struct {
	attributes asideAttrs
	children   []htemel.Node
	skipRender bool
}

// Aside creates a tag <aside> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The aside element represents a section of a page that consists of content that is tangentially related to the content around the aside element, and which could be considered separate from that content. Such sections are often represented as sidebars in printed typography.
func Aside(children ...htemel.Node) *AsideElement {
	node := &AsideElement{
		children:   children,
		attributes: make(asideAttrs),
	}

	return node
}

func AsideIf(condition bool, children ...htemel.Node) *AsideElement {
	if condition {
		return Aside(children...)
	}

	return &AsideElement{
		skipRender: true,
	}
}

type AsideAutocapitalizeAttrEnum string

const (
	AsideAutocapitalizeAttrEnumSentences  AsideAutocapitalizeAttrEnum = "sentences"
	AsideAutocapitalizeAttrEnumWords      AsideAutocapitalizeAttrEnum = "words"
	AsideAutocapitalizeAttrEnumCharacters AsideAutocapitalizeAttrEnum = "characters"
	AsideAutocapitalizeAttrEnumNone       AsideAutocapitalizeAttrEnum = "none"
	AsideAutocapitalizeAttrEnumOff        AsideAutocapitalizeAttrEnum = "off"
	AsideAutocapitalizeAttrEnumOn         AsideAutocapitalizeAttrEnum = "on"
)

type AsideAutocorrectAttrEnum string

const (
	AsideAutocorrectAttrEnumOff AsideAutocorrectAttrEnum = "off"
	AsideAutocorrectAttrEnumOn  AsideAutocorrectAttrEnum = "on"
)

type AsideContenteditableAttrEnum string

const (
	AsideContenteditableAttrEnumFalse         AsideContenteditableAttrEnum = "false"
	AsideContenteditableAttrEnumPlaintextOnly AsideContenteditableAttrEnum = "plaintext-only"
	AsideContenteditableAttrEnumTrue          AsideContenteditableAttrEnum = "true"
)

type asideAttrs map[string]any

func (e *AsideElement) Autocapitalize(a AsideAutocapitalizeAttrEnum) *AsideElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *AsideElement) Autocorrect(a AsideAutocorrectAttrEnum) *AsideElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *AsideElement) Autofocus(b bool) *AsideElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *AsideElement) Class(s ...string) *AsideElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *AsideElement) Contenteditable(a AsideContenteditableAttrEnum) *AsideElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *AsideElement) Id(s string) *AsideElement {
	e.attributes["id"] = s

	return e
}

func (e *AsideElement) Slot(s string) *AsideElement {
	e.attributes["slot"] = s

	return e
}

func (e *AsideElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<aside")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</aside>")); err != nil {
		return err
	}

	return nil
}
