// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type FigureElement struct {
	attributes figureAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// Figure creates a tag <figure> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The figure element represents some flow content, optionally with a caption, that is self-contained (like a complete sentence) and is typically referenced as a single unit from the main flow of the document.
func Figure(children ...htemel.Node) *FigureElement {
	node := &FigureElement{
		children: children, attributes: make(figureAttrs),
	}

	return node
}

func FigureIf(condition bool, children ...htemel.Node) *FigureElement {
	if condition {
		return Figure(children...)
	}

	return &FigureElement{
		skipRender: true,
	}
}

func FigureTernary(condition bool, true htemel.Node, false htemel.Node) *FigureElement {
	if condition {
		return Figure(true)
	}

	return Figure(false)
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *FigureElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *FigureElement) AddIndent(i int) {
	e.indent = i + 1
}

type FigureAutocapitalizeEnum string

const (
	FigureAutocapitalizeEnumCharacters FigureAutocapitalizeEnum = "characters"
	FigureAutocapitalizeEnumNone       FigureAutocapitalizeEnum = "none"
	FigureAutocapitalizeEnumOff        FigureAutocapitalizeEnum = "off"
	FigureAutocapitalizeEnumOn         FigureAutocapitalizeEnum = "on"
	FigureAutocapitalizeEnumSentences  FigureAutocapitalizeEnum = "sentences"
	FigureAutocapitalizeEnumWords      FigureAutocapitalizeEnum = "words"
)

type FigureAutocorrectEnum string

const (
	FigureAutocorrectEnumOff   FigureAutocorrectEnum = "off"
	FigureAutocorrectEnumOn    FigureAutocorrectEnum = "on"
	FigureAutocorrectEnumEmpty FigureAutocorrectEnum = ""
)

type FigureContenteditableEnum string

const (
	FigureContenteditableEnumFalse         FigureContenteditableEnum = "false"
	FigureContenteditableEnumPlaintextOnly FigureContenteditableEnum = "plaintext-only"
	FigureContenteditableEnumTrue          FigureContenteditableEnum = "true"
	FigureContenteditableEnumEmpty         FigureContenteditableEnum = ""
)

type FigureDirEnum string

const (
	FigureDirEnumAuto FigureDirEnum = "auto"
	FigureDirEnumLtr  FigureDirEnum = "ltr"
	FigureDirEnumRtl  FigureDirEnum = "rtl"
)

type FigureDraggableEnum string

const (
	FigureDraggableEnumFalse FigureDraggableEnum = "false"
	FigureDraggableEnumTrue  FigureDraggableEnum = "true"
)

type FigureEnterkeyhintEnum string

const (
	FigureEnterkeyhintEnumSend     FigureEnterkeyhintEnum = "send"
	FigureEnterkeyhintEnumDone     FigureEnterkeyhintEnum = "done"
	FigureEnterkeyhintEnumEnter    FigureEnterkeyhintEnum = "enter"
	FigureEnterkeyhintEnumGo       FigureEnterkeyhintEnum = "go"
	FigureEnterkeyhintEnumNext     FigureEnterkeyhintEnum = "next"
	FigureEnterkeyhintEnumPrevious FigureEnterkeyhintEnum = "previous"
	FigureEnterkeyhintEnumSearch   FigureEnterkeyhintEnum = "search"
)

type FigureHiddenEnum string

const (
	FigureHiddenEnumUntilFound FigureHiddenEnum = "until-found"
	FigureHiddenEnumHidden     FigureHiddenEnum = "hidden"
	FigureHiddenEnumEmpty      FigureHiddenEnum = ""
)

type FigureInputmodeEnum string

const (
	FigureInputmodeEnumTel     FigureInputmodeEnum = "tel"
	FigureInputmodeEnumText    FigureInputmodeEnum = "text"
	FigureInputmodeEnumUrl     FigureInputmodeEnum = "url"
	FigureInputmodeEnumDecimal FigureInputmodeEnum = "decimal"
	FigureInputmodeEnumEmail   FigureInputmodeEnum = "email"
	FigureInputmodeEnumNone    FigureInputmodeEnum = "none"
	FigureInputmodeEnumNumeric FigureInputmodeEnum = "numeric"
	FigureInputmodeEnumSearch  FigureInputmodeEnum = "search"
)

type FigureSpellcheckEnum string

const (
	FigureSpellcheckEnumFalse FigureSpellcheckEnum = "false"
	FigureSpellcheckEnumTrue  FigureSpellcheckEnum = "true"
	FigureSpellcheckEnumEmpty FigureSpellcheckEnum = ""
)

type FigureTranslateEnum string

const (
	FigureTranslateEnumNo    FigureTranslateEnum = "no"
	FigureTranslateEnumYes   FigureTranslateEnum = "yes"
	FigureTranslateEnumEmpty FigureTranslateEnum = ""
)

type FigureWritingsuggestionsEnum string

const (
	FigureWritingsuggestionsEnumFalse FigureWritingsuggestionsEnum = "false"
	FigureWritingsuggestionsEnumTrue  FigureWritingsuggestionsEnum = "true"
	FigureWritingsuggestionsEnumEmpty FigureWritingsuggestionsEnum = ""
)

type figureAttrs map[string]any

func (e *FigureElement) Autocapitalize(a FigureAutocapitalizeEnum) *FigureElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *FigureElement) Autocorrect(a FigureAutocorrectEnum) *FigureElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *FigureElement) Autofocus(b bool) *FigureElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *FigureElement) Class(s ...string) *FigureElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *FigureElement) Contenteditable(a FigureContenteditableEnum) *FigureElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *FigureElement) DataUnsafe(name string, s string) *FigureElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *FigureElement) Data(name string, s string) *FigureElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *FigureElement) Dir(a FigureDirEnum) *FigureElement {
	e.attributes["dir"] = a

	return e
}

func (e *FigureElement) Draggable(a FigureDraggableEnum) *FigureElement {
	e.attributes["draggable"] = a

	return e
}

func (e *FigureElement) Enterkeyhint(a FigureEnterkeyhintEnum) *FigureElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *FigureElement) Hidden(a FigureHiddenEnum) *FigureElement {
	e.attributes["hidden"] = a

	return e
}

func (e *FigureElement) Id(s string) *FigureElement {
	e.attributes["id"] = s

	return e
}

func (e *FigureElement) Inert(b bool) *FigureElement {
	e.attributes["inert"] = b

	return e
}

func (e *FigureElement) Inputmode(a FigureInputmodeEnum) *FigureElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *FigureElement) Itemid(s string) *FigureElement {
	e.attributes["itemid"] = s

	return e
}

func (e *FigureElement) Itemprop(s ...string) *FigureElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *FigureElement) Itemref(s ...string) *FigureElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *FigureElement) Itemscope(b bool) *FigureElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *FigureElement) Itemtype(s ...string) *FigureElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *FigureElement) Lang(s string) *FigureElement {
	e.attributes["lang"] = s

	return e
}

func (e *FigureElement) Nonce(s string) *FigureElement {
	e.attributes["nonce"] = s

	return e
}

func (e *FigureElement) Popover(s string) *FigureElement {
	e.attributes["popover"] = s

	return e
}

func (e *FigureElement) Slot(s string) *FigureElement {
	e.attributes["slot"] = s

	return e
}

func (e *FigureElement) Spellcheck(a FigureSpellcheckEnum) *FigureElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *FigureElement) Style(s string) *FigureElement {
	e.attributes["style"] = s

	return e
}

func (e *FigureElement) Tabindex(i int) *FigureElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *FigureElement) Title(s string) *FigureElement {
	e.attributes["title"] = s

	return e
}

func (e *FigureElement) Translate(a FigureTranslateEnum) *FigureElement {
	e.attributes["translate"] = a

	return e
}

func (e *FigureElement) Writingsuggestions(a FigureWritingsuggestionsEnum) *FigureElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *FigureElement) Render(w io.Writer) error {
	indent := htemel.SetIndent(e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<figure")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}
	for _, child := range e.children {
		child.AddIndent(e.Indent())
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(indent + "</figure>\n")); err != nil {
		return err
	}

	return nil
}
