// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type FigureElement struct {
	attributes figureAttrs
	children []htemel.Node
	skipRender bool
}

// Figure creates a tag <figure> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The figure element represents some flow content, optionally with a caption, that is self-contained (like a complete sentence) and is typically referenced as a single unit from the main flow of the document.
func Figure(children ...htemel.Node) *FigureElement {
	node := &FigureElement{
		children: children,
		attributes: make(figureAttrs),
	}

	return node
}

func FigureIf(condition bool, children ...htemel.Node) *FigureElement {
	if condition {
		return Figure(children...)
	}

	return &FigureElement{
		skipRender: true,
	}
}

type FigureAutocapitalizeEnum string

const (
	FigureAutocapitalizeEnumSentences FigureAutocapitalizeEnum = "sentences"
	FigureAutocapitalizeEnumWords FigureAutocapitalizeEnum = "words"
	FigureAutocapitalizeEnumCharacters FigureAutocapitalizeEnum = "characters"
	FigureAutocapitalizeEnumNone FigureAutocapitalizeEnum = "none"
	FigureAutocapitalizeEnumOff FigureAutocapitalizeEnum = "off"
	FigureAutocapitalizeEnumOn FigureAutocapitalizeEnum = "on"
)

type FigureAutocorrectEnum string

const (
	FigureAutocorrectEnumOff FigureAutocorrectEnum = "off"
	FigureAutocorrectEnumOn FigureAutocorrectEnum = "on"
)

type FigureContenteditableEnum string

const (
	FigureContenteditableEnumFalse FigureContenteditableEnum = "false"
	FigureContenteditableEnumPlaintextOnly FigureContenteditableEnum = "plaintext-only"
	FigureContenteditableEnumTrue FigureContenteditableEnum = "true"
)

type FigureDirEnum string

const (
	FigureDirEnumAuto FigureDirEnum = "auto"
	FigureDirEnumLtr FigureDirEnum = "ltr"
	FigureDirEnumRtl FigureDirEnum = "rtl"
)

type FigureDraggableEnum string

const (
	FigureDraggableEnumFalse FigureDraggableEnum = "false"
	FigureDraggableEnumTrue FigureDraggableEnum = "true"
)

type FigureEnterkeyhintEnum string

const (
	FigureEnterkeyhintEnumEnter FigureEnterkeyhintEnum = "enter"
	FigureEnterkeyhintEnumGo FigureEnterkeyhintEnum = "go"
	FigureEnterkeyhintEnumNext FigureEnterkeyhintEnum = "next"
	FigureEnterkeyhintEnumPrevious FigureEnterkeyhintEnum = "previous"
	FigureEnterkeyhintEnumSearch FigureEnterkeyhintEnum = "search"
	FigureEnterkeyhintEnumSend FigureEnterkeyhintEnum = "send"
	FigureEnterkeyhintEnumDone FigureEnterkeyhintEnum = "done"
)

type FigureHiddenEnum string

const (
	FigureHiddenEnumHidden FigureHiddenEnum = "hidden"
	FigureHiddenEnumUntilFound FigureHiddenEnum = "until-found"
)

type figureAttrs map[string]any

func (e *FigureElement) Autocapitalize(a FigureAutocapitalizeEnum) *FigureElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *FigureElement) Autocorrect(a FigureAutocorrectEnum) *FigureElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *FigureElement) Autofocus(b bool) *FigureElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *FigureElement) Class(s ...string) *FigureElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *FigureElement) Contenteditable(a FigureContenteditableEnum) *FigureElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *FigureElement) Dir(a FigureDirEnum) *FigureElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *FigureElement) Draggable(a FigureDraggableEnum) *FigureElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *FigureElement) Enterkeyhint(a FigureEnterkeyhintEnum) *FigureElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *FigureElement) Hidden(a FigureHiddenEnum) *FigureElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *FigureElement) Id(s string) *FigureElement {
	e.attributes["id"] = s
	
	return e
}

func (e *FigureElement) Slot(s string) *FigureElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *FigureElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<figure")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</figure>")); err != nil {
		return err
	}

	return nil
}
