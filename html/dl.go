// Code generated by htemel. DO NOT EDIT.
package html

import (
  "github.com/derekmwright/htemel"
  "io"
)

type DlElement struct {
	children []htemel.Node
	skipRender bool
}

// Dl creates a tag <dl> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The dl element represents an association list consisting of zero or more name-value groups (a description list). A name-value group consists of one or more names (dt elements, possibly as children of a div element child) followed by one or more values (dd elements, possibly as children of a div element child), ignoring any nodes other than dt and dd element children, and dt and dd elements that are children of div element children. Within a single dl element, there should not be more than one dt element for each name.
func Dl(children ...htemel.Node) *DlElement {
	node := &DlElement{
		children: children,
	}

	return node
}

func DlIf(condition bool, children ...htemel.Node) *DlElement {
	if condition {
		return Dl(children...)
	}

	return &DlElement{
		skipRender: true,
	}
}

func (e *DlElement) Autocapitalize() *DlElement {
	return e
}

func (e *DlElement) Autocorrect() *DlElement {
	return e
}

func (e *DlElement) Autofocus() *DlElement {
	return e
}

func (e *DlElement) Class() *DlElement {
	return e
}

func (e *DlElement) Contenteditable() *DlElement {
	return e
}

func (e *DlElement) Id() *DlElement {
	return e
}

func (e *DlElement) Slot() *DlElement {
	return e
}

func (e *DlElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<dl")); err != nil {
		return err
	}

	// TODO: Attribute stuff here

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</dl>")); err != nil {
		return err
	}

	return nil
}
