// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
)

type DlElement struct {
	attributes dlAttrs
	children []htemel.Node
	skipRender bool
}

// Dl creates a tag <dl> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The dl element represents an association list consisting of zero or more name-value groups (a description list). A name-value group consists of one or more names (dt elements, possibly as children of a div element child) followed by one or more values (dd elements, possibly as children of a div element child), ignoring any nodes other than dt and dd element children, and dt and dd elements that are children of div element children. Within a single dl element, there should not be more than one dt element for each name.
func Dl(children ...htemel.Node) *DlElement {
	node := &DlElement{
		children: children,
	}

	return node
}

func DlIf(condition bool, children ...htemel.Node) *DlElement {
	if condition {
		return Dl(children...)
	}

	return &DlElement{
		skipRender: true,
	}
}

type DlAutocapitalizeAttrEnum string

const (
	DlAutocapitalizeAttrEnumCharacters DlAutocapitalizeAttrEnum = "characters"
	DlAutocapitalizeAttrEnumNone DlAutocapitalizeAttrEnum = "none"
	DlAutocapitalizeAttrEnumOff DlAutocapitalizeAttrEnum = "off"
	DlAutocapitalizeAttrEnumOn DlAutocapitalizeAttrEnum = "on"
	DlAutocapitalizeAttrEnumSentences DlAutocapitalizeAttrEnum = "sentences"
	DlAutocapitalizeAttrEnumWords DlAutocapitalizeAttrEnum = "words"
)

type DlAutocorrectAttrEnum string

const (
	DlAutocorrectAttrEnumOff DlAutocorrectAttrEnum = "off"
	DlAutocorrectAttrEnumOn DlAutocorrectAttrEnum = "on"
)

type DlContenteditableAttrEnum string

const (
	DlContenteditableAttrEnumFalse DlContenteditableAttrEnum = "false"
	DlContenteditableAttrEnumPlaintextOnly DlContenteditableAttrEnum = "plaintext-only"
	DlContenteditableAttrEnumTrue DlContenteditableAttrEnum = "true"
)

type dlAttrs map[string]any

func (e *DlElement) Autocapitalize(a DlAutocapitalizeAttrEnum) *DlElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *DlElement) Autocorrect(a DlAutocorrectAttrEnum) *DlElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *DlElement) Class(s ...string) *DlElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *DlElement) Contenteditable(a DlContenteditableAttrEnum) *DlElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *DlElement) Id(s string) *DlElement {
	e.attributes["id"] = s
	
	return e
}

func (e *DlElement) Slot(s string) *DlElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *DlElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<dl")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 0
	for key, v := range e.attributes {
		w.Write([]byte(key + "="))
		w.Write([]byte(html.EscapeString(fmt.Sprintf("'%v'", v))))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</dl>")); err != nil {
		return err
	}

	return nil
}
