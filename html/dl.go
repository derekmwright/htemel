// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type DlElement struct {
	attributes dlAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// Dl creates a tag <dl> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The dl element represents an association list consisting of zero or more name-value groups (a description list). A name-value group consists of one or more names (dt elements, possibly as children of a div element child) followed by one or more values (dd elements, possibly as children of a div element child), ignoring any nodes other than dt and dd element children, and dt and dd elements that are children of div element children. Within a single dl element, there should not be more than one dt element for each name.
func Dl(children ...htemel.Node) *DlElement {
	node := &DlElement{
		children: children, attributes: make(dlAttrs),
	}

	return node
}

func DlIf(condition bool, children ...htemel.Node) *DlElement {
	if condition {
		return Dl(children...)
	}

	return &DlElement{
		skipRender: true,
	}
}

func DlTernary(condition bool, true htemel.Node, false htemel.Node) *DlElement {
	if condition {
		return Dl(true)
	}

	return Dl(false)
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *DlElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *DlElement) AddIndent(i int) {
	e.indent = i + 1
}

type DlAutocapitalizeEnum string

const (
	DlAutocapitalizeEnumCharacters DlAutocapitalizeEnum = "characters"
	DlAutocapitalizeEnumNone       DlAutocapitalizeEnum = "none"
	DlAutocapitalizeEnumOff        DlAutocapitalizeEnum = "off"
	DlAutocapitalizeEnumOn         DlAutocapitalizeEnum = "on"
	DlAutocapitalizeEnumSentences  DlAutocapitalizeEnum = "sentences"
	DlAutocapitalizeEnumWords      DlAutocapitalizeEnum = "words"
)

type DlAutocorrectEnum string

const (
	DlAutocorrectEnumOff   DlAutocorrectEnum = "off"
	DlAutocorrectEnumOn    DlAutocorrectEnum = "on"
	DlAutocorrectEnumEmpty DlAutocorrectEnum = ""
)

type DlContenteditableEnum string

const (
	DlContenteditableEnumFalse         DlContenteditableEnum = "false"
	DlContenteditableEnumPlaintextOnly DlContenteditableEnum = "plaintext-only"
	DlContenteditableEnumTrue          DlContenteditableEnum = "true"
	DlContenteditableEnumEmpty         DlContenteditableEnum = ""
)

type DlDirEnum string

const (
	DlDirEnumAuto DlDirEnum = "auto"
	DlDirEnumLtr  DlDirEnum = "ltr"
	DlDirEnumRtl  DlDirEnum = "rtl"
)

type DlDraggableEnum string

const (
	DlDraggableEnumFalse DlDraggableEnum = "false"
	DlDraggableEnumTrue  DlDraggableEnum = "true"
)

type DlEnterkeyhintEnum string

const (
	DlEnterkeyhintEnumSend     DlEnterkeyhintEnum = "send"
	DlEnterkeyhintEnumDone     DlEnterkeyhintEnum = "done"
	DlEnterkeyhintEnumEnter    DlEnterkeyhintEnum = "enter"
	DlEnterkeyhintEnumGo       DlEnterkeyhintEnum = "go"
	DlEnterkeyhintEnumNext     DlEnterkeyhintEnum = "next"
	DlEnterkeyhintEnumPrevious DlEnterkeyhintEnum = "previous"
	DlEnterkeyhintEnumSearch   DlEnterkeyhintEnum = "search"
)

type DlHiddenEnum string

const (
	DlHiddenEnumHidden     DlHiddenEnum = "hidden"
	DlHiddenEnumUntilFound DlHiddenEnum = "until-found"
	DlHiddenEnumEmpty      DlHiddenEnum = ""
)

type DlInputmodeEnum string

const (
	DlInputmodeEnumNumeric DlInputmodeEnum = "numeric"
	DlInputmodeEnumSearch  DlInputmodeEnum = "search"
	DlInputmodeEnumTel     DlInputmodeEnum = "tel"
	DlInputmodeEnumText    DlInputmodeEnum = "text"
	DlInputmodeEnumUrl     DlInputmodeEnum = "url"
	DlInputmodeEnumDecimal DlInputmodeEnum = "decimal"
	DlInputmodeEnumEmail   DlInputmodeEnum = "email"
	DlInputmodeEnumNone    DlInputmodeEnum = "none"
)

type DlSpellcheckEnum string

const (
	DlSpellcheckEnumFalse DlSpellcheckEnum = "false"
	DlSpellcheckEnumTrue  DlSpellcheckEnum = "true"
	DlSpellcheckEnumEmpty DlSpellcheckEnum = ""
)

type DlTranslateEnum string

const (
	DlTranslateEnumNo    DlTranslateEnum = "no"
	DlTranslateEnumYes   DlTranslateEnum = "yes"
	DlTranslateEnumEmpty DlTranslateEnum = ""
)

type DlWritingsuggestionsEnum string

const (
	DlWritingsuggestionsEnumFalse DlWritingsuggestionsEnum = "false"
	DlWritingsuggestionsEnumTrue  DlWritingsuggestionsEnum = "true"
	DlWritingsuggestionsEnumEmpty DlWritingsuggestionsEnum = ""
)

type dlAttrs map[string]any

func (e *DlElement) Autocapitalize(a DlAutocapitalizeEnum) *DlElement {
	e.attributes["autocapitalize"] = a

	return e
}

func DlAutocapitalizeCustom(s string) DlAutocapitalizeEnum {
	return DlAutocapitalizeEnum(s)
}

func (e *DlElement) Autocorrect(a DlAutocorrectEnum) *DlElement {
	e.attributes["autocorrect"] = a

	return e
}

func DlAutocorrectCustom(s string) DlAutocorrectEnum {
	return DlAutocorrectEnum(s)
}

func (e *DlElement) Autofocus(b bool) *DlElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *DlElement) Class(s ...string) *DlElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *DlElement) Contenteditable(a DlContenteditableEnum) *DlElement {
	e.attributes["contenteditable"] = a

	return e
}

func DlContenteditableCustom(s string) DlContenteditableEnum {
	return DlContenteditableEnum(s)
}

func (e *DlElement) DataUnsafe(name string, s string) *DlElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *DlElement) Data(name string, s string) *DlElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *DlElement) Dir(a DlDirEnum) *DlElement {
	e.attributes["dir"] = a

	return e
}

func DlDirCustom(s string) DlDirEnum {
	return DlDirEnum(s)
}

func (e *DlElement) Draggable(a DlDraggableEnum) *DlElement {
	e.attributes["draggable"] = a

	return e
}

func DlDraggableCustom(s string) DlDraggableEnum {
	return DlDraggableEnum(s)
}

func (e *DlElement) Enterkeyhint(a DlEnterkeyhintEnum) *DlElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func DlEnterkeyhintCustom(s string) DlEnterkeyhintEnum {
	return DlEnterkeyhintEnum(s)
}

func (e *DlElement) Hidden(a DlHiddenEnum) *DlElement {
	e.attributes["hidden"] = a

	return e
}

func DlHiddenCustom(s string) DlHiddenEnum {
	return DlHiddenEnum(s)
}

func (e *DlElement) Id(s string) *DlElement {
	e.attributes["id"] = s

	return e
}

func (e *DlElement) Inert(b bool) *DlElement {
	e.attributes["inert"] = b

	return e
}

func (e *DlElement) Inputmode(a DlInputmodeEnum) *DlElement {
	e.attributes["inputmode"] = a

	return e
}

func DlInputmodeCustom(s string) DlInputmodeEnum {
	return DlInputmodeEnum(s)
}

func (e *DlElement) Itemid(s string) *DlElement {
	e.attributes["itemid"] = s

	return e
}

func (e *DlElement) Itemprop(s ...string) *DlElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *DlElement) Itemref(s ...string) *DlElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *DlElement) Itemscope(b bool) *DlElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *DlElement) Itemtype(s ...string) *DlElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *DlElement) Lang(s string) *DlElement {
	e.attributes["lang"] = s

	return e
}

func (e *DlElement) Nonce(s string) *DlElement {
	e.attributes["nonce"] = s

	return e
}

func (e *DlElement) Popover(s string) *DlElement {
	e.attributes["popover"] = s

	return e
}

func (e *DlElement) Slot(s string) *DlElement {
	e.attributes["slot"] = s

	return e
}

func (e *DlElement) Spellcheck(a DlSpellcheckEnum) *DlElement {
	e.attributes["spellcheck"] = a

	return e
}

func DlSpellcheckCustom(s string) DlSpellcheckEnum {
	return DlSpellcheckEnum(s)
}

func (e *DlElement) Style(s string) *DlElement {
	e.attributes["style"] = s

	return e
}

func (e *DlElement) Tabindex(i int) *DlElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *DlElement) Title(s string) *DlElement {
	e.attributes["title"] = s

	return e
}

func (e *DlElement) Translate(a DlTranslateEnum) *DlElement {
	e.attributes["translate"] = a

	return e
}

func DlTranslateCustom(s string) DlTranslateEnum {
	return DlTranslateEnum(s)
}

func (e *DlElement) Writingsuggestions(a DlWritingsuggestionsEnum) *DlElement {
	e.attributes["writingsuggestions"] = a

	return e
}

func DlWritingsuggestionsCustom(s string) DlWritingsuggestionsEnum {
	return DlWritingsuggestionsEnum(s)
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *DlElement) Render(w io.Writer) error {
	indent := htemel.SetIndent(e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<dl")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}
	for _, child := range e.children {
		child.AddIndent(e.Indent())
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(indent + "</dl>\n")); err != nil {
		return err
	}

	return nil
}
