// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type ScriptElement struct {
	attributes scriptAttrs
	children   []htemel.Node
	skipRender bool
}

// Script creates a tag <script> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The script element allows authors to include dynamic script, instructions to the user agent, and data blocks in their documents. The element does not represent content for the user.
func Script(children ...htemel.Node) *ScriptElement {
	node := &ScriptElement{
		children:   children,
		attributes: make(scriptAttrs),
	}

	return node
}

func ScriptIf(condition bool, children ...htemel.Node) *ScriptElement {
	if condition {
		return Script(children...)
	}

	return &ScriptElement{
		skipRender: true,
	}
}

type ScriptAutocapitalizeAttrEnum string

const (
	ScriptAutocapitalizeAttrEnumNone       ScriptAutocapitalizeAttrEnum = "none"
	ScriptAutocapitalizeAttrEnumOff        ScriptAutocapitalizeAttrEnum = "off"
	ScriptAutocapitalizeAttrEnumOn         ScriptAutocapitalizeAttrEnum = "on"
	ScriptAutocapitalizeAttrEnumSentences  ScriptAutocapitalizeAttrEnum = "sentences"
	ScriptAutocapitalizeAttrEnumWords      ScriptAutocapitalizeAttrEnum = "words"
	ScriptAutocapitalizeAttrEnumCharacters ScriptAutocapitalizeAttrEnum = "characters"
)

type ScriptAutocorrectAttrEnum string

const (
	ScriptAutocorrectAttrEnumOff ScriptAutocorrectAttrEnum = "off"
	ScriptAutocorrectAttrEnumOn  ScriptAutocorrectAttrEnum = "on"
)

type ScriptContenteditableAttrEnum string

const (
	ScriptContenteditableAttrEnumFalse         ScriptContenteditableAttrEnum = "false"
	ScriptContenteditableAttrEnumPlaintextOnly ScriptContenteditableAttrEnum = "plaintext-only"
	ScriptContenteditableAttrEnumTrue          ScriptContenteditableAttrEnum = "true"
)

type scriptAttrs map[string]any

func (e *ScriptElement) Autocapitalize(a ScriptAutocapitalizeAttrEnum) *ScriptElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *ScriptElement) Autocorrect(a ScriptAutocorrectAttrEnum) *ScriptElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *ScriptElement) Autofocus(b bool) *ScriptElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *ScriptElement) Class(s ...string) *ScriptElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *ScriptElement) Contenteditable(a ScriptContenteditableAttrEnum) *ScriptElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *ScriptElement) Id(s string) *ScriptElement {
	e.attributes["id"] = s

	return e
}

func (e *ScriptElement) Slot(s string) *ScriptElement {
	e.attributes["slot"] = s

	return e
}

func (e *ScriptElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<script")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</script>")); err != nil {
		return err
	}

	return nil
}
