// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type ScriptElement struct {
	attributes scriptAttrs
	children []htemel.Node
	skipRender bool
}

// Script creates a tag <script> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The script element allows authors to include dynamic script, instructions to the user agent, and data blocks in their documents. The element does not represent content for the user.
func Script(children ...htemel.Node) *ScriptElement {
	node := &ScriptElement{
		children: children,
		attributes: make(scriptAttrs),
	}

	return node
}

func ScriptIf(condition bool, children ...htemel.Node) *ScriptElement {
	if condition {
		return Script(children...)
	}

	return &ScriptElement{
		skipRender: true,
	}
}

type ScriptAutocapitalizeEnum string

const (
	ScriptAutocapitalizeEnumSentences ScriptAutocapitalizeEnum = "sentences"
	ScriptAutocapitalizeEnumWords ScriptAutocapitalizeEnum = "words"
	ScriptAutocapitalizeEnumCharacters ScriptAutocapitalizeEnum = "characters"
	ScriptAutocapitalizeEnumNone ScriptAutocapitalizeEnum = "none"
	ScriptAutocapitalizeEnumOff ScriptAutocapitalizeEnum = "off"
	ScriptAutocapitalizeEnumOn ScriptAutocapitalizeEnum = "on"
)

type ScriptAutocorrectEnum string

const (
	ScriptAutocorrectEnumOff ScriptAutocorrectEnum = "off"
	ScriptAutocorrectEnumOn ScriptAutocorrectEnum = "on"
)

type ScriptContenteditableEnum string

const (
	ScriptContenteditableEnumPlaintextOnly ScriptContenteditableEnum = "plaintext-only"
	ScriptContenteditableEnumTrue ScriptContenteditableEnum = "true"
	ScriptContenteditableEnumFalse ScriptContenteditableEnum = "false"
)

type ScriptDirEnum string

const (
	ScriptDirEnumAuto ScriptDirEnum = "auto"
	ScriptDirEnumLtr ScriptDirEnum = "ltr"
	ScriptDirEnumRtl ScriptDirEnum = "rtl"
)

type ScriptDraggableEnum string

const (
	ScriptDraggableEnumFalse ScriptDraggableEnum = "false"
	ScriptDraggableEnumTrue ScriptDraggableEnum = "true"
)

type ScriptEnterkeyhintEnum string

const (
	ScriptEnterkeyhintEnumDone ScriptEnterkeyhintEnum = "done"
	ScriptEnterkeyhintEnumEnter ScriptEnterkeyhintEnum = "enter"
	ScriptEnterkeyhintEnumGo ScriptEnterkeyhintEnum = "go"
	ScriptEnterkeyhintEnumNext ScriptEnterkeyhintEnum = "next"
	ScriptEnterkeyhintEnumPrevious ScriptEnterkeyhintEnum = "previous"
	ScriptEnterkeyhintEnumSearch ScriptEnterkeyhintEnum = "search"
	ScriptEnterkeyhintEnumSend ScriptEnterkeyhintEnum = "send"
)

type ScriptHiddenEnum string

const (
	ScriptHiddenEnumHidden ScriptHiddenEnum = "hidden"
	ScriptHiddenEnumUntilFound ScriptHiddenEnum = "until-found"
)

type scriptAttrs map[string]any

func (e *ScriptElement) Autocapitalize(a ScriptAutocapitalizeEnum) *ScriptElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *ScriptElement) Autocorrect(a ScriptAutocorrectEnum) *ScriptElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *ScriptElement) Autofocus(b bool) *ScriptElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *ScriptElement) Class(s ...string) *ScriptElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *ScriptElement) Contenteditable(a ScriptContenteditableEnum) *ScriptElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *ScriptElement) Dir(a ScriptDirEnum) *ScriptElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *ScriptElement) Draggable(a ScriptDraggableEnum) *ScriptElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *ScriptElement) Enterkeyhint(a ScriptEnterkeyhintEnum) *ScriptElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *ScriptElement) Hidden(a ScriptHiddenEnum) *ScriptElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *ScriptElement) Id(s string) *ScriptElement {
	e.attributes["id"] = s
	
	return e
}

func (e *ScriptElement) Slot(s string) *ScriptElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *ScriptElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<script")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</script>")); err != nil {
		return err
	}

	return nil
}
