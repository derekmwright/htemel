// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type TimeElement struct {
	attributes timeAttrs
	children   []htemel.Node
	skipRender bool
}

// Time creates a tag <time> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The time element represents its contents, along with a machine-readable form of those contents in the datetime attribute. The kind of content is limited to various kinds of dates, times, time-zone offsets, and durations, as described below.
func Time(children ...htemel.Node) *TimeElement {
	node := &TimeElement{
		children:   children,
		attributes: make(timeAttrs),
	}

	return node
}

func TimeIf(condition bool, children ...htemel.Node) *TimeElement {
	if condition {
		return Time(children...)
	}

	return &TimeElement{
		skipRender: true,
	}
}

func TimeTernary(condition bool, true htemel.Node, false htemel.Node) *TimeElement {
	if condition {
		return Time(true)
	}

	return Time(false)
}

type TimeAutocapitalizeEnum string

const (
	TimeAutocapitalizeEnumNone       TimeAutocapitalizeEnum = "none"
	TimeAutocapitalizeEnumOff        TimeAutocapitalizeEnum = "off"
	TimeAutocapitalizeEnumOn         TimeAutocapitalizeEnum = "on"
	TimeAutocapitalizeEnumSentences  TimeAutocapitalizeEnum = "sentences"
	TimeAutocapitalizeEnumWords      TimeAutocapitalizeEnum = "words"
	TimeAutocapitalizeEnumCharacters TimeAutocapitalizeEnum = "characters"
)

type TimeAutocorrectEnum string

const (
	TimeAutocorrectEnumOff   TimeAutocorrectEnum = "off"
	TimeAutocorrectEnumOn    TimeAutocorrectEnum = "on"
	TimeAutocorrectEnumEmpty TimeAutocorrectEnum = ""
)

type TimeContenteditableEnum string

const (
	TimeContenteditableEnumFalse         TimeContenteditableEnum = "false"
	TimeContenteditableEnumPlaintextOnly TimeContenteditableEnum = "plaintext-only"
	TimeContenteditableEnumTrue          TimeContenteditableEnum = "true"
	TimeContenteditableEnumEmpty         TimeContenteditableEnum = ""
)

type TimeDirEnum string

const (
	TimeDirEnumLtr  TimeDirEnum = "ltr"
	TimeDirEnumRtl  TimeDirEnum = "rtl"
	TimeDirEnumAuto TimeDirEnum = "auto"
)

type TimeDraggableEnum string

const (
	TimeDraggableEnumFalse TimeDraggableEnum = "false"
	TimeDraggableEnumTrue  TimeDraggableEnum = "true"
)

type TimeEnterkeyhintEnum string

const (
	TimeEnterkeyhintEnumDone     TimeEnterkeyhintEnum = "done"
	TimeEnterkeyhintEnumEnter    TimeEnterkeyhintEnum = "enter"
	TimeEnterkeyhintEnumGo       TimeEnterkeyhintEnum = "go"
	TimeEnterkeyhintEnumNext     TimeEnterkeyhintEnum = "next"
	TimeEnterkeyhintEnumPrevious TimeEnterkeyhintEnum = "previous"
	TimeEnterkeyhintEnumSearch   TimeEnterkeyhintEnum = "search"
	TimeEnterkeyhintEnumSend     TimeEnterkeyhintEnum = "send"
)

type TimeHiddenEnum string

const (
	TimeHiddenEnumHidden     TimeHiddenEnum = "hidden"
	TimeHiddenEnumUntilFound TimeHiddenEnum = "until-found"
	TimeHiddenEnumEmpty      TimeHiddenEnum = ""
)

type TimeInputmodeEnum string

const (
	TimeInputmodeEnumText    TimeInputmodeEnum = "text"
	TimeInputmodeEnumUrl     TimeInputmodeEnum = "url"
	TimeInputmodeEnumDecimal TimeInputmodeEnum = "decimal"
	TimeInputmodeEnumEmail   TimeInputmodeEnum = "email"
	TimeInputmodeEnumNone    TimeInputmodeEnum = "none"
	TimeInputmodeEnumNumeric TimeInputmodeEnum = "numeric"
	TimeInputmodeEnumSearch  TimeInputmodeEnum = "search"
	TimeInputmodeEnumTel     TimeInputmodeEnum = "tel"
)

type TimeSpellcheckEnum string

const (
	TimeSpellcheckEnumFalse TimeSpellcheckEnum = "false"
	TimeSpellcheckEnumTrue  TimeSpellcheckEnum = "true"
	TimeSpellcheckEnumEmpty TimeSpellcheckEnum = ""
)

type TimeTranslateEnum string

const (
	TimeTranslateEnumNo    TimeTranslateEnum = "no"
	TimeTranslateEnumYes   TimeTranslateEnum = "yes"
	TimeTranslateEnumEmpty TimeTranslateEnum = ""
)

type TimeWritingsuggestionsEnum string

const (
	TimeWritingsuggestionsEnumFalse TimeWritingsuggestionsEnum = "false"
	TimeWritingsuggestionsEnumTrue  TimeWritingsuggestionsEnum = "true"
	TimeWritingsuggestionsEnumEmpty TimeWritingsuggestionsEnum = ""
)

type timeAttrs map[string]any

func (e *TimeElement) Autocapitalize(a TimeAutocapitalizeEnum) *TimeElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *TimeElement) Autocorrect(a TimeAutocorrectEnum) *TimeElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *TimeElement) Autofocus(b bool) *TimeElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *TimeElement) Class(s ...string) *TimeElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *TimeElement) Contenteditable(a TimeContenteditableEnum) *TimeElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *TimeElement) DataUnsafe(name string, s string) *TimeElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *TimeElement) Data(name string, s string) *TimeElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *TimeElement) Dir(a TimeDirEnum) *TimeElement {
	e.attributes["dir"] = a

	return e
}

func (e *TimeElement) Draggable(a TimeDraggableEnum) *TimeElement {
	e.attributes["draggable"] = a

	return e
}

func (e *TimeElement) Enterkeyhint(a TimeEnterkeyhintEnum) *TimeElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *TimeElement) Hidden(a TimeHiddenEnum) *TimeElement {
	e.attributes["hidden"] = a

	return e
}

func (e *TimeElement) Id(s string) *TimeElement {
	e.attributes["id"] = s

	return e
}

func (e *TimeElement) Inert(b bool) *TimeElement {
	e.attributes["inert"] = b

	return e
}

func (e *TimeElement) Inputmode(a TimeInputmodeEnum) *TimeElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *TimeElement) Itemid(s string) *TimeElement {
	e.attributes["itemid"] = s

	return e
}

func (e *TimeElement) Itemprop(s ...string) *TimeElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *TimeElement) Itemref(s ...string) *TimeElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *TimeElement) Itemscope(b bool) *TimeElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *TimeElement) Itemtype(s ...string) *TimeElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *TimeElement) Lang(s string) *TimeElement {
	e.attributes["lang"] = s

	return e
}

func (e *TimeElement) Nonce(s string) *TimeElement {
	e.attributes["nonce"] = s

	return e
}

func (e *TimeElement) Popover(s string) *TimeElement {
	e.attributes["popover"] = s

	return e
}

func (e *TimeElement) Slot(s string) *TimeElement {
	e.attributes["slot"] = s

	return e
}

func (e *TimeElement) Spellcheck(a TimeSpellcheckEnum) *TimeElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *TimeElement) Style(s string) *TimeElement {
	e.attributes["style"] = s

	return e
}

func (e *TimeElement) Tabindex(i int) *TimeElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *TimeElement) Title(s string) *TimeElement {
	e.attributes["title"] = s

	return e
}

func (e *TimeElement) Translate(a TimeTranslateEnum) *TimeElement {
	e.attributes["translate"] = a

	return e
}

func (e *TimeElement) Writingsuggestions(a TimeWritingsuggestionsEnum) *TimeElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *TimeElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<time")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</time>")); err != nil {
		return err
	}

	return nil
}
