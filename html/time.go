// Code generated by htemel. DO NOT EDIT.
package html

import (
  "github.com/derekmwright/htemel"
  "io"
)

type TimeElement struct {
	children []htemel.Node
	skipRender bool
}

// Time creates a tag <time> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The time element represents its contents, along with a machine-readable form of those contents in the datetime attribute. The kind of content is limited to various kinds of dates, times, time-zone offsets, and durations, as described below.
func Time(children ...htemel.Node) *TimeElement {
	node := &TimeElement{
		children: children,
	}

	return node
}

func TimeIf(condition bool, children ...htemel.Node) *TimeElement {
	if condition {
		return Time(children...)
	}

	return &TimeElement{
		skipRender: true,
	}
}

func (e *TimeElement) Autocapitalize() *TimeElement {
	return e
}

func (e *TimeElement) Autocorrect() *TimeElement {
	return e
}

func (e *TimeElement) Autofocus() *TimeElement {
	return e
}

func (e *TimeElement) Class() *TimeElement {
	return e
}

func (e *TimeElement) Contenteditable() *TimeElement {
	return e
}

func (e *TimeElement) Id() *TimeElement {
	return e
}

func (e *TimeElement) Slot() *TimeElement {
	return e
}

func (e *TimeElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<time")); err != nil {
		return err
	}

	// TODO: Attribute stuff here

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</time>")); err != nil {
		return err
	}

	return nil
}
