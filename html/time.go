// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type TimeElement struct {
	attributes timeAttrs
	children []htemel.Node
	skipRender bool
}

// Time creates a tag <time> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The time element represents its contents, along with a machine-readable form of those contents in the datetime attribute. The kind of content is limited to various kinds of dates, times, time-zone offsets, and durations, as described below.
func Time(children ...htemel.Node) *TimeElement {
	node := &TimeElement{
		children: children,
		attributes: make(timeAttrs),
	}

	return node
}

func TimeIf(condition bool, children ...htemel.Node) *TimeElement {
	if condition {
		return Time(children...)
	}

	return &TimeElement{
		skipRender: true,
	}
}

type TimeAutocapitalizeEnum string

const (
	TimeAutocapitalizeEnumNone TimeAutocapitalizeEnum = "none"
	TimeAutocapitalizeEnumOff TimeAutocapitalizeEnum = "off"
	TimeAutocapitalizeEnumOn TimeAutocapitalizeEnum = "on"
	TimeAutocapitalizeEnumSentences TimeAutocapitalizeEnum = "sentences"
	TimeAutocapitalizeEnumWords TimeAutocapitalizeEnum = "words"
	TimeAutocapitalizeEnumCharacters TimeAutocapitalizeEnum = "characters"
)

type TimeAutocorrectEnum string

const (
	TimeAutocorrectEnumOff TimeAutocorrectEnum = "off"
	TimeAutocorrectEnumOn TimeAutocorrectEnum = "on"
)

type TimeContenteditableEnum string

const (
	TimeContenteditableEnumFalse TimeContenteditableEnum = "false"
	TimeContenteditableEnumPlaintextOnly TimeContenteditableEnum = "plaintext-only"
	TimeContenteditableEnumTrue TimeContenteditableEnum = "true"
)

type TimeDirEnum string

const (
	TimeDirEnumRtl TimeDirEnum = "rtl"
	TimeDirEnumAuto TimeDirEnum = "auto"
	TimeDirEnumLtr TimeDirEnum = "ltr"
)

type TimeDraggableEnum string

const (
	TimeDraggableEnumFalse TimeDraggableEnum = "false"
	TimeDraggableEnumTrue TimeDraggableEnum = "true"
)

type TimeEnterkeyhintEnum string

const (
	TimeEnterkeyhintEnumSend TimeEnterkeyhintEnum = "send"
	TimeEnterkeyhintEnumDone TimeEnterkeyhintEnum = "done"
	TimeEnterkeyhintEnumEnter TimeEnterkeyhintEnum = "enter"
	TimeEnterkeyhintEnumGo TimeEnterkeyhintEnum = "go"
	TimeEnterkeyhintEnumNext TimeEnterkeyhintEnum = "next"
	TimeEnterkeyhintEnumPrevious TimeEnterkeyhintEnum = "previous"
	TimeEnterkeyhintEnumSearch TimeEnterkeyhintEnum = "search"
)

type TimeHiddenEnum string

const (
	TimeHiddenEnumUntilFound TimeHiddenEnum = "until-found"
	TimeHiddenEnumHidden TimeHiddenEnum = "hidden"
)

type timeAttrs map[string]any

func (e *TimeElement) Autocapitalize(a TimeAutocapitalizeEnum) *TimeElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *TimeElement) Autocorrect(a TimeAutocorrectEnum) *TimeElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *TimeElement) Autofocus(b bool) *TimeElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *TimeElement) Class(s ...string) *TimeElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *TimeElement) Contenteditable(a TimeContenteditableEnum) *TimeElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *TimeElement) Dir(a TimeDirEnum) *TimeElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *TimeElement) Draggable(a TimeDraggableEnum) *TimeElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *TimeElement) Enterkeyhint(a TimeEnterkeyhintEnum) *TimeElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *TimeElement) Hidden(a TimeHiddenEnum) *TimeElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *TimeElement) Id(s string) *TimeElement {
	e.attributes["id"] = s
	
	return e
}

func (e *TimeElement) Slot(s string) *TimeElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *TimeElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<time")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</time>")); err != nil {
		return err
	}

	return nil
}
