// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type TimeElement struct {
	attributes timeAttrs
	children   []htemel.Node
	skipRender bool
}

// Time creates a tag <time> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The time element represents its contents, along with a machine-readable form of those contents in the datetime attribute. The kind of content is limited to various kinds of dates, times, time-zone offsets, and durations, as described below.
func Time(children ...htemel.Node) *TimeElement {
	node := &TimeElement{
		children:   children,
		attributes: make(timeAttrs),
	}

	return node
}

func TimeIf(condition bool, children ...htemel.Node) *TimeElement {
	if condition {
		return Time(children...)
	}

	return &TimeElement{
		skipRender: true,
	}
}

type TimeAutocapitalizeAttrEnum string

const (
	TimeAutocapitalizeAttrEnumWords      TimeAutocapitalizeAttrEnum = "words"
	TimeAutocapitalizeAttrEnumCharacters TimeAutocapitalizeAttrEnum = "characters"
	TimeAutocapitalizeAttrEnumNone       TimeAutocapitalizeAttrEnum = "none"
	TimeAutocapitalizeAttrEnumOff        TimeAutocapitalizeAttrEnum = "off"
	TimeAutocapitalizeAttrEnumOn         TimeAutocapitalizeAttrEnum = "on"
	TimeAutocapitalizeAttrEnumSentences  TimeAutocapitalizeAttrEnum = "sentences"
)

type TimeAutocorrectAttrEnum string

const (
	TimeAutocorrectAttrEnumOff TimeAutocorrectAttrEnum = "off"
	TimeAutocorrectAttrEnumOn  TimeAutocorrectAttrEnum = "on"
)

type TimeContenteditableAttrEnum string

const (
	TimeContenteditableAttrEnumFalse         TimeContenteditableAttrEnum = "false"
	TimeContenteditableAttrEnumPlaintextOnly TimeContenteditableAttrEnum = "plaintext-only"
	TimeContenteditableAttrEnumTrue          TimeContenteditableAttrEnum = "true"
)

type timeAttrs map[string]any

func (e *TimeElement) Autocapitalize(a TimeAutocapitalizeAttrEnum) *TimeElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *TimeElement) Autocorrect(a TimeAutocorrectAttrEnum) *TimeElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *TimeElement) Autofocus(b bool) *TimeElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *TimeElement) Class(s ...string) *TimeElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *TimeElement) Contenteditable(a TimeContenteditableAttrEnum) *TimeElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *TimeElement) Id(s string) *TimeElement {
	e.attributes["id"] = s

	return e
}

func (e *TimeElement) Slot(s string) *TimeElement {
	e.attributes["slot"] = s

	return e
}

func (e *TimeElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<time")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		w.Write([]byte(" " + key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</time>")); err != nil {
		return err
	}

	return nil
}
