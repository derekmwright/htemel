// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
)

type DetailsElement struct {
	attributes detailsAttrs
	children []htemel.Node
	skipRender bool
}

// Details creates a tag <details> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The details element represents a disclosure widget from which the user can obtain additional information or controls.
func Details(children ...htemel.Node) *DetailsElement {
	node := &DetailsElement{
		children: children,
	}

	return node
}

func DetailsIf(condition bool, children ...htemel.Node) *DetailsElement {
	if condition {
		return Details(children...)
	}

	return &DetailsElement{
		skipRender: true,
	}
}

type DetailsAutocapitalizeAttrEnum string

const (
	DetailsAutocapitalizeAttrEnumNone DetailsAutocapitalizeAttrEnum = "none"
	DetailsAutocapitalizeAttrEnumOff DetailsAutocapitalizeAttrEnum = "off"
	DetailsAutocapitalizeAttrEnumOn DetailsAutocapitalizeAttrEnum = "on"
	DetailsAutocapitalizeAttrEnumSentences DetailsAutocapitalizeAttrEnum = "sentences"
	DetailsAutocapitalizeAttrEnumWords DetailsAutocapitalizeAttrEnum = "words"
	DetailsAutocapitalizeAttrEnumCharacters DetailsAutocapitalizeAttrEnum = "characters"
)

type DetailsAutocorrectAttrEnum string

const (
	DetailsAutocorrectAttrEnumOff DetailsAutocorrectAttrEnum = "off"
	DetailsAutocorrectAttrEnumOn DetailsAutocorrectAttrEnum = "on"
)

type DetailsContenteditableAttrEnum string

const (
	DetailsContenteditableAttrEnumPlaintextOnly DetailsContenteditableAttrEnum = "plaintext-only"
	DetailsContenteditableAttrEnumTrue DetailsContenteditableAttrEnum = "true"
	DetailsContenteditableAttrEnumFalse DetailsContenteditableAttrEnum = "false"
)

type detailsAttrs map[string]any

func (e *DetailsElement) Autocapitalize(a DetailsAutocapitalizeAttrEnum) *DetailsElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *DetailsElement) Autocorrect(a DetailsAutocorrectAttrEnum) *DetailsElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *DetailsElement) Class(s ...string) *DetailsElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *DetailsElement) Contenteditable(a DetailsContenteditableAttrEnum) *DetailsElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *DetailsElement) Id(s string) *DetailsElement {
	e.attributes["id"] = s
	
	return e
}

func (e *DetailsElement) Slot(s string) *DetailsElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *DetailsElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<details")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 0
	for key, v := range e.attributes {
		w.Write([]byte(key + "="))
		w.Write([]byte(html.EscapeString(fmt.Sprintf("'%v'", v))))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</details>")); err != nil {
		return err
	}

	return nil
}
