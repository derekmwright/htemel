// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type DetailsElement struct {
	attributes detailsAttrs
	children   []htemel.Node
	skipRender bool
}

// Details creates a tag <details> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The details element represents a disclosure widget from which the user can obtain additional information or controls.
func Details(children ...htemel.Node) *DetailsElement {
	node := &DetailsElement{
		children:   children,
		attributes: make(detailsAttrs),
	}

	return node
}

func DetailsIf(condition bool, children ...htemel.Node) *DetailsElement {
	if condition {
		return Details(children...)
	}

	return &DetailsElement{
		skipRender: true,
	}
}

func DetailsTernary(condition bool, true htemel.Node, false htemel.Node) *DetailsElement {
	if condition {
		return Details(true)
	}

	return Details(false)
}

type DetailsAutocapitalizeEnum string

const (
	DetailsAutocapitalizeEnumWords      DetailsAutocapitalizeEnum = "words"
	DetailsAutocapitalizeEnumCharacters DetailsAutocapitalizeEnum = "characters"
	DetailsAutocapitalizeEnumNone       DetailsAutocapitalizeEnum = "none"
	DetailsAutocapitalizeEnumOff        DetailsAutocapitalizeEnum = "off"
	DetailsAutocapitalizeEnumOn         DetailsAutocapitalizeEnum = "on"
	DetailsAutocapitalizeEnumSentences  DetailsAutocapitalizeEnum = "sentences"
)

type DetailsAutocorrectEnum string

const (
	DetailsAutocorrectEnumOff DetailsAutocorrectEnum = "off"
	DetailsAutocorrectEnumOn  DetailsAutocorrectEnum = "on"
)

type DetailsContenteditableEnum string

const (
	DetailsContenteditableEnumFalse         DetailsContenteditableEnum = "false"
	DetailsContenteditableEnumPlaintextOnly DetailsContenteditableEnum = "plaintext-only"
	DetailsContenteditableEnumTrue          DetailsContenteditableEnum = "true"
)

type DetailsDirEnum string

const (
	DetailsDirEnumRtl  DetailsDirEnum = "rtl"
	DetailsDirEnumAuto DetailsDirEnum = "auto"
	DetailsDirEnumLtr  DetailsDirEnum = "ltr"
)

type DetailsDraggableEnum string

const (
	DetailsDraggableEnumTrue  DetailsDraggableEnum = "true"
	DetailsDraggableEnumFalse DetailsDraggableEnum = "false"
)

type DetailsEnterkeyhintEnum string

const (
	DetailsEnterkeyhintEnumGo       DetailsEnterkeyhintEnum = "go"
	DetailsEnterkeyhintEnumNext     DetailsEnterkeyhintEnum = "next"
	DetailsEnterkeyhintEnumPrevious DetailsEnterkeyhintEnum = "previous"
	DetailsEnterkeyhintEnumSearch   DetailsEnterkeyhintEnum = "search"
	DetailsEnterkeyhintEnumSend     DetailsEnterkeyhintEnum = "send"
	DetailsEnterkeyhintEnumDone     DetailsEnterkeyhintEnum = "done"
	DetailsEnterkeyhintEnumEnter    DetailsEnterkeyhintEnum = "enter"
)

type DetailsHiddenEnum string

const (
	DetailsHiddenEnumHidden     DetailsHiddenEnum = "hidden"
	DetailsHiddenEnumUntilFound DetailsHiddenEnum = "until-found"
	DetailsHiddenEnumEmpty      DetailsHiddenEnum = ""
)

type DetailsInputmodeEnum string

const (
	DetailsInputmodeEnumText    DetailsInputmodeEnum = "text"
	DetailsInputmodeEnumUrl     DetailsInputmodeEnum = "url"
	DetailsInputmodeEnumDecimal DetailsInputmodeEnum = "decimal"
	DetailsInputmodeEnumEmail   DetailsInputmodeEnum = "email"
	DetailsInputmodeEnumNone    DetailsInputmodeEnum = "none"
	DetailsInputmodeEnumNumeric DetailsInputmodeEnum = "numeric"
	DetailsInputmodeEnumSearch  DetailsInputmodeEnum = "search"
	DetailsInputmodeEnumTel     DetailsInputmodeEnum = "tel"
)

type DetailsSpellcheckEnum string

const (
	DetailsSpellcheckEnumFalse DetailsSpellcheckEnum = "false"
	DetailsSpellcheckEnumTrue  DetailsSpellcheckEnum = "true"
)

type DetailsTranslateEnum string

const (
	DetailsTranslateEnumNo  DetailsTranslateEnum = "no"
	DetailsTranslateEnumYes DetailsTranslateEnum = "yes"
)

type DetailsWritingsuggestionsEnum string

const (
	DetailsWritingsuggestionsEnumFalse DetailsWritingsuggestionsEnum = "false"
	DetailsWritingsuggestionsEnumTrue  DetailsWritingsuggestionsEnum = "true"
)

type detailsAttrs map[string]any

func (e *DetailsElement) Autocapitalize(a DetailsAutocapitalizeEnum) *DetailsElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *DetailsElement) Autocorrect(a DetailsAutocorrectEnum) *DetailsElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *DetailsElement) Autofocus(b bool) *DetailsElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *DetailsElement) Class(s ...string) *DetailsElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *DetailsElement) Contenteditable(a DetailsContenteditableEnum) *DetailsElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *DetailsElement) DataUnsafe(name string, s string) *DetailsElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *DetailsElement) Data(name string, s string) *DetailsElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *DetailsElement) Dir(a DetailsDirEnum) *DetailsElement {
	e.attributes["dir"] = a

	return e
}

func (e *DetailsElement) Draggable(a DetailsDraggableEnum) *DetailsElement {
	e.attributes["draggable"] = a

	return e
}

func (e *DetailsElement) Enterkeyhint(a DetailsEnterkeyhintEnum) *DetailsElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *DetailsElement) Hidden(a DetailsHiddenEnum) *DetailsElement {
	e.attributes["hidden"] = a

	return e
}

func (e *DetailsElement) Id(s string) *DetailsElement {
	e.attributes["id"] = s

	return e
}

func (e *DetailsElement) Inert(b bool) *DetailsElement {
	e.attributes["inert"] = b

	return e
}

func (e *DetailsElement) Inputmode(a DetailsInputmodeEnum) *DetailsElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *DetailsElement) Itemid(s string) *DetailsElement {
	e.attributes["itemid"] = s

	return e
}

func (e *DetailsElement) Itemprop(s ...string) *DetailsElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *DetailsElement) Itemref(s ...string) *DetailsElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *DetailsElement) Itemscope(b bool) *DetailsElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *DetailsElement) Itemtype(s ...string) *DetailsElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *DetailsElement) Lang(s string) *DetailsElement {
	e.attributes["lang"] = s

	return e
}

func (e *DetailsElement) Nonce(s string) *DetailsElement {
	e.attributes["nonce"] = s

	return e
}

func (e *DetailsElement) Popover(s string) *DetailsElement {
	e.attributes["popover"] = s

	return e
}

func (e *DetailsElement) Slot(s string) *DetailsElement {
	e.attributes["slot"] = s

	return e
}

func (e *DetailsElement) Spellcheck(a DetailsSpellcheckEnum) *DetailsElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *DetailsElement) Style(s string) *DetailsElement {
	e.attributes["style"] = s

	return e
}

func (e *DetailsElement) Tabindex(i int) *DetailsElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *DetailsElement) Title(s string) *DetailsElement {
	e.attributes["title"] = s

	return e
}

func (e *DetailsElement) Translate(a DetailsTranslateEnum) *DetailsElement {
	e.attributes["translate"] = a

	return e
}

func (e *DetailsElement) Writingsuggestions(a DetailsWritingsuggestionsEnum) *DetailsElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *DetailsElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<details")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</details>")); err != nil {
		return err
	}

	return nil
}
