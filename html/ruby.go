// Code generated by htemel. DO NOT EDIT.
package html

import (
  "github.com/derekmwright/htemel"
  "io"
)

type RubyElement struct {
	children []htemel.Node
	skipRender bool
}

// Ruby creates a tag <ruby> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The ruby element allows one or more spans of phrasing content to be marked with ruby annotations. Ruby annotations are short runs of text presented alongside base text, primarily used in East Asian typography as a guide for pronunciation or to include other annotations. In Japanese, this form of typography is also known as furigana.
func Ruby(children ...htemel.Node) *RubyElement {
	node := &RubyElement{
		children: children,
	}

	return node
}

func RubyIf(condition bool, children ...htemel.Node) *RubyElement {
	if condition {
		return Ruby(children...)
	}

	return &RubyElement{
		skipRender: true,
	}
}

func (e *RubyElement) Autocapitalize() *RubyElement {
	return e
}

func (e *RubyElement) Autocorrect() *RubyElement {
	return e
}

func (e *RubyElement) Autofocus() *RubyElement {
	return e
}

func (e *RubyElement) Class() *RubyElement {
	return e
}

func (e *RubyElement) Contenteditable() *RubyElement {
	return e
}

func (e *RubyElement) Id() *RubyElement {
	return e
}

func (e *RubyElement) Slot() *RubyElement {
	return e
}

func (e *RubyElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<ruby")); err != nil {
		return err
	}

	// TODO: Attribute stuff here

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</ruby>")); err != nil {
		return err
	}

	return nil
}
