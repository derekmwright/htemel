// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type RtElement struct {
	attributes rtAttrs
	children   []htemel.Node
	skipRender bool
}

// Rt creates a tag <rt> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The rt element marks the ruby text component of a ruby annotation. When it is the child of a ruby element, it doesn't represent anything itself, but the ruby element uses it as part of determining what it represents.
func Rt(children ...htemel.Node) *RtElement {
	node := &RtElement{
		children:   children,
		attributes: make(rtAttrs),
	}

	return node
}

func RtIf(condition bool, children ...htemel.Node) *RtElement {
	if condition {
		return Rt(children...)
	}

	return &RtElement{
		skipRender: true,
	}
}

type RtAutocapitalizeAttrEnum string

const (
	RtAutocapitalizeAttrEnumWords      RtAutocapitalizeAttrEnum = "words"
	RtAutocapitalizeAttrEnumCharacters RtAutocapitalizeAttrEnum = "characters"
	RtAutocapitalizeAttrEnumNone       RtAutocapitalizeAttrEnum = "none"
	RtAutocapitalizeAttrEnumOff        RtAutocapitalizeAttrEnum = "off"
	RtAutocapitalizeAttrEnumOn         RtAutocapitalizeAttrEnum = "on"
	RtAutocapitalizeAttrEnumSentences  RtAutocapitalizeAttrEnum = "sentences"
)

type RtAutocorrectAttrEnum string

const (
	RtAutocorrectAttrEnumOff RtAutocorrectAttrEnum = "off"
	RtAutocorrectAttrEnumOn  RtAutocorrectAttrEnum = "on"
)

type RtContenteditableAttrEnum string

const (
	RtContenteditableAttrEnumFalse         RtContenteditableAttrEnum = "false"
	RtContenteditableAttrEnumPlaintextOnly RtContenteditableAttrEnum = "plaintext-only"
	RtContenteditableAttrEnumTrue          RtContenteditableAttrEnum = "true"
)

type rtAttrs map[string]any

func (e *RtElement) Autocapitalize(a RtAutocapitalizeAttrEnum) *RtElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *RtElement) Autocorrect(a RtAutocorrectAttrEnum) *RtElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *RtElement) Autofocus(b bool) *RtElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *RtElement) Class(s ...string) *RtElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *RtElement) Contenteditable(a RtContenteditableAttrEnum) *RtElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *RtElement) Id(s string) *RtElement {
	e.attributes["id"] = s

	return e
}

func (e *RtElement) Slot(s string) *RtElement {
	e.attributes["slot"] = s

	return e
}

func (e *RtElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<rt")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		w.Write([]byte(" " + key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</rt>")); err != nil {
		return err
	}

	return nil
}
