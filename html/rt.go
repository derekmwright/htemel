// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type RtElement struct {
	attributes rtAttrs
	children   []htemel.Node
	skipRender bool
}

// Rt creates a tag <rt> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The rt element marks the ruby text component of a ruby annotation. When it is the child of a ruby element, it doesn't represent anything itself, but the ruby element uses it as part of determining what it represents.
func Rt(children ...htemel.Node) *RtElement {
	node := &RtElement{
		children:   children,
		attributes: make(rtAttrs),
	}

	return node
}

func RtIf(condition bool, children ...htemel.Node) *RtElement {
	if condition {
		return Rt(children...)
	}

	return &RtElement{
		skipRender: true,
	}
}

func RtTernary(condition bool, true htemel.Node, false htemel.Node) *RtElement {
	if condition {
		return Rt(true)
	}

	return Rt(false)
}

type RtAutocapitalizeEnum string

const (
	RtAutocapitalizeEnumCharacters RtAutocapitalizeEnum = "characters"
	RtAutocapitalizeEnumNone       RtAutocapitalizeEnum = "none"
	RtAutocapitalizeEnumOff        RtAutocapitalizeEnum = "off"
	RtAutocapitalizeEnumOn         RtAutocapitalizeEnum = "on"
	RtAutocapitalizeEnumSentences  RtAutocapitalizeEnum = "sentences"
	RtAutocapitalizeEnumWords      RtAutocapitalizeEnum = "words"
)

type RtAutocorrectEnum string

const (
	RtAutocorrectEnumOn  RtAutocorrectEnum = "on"
	RtAutocorrectEnumOff RtAutocorrectEnum = "off"
)

type RtContenteditableEnum string

const (
	RtContenteditableEnumPlaintextOnly RtContenteditableEnum = "plaintext-only"
	RtContenteditableEnumTrue          RtContenteditableEnum = "true"
	RtContenteditableEnumFalse         RtContenteditableEnum = "false"
)

type RtDirEnum string

const (
	RtDirEnumAuto RtDirEnum = "auto"
	RtDirEnumLtr  RtDirEnum = "ltr"
	RtDirEnumRtl  RtDirEnum = "rtl"
)

type RtDraggableEnum string

const (
	RtDraggableEnumFalse RtDraggableEnum = "false"
	RtDraggableEnumTrue  RtDraggableEnum = "true"
)

type RtEnterkeyhintEnum string

const (
	RtEnterkeyhintEnumPrevious RtEnterkeyhintEnum = "previous"
	RtEnterkeyhintEnumSearch   RtEnterkeyhintEnum = "search"
	RtEnterkeyhintEnumSend     RtEnterkeyhintEnum = "send"
	RtEnterkeyhintEnumDone     RtEnterkeyhintEnum = "done"
	RtEnterkeyhintEnumEnter    RtEnterkeyhintEnum = "enter"
	RtEnterkeyhintEnumGo       RtEnterkeyhintEnum = "go"
	RtEnterkeyhintEnumNext     RtEnterkeyhintEnum = "next"
)

type RtHiddenEnum string

const (
	RtHiddenEnumHidden     RtHiddenEnum = "hidden"
	RtHiddenEnumUntilFound RtHiddenEnum = "until-found"
	RtHiddenEnumEmpty      RtHiddenEnum = ""
)

type RtInputmodeEnum string

const (
	RtInputmodeEnumTel     RtInputmodeEnum = "tel"
	RtInputmodeEnumText    RtInputmodeEnum = "text"
	RtInputmodeEnumUrl     RtInputmodeEnum = "url"
	RtInputmodeEnumDecimal RtInputmodeEnum = "decimal"
	RtInputmodeEnumEmail   RtInputmodeEnum = "email"
	RtInputmodeEnumNone    RtInputmodeEnum = "none"
	RtInputmodeEnumNumeric RtInputmodeEnum = "numeric"
	RtInputmodeEnumSearch  RtInputmodeEnum = "search"
)

type RtSpellcheckEnum string

const (
	RtSpellcheckEnumFalse RtSpellcheckEnum = "false"
	RtSpellcheckEnumTrue  RtSpellcheckEnum = "true"
)

type RtTranslateEnum string

const (
	RtTranslateEnumNo  RtTranslateEnum = "no"
	RtTranslateEnumYes RtTranslateEnum = "yes"
)

type RtWritingsuggestionsEnum string

const (
	RtWritingsuggestionsEnumFalse RtWritingsuggestionsEnum = "false"
	RtWritingsuggestionsEnumTrue  RtWritingsuggestionsEnum = "true"
)

type rtAttrs map[string]any

func (e *RtElement) Autocapitalize(a RtAutocapitalizeEnum) *RtElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *RtElement) Autocorrect(a RtAutocorrectEnum) *RtElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *RtElement) Autofocus(b bool) *RtElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *RtElement) Class(s ...string) *RtElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *RtElement) Contenteditable(a RtContenteditableEnum) *RtElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *RtElement) DataUnsafe(name string, s string) *RtElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *RtElement) Data(name string, s string) *RtElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *RtElement) Dir(a RtDirEnum) *RtElement {
	e.attributes["dir"] = a

	return e
}

func (e *RtElement) Draggable(a RtDraggableEnum) *RtElement {
	e.attributes["draggable"] = a

	return e
}

func (e *RtElement) Enterkeyhint(a RtEnterkeyhintEnum) *RtElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *RtElement) Hidden(a RtHiddenEnum) *RtElement {
	e.attributes["hidden"] = a

	return e
}

func (e *RtElement) Id(s string) *RtElement {
	e.attributes["id"] = s

	return e
}

func (e *RtElement) Inert(b bool) *RtElement {
	e.attributes["inert"] = b

	return e
}

func (e *RtElement) Inputmode(a RtInputmodeEnum) *RtElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *RtElement) Itemid(s string) *RtElement {
	e.attributes["itemid"] = s

	return e
}

func (e *RtElement) Itemprop(s ...string) *RtElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *RtElement) Itemref(s ...string) *RtElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *RtElement) Itemscope(b bool) *RtElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *RtElement) Itemtype(s ...string) *RtElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *RtElement) Lang(s string) *RtElement {
	e.attributes["lang"] = s

	return e
}

func (e *RtElement) Nonce(s string) *RtElement {
	e.attributes["nonce"] = s

	return e
}

func (e *RtElement) Popover(s string) *RtElement {
	e.attributes["popover"] = s

	return e
}

func (e *RtElement) Slot(s string) *RtElement {
	e.attributes["slot"] = s

	return e
}

func (e *RtElement) Spellcheck(a RtSpellcheckEnum) *RtElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *RtElement) Style(s string) *RtElement {
	e.attributes["style"] = s

	return e
}

func (e *RtElement) Tabindex(i int) *RtElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *RtElement) Title(s string) *RtElement {
	e.attributes["title"] = s

	return e
}

func (e *RtElement) Translate(a RtTranslateEnum) *RtElement {
	e.attributes["translate"] = a

	return e
}

func (e *RtElement) Writingsuggestions(a RtWritingsuggestionsEnum) *RtElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *RtElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<rt")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</rt>")); err != nil {
		return err
	}

	return nil
}
