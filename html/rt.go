// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type RtElement struct {
	attributes rtAttrs
	children []htemel.Node
	skipRender bool
}

// Rt creates a tag <rt> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The rt element marks the ruby text component of a ruby annotation. When it is the child of a ruby element, it doesn't represent anything itself, but the ruby element uses it as part of determining what it represents.
func Rt(children ...htemel.Node) *RtElement {
	node := &RtElement{
		children: children,
		attributes: make(rtAttrs),
	}

	return node
}

func RtIf(condition bool, children ...htemel.Node) *RtElement {
	if condition {
		return Rt(children...)
	}

	return &RtElement{
		skipRender: true,
	}
}

type RtAutocapitalizeEnum string

const (
	RtAutocapitalizeEnumSentences RtAutocapitalizeEnum = "sentences"
	RtAutocapitalizeEnumWords RtAutocapitalizeEnum = "words"
	RtAutocapitalizeEnumCharacters RtAutocapitalizeEnum = "characters"
	RtAutocapitalizeEnumNone RtAutocapitalizeEnum = "none"
	RtAutocapitalizeEnumOff RtAutocapitalizeEnum = "off"
	RtAutocapitalizeEnumOn RtAutocapitalizeEnum = "on"
)

type RtAutocorrectEnum string

const (
	RtAutocorrectEnumOff RtAutocorrectEnum = "off"
	RtAutocorrectEnumOn RtAutocorrectEnum = "on"
)

type RtContenteditableEnum string

const (
	RtContenteditableEnumFalse RtContenteditableEnum = "false"
	RtContenteditableEnumPlaintextOnly RtContenteditableEnum = "plaintext-only"
	RtContenteditableEnumTrue RtContenteditableEnum = "true"
)

type RtDirEnum string

const (
	RtDirEnumAuto RtDirEnum = "auto"
	RtDirEnumLtr RtDirEnum = "ltr"
	RtDirEnumRtl RtDirEnum = "rtl"
)

type RtDraggableEnum string

const (
	RtDraggableEnumFalse RtDraggableEnum = "false"
	RtDraggableEnumTrue RtDraggableEnum = "true"
)

type RtEnterkeyhintEnum string

const (
	RtEnterkeyhintEnumDone RtEnterkeyhintEnum = "done"
	RtEnterkeyhintEnumEnter RtEnterkeyhintEnum = "enter"
	RtEnterkeyhintEnumGo RtEnterkeyhintEnum = "go"
	RtEnterkeyhintEnumNext RtEnterkeyhintEnum = "next"
	RtEnterkeyhintEnumPrevious RtEnterkeyhintEnum = "previous"
	RtEnterkeyhintEnumSearch RtEnterkeyhintEnum = "search"
	RtEnterkeyhintEnumSend RtEnterkeyhintEnum = "send"
)

type RtHiddenEnum string

const (
	RtHiddenEnumHidden RtHiddenEnum = "hidden"
	RtHiddenEnumUntilFound RtHiddenEnum = "until-found"
)

type rtAttrs map[string]any

func (e *RtElement) Autocapitalize(a RtAutocapitalizeEnum) *RtElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *RtElement) Autocorrect(a RtAutocorrectEnum) *RtElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *RtElement) Autofocus(b bool) *RtElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *RtElement) Class(s ...string) *RtElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *RtElement) Contenteditable(a RtContenteditableEnum) *RtElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *RtElement) Dir(a RtDirEnum) *RtElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *RtElement) Draggable(a RtDraggableEnum) *RtElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *RtElement) Enterkeyhint(a RtEnterkeyhintEnum) *RtElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *RtElement) Hidden(a RtHiddenEnum) *RtElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *RtElement) Id(s string) *RtElement {
	e.attributes["id"] = s
	
	return e
}

func (e *RtElement) Slot(s string) *RtElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *RtElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<rt")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</rt>")); err != nil {
		return err
	}

	return nil
}
