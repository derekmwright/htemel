// Code generated by htemel. DO NOT EDIT.
package html

import (
  "github.com/derekmwright/htemel"
  "io"
)

type DivElement struct {
	children []htemel.Node
	skipRender bool
}

// Div creates a tag <div> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The div element has no special meaning at all. It represents its children. It can be used with the class, lang, and title attributes to mark up semantics common to a group of consecutive elements. It can also be used in a dl element, wrapping groups of dt and dd elements.
func Div(children ...htemel.Node) *DivElement {
	node := &DivElement{
		children: children,
	}

	return node
}

func DivIf(condition bool, children ...htemel.Node) *DivElement {
	if condition {
		return Div(children...)
	}

	return &DivElement{
		skipRender: true,
	}
}

func (e *DivElement) Autocapitalize() *DivElement {
	return e
}

func (e *DivElement) Autocorrect() *DivElement {
	return e
}

func (e *DivElement) Autofocus() *DivElement {
	return e
}

func (e *DivElement) Class() *DivElement {
	return e
}

func (e *DivElement) Contenteditable() *DivElement {
	return e
}

func (e *DivElement) Id() *DivElement {
	return e
}

func (e *DivElement) Slot() *DivElement {
	return e
}

func (e *DivElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<div")); err != nil {
		return err
	}

	// TODO: Attribute stuff here

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</div>")); err != nil {
		return err
	}

	return nil
}
