// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type DivElement struct {
	attributes divAttrs
	children []htemel.Node
	skipRender bool
}

// Div creates a tag <div> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The div element has no special meaning at all. It represents its children. It can be used with the class, lang, and title attributes to mark up semantics common to a group of consecutive elements. It can also be used in a dl element, wrapping groups of dt and dd elements.
func Div(children ...htemel.Node) *DivElement {
	node := &DivElement{
		children: children,
		attributes: make(divAttrs),
	}

	return node
}

func DivIf(condition bool, children ...htemel.Node) *DivElement {
	if condition {
		return Div(children...)
	}

	return &DivElement{
		skipRender: true,
	}
}

type DivAutocapitalizeEnum string

const (
	DivAutocapitalizeEnumWords DivAutocapitalizeEnum = "words"
	DivAutocapitalizeEnumCharacters DivAutocapitalizeEnum = "characters"
	DivAutocapitalizeEnumNone DivAutocapitalizeEnum = "none"
	DivAutocapitalizeEnumOff DivAutocapitalizeEnum = "off"
	DivAutocapitalizeEnumOn DivAutocapitalizeEnum = "on"
	DivAutocapitalizeEnumSentences DivAutocapitalizeEnum = "sentences"
)

type DivAutocorrectEnum string

const (
	DivAutocorrectEnumOn DivAutocorrectEnum = "on"
	DivAutocorrectEnumOff DivAutocorrectEnum = "off"
)

type DivContenteditableEnum string

const (
	DivContenteditableEnumFalse DivContenteditableEnum = "false"
	DivContenteditableEnumPlaintextOnly DivContenteditableEnum = "plaintext-only"
	DivContenteditableEnumTrue DivContenteditableEnum = "true"
)

type DivDirEnum string

const (
	DivDirEnumLtr DivDirEnum = "ltr"
	DivDirEnumRtl DivDirEnum = "rtl"
	DivDirEnumAuto DivDirEnum = "auto"
)

type DivDraggableEnum string

const (
	DivDraggableEnumFalse DivDraggableEnum = "false"
	DivDraggableEnumTrue DivDraggableEnum = "true"
)

type DivEnterkeyhintEnum string

const (
	DivEnterkeyhintEnumPrevious DivEnterkeyhintEnum = "previous"
	DivEnterkeyhintEnumSearch DivEnterkeyhintEnum = "search"
	DivEnterkeyhintEnumSend DivEnterkeyhintEnum = "send"
	DivEnterkeyhintEnumDone DivEnterkeyhintEnum = "done"
	DivEnterkeyhintEnumEnter DivEnterkeyhintEnum = "enter"
	DivEnterkeyhintEnumGo DivEnterkeyhintEnum = "go"
	DivEnterkeyhintEnumNext DivEnterkeyhintEnum = "next"
)

type DivHiddenEnum string

const (
	DivHiddenEnumHidden DivHiddenEnum = "hidden"
	DivHiddenEnumUntilFound DivHiddenEnum = "until-found"
)

type divAttrs map[string]any

func (e *DivElement) Autocapitalize(a DivAutocapitalizeEnum) *DivElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *DivElement) Autocorrect(a DivAutocorrectEnum) *DivElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *DivElement) Autofocus(b bool) *DivElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *DivElement) Class(s ...string) *DivElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *DivElement) Contenteditable(a DivContenteditableEnum) *DivElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *DivElement) Dir(a DivDirEnum) *DivElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *DivElement) Draggable(a DivDraggableEnum) *DivElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *DivElement) Enterkeyhint(a DivEnterkeyhintEnum) *DivElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *DivElement) Hidden(a DivHiddenEnum) *DivElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *DivElement) Id(s string) *DivElement {
	e.attributes["id"] = s
	
	return e
}

func (e *DivElement) Slot(s string) *DivElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *DivElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<div")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</div>")); err != nil {
		return err
	}

	return nil
}
