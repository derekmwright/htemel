// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type DivElement struct {
	attributes divAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// Div creates a tag <div> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The div element has no special meaning at all. It represents its children. It can be used with the class, lang, and title attributes to mark up semantics common to a group of consecutive elements. It can also be used in a dl element, wrapping groups of dt and dd elements.
func Div(children ...htemel.Node) *DivElement {
	node := &DivElement{
		children: children, attributes: make(divAttrs),
	}

	return node
}

func DivIf(condition bool, children ...htemel.Node) *DivElement {
	if condition {
		return Div(children...)
	}

	return &DivElement{
		skipRender: true,
	}
}

func DivTernary(condition bool, true htemel.Node, false htemel.Node) *DivElement {
	if condition {
		return Div(true)
	}

	return Div(false)
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *DivElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *DivElement) AddIndent(i int) {
	e.indent = i + 1
}

type DivAutocapitalizeEnum string

const (
	DivAutocapitalizeEnumWords      DivAutocapitalizeEnum = "words"
	DivAutocapitalizeEnumCharacters DivAutocapitalizeEnum = "characters"
	DivAutocapitalizeEnumNone       DivAutocapitalizeEnum = "none"
	DivAutocapitalizeEnumOff        DivAutocapitalizeEnum = "off"
	DivAutocapitalizeEnumOn         DivAutocapitalizeEnum = "on"
	DivAutocapitalizeEnumSentences  DivAutocapitalizeEnum = "sentences"
)

type DivAutocorrectEnum string

const (
	DivAutocorrectEnumOff   DivAutocorrectEnum = "off"
	DivAutocorrectEnumOn    DivAutocorrectEnum = "on"
	DivAutocorrectEnumEmpty DivAutocorrectEnum = ""
)

type DivContenteditableEnum string

const (
	DivContenteditableEnumFalse         DivContenteditableEnum = "false"
	DivContenteditableEnumPlaintextOnly DivContenteditableEnum = "plaintext-only"
	DivContenteditableEnumTrue          DivContenteditableEnum = "true"
	DivContenteditableEnumEmpty         DivContenteditableEnum = ""
)

type DivDirEnum string

const (
	DivDirEnumRtl  DivDirEnum = "rtl"
	DivDirEnumAuto DivDirEnum = "auto"
	DivDirEnumLtr  DivDirEnum = "ltr"
)

type DivDraggableEnum string

const (
	DivDraggableEnumFalse DivDraggableEnum = "false"
	DivDraggableEnumTrue  DivDraggableEnum = "true"
)

type DivEnterkeyhintEnum string

const (
	DivEnterkeyhintEnumPrevious DivEnterkeyhintEnum = "previous"
	DivEnterkeyhintEnumSearch   DivEnterkeyhintEnum = "search"
	DivEnterkeyhintEnumSend     DivEnterkeyhintEnum = "send"
	DivEnterkeyhintEnumDone     DivEnterkeyhintEnum = "done"
	DivEnterkeyhintEnumEnter    DivEnterkeyhintEnum = "enter"
	DivEnterkeyhintEnumGo       DivEnterkeyhintEnum = "go"
	DivEnterkeyhintEnumNext     DivEnterkeyhintEnum = "next"
)

type DivHiddenEnum string

const (
	DivHiddenEnumHidden     DivHiddenEnum = "hidden"
	DivHiddenEnumUntilFound DivHiddenEnum = "until-found"
	DivHiddenEnumEmpty      DivHiddenEnum = ""
)

type DivInputmodeEnum string

const (
	DivInputmodeEnumTel     DivInputmodeEnum = "tel"
	DivInputmodeEnumText    DivInputmodeEnum = "text"
	DivInputmodeEnumUrl     DivInputmodeEnum = "url"
	DivInputmodeEnumDecimal DivInputmodeEnum = "decimal"
	DivInputmodeEnumEmail   DivInputmodeEnum = "email"
	DivInputmodeEnumNone    DivInputmodeEnum = "none"
	DivInputmodeEnumNumeric DivInputmodeEnum = "numeric"
	DivInputmodeEnumSearch  DivInputmodeEnum = "search"
)

type DivSpellcheckEnum string

const (
	DivSpellcheckEnumFalse DivSpellcheckEnum = "false"
	DivSpellcheckEnumTrue  DivSpellcheckEnum = "true"
	DivSpellcheckEnumEmpty DivSpellcheckEnum = ""
)

type DivTranslateEnum string

const (
	DivTranslateEnumNo    DivTranslateEnum = "no"
	DivTranslateEnumYes   DivTranslateEnum = "yes"
	DivTranslateEnumEmpty DivTranslateEnum = ""
)

type DivWritingsuggestionsEnum string

const (
	DivWritingsuggestionsEnumFalse DivWritingsuggestionsEnum = "false"
	DivWritingsuggestionsEnumTrue  DivWritingsuggestionsEnum = "true"
	DivWritingsuggestionsEnumEmpty DivWritingsuggestionsEnum = ""
)

type divAttrs map[string]any

func (e *DivElement) Autocapitalize(a DivAutocapitalizeEnum) *DivElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *DivElement) Autocorrect(a DivAutocorrectEnum) *DivElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *DivElement) Autofocus(b bool) *DivElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *DivElement) Class(s ...string) *DivElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *DivElement) Contenteditable(a DivContenteditableEnum) *DivElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *DivElement) DataUnsafe(name string, s string) *DivElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *DivElement) Data(name string, s string) *DivElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *DivElement) Dir(a DivDirEnum) *DivElement {
	e.attributes["dir"] = a

	return e
}

func (e *DivElement) Draggable(a DivDraggableEnum) *DivElement {
	e.attributes["draggable"] = a

	return e
}

func (e *DivElement) Enterkeyhint(a DivEnterkeyhintEnum) *DivElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *DivElement) Hidden(a DivHiddenEnum) *DivElement {
	e.attributes["hidden"] = a

	return e
}

func (e *DivElement) Id(s string) *DivElement {
	e.attributes["id"] = s

	return e
}

func (e *DivElement) Inert(b bool) *DivElement {
	e.attributes["inert"] = b

	return e
}

func (e *DivElement) Inputmode(a DivInputmodeEnum) *DivElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *DivElement) Itemid(s string) *DivElement {
	e.attributes["itemid"] = s

	return e
}

func (e *DivElement) Itemprop(s ...string) *DivElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *DivElement) Itemref(s ...string) *DivElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *DivElement) Itemscope(b bool) *DivElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *DivElement) Itemtype(s ...string) *DivElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *DivElement) Lang(s string) *DivElement {
	e.attributes["lang"] = s

	return e
}

func (e *DivElement) Nonce(s string) *DivElement {
	e.attributes["nonce"] = s

	return e
}

func (e *DivElement) Popover(s string) *DivElement {
	e.attributes["popover"] = s

	return e
}

func (e *DivElement) Slot(s string) *DivElement {
	e.attributes["slot"] = s

	return e
}

func (e *DivElement) Spellcheck(a DivSpellcheckEnum) *DivElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *DivElement) Style(s string) *DivElement {
	e.attributes["style"] = s

	return e
}

func (e *DivElement) Tabindex(i int) *DivElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *DivElement) Title(s string) *DivElement {
	e.attributes["title"] = s

	return e
}

func (e *DivElement) Translate(a DivTranslateEnum) *DivElement {
	e.attributes["translate"] = a

	return e
}

func (e *DivElement) Writingsuggestions(a DivWritingsuggestionsEnum) *DivElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *DivElement) Render(w io.Writer) error {
	indent := strings.Repeat("  ", e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<div")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}
	for _, child := range e.children {
		child.AddIndent(e.Indent())
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(indent + "</div>\n")); err != nil {
		return err
	}

	return nil
}
