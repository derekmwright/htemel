// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type HeaderElement struct {
	attributes headerAttrs
	children   []htemel.Node
	skipRender bool
}

// Header creates a tag <header> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The header element represents a group of introductory or navigational aids.
func Header(children ...htemel.Node) *HeaderElement {
	node := &HeaderElement{
		children: children, attributes: make(headerAttrs),
	}

	return node
}

func HeaderIf(condition bool, children ...htemel.Node) *HeaderElement {
	if condition {
		return Header(children...)
	}

	return &HeaderElement{
		skipRender: true,
	}
}

func HeaderTernary(condition bool, true htemel.Node, false htemel.Node) *HeaderElement {
	if condition {
		return Header(true)
	}

	return Header(false)
}

type HeaderAutocapitalizeEnum string

const (
	HeaderAutocapitalizeEnumSentences  HeaderAutocapitalizeEnum = "sentences"
	HeaderAutocapitalizeEnumWords      HeaderAutocapitalizeEnum = "words"
	HeaderAutocapitalizeEnumCharacters HeaderAutocapitalizeEnum = "characters"
	HeaderAutocapitalizeEnumNone       HeaderAutocapitalizeEnum = "none"
	HeaderAutocapitalizeEnumOff        HeaderAutocapitalizeEnum = "off"
	HeaderAutocapitalizeEnumOn         HeaderAutocapitalizeEnum = "on"
)

type HeaderAutocorrectEnum string

const (
	HeaderAutocorrectEnumOff   HeaderAutocorrectEnum = "off"
	HeaderAutocorrectEnumOn    HeaderAutocorrectEnum = "on"
	HeaderAutocorrectEnumEmpty HeaderAutocorrectEnum = ""
)

type HeaderContenteditableEnum string

const (
	HeaderContenteditableEnumFalse         HeaderContenteditableEnum = "false"
	HeaderContenteditableEnumPlaintextOnly HeaderContenteditableEnum = "plaintext-only"
	HeaderContenteditableEnumTrue          HeaderContenteditableEnum = "true"
	HeaderContenteditableEnumEmpty         HeaderContenteditableEnum = ""
)

type HeaderDirEnum string

const (
	HeaderDirEnumAuto HeaderDirEnum = "auto"
	HeaderDirEnumLtr  HeaderDirEnum = "ltr"
	HeaderDirEnumRtl  HeaderDirEnum = "rtl"
)

type HeaderDraggableEnum string

const (
	HeaderDraggableEnumFalse HeaderDraggableEnum = "false"
	HeaderDraggableEnumTrue  HeaderDraggableEnum = "true"
)

type HeaderEnterkeyhintEnum string

const (
	HeaderEnterkeyhintEnumEnter    HeaderEnterkeyhintEnum = "enter"
	HeaderEnterkeyhintEnumGo       HeaderEnterkeyhintEnum = "go"
	HeaderEnterkeyhintEnumNext     HeaderEnterkeyhintEnum = "next"
	HeaderEnterkeyhintEnumPrevious HeaderEnterkeyhintEnum = "previous"
	HeaderEnterkeyhintEnumSearch   HeaderEnterkeyhintEnum = "search"
	HeaderEnterkeyhintEnumSend     HeaderEnterkeyhintEnum = "send"
	HeaderEnterkeyhintEnumDone     HeaderEnterkeyhintEnum = "done"
)

type HeaderHiddenEnum string

const (
	HeaderHiddenEnumHidden     HeaderHiddenEnum = "hidden"
	HeaderHiddenEnumUntilFound HeaderHiddenEnum = "until-found"
	HeaderHiddenEnumEmpty      HeaderHiddenEnum = ""
)

type HeaderInputmodeEnum string

const (
	HeaderInputmodeEnumSearch  HeaderInputmodeEnum = "search"
	HeaderInputmodeEnumTel     HeaderInputmodeEnum = "tel"
	HeaderInputmodeEnumText    HeaderInputmodeEnum = "text"
	HeaderInputmodeEnumUrl     HeaderInputmodeEnum = "url"
	HeaderInputmodeEnumDecimal HeaderInputmodeEnum = "decimal"
	HeaderInputmodeEnumEmail   HeaderInputmodeEnum = "email"
	HeaderInputmodeEnumNone    HeaderInputmodeEnum = "none"
	HeaderInputmodeEnumNumeric HeaderInputmodeEnum = "numeric"
)

type HeaderSpellcheckEnum string

const (
	HeaderSpellcheckEnumFalse HeaderSpellcheckEnum = "false"
	HeaderSpellcheckEnumTrue  HeaderSpellcheckEnum = "true"
	HeaderSpellcheckEnumEmpty HeaderSpellcheckEnum = ""
)

type HeaderTranslateEnum string

const (
	HeaderTranslateEnumNo    HeaderTranslateEnum = "no"
	HeaderTranslateEnumYes   HeaderTranslateEnum = "yes"
	HeaderTranslateEnumEmpty HeaderTranslateEnum = ""
)

type HeaderWritingsuggestionsEnum string

const (
	HeaderWritingsuggestionsEnumFalse HeaderWritingsuggestionsEnum = "false"
	HeaderWritingsuggestionsEnumTrue  HeaderWritingsuggestionsEnum = "true"
	HeaderWritingsuggestionsEnumEmpty HeaderWritingsuggestionsEnum = ""
)

type headerAttrs map[string]any

func (e *HeaderElement) Autocapitalize(a HeaderAutocapitalizeEnum) *HeaderElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *HeaderElement) Autocorrect(a HeaderAutocorrectEnum) *HeaderElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *HeaderElement) Autofocus(b bool) *HeaderElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *HeaderElement) Class(s ...string) *HeaderElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *HeaderElement) Contenteditable(a HeaderContenteditableEnum) *HeaderElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *HeaderElement) DataUnsafe(name string, s string) *HeaderElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *HeaderElement) Data(name string, s string) *HeaderElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *HeaderElement) Dir(a HeaderDirEnum) *HeaderElement {
	e.attributes["dir"] = a

	return e
}

func (e *HeaderElement) Draggable(a HeaderDraggableEnum) *HeaderElement {
	e.attributes["draggable"] = a

	return e
}

func (e *HeaderElement) Enterkeyhint(a HeaderEnterkeyhintEnum) *HeaderElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *HeaderElement) Hidden(a HeaderHiddenEnum) *HeaderElement {
	e.attributes["hidden"] = a

	return e
}

func (e *HeaderElement) Id(s string) *HeaderElement {
	e.attributes["id"] = s

	return e
}

func (e *HeaderElement) Inert(b bool) *HeaderElement {
	e.attributes["inert"] = b

	return e
}

func (e *HeaderElement) Inputmode(a HeaderInputmodeEnum) *HeaderElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *HeaderElement) Itemid(s string) *HeaderElement {
	e.attributes["itemid"] = s

	return e
}

func (e *HeaderElement) Itemprop(s ...string) *HeaderElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *HeaderElement) Itemref(s ...string) *HeaderElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *HeaderElement) Itemscope(b bool) *HeaderElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *HeaderElement) Itemtype(s ...string) *HeaderElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *HeaderElement) Lang(s string) *HeaderElement {
	e.attributes["lang"] = s

	return e
}

func (e *HeaderElement) Nonce(s string) *HeaderElement {
	e.attributes["nonce"] = s

	return e
}

func (e *HeaderElement) Popover(s string) *HeaderElement {
	e.attributes["popover"] = s

	return e
}

func (e *HeaderElement) Slot(s string) *HeaderElement {
	e.attributes["slot"] = s

	return e
}

func (e *HeaderElement) Spellcheck(a HeaderSpellcheckEnum) *HeaderElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *HeaderElement) Style(s string) *HeaderElement {
	e.attributes["style"] = s

	return e
}

func (e *HeaderElement) Tabindex(i int) *HeaderElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *HeaderElement) Title(s string) *HeaderElement {
	e.attributes["title"] = s

	return e
}

func (e *HeaderElement) Translate(a HeaderTranslateEnum) *HeaderElement {
	e.attributes["translate"] = a

	return e
}

func (e *HeaderElement) Writingsuggestions(a HeaderWritingsuggestionsEnum) *HeaderElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *HeaderElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<header")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}
	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</header>")); err != nil {
		return err
	}

	return nil
}
