// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type HeaderElement struct {
	attributes headerAttrs
	children   []htemel.Node
	skipRender bool
}

// Header creates a tag <header> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The header element represents a group of introductory or navigational aids.
func Header(children ...htemel.Node) *HeaderElement {
	node := &HeaderElement{
		children:   children,
		attributes: make(headerAttrs),
	}

	return node
}

func HeaderIf(condition bool, children ...htemel.Node) *HeaderElement {
	if condition {
		return Header(children...)
	}

	return &HeaderElement{
		skipRender: true,
	}
}

type HeaderAutocapitalizeAttrEnum string

const (
	HeaderAutocapitalizeAttrEnumCharacters HeaderAutocapitalizeAttrEnum = "characters"
	HeaderAutocapitalizeAttrEnumNone       HeaderAutocapitalizeAttrEnum = "none"
	HeaderAutocapitalizeAttrEnumOff        HeaderAutocapitalizeAttrEnum = "off"
	HeaderAutocapitalizeAttrEnumOn         HeaderAutocapitalizeAttrEnum = "on"
	HeaderAutocapitalizeAttrEnumSentences  HeaderAutocapitalizeAttrEnum = "sentences"
	HeaderAutocapitalizeAttrEnumWords      HeaderAutocapitalizeAttrEnum = "words"
)

type HeaderAutocorrectAttrEnum string

const (
	HeaderAutocorrectAttrEnumOn  HeaderAutocorrectAttrEnum = "on"
	HeaderAutocorrectAttrEnumOff HeaderAutocorrectAttrEnum = "off"
)

type HeaderContenteditableAttrEnum string

const (
	HeaderContenteditableAttrEnumFalse         HeaderContenteditableAttrEnum = "false"
	HeaderContenteditableAttrEnumPlaintextOnly HeaderContenteditableAttrEnum = "plaintext-only"
	HeaderContenteditableAttrEnumTrue          HeaderContenteditableAttrEnum = "true"
)

type headerAttrs map[string]any

func (e *HeaderElement) Autocapitalize(a HeaderAutocapitalizeAttrEnum) *HeaderElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *HeaderElement) Autocorrect(a HeaderAutocorrectAttrEnum) *HeaderElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *HeaderElement) Autofocus(b bool) *HeaderElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *HeaderElement) Class(s ...string) *HeaderElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *HeaderElement) Contenteditable(a HeaderContenteditableAttrEnum) *HeaderElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *HeaderElement) Id(s string) *HeaderElement {
	e.attributes["id"] = s

	return e
}

func (e *HeaderElement) Slot(s string) *HeaderElement {
	e.attributes["slot"] = s

	return e
}

func (e *HeaderElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<header")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		w.Write([]byte(" " + key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</header>")); err != nil {
		return err
	}

	return nil
}
