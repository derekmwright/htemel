// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type HeaderElement struct {
	attributes headerAttrs
	children []htemel.Node
	skipRender bool
}

// Header creates a tag <header> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The header element represents a group of introductory or navigational aids.
func Header(children ...htemel.Node) *HeaderElement {
	node := &HeaderElement{
		children: children,
		attributes: make(headerAttrs),
	}

	return node
}

func HeaderIf(condition bool, children ...htemel.Node) *HeaderElement {
	if condition {
		return Header(children...)
	}

	return &HeaderElement{
		skipRender: true,
	}
}

type HeaderAutocapitalizeEnum string

const (
	HeaderAutocapitalizeEnumCharacters HeaderAutocapitalizeEnum = "characters"
	HeaderAutocapitalizeEnumNone HeaderAutocapitalizeEnum = "none"
	HeaderAutocapitalizeEnumOff HeaderAutocapitalizeEnum = "off"
	HeaderAutocapitalizeEnumOn HeaderAutocapitalizeEnum = "on"
	HeaderAutocapitalizeEnumSentences HeaderAutocapitalizeEnum = "sentences"
	HeaderAutocapitalizeEnumWords HeaderAutocapitalizeEnum = "words"
)

type HeaderAutocorrectEnum string

const (
	HeaderAutocorrectEnumOff HeaderAutocorrectEnum = "off"
	HeaderAutocorrectEnumOn HeaderAutocorrectEnum = "on"
)

type HeaderContenteditableEnum string

const (
	HeaderContenteditableEnumTrue HeaderContenteditableEnum = "true"
	HeaderContenteditableEnumFalse HeaderContenteditableEnum = "false"
	HeaderContenteditableEnumPlaintextOnly HeaderContenteditableEnum = "plaintext-only"
)

type HeaderDirEnum string

const (
	HeaderDirEnumAuto HeaderDirEnum = "auto"
	HeaderDirEnumLtr HeaderDirEnum = "ltr"
	HeaderDirEnumRtl HeaderDirEnum = "rtl"
)

type HeaderDraggableEnum string

const (
	HeaderDraggableEnumFalse HeaderDraggableEnum = "false"
	HeaderDraggableEnumTrue HeaderDraggableEnum = "true"
)

type HeaderEnterkeyhintEnum string

const (
	HeaderEnterkeyhintEnumGo HeaderEnterkeyhintEnum = "go"
	HeaderEnterkeyhintEnumNext HeaderEnterkeyhintEnum = "next"
	HeaderEnterkeyhintEnumPrevious HeaderEnterkeyhintEnum = "previous"
	HeaderEnterkeyhintEnumSearch HeaderEnterkeyhintEnum = "search"
	HeaderEnterkeyhintEnumSend HeaderEnterkeyhintEnum = "send"
	HeaderEnterkeyhintEnumDone HeaderEnterkeyhintEnum = "done"
	HeaderEnterkeyhintEnumEnter HeaderEnterkeyhintEnum = "enter"
)

type HeaderHiddenEnum string

const (
	HeaderHiddenEnumHidden HeaderHiddenEnum = "hidden"
	HeaderHiddenEnumUntilFound HeaderHiddenEnum = "until-found"
)

type headerAttrs map[string]any

func (e *HeaderElement) Autocapitalize(a HeaderAutocapitalizeEnum) *HeaderElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *HeaderElement) Autocorrect(a HeaderAutocorrectEnum) *HeaderElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *HeaderElement) Autofocus(b bool) *HeaderElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *HeaderElement) Class(s ...string) *HeaderElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *HeaderElement) Contenteditable(a HeaderContenteditableEnum) *HeaderElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *HeaderElement) Dir(a HeaderDirEnum) *HeaderElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *HeaderElement) Draggable(a HeaderDraggableEnum) *HeaderElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *HeaderElement) Enterkeyhint(a HeaderEnterkeyhintEnum) *HeaderElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *HeaderElement) Hidden(a HeaderHiddenEnum) *HeaderElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *HeaderElement) Id(s string) *HeaderElement {
	e.attributes["id"] = s
	
	return e
}

func (e *HeaderElement) Slot(s string) *HeaderElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *HeaderElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<header")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</header>")); err != nil {
		return err
	}

	return nil
}
