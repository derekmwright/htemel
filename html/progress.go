// Code generated by htemel. DO NOT EDIT.
package html

import (
  "github.com/derekmwright/htemel"
  "io"
)

type ProgressElement struct {
	children []htemel.Node
}

// Progress creates a tag <progress> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The progress element represents the completion progress of a task. The progress is either indeterminate, indicating that progress is being made but that it is not clear how much more work remains to be done before the task is complete (e.g. because the task is waiting for a remote host to respond), or the progress is a number in the range zero to a maximum, giving the fraction of work that has so far been completed.
func Progress(children ...htemel.Node) *ProgressElement {
	node := &ProgressElement{
		children: children,
	}

	return node
}

func ProgressIf(condition bool, children ...htemel.Node) *ProgressElement {
	if condition {
		return Progress(children...)
	}

	return nil
}

func (e *ProgressElement) Render(w io.Writer) error {
	if _, err := w.Write([]byte("<progress")); err != nil {
		return err
	}

	// TODO: Attribute stuff here

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</progress>")); err != nil {
		return err
	}

	return nil
}
