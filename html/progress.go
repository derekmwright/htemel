// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type ProgressElement struct {
	attributes progressAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// Progress creates a tag <progress> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The progress element represents the completion progress of a task. The progress is either indeterminate, indicating that progress is being made but that it is not clear how much more work remains to be done before the task is complete (e.g. because the task is waiting for a remote host to respond), or the progress is a number in the range zero to a maximum, giving the fraction of work that has so far been completed.
func Progress(children ...htemel.Node) *ProgressElement {
	node := &ProgressElement{
		children:   children,
		attributes: make(progressAttrs),
	}

	return node
}

func ProgressIf(condition bool, children ...htemel.Node) *ProgressElement {
	if condition {
		return Progress(children...)
	}

	return &ProgressElement{
		children:   children,
		attributes: make(progressAttrs),
		skipRender: true,
	}
}

func ProgressTernary(condition bool, true htemel.Node, false htemel.Node) *ProgressElement {
	if condition {
		return Progress(true)
	}

	return Progress(false)
}

type ProgressAutocapitalizeEnum string

const (
	ProgressAutocapitalizeEnumCharacters ProgressAutocapitalizeEnum = "characters"
	ProgressAutocapitalizeEnumNone       ProgressAutocapitalizeEnum = "none"
	ProgressAutocapitalizeEnumOff        ProgressAutocapitalizeEnum = "off"
	ProgressAutocapitalizeEnumOn         ProgressAutocapitalizeEnum = "on"
	ProgressAutocapitalizeEnumSentences  ProgressAutocapitalizeEnum = "sentences"
	ProgressAutocapitalizeEnumWords      ProgressAutocapitalizeEnum = "words"
)

type ProgressAutocorrectEnum string

const (
	ProgressAutocorrectEnumOff   ProgressAutocorrectEnum = "off"
	ProgressAutocorrectEnumOn    ProgressAutocorrectEnum = "on"
	ProgressAutocorrectEnumEmpty ProgressAutocorrectEnum = ""
)

type ProgressContenteditableEnum string

const (
	ProgressContenteditableEnumFalse         ProgressContenteditableEnum = "false"
	ProgressContenteditableEnumPlaintextOnly ProgressContenteditableEnum = "plaintext-only"
	ProgressContenteditableEnumTrue          ProgressContenteditableEnum = "true"
	ProgressContenteditableEnumEmpty         ProgressContenteditableEnum = ""
)

type ProgressDirEnum string

const (
	ProgressDirEnumAuto ProgressDirEnum = "auto"
	ProgressDirEnumLtr  ProgressDirEnum = "ltr"
	ProgressDirEnumRtl  ProgressDirEnum = "rtl"
)

type ProgressDraggableEnum string

const (
	ProgressDraggableEnumFalse ProgressDraggableEnum = "false"
	ProgressDraggableEnumTrue  ProgressDraggableEnum = "true"
)

type ProgressEnterkeyhintEnum string

const (
	ProgressEnterkeyhintEnumSend     ProgressEnterkeyhintEnum = "send"
	ProgressEnterkeyhintEnumDone     ProgressEnterkeyhintEnum = "done"
	ProgressEnterkeyhintEnumEnter    ProgressEnterkeyhintEnum = "enter"
	ProgressEnterkeyhintEnumGo       ProgressEnterkeyhintEnum = "go"
	ProgressEnterkeyhintEnumNext     ProgressEnterkeyhintEnum = "next"
	ProgressEnterkeyhintEnumPrevious ProgressEnterkeyhintEnum = "previous"
	ProgressEnterkeyhintEnumSearch   ProgressEnterkeyhintEnum = "search"
)

type ProgressHiddenEnum string

const (
	ProgressHiddenEnumHidden     ProgressHiddenEnum = "hidden"
	ProgressHiddenEnumUntilFound ProgressHiddenEnum = "until-found"
	ProgressHiddenEnumEmpty      ProgressHiddenEnum = ""
)

type ProgressInputmodeEnum string

const (
	ProgressInputmodeEnumEmail   ProgressInputmodeEnum = "email"
	ProgressInputmodeEnumNone    ProgressInputmodeEnum = "none"
	ProgressInputmodeEnumNumeric ProgressInputmodeEnum = "numeric"
	ProgressInputmodeEnumSearch  ProgressInputmodeEnum = "search"
	ProgressInputmodeEnumTel     ProgressInputmodeEnum = "tel"
	ProgressInputmodeEnumText    ProgressInputmodeEnum = "text"
	ProgressInputmodeEnumUrl     ProgressInputmodeEnum = "url"
	ProgressInputmodeEnumDecimal ProgressInputmodeEnum = "decimal"
)

type ProgressSpellcheckEnum string

const (
	ProgressSpellcheckEnumFalse ProgressSpellcheckEnum = "false"
	ProgressSpellcheckEnumTrue  ProgressSpellcheckEnum = "true"
	ProgressSpellcheckEnumEmpty ProgressSpellcheckEnum = ""
)

type ProgressTranslateEnum string

const (
	ProgressTranslateEnumNo    ProgressTranslateEnum = "no"
	ProgressTranslateEnumYes   ProgressTranslateEnum = "yes"
	ProgressTranslateEnumEmpty ProgressTranslateEnum = ""
)

type ProgressWritingsuggestionsEnum string

const (
	ProgressWritingsuggestionsEnumTrue  ProgressWritingsuggestionsEnum = "true"
	ProgressWritingsuggestionsEnumFalse ProgressWritingsuggestionsEnum = "false"
	ProgressWritingsuggestionsEnumEmpty ProgressWritingsuggestionsEnum = ""
)

type progressAttrs map[string]any

func (e *ProgressElement) Value(f float64) *ProgressElement {
	e.attributes["value"] = f

	return e
}

func (e *ProgressElement) Max(f float64) *ProgressElement {
	e.attributes["max"] = f

	return e
}

func (e *ProgressElement) Autocapitalize(a ProgressAutocapitalizeEnum) *ProgressElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *ProgressElement) Autocorrect(a ProgressAutocorrectEnum) *ProgressElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *ProgressElement) Autofocus(b bool) *ProgressElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *ProgressElement) Class(s ...string) *ProgressElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *ProgressElement) Contenteditable(a ProgressContenteditableEnum) *ProgressElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *ProgressElement) DataUnsafe(name string, s string) *ProgressElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *ProgressElement) Data(name string, s string) *ProgressElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *ProgressElement) Dir(a ProgressDirEnum) *ProgressElement {
	e.attributes["dir"] = a

	return e
}

func (e *ProgressElement) Draggable(a ProgressDraggableEnum) *ProgressElement {
	e.attributes["draggable"] = a

	return e
}

func (e *ProgressElement) Enterkeyhint(a ProgressEnterkeyhintEnum) *ProgressElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *ProgressElement) Hidden(a ProgressHiddenEnum) *ProgressElement {
	e.attributes["hidden"] = a

	return e
}

func (e *ProgressElement) Id(s string) *ProgressElement {
	e.attributes["id"] = s

	return e
}

func (e *ProgressElement) Inert(b bool) *ProgressElement {
	e.attributes["inert"] = b

	return e
}

func (e *ProgressElement) Inputmode(a ProgressInputmodeEnum) *ProgressElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *ProgressElement) Itemid(s string) *ProgressElement {
	e.attributes["itemid"] = s

	return e
}

func (e *ProgressElement) Itemprop(s ...string) *ProgressElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *ProgressElement) Itemref(s ...string) *ProgressElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *ProgressElement) Itemscope(b bool) *ProgressElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *ProgressElement) Itemtype(s ...string) *ProgressElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *ProgressElement) Lang(s string) *ProgressElement {
	e.attributes["lang"] = s

	return e
}

func (e *ProgressElement) Nonce(s string) *ProgressElement {
	e.attributes["nonce"] = s

	return e
}

func (e *ProgressElement) Popover(s string) *ProgressElement {
	e.attributes["popover"] = s

	return e
}

func (e *ProgressElement) Slot(s string) *ProgressElement {
	e.attributes["slot"] = s

	return e
}

func (e *ProgressElement) Spellcheck(a ProgressSpellcheckEnum) *ProgressElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *ProgressElement) Style(s string) *ProgressElement {
	e.attributes["style"] = s

	return e
}

func (e *ProgressElement) Tabindex(i int) *ProgressElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *ProgressElement) Title(s string) *ProgressElement {
	e.attributes["title"] = s

	return e
}

func (e *ProgressElement) Translate(a ProgressTranslateEnum) *ProgressElement {
	e.attributes["translate"] = a

	return e
}

func (e *ProgressElement) Writingsuggestions(a ProgressWritingsuggestionsEnum) *ProgressElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *ProgressElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<progress")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}
	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</progress>")); err != nil {
		return err
	}

	return nil
}
