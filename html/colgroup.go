// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type ColgroupElement struct {
	attributes colgroupAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// Colgroup creates a tag <colgroup> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The colgroup element represents a group of one or more columns in the table that is its parent, if it has a parent and that is a table element.
func Colgroup(children ...htemel.Node) *ColgroupElement {
	node := &ColgroupElement{
		children: children, attributes: make(colgroupAttrs),
	}

	return node
}

func ColgroupIf(condition bool, children ...htemel.Node) *ColgroupElement {
	if condition {
		return Colgroup(children...)
	}

	return &ColgroupElement{
		skipRender: true,
	}
}

func ColgroupTernary(condition bool, true htemel.Node, false htemel.Node) *ColgroupElement {
	if condition {
		return Colgroup(true)
	}

	return Colgroup(false)
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *ColgroupElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *ColgroupElement) AddIndent(i int) {
	e.indent = i + 1
}

type ColgroupAutocapitalizeEnum string

const (
	ColgroupAutocapitalizeEnumOff        ColgroupAutocapitalizeEnum = "off"
	ColgroupAutocapitalizeEnumOn         ColgroupAutocapitalizeEnum = "on"
	ColgroupAutocapitalizeEnumSentences  ColgroupAutocapitalizeEnum = "sentences"
	ColgroupAutocapitalizeEnumWords      ColgroupAutocapitalizeEnum = "words"
	ColgroupAutocapitalizeEnumCharacters ColgroupAutocapitalizeEnum = "characters"
	ColgroupAutocapitalizeEnumNone       ColgroupAutocapitalizeEnum = "none"
)

type ColgroupAutocorrectEnum string

const (
	ColgroupAutocorrectEnumOff   ColgroupAutocorrectEnum = "off"
	ColgroupAutocorrectEnumOn    ColgroupAutocorrectEnum = "on"
	ColgroupAutocorrectEnumEmpty ColgroupAutocorrectEnum = ""
)

type ColgroupContenteditableEnum string

const (
	ColgroupContenteditableEnumFalse         ColgroupContenteditableEnum = "false"
	ColgroupContenteditableEnumPlaintextOnly ColgroupContenteditableEnum = "plaintext-only"
	ColgroupContenteditableEnumTrue          ColgroupContenteditableEnum = "true"
	ColgroupContenteditableEnumEmpty         ColgroupContenteditableEnum = ""
)

type ColgroupDirEnum string

const (
	ColgroupDirEnumAuto ColgroupDirEnum = "auto"
	ColgroupDirEnumLtr  ColgroupDirEnum = "ltr"
	ColgroupDirEnumRtl  ColgroupDirEnum = "rtl"
)

type ColgroupDraggableEnum string

const (
	ColgroupDraggableEnumFalse ColgroupDraggableEnum = "false"
	ColgroupDraggableEnumTrue  ColgroupDraggableEnum = "true"
)

type ColgroupEnterkeyhintEnum string

const (
	ColgroupEnterkeyhintEnumPrevious ColgroupEnterkeyhintEnum = "previous"
	ColgroupEnterkeyhintEnumSearch   ColgroupEnterkeyhintEnum = "search"
	ColgroupEnterkeyhintEnumSend     ColgroupEnterkeyhintEnum = "send"
	ColgroupEnterkeyhintEnumDone     ColgroupEnterkeyhintEnum = "done"
	ColgroupEnterkeyhintEnumEnter    ColgroupEnterkeyhintEnum = "enter"
	ColgroupEnterkeyhintEnumGo       ColgroupEnterkeyhintEnum = "go"
	ColgroupEnterkeyhintEnumNext     ColgroupEnterkeyhintEnum = "next"
)

type ColgroupHiddenEnum string

const (
	ColgroupHiddenEnumHidden     ColgroupHiddenEnum = "hidden"
	ColgroupHiddenEnumUntilFound ColgroupHiddenEnum = "until-found"
	ColgroupHiddenEnumEmpty      ColgroupHiddenEnum = ""
)

type ColgroupInputmodeEnum string

const (
	ColgroupInputmodeEnumText    ColgroupInputmodeEnum = "text"
	ColgroupInputmodeEnumUrl     ColgroupInputmodeEnum = "url"
	ColgroupInputmodeEnumDecimal ColgroupInputmodeEnum = "decimal"
	ColgroupInputmodeEnumEmail   ColgroupInputmodeEnum = "email"
	ColgroupInputmodeEnumNone    ColgroupInputmodeEnum = "none"
	ColgroupInputmodeEnumNumeric ColgroupInputmodeEnum = "numeric"
	ColgroupInputmodeEnumSearch  ColgroupInputmodeEnum = "search"
	ColgroupInputmodeEnumTel     ColgroupInputmodeEnum = "tel"
)

type ColgroupSpellcheckEnum string

const (
	ColgroupSpellcheckEnumFalse ColgroupSpellcheckEnum = "false"
	ColgroupSpellcheckEnumTrue  ColgroupSpellcheckEnum = "true"
	ColgroupSpellcheckEnumEmpty ColgroupSpellcheckEnum = ""
)

type ColgroupTranslateEnum string

const (
	ColgroupTranslateEnumNo    ColgroupTranslateEnum = "no"
	ColgroupTranslateEnumYes   ColgroupTranslateEnum = "yes"
	ColgroupTranslateEnumEmpty ColgroupTranslateEnum = ""
)

type ColgroupWritingsuggestionsEnum string

const (
	ColgroupWritingsuggestionsEnumFalse ColgroupWritingsuggestionsEnum = "false"
	ColgroupWritingsuggestionsEnumTrue  ColgroupWritingsuggestionsEnum = "true"
	ColgroupWritingsuggestionsEnumEmpty ColgroupWritingsuggestionsEnum = ""
)

type colgroupAttrs map[string]any

func (e *ColgroupElement) Span(i int) *ColgroupElement {
	e.attributes["span"] = i

	return e
}

func (e *ColgroupElement) Autocapitalize(a ColgroupAutocapitalizeEnum) *ColgroupElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *ColgroupElement) Autocorrect(a ColgroupAutocorrectEnum) *ColgroupElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *ColgroupElement) Autofocus(b bool) *ColgroupElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *ColgroupElement) Class(s ...string) *ColgroupElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *ColgroupElement) Contenteditable(a ColgroupContenteditableEnum) *ColgroupElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *ColgroupElement) DataUnsafe(name string, s string) *ColgroupElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *ColgroupElement) Data(name string, s string) *ColgroupElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *ColgroupElement) Dir(a ColgroupDirEnum) *ColgroupElement {
	e.attributes["dir"] = a

	return e
}

func (e *ColgroupElement) Draggable(a ColgroupDraggableEnum) *ColgroupElement {
	e.attributes["draggable"] = a

	return e
}

func (e *ColgroupElement) Enterkeyhint(a ColgroupEnterkeyhintEnum) *ColgroupElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *ColgroupElement) Hidden(a ColgroupHiddenEnum) *ColgroupElement {
	e.attributes["hidden"] = a

	return e
}

func (e *ColgroupElement) Id(s string) *ColgroupElement {
	e.attributes["id"] = s

	return e
}

func (e *ColgroupElement) Inert(b bool) *ColgroupElement {
	e.attributes["inert"] = b

	return e
}

func (e *ColgroupElement) Inputmode(a ColgroupInputmodeEnum) *ColgroupElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *ColgroupElement) Itemid(s string) *ColgroupElement {
	e.attributes["itemid"] = s

	return e
}

func (e *ColgroupElement) Itemprop(s ...string) *ColgroupElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *ColgroupElement) Itemref(s ...string) *ColgroupElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *ColgroupElement) Itemscope(b bool) *ColgroupElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *ColgroupElement) Itemtype(s ...string) *ColgroupElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *ColgroupElement) Lang(s string) *ColgroupElement {
	e.attributes["lang"] = s

	return e
}

func (e *ColgroupElement) Nonce(s string) *ColgroupElement {
	e.attributes["nonce"] = s

	return e
}

func (e *ColgroupElement) Popover(s string) *ColgroupElement {
	e.attributes["popover"] = s

	return e
}

func (e *ColgroupElement) Slot(s string) *ColgroupElement {
	e.attributes["slot"] = s

	return e
}

func (e *ColgroupElement) Spellcheck(a ColgroupSpellcheckEnum) *ColgroupElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *ColgroupElement) Style(s string) *ColgroupElement {
	e.attributes["style"] = s

	return e
}

func (e *ColgroupElement) Tabindex(i int) *ColgroupElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *ColgroupElement) Title(s string) *ColgroupElement {
	e.attributes["title"] = s

	return e
}

func (e *ColgroupElement) Translate(a ColgroupTranslateEnum) *ColgroupElement {
	e.attributes["translate"] = a

	return e
}

func (e *ColgroupElement) Writingsuggestions(a ColgroupWritingsuggestionsEnum) *ColgroupElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *ColgroupElement) Render(w io.Writer) error {
	indent := htemel.SetIndent(e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<colgroup")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}
	for _, child := range e.children {
		child.AddIndent(e.Indent())
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(indent + "</colgroup>\n")); err != nil {
		return err
	}

	return nil
}
