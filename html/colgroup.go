// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type ColgroupElement struct {
	attributes colgroupAttrs
	children   []htemel.Node
	skipRender bool
}

// Colgroup creates a tag <colgroup> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The colgroup element represents a group of one or more columns in the table that is its parent, if it has a parent and that is a table element.
func Colgroup(children ...htemel.Node) *ColgroupElement {
	node := &ColgroupElement{
		children:   children,
		attributes: make(colgroupAttrs),
	}

	return node
}

func ColgroupIf(condition bool, children ...htemel.Node) *ColgroupElement {
	if condition {
		return Colgroup(children...)
	}

	return &ColgroupElement{
		skipRender: true,
	}
}

type ColgroupAutocapitalizeAttrEnum string

const (
	ColgroupAutocapitalizeAttrEnumCharacters ColgroupAutocapitalizeAttrEnum = "characters"
	ColgroupAutocapitalizeAttrEnumNone       ColgroupAutocapitalizeAttrEnum = "none"
	ColgroupAutocapitalizeAttrEnumOff        ColgroupAutocapitalizeAttrEnum = "off"
	ColgroupAutocapitalizeAttrEnumOn         ColgroupAutocapitalizeAttrEnum = "on"
	ColgroupAutocapitalizeAttrEnumSentences  ColgroupAutocapitalizeAttrEnum = "sentences"
	ColgroupAutocapitalizeAttrEnumWords      ColgroupAutocapitalizeAttrEnum = "words"
)

type ColgroupAutocorrectAttrEnum string

const (
	ColgroupAutocorrectAttrEnumOff ColgroupAutocorrectAttrEnum = "off"
	ColgroupAutocorrectAttrEnumOn  ColgroupAutocorrectAttrEnum = "on"
)

type ColgroupContenteditableAttrEnum string

const (
	ColgroupContenteditableAttrEnumFalse         ColgroupContenteditableAttrEnum = "false"
	ColgroupContenteditableAttrEnumPlaintextOnly ColgroupContenteditableAttrEnum = "plaintext-only"
	ColgroupContenteditableAttrEnumTrue          ColgroupContenteditableAttrEnum = "true"
)

type colgroupAttrs map[string]any

func (e *ColgroupElement) Autocapitalize(a ColgroupAutocapitalizeAttrEnum) *ColgroupElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *ColgroupElement) Autocorrect(a ColgroupAutocorrectAttrEnum) *ColgroupElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *ColgroupElement) Autofocus(b bool) *ColgroupElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *ColgroupElement) Class(s ...string) *ColgroupElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *ColgroupElement) Contenteditable(a ColgroupContenteditableAttrEnum) *ColgroupElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *ColgroupElement) Id(s string) *ColgroupElement {
	e.attributes["id"] = s

	return e
}

func (e *ColgroupElement) Slot(s string) *ColgroupElement {
	e.attributes["slot"] = s

	return e
}

func (e *ColgroupElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<colgroup")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</colgroup>")); err != nil {
		return err
	}

	return nil
}
