// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type FooterElement struct {
	attributes footerAttrs
	children   []htemel.Node
	skipRender bool
}

// Footer creates a tag <footer> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The footer element represents a footer for its nearest ancestor sectioning content element, or for the body element if there is no such ancestor. A footer typically contains information about its section such as who wrote it, links to related documents, copyright data, and the like.
func Footer(children ...htemel.Node) *FooterElement {
	node := &FooterElement{
		children:   children,
		attributes: make(footerAttrs),
	}

	return node
}

func FooterIf(condition bool, children ...htemel.Node) *FooterElement {
	if condition {
		return Footer(children...)
	}

	return &FooterElement{
		children:   children,
		attributes: make(footerAttrs),
		skipRender: true,
	}
}

func FooterTernary(condition bool, true htemel.Node, false htemel.Node) *FooterElement {
	if condition {
		return Footer(true)
	}

	return Footer(false)
}

type FooterAutocapitalizeEnum string

const (
	FooterAutocapitalizeEnumWords      FooterAutocapitalizeEnum = "words"
	FooterAutocapitalizeEnumCharacters FooterAutocapitalizeEnum = "characters"
	FooterAutocapitalizeEnumNone       FooterAutocapitalizeEnum = "none"
	FooterAutocapitalizeEnumOff        FooterAutocapitalizeEnum = "off"
	FooterAutocapitalizeEnumOn         FooterAutocapitalizeEnum = "on"
	FooterAutocapitalizeEnumSentences  FooterAutocapitalizeEnum = "sentences"
)

type FooterAutocorrectEnum string

const (
	FooterAutocorrectEnumOff   FooterAutocorrectEnum = "off"
	FooterAutocorrectEnumOn    FooterAutocorrectEnum = "on"
	FooterAutocorrectEnumEmpty FooterAutocorrectEnum = ""
)

type FooterContenteditableEnum string

const (
	FooterContenteditableEnumFalse         FooterContenteditableEnum = "false"
	FooterContenteditableEnumPlaintextOnly FooterContenteditableEnum = "plaintext-only"
	FooterContenteditableEnumTrue          FooterContenteditableEnum = "true"
	FooterContenteditableEnumEmpty         FooterContenteditableEnum = ""
)

type FooterDirEnum string

const (
	FooterDirEnumAuto FooterDirEnum = "auto"
	FooterDirEnumLtr  FooterDirEnum = "ltr"
	FooterDirEnumRtl  FooterDirEnum = "rtl"
)

type FooterDraggableEnum string

const (
	FooterDraggableEnumFalse FooterDraggableEnum = "false"
	FooterDraggableEnumTrue  FooterDraggableEnum = "true"
)

type FooterEnterkeyhintEnum string

const (
	FooterEnterkeyhintEnumDone     FooterEnterkeyhintEnum = "done"
	FooterEnterkeyhintEnumEnter    FooterEnterkeyhintEnum = "enter"
	FooterEnterkeyhintEnumGo       FooterEnterkeyhintEnum = "go"
	FooterEnterkeyhintEnumNext     FooterEnterkeyhintEnum = "next"
	FooterEnterkeyhintEnumPrevious FooterEnterkeyhintEnum = "previous"
	FooterEnterkeyhintEnumSearch   FooterEnterkeyhintEnum = "search"
	FooterEnterkeyhintEnumSend     FooterEnterkeyhintEnum = "send"
)

type FooterHiddenEnum string

const (
	FooterHiddenEnumHidden     FooterHiddenEnum = "hidden"
	FooterHiddenEnumUntilFound FooterHiddenEnum = "until-found"
	FooterHiddenEnumEmpty      FooterHiddenEnum = ""
)

type FooterInputmodeEnum string

const (
	FooterInputmodeEnumNone    FooterInputmodeEnum = "none"
	FooterInputmodeEnumNumeric FooterInputmodeEnum = "numeric"
	FooterInputmodeEnumSearch  FooterInputmodeEnum = "search"
	FooterInputmodeEnumTel     FooterInputmodeEnum = "tel"
	FooterInputmodeEnumText    FooterInputmodeEnum = "text"
	FooterInputmodeEnumUrl     FooterInputmodeEnum = "url"
	FooterInputmodeEnumDecimal FooterInputmodeEnum = "decimal"
	FooterInputmodeEnumEmail   FooterInputmodeEnum = "email"
)

type FooterSpellcheckEnum string

const (
	FooterSpellcheckEnumFalse FooterSpellcheckEnum = "false"
	FooterSpellcheckEnumTrue  FooterSpellcheckEnum = "true"
	FooterSpellcheckEnumEmpty FooterSpellcheckEnum = ""
)

type FooterTranslateEnum string

const (
	FooterTranslateEnumNo    FooterTranslateEnum = "no"
	FooterTranslateEnumYes   FooterTranslateEnum = "yes"
	FooterTranslateEnumEmpty FooterTranslateEnum = ""
)

type FooterWritingsuggestionsEnum string

const (
	FooterWritingsuggestionsEnumFalse FooterWritingsuggestionsEnum = "false"
	FooterWritingsuggestionsEnumTrue  FooterWritingsuggestionsEnum = "true"
	FooterWritingsuggestionsEnumEmpty FooterWritingsuggestionsEnum = ""
)

type footerAttrs map[string]any

func (e *FooterElement) Autocapitalize(a FooterAutocapitalizeEnum) *FooterElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *FooterElement) Autocorrect(a FooterAutocorrectEnum) *FooterElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *FooterElement) Autofocus(b bool) *FooterElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *FooterElement) Class(s ...string) *FooterElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *FooterElement) Contenteditable(a FooterContenteditableEnum) *FooterElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *FooterElement) DataUnsafe(name string, s string) *FooterElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *FooterElement) Data(name string, s string) *FooterElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *FooterElement) Dir(a FooterDirEnum) *FooterElement {
	e.attributes["dir"] = a

	return e
}

func (e *FooterElement) Draggable(a FooterDraggableEnum) *FooterElement {
	e.attributes["draggable"] = a

	return e
}

func (e *FooterElement) Enterkeyhint(a FooterEnterkeyhintEnum) *FooterElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *FooterElement) Hidden(a FooterHiddenEnum) *FooterElement {
	e.attributes["hidden"] = a

	return e
}

func (e *FooterElement) Id(s string) *FooterElement {
	e.attributes["id"] = s

	return e
}

func (e *FooterElement) Inert(b bool) *FooterElement {
	e.attributes["inert"] = b

	return e
}

func (e *FooterElement) Inputmode(a FooterInputmodeEnum) *FooterElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *FooterElement) Itemid(s string) *FooterElement {
	e.attributes["itemid"] = s

	return e
}

func (e *FooterElement) Itemprop(s ...string) *FooterElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *FooterElement) Itemref(s ...string) *FooterElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *FooterElement) Itemscope(b bool) *FooterElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *FooterElement) Itemtype(s ...string) *FooterElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *FooterElement) Lang(s string) *FooterElement {
	e.attributes["lang"] = s

	return e
}

func (e *FooterElement) Nonce(s string) *FooterElement {
	e.attributes["nonce"] = s

	return e
}

func (e *FooterElement) Popover(s string) *FooterElement {
	e.attributes["popover"] = s

	return e
}

func (e *FooterElement) Slot(s string) *FooterElement {
	e.attributes["slot"] = s

	return e
}

func (e *FooterElement) Spellcheck(a FooterSpellcheckEnum) *FooterElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *FooterElement) Style(s string) *FooterElement {
	e.attributes["style"] = s

	return e
}

func (e *FooterElement) Tabindex(i int) *FooterElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *FooterElement) Title(s string) *FooterElement {
	e.attributes["title"] = s

	return e
}

func (e *FooterElement) Translate(a FooterTranslateEnum) *FooterElement {
	e.attributes["translate"] = a

	return e
}

func (e *FooterElement) Writingsuggestions(a FooterWritingsuggestionsEnum) *FooterElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *FooterElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<footer")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}
	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</footer>")); err != nil {
		return err
	}

	return nil
}
