// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type FooterElement struct {
	attributes footerAttrs
	children   []htemel.Node
	skipRender bool
}

// Footer creates a tag <footer> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The footer element represents a footer for its nearest ancestor sectioning content element, or for the body element if there is no such ancestor. A footer typically contains information about its section such as who wrote it, links to related documents, copyright data, and the like.
func Footer(children ...htemel.Node) *FooterElement {
	node := &FooterElement{
		children:   children,
		attributes: make(footerAttrs),
	}

	return node
}

func FooterIf(condition bool, children ...htemel.Node) *FooterElement {
	if condition {
		return Footer(children...)
	}

	return &FooterElement{
		skipRender: true,
	}
}

type FooterAutocapitalizeAttrEnum string

const (
	FooterAutocapitalizeAttrEnumNone       FooterAutocapitalizeAttrEnum = "none"
	FooterAutocapitalizeAttrEnumOff        FooterAutocapitalizeAttrEnum = "off"
	FooterAutocapitalizeAttrEnumOn         FooterAutocapitalizeAttrEnum = "on"
	FooterAutocapitalizeAttrEnumSentences  FooterAutocapitalizeAttrEnum = "sentences"
	FooterAutocapitalizeAttrEnumWords      FooterAutocapitalizeAttrEnum = "words"
	FooterAutocapitalizeAttrEnumCharacters FooterAutocapitalizeAttrEnum = "characters"
)

type FooterAutocorrectAttrEnum string

const (
	FooterAutocorrectAttrEnumOff FooterAutocorrectAttrEnum = "off"
	FooterAutocorrectAttrEnumOn  FooterAutocorrectAttrEnum = "on"
)

type FooterContenteditableAttrEnum string

const (
	FooterContenteditableAttrEnumPlaintextOnly FooterContenteditableAttrEnum = "plaintext-only"
	FooterContenteditableAttrEnumTrue          FooterContenteditableAttrEnum = "true"
	FooterContenteditableAttrEnumFalse         FooterContenteditableAttrEnum = "false"
)

type footerAttrs map[string]any

func (e *FooterElement) Autocapitalize(a FooterAutocapitalizeAttrEnum) *FooterElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *FooterElement) Autocorrect(a FooterAutocorrectAttrEnum) *FooterElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *FooterElement) Autofocus(b bool) *FooterElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *FooterElement) Class(s ...string) *FooterElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *FooterElement) Contenteditable(a FooterContenteditableAttrEnum) *FooterElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *FooterElement) Id(s string) *FooterElement {
	e.attributes["id"] = s

	return e
}

func (e *FooterElement) Slot(s string) *FooterElement {
	e.attributes["slot"] = s

	return e
}

func (e *FooterElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<footer")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		w.Write([]byte(" " + key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</footer>")); err != nil {
		return err
	}

	return nil
}
