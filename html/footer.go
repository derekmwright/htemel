// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type FooterElement struct {
	attributes footerAttrs
	children []htemel.Node
	skipRender bool
}

// Footer creates a tag <footer> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The footer element represents a footer for its nearest ancestor sectioning content element, or for the body element if there is no such ancestor. A footer typically contains information about its section such as who wrote it, links to related documents, copyright data, and the like.
func Footer(children ...htemel.Node) *FooterElement {
	node := &FooterElement{
		children: children,
		attributes: make(footerAttrs),
	}

	return node
}

func FooterIf(condition bool, children ...htemel.Node) *FooterElement {
	if condition {
		return Footer(children...)
	}

	return &FooterElement{
		skipRender: true,
	}
}

type FooterAutocapitalizeEnum string

const (
	FooterAutocapitalizeEnumOn FooterAutocapitalizeEnum = "on"
	FooterAutocapitalizeEnumSentences FooterAutocapitalizeEnum = "sentences"
	FooterAutocapitalizeEnumWords FooterAutocapitalizeEnum = "words"
	FooterAutocapitalizeEnumCharacters FooterAutocapitalizeEnum = "characters"
	FooterAutocapitalizeEnumNone FooterAutocapitalizeEnum = "none"
	FooterAutocapitalizeEnumOff FooterAutocapitalizeEnum = "off"
)

type FooterAutocorrectEnum string

const (
	FooterAutocorrectEnumOff FooterAutocorrectEnum = "off"
	FooterAutocorrectEnumOn FooterAutocorrectEnum = "on"
)

type FooterContenteditableEnum string

const (
	FooterContenteditableEnumFalse FooterContenteditableEnum = "false"
	FooterContenteditableEnumPlaintextOnly FooterContenteditableEnum = "plaintext-only"
	FooterContenteditableEnumTrue FooterContenteditableEnum = "true"
)

type FooterDirEnum string

const (
	FooterDirEnumAuto FooterDirEnum = "auto"
	FooterDirEnumLtr FooterDirEnum = "ltr"
	FooterDirEnumRtl FooterDirEnum = "rtl"
)

type FooterDraggableEnum string

const (
	FooterDraggableEnumFalse FooterDraggableEnum = "false"
	FooterDraggableEnumTrue FooterDraggableEnum = "true"
)

type FooterEnterkeyhintEnum string

const (
	FooterEnterkeyhintEnumDone FooterEnterkeyhintEnum = "done"
	FooterEnterkeyhintEnumEnter FooterEnterkeyhintEnum = "enter"
	FooterEnterkeyhintEnumGo FooterEnterkeyhintEnum = "go"
	FooterEnterkeyhintEnumNext FooterEnterkeyhintEnum = "next"
	FooterEnterkeyhintEnumPrevious FooterEnterkeyhintEnum = "previous"
	FooterEnterkeyhintEnumSearch FooterEnterkeyhintEnum = "search"
	FooterEnterkeyhintEnumSend FooterEnterkeyhintEnum = "send"
)

type FooterHiddenEnum string

const (
	FooterHiddenEnumHidden FooterHiddenEnum = "hidden"
	FooterHiddenEnumUntilFound FooterHiddenEnum = "until-found"
)

type footerAttrs map[string]any

func (e *FooterElement) Autocapitalize(a FooterAutocapitalizeEnum) *FooterElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *FooterElement) Autocorrect(a FooterAutocorrectEnum) *FooterElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *FooterElement) Autofocus(b bool) *FooterElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *FooterElement) Class(s ...string) *FooterElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *FooterElement) Contenteditable(a FooterContenteditableEnum) *FooterElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *FooterElement) Dir(a FooterDirEnum) *FooterElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *FooterElement) Draggable(a FooterDraggableEnum) *FooterElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *FooterElement) Enterkeyhint(a FooterEnterkeyhintEnum) *FooterElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *FooterElement) Hidden(a FooterHiddenEnum) *FooterElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *FooterElement) Id(s string) *FooterElement {
	e.attributes["id"] = s
	
	return e
}

func (e *FooterElement) Slot(s string) *FooterElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *FooterElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<footer")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</footer>")); err != nil {
		return err
	}

	return nil
}
