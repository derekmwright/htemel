// Code generated by htemel. DO NOT EDIT.
package html

import (
  "github.com/derekmwright/htemel"
  "io"
)

type EmElement struct {
	children []htemel.Node
	skipRender bool
}

// Em creates a tag <em> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The em element represents stress emphasis of its contents.
func Em(children ...htemel.Node) *EmElement {
	node := &EmElement{
		children: children,
	}

	return node
}

func EmIf(condition bool, children ...htemel.Node) *EmElement {
	if condition {
		return Em(children...)
	}

	return &EmElement{
		skipRender: true,
	}
}

func (e *EmElement) Autocapitalize() *EmElement {
	return e
}

func (e *EmElement) Autocorrect() *EmElement {
	return e
}

func (e *EmElement) Autofocus() *EmElement {
	return e
}

func (e *EmElement) Class() *EmElement {
	return e
}

func (e *EmElement) Contenteditable() *EmElement {
	return e
}

func (e *EmElement) Id() *EmElement {
	return e
}

func (e *EmElement) Slot() *EmElement {
	return e
}

func (e *EmElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<em")); err != nil {
		return err
	}

	// TODO: Attribute stuff here

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</em>")); err != nil {
		return err
	}

	return nil
}
