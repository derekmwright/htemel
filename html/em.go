// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type EmElement struct {
	attributes emAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// Em creates a tag <em> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The em element represents stress emphasis of its contents.
func Em(children ...htemel.Node) *EmElement {
	node := &EmElement{
		children:   children,
		attributes: make(emAttrs),
	}

	return node
}

func EmIf(condition bool, children ...htemel.Node) *EmElement {
	if condition {
		return Em(children...)
	}

	return &EmElement{
		children:   children,
		attributes: make(emAttrs),
		skipRender: true,
	}
}

func EmTernary(condition bool, true htemel.Node, false htemel.Node) *EmElement {
	if condition {
		return Em(true)
	}

	return Em(false)
}

type EmAutocapitalizeEnum string

const (
	EmAutocapitalizeEnumOff        EmAutocapitalizeEnum = "off"
	EmAutocapitalizeEnumOn         EmAutocapitalizeEnum = "on"
	EmAutocapitalizeEnumSentences  EmAutocapitalizeEnum = "sentences"
	EmAutocapitalizeEnumWords      EmAutocapitalizeEnum = "words"
	EmAutocapitalizeEnumCharacters EmAutocapitalizeEnum = "characters"
	EmAutocapitalizeEnumNone       EmAutocapitalizeEnum = "none"
)

type EmAutocorrectEnum string

const (
	EmAutocorrectEnumOff   EmAutocorrectEnum = "off"
	EmAutocorrectEnumOn    EmAutocorrectEnum = "on"
	EmAutocorrectEnumEmpty EmAutocorrectEnum = ""
)

type EmContenteditableEnum string

const (
	EmContenteditableEnumTrue          EmContenteditableEnum = "true"
	EmContenteditableEnumFalse         EmContenteditableEnum = "false"
	EmContenteditableEnumPlaintextOnly EmContenteditableEnum = "plaintext-only"
	EmContenteditableEnumEmpty         EmContenteditableEnum = ""
)

type EmDirEnum string

const (
	EmDirEnumAuto EmDirEnum = "auto"
	EmDirEnumLtr  EmDirEnum = "ltr"
	EmDirEnumRtl  EmDirEnum = "rtl"
)

type EmDraggableEnum string

const (
	EmDraggableEnumTrue  EmDraggableEnum = "true"
	EmDraggableEnumFalse EmDraggableEnum = "false"
)

type EmEnterkeyhintEnum string

const (
	EmEnterkeyhintEnumDone     EmEnterkeyhintEnum = "done"
	EmEnterkeyhintEnumEnter    EmEnterkeyhintEnum = "enter"
	EmEnterkeyhintEnumGo       EmEnterkeyhintEnum = "go"
	EmEnterkeyhintEnumNext     EmEnterkeyhintEnum = "next"
	EmEnterkeyhintEnumPrevious EmEnterkeyhintEnum = "previous"
	EmEnterkeyhintEnumSearch   EmEnterkeyhintEnum = "search"
	EmEnterkeyhintEnumSend     EmEnterkeyhintEnum = "send"
)

type EmHiddenEnum string

const (
	EmHiddenEnumHidden     EmHiddenEnum = "hidden"
	EmHiddenEnumUntilFound EmHiddenEnum = "until-found"
	EmHiddenEnumEmpty      EmHiddenEnum = ""
)

type EmInputmodeEnum string

const (
	EmInputmodeEnumSearch  EmInputmodeEnum = "search"
	EmInputmodeEnumTel     EmInputmodeEnum = "tel"
	EmInputmodeEnumText    EmInputmodeEnum = "text"
	EmInputmodeEnumUrl     EmInputmodeEnum = "url"
	EmInputmodeEnumDecimal EmInputmodeEnum = "decimal"
	EmInputmodeEnumEmail   EmInputmodeEnum = "email"
	EmInputmodeEnumNone    EmInputmodeEnum = "none"
	EmInputmodeEnumNumeric EmInputmodeEnum = "numeric"
)

type EmSpellcheckEnum string

const (
	EmSpellcheckEnumTrue  EmSpellcheckEnum = "true"
	EmSpellcheckEnumFalse EmSpellcheckEnum = "false"
	EmSpellcheckEnumEmpty EmSpellcheckEnum = ""
)

type EmTranslateEnum string

const (
	EmTranslateEnumNo    EmTranslateEnum = "no"
	EmTranslateEnumYes   EmTranslateEnum = "yes"
	EmTranslateEnumEmpty EmTranslateEnum = ""
)

type EmWritingsuggestionsEnum string

const (
	EmWritingsuggestionsEnumFalse EmWritingsuggestionsEnum = "false"
	EmWritingsuggestionsEnumTrue  EmWritingsuggestionsEnum = "true"
	EmWritingsuggestionsEnumEmpty EmWritingsuggestionsEnum = ""
)

type emAttrs map[string]any

func (e *EmElement) Autocapitalize(a EmAutocapitalizeEnum) *EmElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *EmElement) Autocorrect(a EmAutocorrectEnum) *EmElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *EmElement) Autofocus(b bool) *EmElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *EmElement) Class(s ...string) *EmElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *EmElement) Contenteditable(a EmContenteditableEnum) *EmElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *EmElement) DataUnsafe(name string, s string) *EmElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *EmElement) Data(name string, s string) *EmElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *EmElement) Dir(a EmDirEnum) *EmElement {
	e.attributes["dir"] = a

	return e
}

func (e *EmElement) Draggable(a EmDraggableEnum) *EmElement {
	e.attributes["draggable"] = a

	return e
}

func (e *EmElement) Enterkeyhint(a EmEnterkeyhintEnum) *EmElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *EmElement) Hidden(a EmHiddenEnum) *EmElement {
	e.attributes["hidden"] = a

	return e
}

func (e *EmElement) Id(s string) *EmElement {
	e.attributes["id"] = s

	return e
}

func (e *EmElement) Inert(b bool) *EmElement {
	e.attributes["inert"] = b

	return e
}

func (e *EmElement) Inputmode(a EmInputmodeEnum) *EmElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *EmElement) Itemid(s string) *EmElement {
	e.attributes["itemid"] = s

	return e
}

func (e *EmElement) Itemprop(s ...string) *EmElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *EmElement) Itemref(s ...string) *EmElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *EmElement) Itemscope(b bool) *EmElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *EmElement) Itemtype(s ...string) *EmElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *EmElement) Lang(s string) *EmElement {
	e.attributes["lang"] = s

	return e
}

func (e *EmElement) Nonce(s string) *EmElement {
	e.attributes["nonce"] = s

	return e
}

func (e *EmElement) Popover(s string) *EmElement {
	e.attributes["popover"] = s

	return e
}

func (e *EmElement) Slot(s string) *EmElement {
	e.attributes["slot"] = s

	return e
}

func (e *EmElement) Spellcheck(a EmSpellcheckEnum) *EmElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *EmElement) Style(s string) *EmElement {
	e.attributes["style"] = s

	return e
}

func (e *EmElement) Tabindex(i int) *EmElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *EmElement) Title(s string) *EmElement {
	e.attributes["title"] = s

	return e
}

func (e *EmElement) Translate(a EmTranslateEnum) *EmElement {
	e.attributes["translate"] = a

	return e
}

func (e *EmElement) Writingsuggestions(a EmWritingsuggestionsEnum) *EmElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *EmElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<em")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}
	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</em>")); err != nil {
		return err
	}

	return nil
}
