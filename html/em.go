// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type EmElement struct {
	attributes emAttrs
	children   []htemel.Node
	skipRender bool
}

// Em creates a tag <em> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The em element represents stress emphasis of its contents.
func Em(children ...htemel.Node) *EmElement {
	node := &EmElement{
		children:   children,
		attributes: make(emAttrs),
	}

	return node
}

func EmIf(condition bool, children ...htemel.Node) *EmElement {
	if condition {
		return Em(children...)
	}

	return &EmElement{
		skipRender: true,
	}
}

type EmAutocapitalizeAttrEnum string

const (
	EmAutocapitalizeAttrEnumCharacters EmAutocapitalizeAttrEnum = "characters"
	EmAutocapitalizeAttrEnumNone       EmAutocapitalizeAttrEnum = "none"
	EmAutocapitalizeAttrEnumOff        EmAutocapitalizeAttrEnum = "off"
	EmAutocapitalizeAttrEnumOn         EmAutocapitalizeAttrEnum = "on"
	EmAutocapitalizeAttrEnumSentences  EmAutocapitalizeAttrEnum = "sentences"
	EmAutocapitalizeAttrEnumWords      EmAutocapitalizeAttrEnum = "words"
)

type EmAutocorrectAttrEnum string

const (
	EmAutocorrectAttrEnumOff EmAutocorrectAttrEnum = "off"
	EmAutocorrectAttrEnumOn  EmAutocorrectAttrEnum = "on"
)

type EmContenteditableAttrEnum string

const (
	EmContenteditableAttrEnumFalse         EmContenteditableAttrEnum = "false"
	EmContenteditableAttrEnumPlaintextOnly EmContenteditableAttrEnum = "plaintext-only"
	EmContenteditableAttrEnumTrue          EmContenteditableAttrEnum = "true"
)

type emAttrs map[string]any

func (e *EmElement) Autocapitalize(a EmAutocapitalizeAttrEnum) *EmElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *EmElement) Autocorrect(a EmAutocorrectAttrEnum) *EmElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *EmElement) Autofocus(b bool) *EmElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *EmElement) Class(s ...string) *EmElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *EmElement) Contenteditable(a EmContenteditableAttrEnum) *EmElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *EmElement) Id(s string) *EmElement {
	e.attributes["id"] = s

	return e
}

func (e *EmElement) Slot(s string) *EmElement {
	e.attributes["slot"] = s

	return e
}

func (e *EmElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<em")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</em>")); err != nil {
		return err
	}

	return nil
}
