// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type EmElement struct {
	attributes emAttrs
	children []htemel.Node
	skipRender bool
}

// Em creates a tag <em> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The em element represents stress emphasis of its contents.
func Em(children ...htemel.Node) *EmElement {
	node := &EmElement{
		children: children,
		attributes: make(emAttrs),
	}

	return node
}

func EmIf(condition bool, children ...htemel.Node) *EmElement {
	if condition {
		return Em(children...)
	}

	return &EmElement{
		skipRender: true,
	}
}

type EmAutocapitalizeEnum string

const (
	EmAutocapitalizeEnumCharacters EmAutocapitalizeEnum = "characters"
	EmAutocapitalizeEnumNone EmAutocapitalizeEnum = "none"
	EmAutocapitalizeEnumOff EmAutocapitalizeEnum = "off"
	EmAutocapitalizeEnumOn EmAutocapitalizeEnum = "on"
	EmAutocapitalizeEnumSentences EmAutocapitalizeEnum = "sentences"
	EmAutocapitalizeEnumWords EmAutocapitalizeEnum = "words"
)

type EmAutocorrectEnum string

const (
	EmAutocorrectEnumOff EmAutocorrectEnum = "off"
	EmAutocorrectEnumOn EmAutocorrectEnum = "on"
)

type EmContenteditableEnum string

const (
	EmContenteditableEnumTrue EmContenteditableEnum = "true"
	EmContenteditableEnumFalse EmContenteditableEnum = "false"
	EmContenteditableEnumPlaintextOnly EmContenteditableEnum = "plaintext-only"
)

type EmDirEnum string

const (
	EmDirEnumAuto EmDirEnum = "auto"
	EmDirEnumLtr EmDirEnum = "ltr"
	EmDirEnumRtl EmDirEnum = "rtl"
)

type EmDraggableEnum string

const (
	EmDraggableEnumTrue EmDraggableEnum = "true"
	EmDraggableEnumFalse EmDraggableEnum = "false"
)

type EmEnterkeyhintEnum string

const (
	EmEnterkeyhintEnumDone EmEnterkeyhintEnum = "done"
	EmEnterkeyhintEnumEnter EmEnterkeyhintEnum = "enter"
	EmEnterkeyhintEnumGo EmEnterkeyhintEnum = "go"
	EmEnterkeyhintEnumNext EmEnterkeyhintEnum = "next"
	EmEnterkeyhintEnumPrevious EmEnterkeyhintEnum = "previous"
	EmEnterkeyhintEnumSearch EmEnterkeyhintEnum = "search"
	EmEnterkeyhintEnumSend EmEnterkeyhintEnum = "send"
)

type EmHiddenEnum string

const (
	EmHiddenEnumHidden EmHiddenEnum = "hidden"
	EmHiddenEnumUntilFound EmHiddenEnum = "until-found"
)

type emAttrs map[string]any

func (e *EmElement) Autocapitalize(a EmAutocapitalizeEnum) *EmElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *EmElement) Autocorrect(a EmAutocorrectEnum) *EmElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *EmElement) Autofocus(b bool) *EmElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *EmElement) Class(s ...string) *EmElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *EmElement) Contenteditable(a EmContenteditableEnum) *EmElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *EmElement) Dir(a EmDirEnum) *EmElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *EmElement) Draggable(a EmDraggableEnum) *EmElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *EmElement) Enterkeyhint(a EmEnterkeyhintEnum) *EmElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *EmElement) Hidden(a EmHiddenEnum) *EmElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *EmElement) Id(s string) *EmElement {
	e.attributes["id"] = s
	
	return e
}

func (e *EmElement) Slot(s string) *EmElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *EmElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<em")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</em>")); err != nil {
		return err
	}

	return nil
}
