// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type SampElement struct {
	attributes sampAttrs
	children   []htemel.Node
	skipRender bool
}

// Samp creates a tag <samp> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The samp element represents sample or quoted output from another program or computing system.
func Samp(children ...htemel.Node) *SampElement {
	node := &SampElement{
		children:   children,
		attributes: make(sampAttrs),
	}

	return node
}

func SampIf(condition bool, children ...htemel.Node) *SampElement {
	if condition {
		return Samp(children...)
	}

	return &SampElement{
		skipRender: true,
	}
}

type SampAutocapitalizeAttrEnum string

const (
	SampAutocapitalizeAttrEnumOff        SampAutocapitalizeAttrEnum = "off"
	SampAutocapitalizeAttrEnumOn         SampAutocapitalizeAttrEnum = "on"
	SampAutocapitalizeAttrEnumSentences  SampAutocapitalizeAttrEnum = "sentences"
	SampAutocapitalizeAttrEnumWords      SampAutocapitalizeAttrEnum = "words"
	SampAutocapitalizeAttrEnumCharacters SampAutocapitalizeAttrEnum = "characters"
	SampAutocapitalizeAttrEnumNone       SampAutocapitalizeAttrEnum = "none"
)

type SampAutocorrectAttrEnum string

const (
	SampAutocorrectAttrEnumOn  SampAutocorrectAttrEnum = "on"
	SampAutocorrectAttrEnumOff SampAutocorrectAttrEnum = "off"
)

type SampContenteditableAttrEnum string

const (
	SampContenteditableAttrEnumFalse         SampContenteditableAttrEnum = "false"
	SampContenteditableAttrEnumPlaintextOnly SampContenteditableAttrEnum = "plaintext-only"
	SampContenteditableAttrEnumTrue          SampContenteditableAttrEnum = "true"
)

type sampAttrs map[string]any

func (e *SampElement) Autocapitalize(a SampAutocapitalizeAttrEnum) *SampElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *SampElement) Autocorrect(a SampAutocorrectAttrEnum) *SampElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *SampElement) Autofocus(b bool) *SampElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *SampElement) Class(s ...string) *SampElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *SampElement) Contenteditable(a SampContenteditableAttrEnum) *SampElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *SampElement) Id(s string) *SampElement {
	e.attributes["id"] = s

	return e
}

func (e *SampElement) Slot(s string) *SampElement {
	e.attributes["slot"] = s

	return e
}

func (e *SampElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<samp")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</samp>")); err != nil {
		return err
	}

	return nil
}
