// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type SampElement struct {
	attributes sampAttrs
	children []htemel.Node
	skipRender bool
}

// Samp creates a tag <samp> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The samp element represents sample or quoted output from another program or computing system.
func Samp(children ...htemel.Node) *SampElement {
	node := &SampElement{
		children: children,
		attributes: make(sampAttrs),
	}

	return node
}

func SampIf(condition bool, children ...htemel.Node) *SampElement {
	if condition {
		return Samp(children...)
	}

	return &SampElement{
		skipRender: true,
	}
}

type SampAutocapitalizeEnum string

const (
	SampAutocapitalizeEnumCharacters SampAutocapitalizeEnum = "characters"
	SampAutocapitalizeEnumNone SampAutocapitalizeEnum = "none"
	SampAutocapitalizeEnumOff SampAutocapitalizeEnum = "off"
	SampAutocapitalizeEnumOn SampAutocapitalizeEnum = "on"
	SampAutocapitalizeEnumSentences SampAutocapitalizeEnum = "sentences"
	SampAutocapitalizeEnumWords SampAutocapitalizeEnum = "words"
)

type SampAutocorrectEnum string

const (
	SampAutocorrectEnumOff SampAutocorrectEnum = "off"
	SampAutocorrectEnumOn SampAutocorrectEnum = "on"
)

type SampContenteditableEnum string

const (
	SampContenteditableEnumFalse SampContenteditableEnum = "false"
	SampContenteditableEnumPlaintextOnly SampContenteditableEnum = "plaintext-only"
	SampContenteditableEnumTrue SampContenteditableEnum = "true"
)

type SampDirEnum string

const (
	SampDirEnumLtr SampDirEnum = "ltr"
	SampDirEnumRtl SampDirEnum = "rtl"
	SampDirEnumAuto SampDirEnum = "auto"
)

type SampDraggableEnum string

const (
	SampDraggableEnumFalse SampDraggableEnum = "false"
	SampDraggableEnumTrue SampDraggableEnum = "true"
)

type SampEnterkeyhintEnum string

const (
	SampEnterkeyhintEnumPrevious SampEnterkeyhintEnum = "previous"
	SampEnterkeyhintEnumSearch SampEnterkeyhintEnum = "search"
	SampEnterkeyhintEnumSend SampEnterkeyhintEnum = "send"
	SampEnterkeyhintEnumDone SampEnterkeyhintEnum = "done"
	SampEnterkeyhintEnumEnter SampEnterkeyhintEnum = "enter"
	SampEnterkeyhintEnumGo SampEnterkeyhintEnum = "go"
	SampEnterkeyhintEnumNext SampEnterkeyhintEnum = "next"
)

type SampHiddenEnum string

const (
	SampHiddenEnumHidden SampHiddenEnum = "hidden"
	SampHiddenEnumUntilFound SampHiddenEnum = "until-found"
)

type sampAttrs map[string]any

func (e *SampElement) Autocapitalize(a SampAutocapitalizeEnum) *SampElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *SampElement) Autocorrect(a SampAutocorrectEnum) *SampElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *SampElement) Autofocus(b bool) *SampElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *SampElement) Class(s ...string) *SampElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *SampElement) Contenteditable(a SampContenteditableEnum) *SampElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *SampElement) Dir(a SampDirEnum) *SampElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *SampElement) Draggable(a SampDraggableEnum) *SampElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *SampElement) Enterkeyhint(a SampEnterkeyhintEnum) *SampElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *SampElement) Hidden(a SampHiddenEnum) *SampElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *SampElement) Id(s string) *SampElement {
	e.attributes["id"] = s
	
	return e
}

func (e *SampElement) Slot(s string) *SampElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *SampElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<samp")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</samp>")); err != nil {
		return err
	}

	return nil
}
