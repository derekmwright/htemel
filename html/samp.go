// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type SampElement struct {
	attributes sampAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// Samp creates a tag <samp> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The samp element represents sample or quoted output from another program or computing system.
func Samp(children ...htemel.Node) *SampElement {
	node := &SampElement{
		children: children, attributes: make(sampAttrs),
	}

	return node
}

func SampIf(condition bool, children ...htemel.Node) *SampElement {
	if condition {
		return Samp(children...)
	}

	return &SampElement{
		skipRender: true,
	}
}

func SampTernary(condition bool, true htemel.Node, false htemel.Node) *SampElement {
	if condition {
		return Samp(true)
	}

	return Samp(false)
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *SampElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *SampElement) AddIndent(i int) {
	e.indent = i + 1
}

type SampAutocapitalizeEnum string

const (
	SampAutocapitalizeEnumCharacters SampAutocapitalizeEnum = "characters"
	SampAutocapitalizeEnumNone       SampAutocapitalizeEnum = "none"
	SampAutocapitalizeEnumOff        SampAutocapitalizeEnum = "off"
	SampAutocapitalizeEnumOn         SampAutocapitalizeEnum = "on"
	SampAutocapitalizeEnumSentences  SampAutocapitalizeEnum = "sentences"
	SampAutocapitalizeEnumWords      SampAutocapitalizeEnum = "words"
)

type SampAutocorrectEnum string

const (
	SampAutocorrectEnumOff   SampAutocorrectEnum = "off"
	SampAutocorrectEnumOn    SampAutocorrectEnum = "on"
	SampAutocorrectEnumEmpty SampAutocorrectEnum = ""
)

type SampContenteditableEnum string

const (
	SampContenteditableEnumFalse         SampContenteditableEnum = "false"
	SampContenteditableEnumPlaintextOnly SampContenteditableEnum = "plaintext-only"
	SampContenteditableEnumTrue          SampContenteditableEnum = "true"
	SampContenteditableEnumEmpty         SampContenteditableEnum = ""
)

type SampDirEnum string

const (
	SampDirEnumAuto SampDirEnum = "auto"
	SampDirEnumLtr  SampDirEnum = "ltr"
	SampDirEnumRtl  SampDirEnum = "rtl"
)

type SampDraggableEnum string

const (
	SampDraggableEnumFalse SampDraggableEnum = "false"
	SampDraggableEnumTrue  SampDraggableEnum = "true"
)

type SampEnterkeyhintEnum string

const (
	SampEnterkeyhintEnumSearch   SampEnterkeyhintEnum = "search"
	SampEnterkeyhintEnumSend     SampEnterkeyhintEnum = "send"
	SampEnterkeyhintEnumDone     SampEnterkeyhintEnum = "done"
	SampEnterkeyhintEnumEnter    SampEnterkeyhintEnum = "enter"
	SampEnterkeyhintEnumGo       SampEnterkeyhintEnum = "go"
	SampEnterkeyhintEnumNext     SampEnterkeyhintEnum = "next"
	SampEnterkeyhintEnumPrevious SampEnterkeyhintEnum = "previous"
)

type SampHiddenEnum string

const (
	SampHiddenEnumHidden     SampHiddenEnum = "hidden"
	SampHiddenEnumUntilFound SampHiddenEnum = "until-found"
	SampHiddenEnumEmpty      SampHiddenEnum = ""
)

type SampInputmodeEnum string

const (
	SampInputmodeEnumDecimal SampInputmodeEnum = "decimal"
	SampInputmodeEnumEmail   SampInputmodeEnum = "email"
	SampInputmodeEnumNone    SampInputmodeEnum = "none"
	SampInputmodeEnumNumeric SampInputmodeEnum = "numeric"
	SampInputmodeEnumSearch  SampInputmodeEnum = "search"
	SampInputmodeEnumTel     SampInputmodeEnum = "tel"
	SampInputmodeEnumText    SampInputmodeEnum = "text"
	SampInputmodeEnumUrl     SampInputmodeEnum = "url"
)

type SampSpellcheckEnum string

const (
	SampSpellcheckEnumFalse SampSpellcheckEnum = "false"
	SampSpellcheckEnumTrue  SampSpellcheckEnum = "true"
	SampSpellcheckEnumEmpty SampSpellcheckEnum = ""
)

type SampTranslateEnum string

const (
	SampTranslateEnumNo    SampTranslateEnum = "no"
	SampTranslateEnumYes   SampTranslateEnum = "yes"
	SampTranslateEnumEmpty SampTranslateEnum = ""
)

type SampWritingsuggestionsEnum string

const (
	SampWritingsuggestionsEnumFalse SampWritingsuggestionsEnum = "false"
	SampWritingsuggestionsEnumTrue  SampWritingsuggestionsEnum = "true"
	SampWritingsuggestionsEnumEmpty SampWritingsuggestionsEnum = ""
)

type sampAttrs map[string]any

func (e *SampElement) Autocapitalize(a SampAutocapitalizeEnum) *SampElement {
	e.attributes["autocapitalize"] = a

	return e
}

func SampAutocapitalizeCustom(s string) SampAutocapitalizeEnum {
	return SampAutocapitalizeEnum(s)
}

func (e *SampElement) Autocorrect(a SampAutocorrectEnum) *SampElement {
	e.attributes["autocorrect"] = a

	return e
}

func SampAutocorrectCustom(s string) SampAutocorrectEnum {
	return SampAutocorrectEnum(s)
}

func (e *SampElement) Autofocus(b bool) *SampElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *SampElement) Class(s ...string) *SampElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *SampElement) Contenteditable(a SampContenteditableEnum) *SampElement {
	e.attributes["contenteditable"] = a

	return e
}

func SampContenteditableCustom(s string) SampContenteditableEnum {
	return SampContenteditableEnum(s)
}

func (e *SampElement) DataUnsafe(name string, s string) *SampElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *SampElement) Data(name string, s string) *SampElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *SampElement) Dir(a SampDirEnum) *SampElement {
	e.attributes["dir"] = a

	return e
}

func SampDirCustom(s string) SampDirEnum {
	return SampDirEnum(s)
}

func (e *SampElement) Draggable(a SampDraggableEnum) *SampElement {
	e.attributes["draggable"] = a

	return e
}

func SampDraggableCustom(s string) SampDraggableEnum {
	return SampDraggableEnum(s)
}

func (e *SampElement) Enterkeyhint(a SampEnterkeyhintEnum) *SampElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func SampEnterkeyhintCustom(s string) SampEnterkeyhintEnum {
	return SampEnterkeyhintEnum(s)
}

func (e *SampElement) Hidden(a SampHiddenEnum) *SampElement {
	e.attributes["hidden"] = a

	return e
}

func SampHiddenCustom(s string) SampHiddenEnum {
	return SampHiddenEnum(s)
}

func (e *SampElement) Id(s string) *SampElement {
	e.attributes["id"] = s

	return e
}

func (e *SampElement) Inert(b bool) *SampElement {
	e.attributes["inert"] = b

	return e
}

func (e *SampElement) Inputmode(a SampInputmodeEnum) *SampElement {
	e.attributes["inputmode"] = a

	return e
}

func SampInputmodeCustom(s string) SampInputmodeEnum {
	return SampInputmodeEnum(s)
}

func (e *SampElement) Itemid(s string) *SampElement {
	e.attributes["itemid"] = s

	return e
}

func (e *SampElement) Itemprop(s ...string) *SampElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *SampElement) Itemref(s ...string) *SampElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *SampElement) Itemscope(b bool) *SampElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *SampElement) Itemtype(s ...string) *SampElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *SampElement) Lang(s string) *SampElement {
	e.attributes["lang"] = s

	return e
}

func (e *SampElement) Nonce(s string) *SampElement {
	e.attributes["nonce"] = s

	return e
}

func (e *SampElement) Popover(s string) *SampElement {
	e.attributes["popover"] = s

	return e
}

func (e *SampElement) Slot(s string) *SampElement {
	e.attributes["slot"] = s

	return e
}

func (e *SampElement) Spellcheck(a SampSpellcheckEnum) *SampElement {
	e.attributes["spellcheck"] = a

	return e
}

func SampSpellcheckCustom(s string) SampSpellcheckEnum {
	return SampSpellcheckEnum(s)
}

func (e *SampElement) Style(s string) *SampElement {
	e.attributes["style"] = s

	return e
}

func (e *SampElement) Tabindex(i int) *SampElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *SampElement) Title(s string) *SampElement {
	e.attributes["title"] = s

	return e
}

func (e *SampElement) Translate(a SampTranslateEnum) *SampElement {
	e.attributes["translate"] = a

	return e
}

func SampTranslateCustom(s string) SampTranslateEnum {
	return SampTranslateEnum(s)
}

func (e *SampElement) Writingsuggestions(a SampWritingsuggestionsEnum) *SampElement {
	e.attributes["writingsuggestions"] = a

	return e
}

func SampWritingsuggestionsCustom(s string) SampWritingsuggestionsEnum {
	return SampWritingsuggestionsEnum(s)
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *SampElement) Render(w io.Writer) error {
	indent := htemel.SetIndent(e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<samp")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}
	for _, child := range e.children {
		child.AddIndent(e.Indent())
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(indent + "</samp>\n")); err != nil {
		return err
	}

	return nil
}
