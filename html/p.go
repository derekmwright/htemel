// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type PElement struct {
	attributes pAttrs
	children   []htemel.Node
	skipRender bool
}

// P creates a tag <p> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The p element represents a paragraph.
func P(children ...htemel.Node) *PElement {
	node := &PElement{
		children:   children,
		attributes: make(pAttrs),
	}

	return node
}

func PIf(condition bool, children ...htemel.Node) *PElement {
	if condition {
		return P(children...)
	}

	return &PElement{
		skipRender: true,
	}
}

type PAutocapitalizeAttrEnum string

const (
	PAutocapitalizeAttrEnumSentences  PAutocapitalizeAttrEnum = "sentences"
	PAutocapitalizeAttrEnumWords      PAutocapitalizeAttrEnum = "words"
	PAutocapitalizeAttrEnumCharacters PAutocapitalizeAttrEnum = "characters"
	PAutocapitalizeAttrEnumNone       PAutocapitalizeAttrEnum = "none"
	PAutocapitalizeAttrEnumOff        PAutocapitalizeAttrEnum = "off"
	PAutocapitalizeAttrEnumOn         PAutocapitalizeAttrEnum = "on"
)

type PAutocorrectAttrEnum string

const (
	PAutocorrectAttrEnumOff PAutocorrectAttrEnum = "off"
	PAutocorrectAttrEnumOn  PAutocorrectAttrEnum = "on"
)

type PContenteditableAttrEnum string

const (
	PContenteditableAttrEnumFalse         PContenteditableAttrEnum = "false"
	PContenteditableAttrEnumPlaintextOnly PContenteditableAttrEnum = "plaintext-only"
	PContenteditableAttrEnumTrue          PContenteditableAttrEnum = "true"
)

type pAttrs map[string]any

func (e *PElement) Autocapitalize(a PAutocapitalizeAttrEnum) *PElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *PElement) Autocorrect(a PAutocorrectAttrEnum) *PElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *PElement) Autofocus(b bool) *PElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *PElement) Class(s ...string) *PElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *PElement) Contenteditable(a PContenteditableAttrEnum) *PElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *PElement) Id(s string) *PElement {
	e.attributes["id"] = s

	return e
}

func (e *PElement) Slot(s string) *PElement {
	e.attributes["slot"] = s

	return e
}

func (e *PElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<p")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		w.Write([]byte(" " + key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</p>")); err != nil {
		return err
	}

	return nil
}
