// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type PElement struct {
	attributes pAttrs
	children   []htemel.Node
	skipRender bool
}

// P creates a tag <p> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The p element represents a paragraph.
func P(children ...htemel.Node) *PElement {
	node := &PElement{
		children: children, attributes: make(pAttrs),
	}

	return node
}

func PIf(condition bool, children ...htemel.Node) *PElement {
	if condition {
		return P(children...)
	}

	return &PElement{
		skipRender: true,
	}
}

func PTernary(condition bool, true htemel.Node, false htemel.Node) *PElement {
	if condition {
		return P(true)
	}

	return P(false)
}

type PAutocapitalizeEnum string

const (
	PAutocapitalizeEnumCharacters PAutocapitalizeEnum = "characters"
	PAutocapitalizeEnumNone       PAutocapitalizeEnum = "none"
	PAutocapitalizeEnumOff        PAutocapitalizeEnum = "off"
	PAutocapitalizeEnumOn         PAutocapitalizeEnum = "on"
	PAutocapitalizeEnumSentences  PAutocapitalizeEnum = "sentences"
	PAutocapitalizeEnumWords      PAutocapitalizeEnum = "words"
)

type PAutocorrectEnum string

const (
	PAutocorrectEnumOff   PAutocorrectEnum = "off"
	PAutocorrectEnumOn    PAutocorrectEnum = "on"
	PAutocorrectEnumEmpty PAutocorrectEnum = ""
)

type PContenteditableEnum string

const (
	PContenteditableEnumFalse         PContenteditableEnum = "false"
	PContenteditableEnumPlaintextOnly PContenteditableEnum = "plaintext-only"
	PContenteditableEnumTrue          PContenteditableEnum = "true"
	PContenteditableEnumEmpty         PContenteditableEnum = ""
)

type PDirEnum string

const (
	PDirEnumAuto PDirEnum = "auto"
	PDirEnumLtr  PDirEnum = "ltr"
	PDirEnumRtl  PDirEnum = "rtl"
)

type PDraggableEnum string

const (
	PDraggableEnumFalse PDraggableEnum = "false"
	PDraggableEnumTrue  PDraggableEnum = "true"
)

type PEnterkeyhintEnum string

const (
	PEnterkeyhintEnumSend     PEnterkeyhintEnum = "send"
	PEnterkeyhintEnumDone     PEnterkeyhintEnum = "done"
	PEnterkeyhintEnumEnter    PEnterkeyhintEnum = "enter"
	PEnterkeyhintEnumGo       PEnterkeyhintEnum = "go"
	PEnterkeyhintEnumNext     PEnterkeyhintEnum = "next"
	PEnterkeyhintEnumPrevious PEnterkeyhintEnum = "previous"
	PEnterkeyhintEnumSearch   PEnterkeyhintEnum = "search"
)

type PHiddenEnum string

const (
	PHiddenEnumUntilFound PHiddenEnum = "until-found"
	PHiddenEnumHidden     PHiddenEnum = "hidden"
	PHiddenEnumEmpty      PHiddenEnum = ""
)

type PInputmodeEnum string

const (
	PInputmodeEnumTel     PInputmodeEnum = "tel"
	PInputmodeEnumText    PInputmodeEnum = "text"
	PInputmodeEnumUrl     PInputmodeEnum = "url"
	PInputmodeEnumDecimal PInputmodeEnum = "decimal"
	PInputmodeEnumEmail   PInputmodeEnum = "email"
	PInputmodeEnumNone    PInputmodeEnum = "none"
	PInputmodeEnumNumeric PInputmodeEnum = "numeric"
	PInputmodeEnumSearch  PInputmodeEnum = "search"
)

type PSpellcheckEnum string

const (
	PSpellcheckEnumFalse PSpellcheckEnum = "false"
	PSpellcheckEnumTrue  PSpellcheckEnum = "true"
	PSpellcheckEnumEmpty PSpellcheckEnum = ""
)

type PTranslateEnum string

const (
	PTranslateEnumNo    PTranslateEnum = "no"
	PTranslateEnumYes   PTranslateEnum = "yes"
	PTranslateEnumEmpty PTranslateEnum = ""
)

type PWritingsuggestionsEnum string

const (
	PWritingsuggestionsEnumFalse PWritingsuggestionsEnum = "false"
	PWritingsuggestionsEnumTrue  PWritingsuggestionsEnum = "true"
	PWritingsuggestionsEnumEmpty PWritingsuggestionsEnum = ""
)

type pAttrs map[string]any

func (e *PElement) Autocapitalize(a PAutocapitalizeEnum) *PElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *PElement) Autocorrect(a PAutocorrectEnum) *PElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *PElement) Autofocus(b bool) *PElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *PElement) Class(s ...string) *PElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *PElement) Contenteditable(a PContenteditableEnum) *PElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *PElement) DataUnsafe(name string, s string) *PElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *PElement) Data(name string, s string) *PElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *PElement) Dir(a PDirEnum) *PElement {
	e.attributes["dir"] = a

	return e
}

func (e *PElement) Draggable(a PDraggableEnum) *PElement {
	e.attributes["draggable"] = a

	return e
}

func (e *PElement) Enterkeyhint(a PEnterkeyhintEnum) *PElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *PElement) Hidden(a PHiddenEnum) *PElement {
	e.attributes["hidden"] = a

	return e
}

func (e *PElement) Id(s string) *PElement {
	e.attributes["id"] = s

	return e
}

func (e *PElement) Inert(b bool) *PElement {
	e.attributes["inert"] = b

	return e
}

func (e *PElement) Inputmode(a PInputmodeEnum) *PElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *PElement) Itemid(s string) *PElement {
	e.attributes["itemid"] = s

	return e
}

func (e *PElement) Itemprop(s ...string) *PElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *PElement) Itemref(s ...string) *PElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *PElement) Itemscope(b bool) *PElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *PElement) Itemtype(s ...string) *PElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *PElement) Lang(s string) *PElement {
	e.attributes["lang"] = s

	return e
}

func (e *PElement) Nonce(s string) *PElement {
	e.attributes["nonce"] = s

	return e
}

func (e *PElement) Popover(s string) *PElement {
	e.attributes["popover"] = s

	return e
}

func (e *PElement) Slot(s string) *PElement {
	e.attributes["slot"] = s

	return e
}

func (e *PElement) Spellcheck(a PSpellcheckEnum) *PElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *PElement) Style(s string) *PElement {
	e.attributes["style"] = s

	return e
}

func (e *PElement) Tabindex(i int) *PElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *PElement) Title(s string) *PElement {
	e.attributes["title"] = s

	return e
}

func (e *PElement) Translate(a PTranslateEnum) *PElement {
	e.attributes["translate"] = a

	return e
}

func (e *PElement) Writingsuggestions(a PWritingsuggestionsEnum) *PElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *PElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<p")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}
	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</p>")); err != nil {
		return err
	}

	return nil
}
