// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type PElement struct {
	attributes pAttrs
	children []htemel.Node
	skipRender bool
}

// P creates a tag <p> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The p element represents a paragraph.
func P(children ...htemel.Node) *PElement {
	node := &PElement{
		children: children,
		attributes: make(pAttrs),
	}

	return node
}

func PIf(condition bool, children ...htemel.Node) *PElement {
	if condition {
		return P(children...)
	}

	return &PElement{
		skipRender: true,
	}
}

type PAutocapitalizeEnum string

const (
	PAutocapitalizeEnumOn PAutocapitalizeEnum = "on"
	PAutocapitalizeEnumSentences PAutocapitalizeEnum = "sentences"
	PAutocapitalizeEnumWords PAutocapitalizeEnum = "words"
	PAutocapitalizeEnumCharacters PAutocapitalizeEnum = "characters"
	PAutocapitalizeEnumNone PAutocapitalizeEnum = "none"
	PAutocapitalizeEnumOff PAutocapitalizeEnum = "off"
)

type PAutocorrectEnum string

const (
	PAutocorrectEnumOff PAutocorrectEnum = "off"
	PAutocorrectEnumOn PAutocorrectEnum = "on"
)

type PContenteditableEnum string

const (
	PContenteditableEnumFalse PContenteditableEnum = "false"
	PContenteditableEnumPlaintextOnly PContenteditableEnum = "plaintext-only"
	PContenteditableEnumTrue PContenteditableEnum = "true"
)

type PDirEnum string

const (
	PDirEnumRtl PDirEnum = "rtl"
	PDirEnumAuto PDirEnum = "auto"
	PDirEnumLtr PDirEnum = "ltr"
)

type PDraggableEnum string

const (
	PDraggableEnumFalse PDraggableEnum = "false"
	PDraggableEnumTrue PDraggableEnum = "true"
)

type PEnterkeyhintEnum string

const (
	PEnterkeyhintEnumPrevious PEnterkeyhintEnum = "previous"
	PEnterkeyhintEnumSearch PEnterkeyhintEnum = "search"
	PEnterkeyhintEnumSend PEnterkeyhintEnum = "send"
	PEnterkeyhintEnumDone PEnterkeyhintEnum = "done"
	PEnterkeyhintEnumEnter PEnterkeyhintEnum = "enter"
	PEnterkeyhintEnumGo PEnterkeyhintEnum = "go"
	PEnterkeyhintEnumNext PEnterkeyhintEnum = "next"
)

type PHiddenEnum string

const (
	PHiddenEnumUntilFound PHiddenEnum = "until-found"
	PHiddenEnumHidden PHiddenEnum = "hidden"
)

type pAttrs map[string]any

func (e *PElement) Autocapitalize(a PAutocapitalizeEnum) *PElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *PElement) Autocorrect(a PAutocorrectEnum) *PElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *PElement) Autofocus(b bool) *PElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *PElement) Class(s ...string) *PElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *PElement) Contenteditable(a PContenteditableEnum) *PElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *PElement) Dir(a PDirEnum) *PElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *PElement) Draggable(a PDraggableEnum) *PElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *PElement) Enterkeyhint(a PEnterkeyhintEnum) *PElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *PElement) Hidden(a PHiddenEnum) *PElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *PElement) Id(s string) *PElement {
	e.attributes["id"] = s
	
	return e
}

func (e *PElement) Slot(s string) *PElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *PElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<p")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</p>")); err != nil {
		return err
	}

	return nil
}
