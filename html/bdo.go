// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type BdoElement struct {
	attributes bdoAttrs
	children []htemel.Node
	skipRender bool
}

// Bdo creates a tag <bdo> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The bdo element represents explicit text directionality formatting control for its children. It allows authors to override the Unicode bidirectional algorithm by explicitly specifying a direction override. [BIDI]
func Bdo(children ...htemel.Node) *BdoElement {
	node := &BdoElement{
		children: children,
		attributes: make(bdoAttrs),
	}

	return node
}

func BdoIf(condition bool, children ...htemel.Node) *BdoElement {
	if condition {
		return Bdo(children...)
	}

	return &BdoElement{
		skipRender: true,
	}
}

type BdoAutocapitalizeEnum string

const (
	BdoAutocapitalizeEnumCharacters BdoAutocapitalizeEnum = "characters"
	BdoAutocapitalizeEnumNone BdoAutocapitalizeEnum = "none"
	BdoAutocapitalizeEnumOff BdoAutocapitalizeEnum = "off"
	BdoAutocapitalizeEnumOn BdoAutocapitalizeEnum = "on"
	BdoAutocapitalizeEnumSentences BdoAutocapitalizeEnum = "sentences"
	BdoAutocapitalizeEnumWords BdoAutocapitalizeEnum = "words"
)

type BdoAutocorrectEnum string

const (
	BdoAutocorrectEnumOff BdoAutocorrectEnum = "off"
	BdoAutocorrectEnumOn BdoAutocorrectEnum = "on"
)

type BdoContenteditableEnum string

const (
	BdoContenteditableEnumFalse BdoContenteditableEnum = "false"
	BdoContenteditableEnumPlaintextOnly BdoContenteditableEnum = "plaintext-only"
	BdoContenteditableEnumTrue BdoContenteditableEnum = "true"
)

type BdoDirEnum string

const (
	BdoDirEnumAuto BdoDirEnum = "auto"
	BdoDirEnumLtr BdoDirEnum = "ltr"
	BdoDirEnumRtl BdoDirEnum = "rtl"
)

type BdoDraggableEnum string

const (
	BdoDraggableEnumFalse BdoDraggableEnum = "false"
	BdoDraggableEnumTrue BdoDraggableEnum = "true"
)

type BdoEnterkeyhintEnum string

const (
	BdoEnterkeyhintEnumEnter BdoEnterkeyhintEnum = "enter"
	BdoEnterkeyhintEnumGo BdoEnterkeyhintEnum = "go"
	BdoEnterkeyhintEnumNext BdoEnterkeyhintEnum = "next"
	BdoEnterkeyhintEnumPrevious BdoEnterkeyhintEnum = "previous"
	BdoEnterkeyhintEnumSearch BdoEnterkeyhintEnum = "search"
	BdoEnterkeyhintEnumSend BdoEnterkeyhintEnum = "send"
	BdoEnterkeyhintEnumDone BdoEnterkeyhintEnum = "done"
)

type BdoHiddenEnum string

const (
	BdoHiddenEnumHidden BdoHiddenEnum = "hidden"
	BdoHiddenEnumUntilFound BdoHiddenEnum = "until-found"
)

type bdoAttrs map[string]any

func (e *BdoElement) Autocapitalize(a BdoAutocapitalizeEnum) *BdoElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *BdoElement) Autocorrect(a BdoAutocorrectEnum) *BdoElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *BdoElement) Autofocus(b bool) *BdoElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *BdoElement) Class(s ...string) *BdoElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *BdoElement) Contenteditable(a BdoContenteditableEnum) *BdoElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *BdoElement) Dir(a BdoDirEnum) *BdoElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *BdoElement) Draggable(a BdoDraggableEnum) *BdoElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *BdoElement) Enterkeyhint(a BdoEnterkeyhintEnum) *BdoElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *BdoElement) Hidden(a BdoHiddenEnum) *BdoElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *BdoElement) Id(s string) *BdoElement {
	e.attributes["id"] = s
	
	return e
}

func (e *BdoElement) Slot(s string) *BdoElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *BdoElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<bdo")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</bdo>")); err != nil {
		return err
	}

	return nil
}
