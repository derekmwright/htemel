// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type BdoElement struct {
	attributes bdoAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// Bdo creates a tag <bdo> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The bdo element represents explicit text directionality formatting control for its children. It allows authors to override the Unicode bidirectional algorithm by explicitly specifying a direction override. [BIDI]
func Bdo(children ...htemel.Node) *BdoElement {
	node := &BdoElement{
		children: children, attributes: make(bdoAttrs),
	}

	return node
}

func BdoIf(condition bool, children ...htemel.Node) *BdoElement {
	if condition {
		return Bdo(children...)
	}

	return &BdoElement{
		skipRender: true,
	}
}

func BdoTernary(condition bool, true htemel.Node, false htemel.Node) *BdoElement {
	if condition {
		return Bdo(true)
	}

	return Bdo(false)
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *BdoElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *BdoElement) AddIndent(i int) {
	e.indent = i + 1
}

type BdoAutocapitalizeEnum string

const (
	BdoAutocapitalizeEnumOn         BdoAutocapitalizeEnum = "on"
	BdoAutocapitalizeEnumSentences  BdoAutocapitalizeEnum = "sentences"
	BdoAutocapitalizeEnumWords      BdoAutocapitalizeEnum = "words"
	BdoAutocapitalizeEnumCharacters BdoAutocapitalizeEnum = "characters"
	BdoAutocapitalizeEnumNone       BdoAutocapitalizeEnum = "none"
	BdoAutocapitalizeEnumOff        BdoAutocapitalizeEnum = "off"
)

type BdoAutocorrectEnum string

const (
	BdoAutocorrectEnumOff   BdoAutocorrectEnum = "off"
	BdoAutocorrectEnumOn    BdoAutocorrectEnum = "on"
	BdoAutocorrectEnumEmpty BdoAutocorrectEnum = ""
)

type BdoContenteditableEnum string

const (
	BdoContenteditableEnumFalse         BdoContenteditableEnum = "false"
	BdoContenteditableEnumPlaintextOnly BdoContenteditableEnum = "plaintext-only"
	BdoContenteditableEnumTrue          BdoContenteditableEnum = "true"
	BdoContenteditableEnumEmpty         BdoContenteditableEnum = ""
)

type BdoDirEnum string

const (
	BdoDirEnumAuto BdoDirEnum = "auto"
	BdoDirEnumLtr  BdoDirEnum = "ltr"
	BdoDirEnumRtl  BdoDirEnum = "rtl"
)

type BdoDraggableEnum string

const (
	BdoDraggableEnumFalse BdoDraggableEnum = "false"
	BdoDraggableEnumTrue  BdoDraggableEnum = "true"
)

type BdoEnterkeyhintEnum string

const (
	BdoEnterkeyhintEnumGo       BdoEnterkeyhintEnum = "go"
	BdoEnterkeyhintEnumNext     BdoEnterkeyhintEnum = "next"
	BdoEnterkeyhintEnumPrevious BdoEnterkeyhintEnum = "previous"
	BdoEnterkeyhintEnumSearch   BdoEnterkeyhintEnum = "search"
	BdoEnterkeyhintEnumSend     BdoEnterkeyhintEnum = "send"
	BdoEnterkeyhintEnumDone     BdoEnterkeyhintEnum = "done"
	BdoEnterkeyhintEnumEnter    BdoEnterkeyhintEnum = "enter"
)

type BdoHiddenEnum string

const (
	BdoHiddenEnumUntilFound BdoHiddenEnum = "until-found"
	BdoHiddenEnumHidden     BdoHiddenEnum = "hidden"
	BdoHiddenEnumEmpty      BdoHiddenEnum = ""
)

type BdoInputmodeEnum string

const (
	BdoInputmodeEnumTel     BdoInputmodeEnum = "tel"
	BdoInputmodeEnumText    BdoInputmodeEnum = "text"
	BdoInputmodeEnumUrl     BdoInputmodeEnum = "url"
	BdoInputmodeEnumDecimal BdoInputmodeEnum = "decimal"
	BdoInputmodeEnumEmail   BdoInputmodeEnum = "email"
	BdoInputmodeEnumNone    BdoInputmodeEnum = "none"
	BdoInputmodeEnumNumeric BdoInputmodeEnum = "numeric"
	BdoInputmodeEnumSearch  BdoInputmodeEnum = "search"
)

type BdoSpellcheckEnum string

const (
	BdoSpellcheckEnumFalse BdoSpellcheckEnum = "false"
	BdoSpellcheckEnumTrue  BdoSpellcheckEnum = "true"
	BdoSpellcheckEnumEmpty BdoSpellcheckEnum = ""
)

type BdoTranslateEnum string

const (
	BdoTranslateEnumNo    BdoTranslateEnum = "no"
	BdoTranslateEnumYes   BdoTranslateEnum = "yes"
	BdoTranslateEnumEmpty BdoTranslateEnum = ""
)

type BdoWritingsuggestionsEnum string

const (
	BdoWritingsuggestionsEnumFalse BdoWritingsuggestionsEnum = "false"
	BdoWritingsuggestionsEnumTrue  BdoWritingsuggestionsEnum = "true"
	BdoWritingsuggestionsEnumEmpty BdoWritingsuggestionsEnum = ""
)

type bdoAttrs map[string]any

func (e *BdoElement) Autocapitalize(a BdoAutocapitalizeEnum) *BdoElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *BdoElement) Autocorrect(a BdoAutocorrectEnum) *BdoElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *BdoElement) Autofocus(b bool) *BdoElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *BdoElement) Class(s ...string) *BdoElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *BdoElement) Contenteditable(a BdoContenteditableEnum) *BdoElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *BdoElement) DataUnsafe(name string, s string) *BdoElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *BdoElement) Data(name string, s string) *BdoElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *BdoElement) Dir(a BdoDirEnum) *BdoElement {
	e.attributes["dir"] = a

	return e
}

func (e *BdoElement) Draggable(a BdoDraggableEnum) *BdoElement {
	e.attributes["draggable"] = a

	return e
}

func (e *BdoElement) Enterkeyhint(a BdoEnterkeyhintEnum) *BdoElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *BdoElement) Hidden(a BdoHiddenEnum) *BdoElement {
	e.attributes["hidden"] = a

	return e
}

func (e *BdoElement) Id(s string) *BdoElement {
	e.attributes["id"] = s

	return e
}

func (e *BdoElement) Inert(b bool) *BdoElement {
	e.attributes["inert"] = b

	return e
}

func (e *BdoElement) Inputmode(a BdoInputmodeEnum) *BdoElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *BdoElement) Itemid(s string) *BdoElement {
	e.attributes["itemid"] = s

	return e
}

func (e *BdoElement) Itemprop(s ...string) *BdoElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *BdoElement) Itemref(s ...string) *BdoElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *BdoElement) Itemscope(b bool) *BdoElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *BdoElement) Itemtype(s ...string) *BdoElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *BdoElement) Lang(s string) *BdoElement {
	e.attributes["lang"] = s

	return e
}

func (e *BdoElement) Nonce(s string) *BdoElement {
	e.attributes["nonce"] = s

	return e
}

func (e *BdoElement) Popover(s string) *BdoElement {
	e.attributes["popover"] = s

	return e
}

func (e *BdoElement) Slot(s string) *BdoElement {
	e.attributes["slot"] = s

	return e
}

func (e *BdoElement) Spellcheck(a BdoSpellcheckEnum) *BdoElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *BdoElement) Style(s string) *BdoElement {
	e.attributes["style"] = s

	return e
}

func (e *BdoElement) Tabindex(i int) *BdoElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *BdoElement) Title(s string) *BdoElement {
	e.attributes["title"] = s

	return e
}

func (e *BdoElement) Translate(a BdoTranslateEnum) *BdoElement {
	e.attributes["translate"] = a

	return e
}

func (e *BdoElement) Writingsuggestions(a BdoWritingsuggestionsEnum) *BdoElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *BdoElement) Render(w io.Writer) error {
	indent := strings.Repeat("  ", e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<bdo")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}
	for _, child := range e.children {
		child.AddIndent(e.Indent())
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(indent + "</bdo>\n")); err != nil {
		return err
	}

	return nil
}
