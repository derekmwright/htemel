// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type OptgroupElement struct {
	attributes optgroupAttrs
	children []htemel.Node
	skipRender bool
}

// Optgroup creates a tag <optgroup> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The optgroup element represents a group of option elements with a common label.
func Optgroup(children ...htemel.Node) *OptgroupElement {
	node := &OptgroupElement{
		children: children,
		attributes: make(optgroupAttrs),
	}

	return node
}

func OptgroupIf(condition bool, children ...htemel.Node) *OptgroupElement {
	if condition {
		return Optgroup(children...)
	}

	return &OptgroupElement{
		skipRender: true,
	}
}

type OptgroupAutocapitalizeEnum string

const (
	OptgroupAutocapitalizeEnumCharacters OptgroupAutocapitalizeEnum = "characters"
	OptgroupAutocapitalizeEnumNone OptgroupAutocapitalizeEnum = "none"
	OptgroupAutocapitalizeEnumOff OptgroupAutocapitalizeEnum = "off"
	OptgroupAutocapitalizeEnumOn OptgroupAutocapitalizeEnum = "on"
	OptgroupAutocapitalizeEnumSentences OptgroupAutocapitalizeEnum = "sentences"
	OptgroupAutocapitalizeEnumWords OptgroupAutocapitalizeEnum = "words"
)

type OptgroupAutocorrectEnum string

const (
	OptgroupAutocorrectEnumOff OptgroupAutocorrectEnum = "off"
	OptgroupAutocorrectEnumOn OptgroupAutocorrectEnum = "on"
)

type OptgroupContenteditableEnum string

const (
	OptgroupContenteditableEnumTrue OptgroupContenteditableEnum = "true"
	OptgroupContenteditableEnumFalse OptgroupContenteditableEnum = "false"
	OptgroupContenteditableEnumPlaintextOnly OptgroupContenteditableEnum = "plaintext-only"
)

type OptgroupDirEnum string

const (
	OptgroupDirEnumAuto OptgroupDirEnum = "auto"
	OptgroupDirEnumLtr OptgroupDirEnum = "ltr"
	OptgroupDirEnumRtl OptgroupDirEnum = "rtl"
)

type OptgroupDraggableEnum string

const (
	OptgroupDraggableEnumTrue OptgroupDraggableEnum = "true"
	OptgroupDraggableEnumFalse OptgroupDraggableEnum = "false"
)

type OptgroupEnterkeyhintEnum string

const (
	OptgroupEnterkeyhintEnumDone OptgroupEnterkeyhintEnum = "done"
	OptgroupEnterkeyhintEnumEnter OptgroupEnterkeyhintEnum = "enter"
	OptgroupEnterkeyhintEnumGo OptgroupEnterkeyhintEnum = "go"
	OptgroupEnterkeyhintEnumNext OptgroupEnterkeyhintEnum = "next"
	OptgroupEnterkeyhintEnumPrevious OptgroupEnterkeyhintEnum = "previous"
	OptgroupEnterkeyhintEnumSearch OptgroupEnterkeyhintEnum = "search"
	OptgroupEnterkeyhintEnumSend OptgroupEnterkeyhintEnum = "send"
)

type OptgroupHiddenEnum string

const (
	OptgroupHiddenEnumHidden OptgroupHiddenEnum = "hidden"
	OptgroupHiddenEnumUntilFound OptgroupHiddenEnum = "until-found"
)

type optgroupAttrs map[string]any

func (e *OptgroupElement) Autocapitalize(a OptgroupAutocapitalizeEnum) *OptgroupElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *OptgroupElement) Autocorrect(a OptgroupAutocorrectEnum) *OptgroupElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *OptgroupElement) Autofocus(b bool) *OptgroupElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *OptgroupElement) Class(s ...string) *OptgroupElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *OptgroupElement) Contenteditable(a OptgroupContenteditableEnum) *OptgroupElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *OptgroupElement) Dir(a OptgroupDirEnum) *OptgroupElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *OptgroupElement) Draggable(a OptgroupDraggableEnum) *OptgroupElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *OptgroupElement) Enterkeyhint(a OptgroupEnterkeyhintEnum) *OptgroupElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *OptgroupElement) Hidden(a OptgroupHiddenEnum) *OptgroupElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *OptgroupElement) Id(s string) *OptgroupElement {
	e.attributes["id"] = s
	
	return e
}

func (e *OptgroupElement) Slot(s string) *OptgroupElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *OptgroupElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<optgroup")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</optgroup>")); err != nil {
		return err
	}

	return nil
}
