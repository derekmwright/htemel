// Code generated by htemel. DO NOT EDIT.
package html

import (
  "github.com/derekmwright/htemel"
  "io"
)

type OptgroupElement struct {
	children []htemel.Node
	skipRender bool
}

// Optgroup creates a tag <optgroup> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The optgroup element represents a group of option elements with a common label.
func Optgroup(children ...htemel.Node) *OptgroupElement {
	node := &OptgroupElement{
		children: children,
	}

	return node
}

func OptgroupIf(condition bool, children ...htemel.Node) *OptgroupElement {
	if condition {
		return Optgroup(children...)
	}

	return &OptgroupElement{
		skipRender: true,
	}
}

func (e *OptgroupElement) Autocapitalize() *OptgroupElement {
	return e
}

func (e *OptgroupElement) Autocorrect() *OptgroupElement {
	return e
}

func (e *OptgroupElement) Autofocus() *OptgroupElement {
	return e
}

func (e *OptgroupElement) Class() *OptgroupElement {
	return e
}

func (e *OptgroupElement) Contenteditable() *OptgroupElement {
	return e
}

func (e *OptgroupElement) Id() *OptgroupElement {
	return e
}

func (e *OptgroupElement) Slot() *OptgroupElement {
	return e
}

func (e *OptgroupElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<optgroup")); err != nil {
		return err
	}

	// TODO: Attribute stuff here

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</optgroup>")); err != nil {
		return err
	}

	return nil
}
