// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type OptgroupElement struct {
	attributes optgroupAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// Optgroup creates a tag <optgroup> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The optgroup element represents a group of option elements with a common label.
func Optgroup(children ...htemel.Node) *OptgroupElement {
	node := &OptgroupElement{
		children: children, attributes: make(optgroupAttrs),
	}

	return node
}

func OptgroupIf(condition bool, children ...htemel.Node) *OptgroupElement {
	if condition {
		return Optgroup(children...)
	}

	return &OptgroupElement{
		skipRender: true,
	}
}

func OptgroupTernary(condition bool, true htemel.Node, false htemel.Node) *OptgroupElement {
	if condition {
		return Optgroup(true)
	}

	return Optgroup(false)
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *OptgroupElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *OptgroupElement) AddIndent(i int) {
	e.indent = i + 1
}

type OptgroupAutocapitalizeEnum string

const (
	OptgroupAutocapitalizeEnumCharacters OptgroupAutocapitalizeEnum = "characters"
	OptgroupAutocapitalizeEnumNone       OptgroupAutocapitalizeEnum = "none"
	OptgroupAutocapitalizeEnumOff        OptgroupAutocapitalizeEnum = "off"
	OptgroupAutocapitalizeEnumOn         OptgroupAutocapitalizeEnum = "on"
	OptgroupAutocapitalizeEnumSentences  OptgroupAutocapitalizeEnum = "sentences"
	OptgroupAutocapitalizeEnumWords      OptgroupAutocapitalizeEnum = "words"
)

type OptgroupAutocorrectEnum string

const (
	OptgroupAutocorrectEnumOn    OptgroupAutocorrectEnum = "on"
	OptgroupAutocorrectEnumOff   OptgroupAutocorrectEnum = "off"
	OptgroupAutocorrectEnumEmpty OptgroupAutocorrectEnum = ""
)

type OptgroupContenteditableEnum string

const (
	OptgroupContenteditableEnumFalse         OptgroupContenteditableEnum = "false"
	OptgroupContenteditableEnumPlaintextOnly OptgroupContenteditableEnum = "plaintext-only"
	OptgroupContenteditableEnumTrue          OptgroupContenteditableEnum = "true"
	OptgroupContenteditableEnumEmpty         OptgroupContenteditableEnum = ""
)

type OptgroupDirEnum string

const (
	OptgroupDirEnumRtl  OptgroupDirEnum = "rtl"
	OptgroupDirEnumAuto OptgroupDirEnum = "auto"
	OptgroupDirEnumLtr  OptgroupDirEnum = "ltr"
)

type OptgroupDraggableEnum string

const (
	OptgroupDraggableEnumFalse OptgroupDraggableEnum = "false"
	OptgroupDraggableEnumTrue  OptgroupDraggableEnum = "true"
)

type OptgroupEnterkeyhintEnum string

const (
	OptgroupEnterkeyhintEnumPrevious OptgroupEnterkeyhintEnum = "previous"
	OptgroupEnterkeyhintEnumSearch   OptgroupEnterkeyhintEnum = "search"
	OptgroupEnterkeyhintEnumSend     OptgroupEnterkeyhintEnum = "send"
	OptgroupEnterkeyhintEnumDone     OptgroupEnterkeyhintEnum = "done"
	OptgroupEnterkeyhintEnumEnter    OptgroupEnterkeyhintEnum = "enter"
	OptgroupEnterkeyhintEnumGo       OptgroupEnterkeyhintEnum = "go"
	OptgroupEnterkeyhintEnumNext     OptgroupEnterkeyhintEnum = "next"
)

type OptgroupHiddenEnum string

const (
	OptgroupHiddenEnumUntilFound OptgroupHiddenEnum = "until-found"
	OptgroupHiddenEnumHidden     OptgroupHiddenEnum = "hidden"
	OptgroupHiddenEnumEmpty      OptgroupHiddenEnum = ""
)

type OptgroupInputmodeEnum string

const (
	OptgroupInputmodeEnumText    OptgroupInputmodeEnum = "text"
	OptgroupInputmodeEnumUrl     OptgroupInputmodeEnum = "url"
	OptgroupInputmodeEnumDecimal OptgroupInputmodeEnum = "decimal"
	OptgroupInputmodeEnumEmail   OptgroupInputmodeEnum = "email"
	OptgroupInputmodeEnumNone    OptgroupInputmodeEnum = "none"
	OptgroupInputmodeEnumNumeric OptgroupInputmodeEnum = "numeric"
	OptgroupInputmodeEnumSearch  OptgroupInputmodeEnum = "search"
	OptgroupInputmodeEnumTel     OptgroupInputmodeEnum = "tel"
)

type OptgroupSpellcheckEnum string

const (
	OptgroupSpellcheckEnumFalse OptgroupSpellcheckEnum = "false"
	OptgroupSpellcheckEnumTrue  OptgroupSpellcheckEnum = "true"
	OptgroupSpellcheckEnumEmpty OptgroupSpellcheckEnum = ""
)

type OptgroupTranslateEnum string

const (
	OptgroupTranslateEnumNo    OptgroupTranslateEnum = "no"
	OptgroupTranslateEnumYes   OptgroupTranslateEnum = "yes"
	OptgroupTranslateEnumEmpty OptgroupTranslateEnum = ""
)

type OptgroupWritingsuggestionsEnum string

const (
	OptgroupWritingsuggestionsEnumFalse OptgroupWritingsuggestionsEnum = "false"
	OptgroupWritingsuggestionsEnumTrue  OptgroupWritingsuggestionsEnum = "true"
	OptgroupWritingsuggestionsEnumEmpty OptgroupWritingsuggestionsEnum = ""
)

type optgroupAttrs map[string]any

func (e *OptgroupElement) Disabled(b bool) *OptgroupElement {
	e.attributes["disabled"] = b

	return e
}

func (e *OptgroupElement) Label(s string) *OptgroupElement {
	e.attributes["label"] = s

	return e
}

func (e *OptgroupElement) Autocapitalize(a OptgroupAutocapitalizeEnum) *OptgroupElement {
	e.attributes["autocapitalize"] = a

	return e
}

func OptgroupAutocapitalizeCustom(s string) OptgroupAutocapitalizeEnum {
	return OptgroupAutocapitalizeEnum(s)
}

func (e *OptgroupElement) Autocorrect(a OptgroupAutocorrectEnum) *OptgroupElement {
	e.attributes["autocorrect"] = a

	return e
}

func OptgroupAutocorrectCustom(s string) OptgroupAutocorrectEnum {
	return OptgroupAutocorrectEnum(s)
}

func (e *OptgroupElement) Autofocus(b bool) *OptgroupElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *OptgroupElement) Class(s ...string) *OptgroupElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *OptgroupElement) Contenteditable(a OptgroupContenteditableEnum) *OptgroupElement {
	e.attributes["contenteditable"] = a

	return e
}

func OptgroupContenteditableCustom(s string) OptgroupContenteditableEnum {
	return OptgroupContenteditableEnum(s)
}

func (e *OptgroupElement) DataUnsafe(name string, s string) *OptgroupElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *OptgroupElement) Data(name string, s string) *OptgroupElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *OptgroupElement) Dir(a OptgroupDirEnum) *OptgroupElement {
	e.attributes["dir"] = a

	return e
}

func OptgroupDirCustom(s string) OptgroupDirEnum {
	return OptgroupDirEnum(s)
}

func (e *OptgroupElement) Draggable(a OptgroupDraggableEnum) *OptgroupElement {
	e.attributes["draggable"] = a

	return e
}

func OptgroupDraggableCustom(s string) OptgroupDraggableEnum {
	return OptgroupDraggableEnum(s)
}

func (e *OptgroupElement) Enterkeyhint(a OptgroupEnterkeyhintEnum) *OptgroupElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func OptgroupEnterkeyhintCustom(s string) OptgroupEnterkeyhintEnum {
	return OptgroupEnterkeyhintEnum(s)
}

func (e *OptgroupElement) Hidden(a OptgroupHiddenEnum) *OptgroupElement {
	e.attributes["hidden"] = a

	return e
}

func OptgroupHiddenCustom(s string) OptgroupHiddenEnum {
	return OptgroupHiddenEnum(s)
}

func (e *OptgroupElement) Id(s string) *OptgroupElement {
	e.attributes["id"] = s

	return e
}

func (e *OptgroupElement) Inert(b bool) *OptgroupElement {
	e.attributes["inert"] = b

	return e
}

func (e *OptgroupElement) Inputmode(a OptgroupInputmodeEnum) *OptgroupElement {
	e.attributes["inputmode"] = a

	return e
}

func OptgroupInputmodeCustom(s string) OptgroupInputmodeEnum {
	return OptgroupInputmodeEnum(s)
}

func (e *OptgroupElement) Itemid(s string) *OptgroupElement {
	e.attributes["itemid"] = s

	return e
}

func (e *OptgroupElement) Itemprop(s ...string) *OptgroupElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *OptgroupElement) Itemref(s ...string) *OptgroupElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *OptgroupElement) Itemscope(b bool) *OptgroupElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *OptgroupElement) Itemtype(s ...string) *OptgroupElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *OptgroupElement) Lang(s string) *OptgroupElement {
	e.attributes["lang"] = s

	return e
}

func (e *OptgroupElement) Nonce(s string) *OptgroupElement {
	e.attributes["nonce"] = s

	return e
}

func (e *OptgroupElement) Popover(s string) *OptgroupElement {
	e.attributes["popover"] = s

	return e
}

func (e *OptgroupElement) Slot(s string) *OptgroupElement {
	e.attributes["slot"] = s

	return e
}

func (e *OptgroupElement) Spellcheck(a OptgroupSpellcheckEnum) *OptgroupElement {
	e.attributes["spellcheck"] = a

	return e
}

func OptgroupSpellcheckCustom(s string) OptgroupSpellcheckEnum {
	return OptgroupSpellcheckEnum(s)
}

func (e *OptgroupElement) Style(s string) *OptgroupElement {
	e.attributes["style"] = s

	return e
}

func (e *OptgroupElement) Tabindex(i int) *OptgroupElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *OptgroupElement) Title(s string) *OptgroupElement {
	e.attributes["title"] = s

	return e
}

func (e *OptgroupElement) Translate(a OptgroupTranslateEnum) *OptgroupElement {
	e.attributes["translate"] = a

	return e
}

func OptgroupTranslateCustom(s string) OptgroupTranslateEnum {
	return OptgroupTranslateEnum(s)
}

func (e *OptgroupElement) Writingsuggestions(a OptgroupWritingsuggestionsEnum) *OptgroupElement {
	e.attributes["writingsuggestions"] = a

	return e
}

func OptgroupWritingsuggestionsCustom(s string) OptgroupWritingsuggestionsEnum {
	return OptgroupWritingsuggestionsEnum(s)
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *OptgroupElement) Render(w io.Writer) error {
	indent := htemel.SetIndent(e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<optgroup")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}
	for _, child := range e.children {
		child.AddIndent(e.Indent())
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(indent + "</optgroup>\n")); err != nil {
		return err
	}

	return nil
}
