// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type OptgroupElement struct {
	attributes optgroupAttrs
	children   []htemel.Node
	skipRender bool
}

// Optgroup creates a tag <optgroup> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The optgroup element represents a group of option elements with a common label.
func Optgroup(children ...htemel.Node) *OptgroupElement {
	node := &OptgroupElement{
		children:   children,
		attributes: make(optgroupAttrs),
	}

	return node
}

func OptgroupIf(condition bool, children ...htemel.Node) *OptgroupElement {
	if condition {
		return Optgroup(children...)
	}

	return &OptgroupElement{
		skipRender: true,
	}
}

type OptgroupAutocapitalizeAttrEnum string

const (
	OptgroupAutocapitalizeAttrEnumCharacters OptgroupAutocapitalizeAttrEnum = "characters"
	OptgroupAutocapitalizeAttrEnumNone       OptgroupAutocapitalizeAttrEnum = "none"
	OptgroupAutocapitalizeAttrEnumOff        OptgroupAutocapitalizeAttrEnum = "off"
	OptgroupAutocapitalizeAttrEnumOn         OptgroupAutocapitalizeAttrEnum = "on"
	OptgroupAutocapitalizeAttrEnumSentences  OptgroupAutocapitalizeAttrEnum = "sentences"
	OptgroupAutocapitalizeAttrEnumWords      OptgroupAutocapitalizeAttrEnum = "words"
)

type OptgroupAutocorrectAttrEnum string

const (
	OptgroupAutocorrectAttrEnumOff OptgroupAutocorrectAttrEnum = "off"
	OptgroupAutocorrectAttrEnumOn  OptgroupAutocorrectAttrEnum = "on"
)

type OptgroupContenteditableAttrEnum string

const (
	OptgroupContenteditableAttrEnumFalse         OptgroupContenteditableAttrEnum = "false"
	OptgroupContenteditableAttrEnumPlaintextOnly OptgroupContenteditableAttrEnum = "plaintext-only"
	OptgroupContenteditableAttrEnumTrue          OptgroupContenteditableAttrEnum = "true"
)

type optgroupAttrs map[string]any

func (e *OptgroupElement) Autocapitalize(a OptgroupAutocapitalizeAttrEnum) *OptgroupElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *OptgroupElement) Autocorrect(a OptgroupAutocorrectAttrEnum) *OptgroupElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *OptgroupElement) Autofocus(b bool) *OptgroupElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *OptgroupElement) Class(s ...string) *OptgroupElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *OptgroupElement) Contenteditable(a OptgroupContenteditableAttrEnum) *OptgroupElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *OptgroupElement) Id(s string) *OptgroupElement {
	e.attributes["id"] = s

	return e
}

func (e *OptgroupElement) Slot(s string) *OptgroupElement {
	e.attributes["slot"] = s

	return e
}

func (e *OptgroupElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<optgroup")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</optgroup>")); err != nil {
		return err
	}

	return nil
}
