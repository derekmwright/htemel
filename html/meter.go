// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type MeterElement struct {
	attributes meterAttrs
	children []htemel.Node
	skipRender bool
}

// Meter creates a tag <meter> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The meter element represents a scalar measurement within a known range, or a fractional value; for example disk usage, the relevance of a query result, or the fraction of a voting population to have selected a particular candidate.
func Meter(children ...htemel.Node) *MeterElement {
	node := &MeterElement{
		children: children,
		attributes: make(meterAttrs),
	}

	return node
}

func MeterIf(condition bool, children ...htemel.Node) *MeterElement {
	if condition {
		return Meter(children...)
	}

	return &MeterElement{
		skipRender: true,
	}
}

type MeterAutocapitalizeAttrEnum string

const (
	MeterAutocapitalizeAttrEnumWords MeterAutocapitalizeAttrEnum = "words"
	MeterAutocapitalizeAttrEnumCharacters MeterAutocapitalizeAttrEnum = "characters"
	MeterAutocapitalizeAttrEnumNone MeterAutocapitalizeAttrEnum = "none"
	MeterAutocapitalizeAttrEnumOff MeterAutocapitalizeAttrEnum = "off"
	MeterAutocapitalizeAttrEnumOn MeterAutocapitalizeAttrEnum = "on"
	MeterAutocapitalizeAttrEnumSentences MeterAutocapitalizeAttrEnum = "sentences"
)

type MeterAutocorrectAttrEnum string

const (
	MeterAutocorrectAttrEnumOff MeterAutocorrectAttrEnum = "off"
	MeterAutocorrectAttrEnumOn MeterAutocorrectAttrEnum = "on"
)

type MeterContenteditableAttrEnum string

const (
	MeterContenteditableAttrEnumFalse MeterContenteditableAttrEnum = "false"
	MeterContenteditableAttrEnumPlaintextOnly MeterContenteditableAttrEnum = "plaintext-only"
	MeterContenteditableAttrEnumTrue MeterContenteditableAttrEnum = "true"
)

type meterAttrs map[string]any

func (e *MeterElement) Autocapitalize(a MeterAutocapitalizeAttrEnum) *MeterElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *MeterElement) Autocorrect(a MeterAutocorrectAttrEnum) *MeterElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *MeterElement) Class(s ...string) *MeterElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *MeterElement) Contenteditable(a MeterContenteditableAttrEnum) *MeterElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *MeterElement) Id(s string) *MeterElement {
	e.attributes["id"] = s
	
	return e
}

func (e *MeterElement) Slot(s string) *MeterElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *MeterElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<meter")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		w.Write([]byte(" " + key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</meter>")); err != nil {
		return err
	}

	return nil
}
