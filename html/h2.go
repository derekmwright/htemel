// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type H2Element struct {
	attributes h2Attrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// H2 creates a tag <h2> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: These elements represent headings for their sections.
func H2(children ...htemel.Node) *H2Element {
	node := &H2Element{
		children: children, attributes: make(h2Attrs),
	}

	return node
}

func H2If(condition bool, children ...htemel.Node) *H2Element {
	if condition {
		return H2(children...)
	}

	return &H2Element{
		skipRender: true,
	}
}

func H2Ternary(condition bool, true htemel.Node, false htemel.Node) *H2Element {
	if condition {
		return H2(true)
	}

	return H2(false)
}

type H2AutocapitalizeEnum string

const (
	H2AutocapitalizeEnumCharacters H2AutocapitalizeEnum = "characters"
	H2AutocapitalizeEnumNone       H2AutocapitalizeEnum = "none"
	H2AutocapitalizeEnumOff        H2AutocapitalizeEnum = "off"
	H2AutocapitalizeEnumOn         H2AutocapitalizeEnum = "on"
	H2AutocapitalizeEnumSentences  H2AutocapitalizeEnum = "sentences"
	H2AutocapitalizeEnumWords      H2AutocapitalizeEnum = "words"
)

type H2AutocorrectEnum string

const (
	H2AutocorrectEnumOff   H2AutocorrectEnum = "off"
	H2AutocorrectEnumOn    H2AutocorrectEnum = "on"
	H2AutocorrectEnumEmpty H2AutocorrectEnum = ""
)

type H2ContenteditableEnum string

const (
	H2ContenteditableEnumTrue          H2ContenteditableEnum = "true"
	H2ContenteditableEnumFalse         H2ContenteditableEnum = "false"
	H2ContenteditableEnumPlaintextOnly H2ContenteditableEnum = "plaintext-only"
	H2ContenteditableEnumEmpty         H2ContenteditableEnum = ""
)

type H2DirEnum string

const (
	H2DirEnumAuto H2DirEnum = "auto"
	H2DirEnumLtr  H2DirEnum = "ltr"
	H2DirEnumRtl  H2DirEnum = "rtl"
)

type H2DraggableEnum string

const (
	H2DraggableEnumFalse H2DraggableEnum = "false"
	H2DraggableEnumTrue  H2DraggableEnum = "true"
)

type H2EnterkeyhintEnum string

const (
	H2EnterkeyhintEnumEnter    H2EnterkeyhintEnum = "enter"
	H2EnterkeyhintEnumGo       H2EnterkeyhintEnum = "go"
	H2EnterkeyhintEnumNext     H2EnterkeyhintEnum = "next"
	H2EnterkeyhintEnumPrevious H2EnterkeyhintEnum = "previous"
	H2EnterkeyhintEnumSearch   H2EnterkeyhintEnum = "search"
	H2EnterkeyhintEnumSend     H2EnterkeyhintEnum = "send"
	H2EnterkeyhintEnumDone     H2EnterkeyhintEnum = "done"
)

type H2HiddenEnum string

const (
	H2HiddenEnumHidden     H2HiddenEnum = "hidden"
	H2HiddenEnumUntilFound H2HiddenEnum = "until-found"
	H2HiddenEnumEmpty      H2HiddenEnum = ""
)

type H2InputmodeEnum string

const (
	H2InputmodeEnumUrl     H2InputmodeEnum = "url"
	H2InputmodeEnumDecimal H2InputmodeEnum = "decimal"
	H2InputmodeEnumEmail   H2InputmodeEnum = "email"
	H2InputmodeEnumNone    H2InputmodeEnum = "none"
	H2InputmodeEnumNumeric H2InputmodeEnum = "numeric"
	H2InputmodeEnumSearch  H2InputmodeEnum = "search"
	H2InputmodeEnumTel     H2InputmodeEnum = "tel"
	H2InputmodeEnumText    H2InputmodeEnum = "text"
)

type H2SpellcheckEnum string

const (
	H2SpellcheckEnumFalse H2SpellcheckEnum = "false"
	H2SpellcheckEnumTrue  H2SpellcheckEnum = "true"
	H2SpellcheckEnumEmpty H2SpellcheckEnum = ""
)

type H2TranslateEnum string

const (
	H2TranslateEnumYes   H2TranslateEnum = "yes"
	H2TranslateEnumNo    H2TranslateEnum = "no"
	H2TranslateEnumEmpty H2TranslateEnum = ""
)

type H2WritingsuggestionsEnum string

const (
	H2WritingsuggestionsEnumFalse H2WritingsuggestionsEnum = "false"
	H2WritingsuggestionsEnumTrue  H2WritingsuggestionsEnum = "true"
	H2WritingsuggestionsEnumEmpty H2WritingsuggestionsEnum = ""
)

type h2Attrs map[string]any

func (e *H2Element) Autocapitalize(a H2AutocapitalizeEnum) *H2Element {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *H2Element) Autocorrect(a H2AutocorrectEnum) *H2Element {
	e.attributes["autocorrect"] = a

	return e
}

func (e *H2Element) Autofocus(b bool) *H2Element {
	e.attributes["autofocus"] = b

	return e
}

func (e *H2Element) Class(s ...string) *H2Element {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *H2Element) Contenteditable(a H2ContenteditableEnum) *H2Element {
	e.attributes["contenteditable"] = a

	return e
}

func (e *H2Element) DataUnsafe(name string, s string) *H2Element {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *H2Element) Data(name string, s string) *H2Element {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *H2Element) Dir(a H2DirEnum) *H2Element {
	e.attributes["dir"] = a

	return e
}

func (e *H2Element) Draggable(a H2DraggableEnum) *H2Element {
	e.attributes["draggable"] = a

	return e
}

func (e *H2Element) Enterkeyhint(a H2EnterkeyhintEnum) *H2Element {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *H2Element) Hidden(a H2HiddenEnum) *H2Element {
	e.attributes["hidden"] = a

	return e
}

func (e *H2Element) Id(s string) *H2Element {
	e.attributes["id"] = s

	return e
}

func (e *H2Element) Inert(b bool) *H2Element {
	e.attributes["inert"] = b

	return e
}

func (e *H2Element) Inputmode(a H2InputmodeEnum) *H2Element {
	e.attributes["inputmode"] = a

	return e
}

func (e *H2Element) Itemid(s string) *H2Element {
	e.attributes["itemid"] = s

	return e
}

func (e *H2Element) Itemprop(s ...string) *H2Element {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *H2Element) Itemref(s ...string) *H2Element {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *H2Element) Itemscope(b bool) *H2Element {
	e.attributes["itemscope"] = b

	return e
}

func (e *H2Element) Itemtype(s ...string) *H2Element {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *H2Element) Lang(s string) *H2Element {
	e.attributes["lang"] = s

	return e
}

func (e *H2Element) Nonce(s string) *H2Element {
	e.attributes["nonce"] = s

	return e
}

func (e *H2Element) Popover(s string) *H2Element {
	e.attributes["popover"] = s

	return e
}

func (e *H2Element) Slot(s string) *H2Element {
	e.attributes["slot"] = s

	return e
}

func (e *H2Element) Spellcheck(a H2SpellcheckEnum) *H2Element {
	e.attributes["spellcheck"] = a

	return e
}

func (e *H2Element) Style(s string) *H2Element {
	e.attributes["style"] = s

	return e
}

func (e *H2Element) Tabindex(i int) *H2Element {
	e.attributes["tabindex"] = i

	return e
}

func (e *H2Element) Title(s string) *H2Element {
	e.attributes["title"] = s

	return e
}

func (e *H2Element) Translate(a H2TranslateEnum) *H2Element {
	e.attributes["translate"] = a

	return e
}

func (e *H2Element) Writingsuggestions(a H2WritingsuggestionsEnum) *H2Element {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *H2Element) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<h2")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}
	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</h2>")); err != nil {
		return err
	}

	return nil
}
