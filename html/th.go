// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type ThElement struct {
	attributes thAttrs
	children   []htemel.Node
	skipRender bool
}

// Th creates a tag <th> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The th element represents a header cell in a table.
func Th(children ...htemel.Node) *ThElement {
	node := &ThElement{
		children:   children,
		attributes: make(thAttrs),
	}

	return node
}

func ThIf(condition bool, children ...htemel.Node) *ThElement {
	if condition {
		return Th(children...)
	}

	return &ThElement{
		skipRender: true,
	}
}

type ThAutocapitalizeAttrEnum string

const (
	ThAutocapitalizeAttrEnumOn         ThAutocapitalizeAttrEnum = "on"
	ThAutocapitalizeAttrEnumSentences  ThAutocapitalizeAttrEnum = "sentences"
	ThAutocapitalizeAttrEnumWords      ThAutocapitalizeAttrEnum = "words"
	ThAutocapitalizeAttrEnumCharacters ThAutocapitalizeAttrEnum = "characters"
	ThAutocapitalizeAttrEnumNone       ThAutocapitalizeAttrEnum = "none"
	ThAutocapitalizeAttrEnumOff        ThAutocapitalizeAttrEnum = "off"
)

type ThAutocorrectAttrEnum string

const (
	ThAutocorrectAttrEnumOn  ThAutocorrectAttrEnum = "on"
	ThAutocorrectAttrEnumOff ThAutocorrectAttrEnum = "off"
)

type ThContenteditableAttrEnum string

const (
	ThContenteditableAttrEnumFalse         ThContenteditableAttrEnum = "false"
	ThContenteditableAttrEnumPlaintextOnly ThContenteditableAttrEnum = "plaintext-only"
	ThContenteditableAttrEnumTrue          ThContenteditableAttrEnum = "true"
)

type thAttrs map[string]any

func (e *ThElement) Autocapitalize(a ThAutocapitalizeAttrEnum) *ThElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *ThElement) Autocorrect(a ThAutocorrectAttrEnum) *ThElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *ThElement) Autofocus(b bool) *ThElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *ThElement) Class(s ...string) *ThElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *ThElement) Contenteditable(a ThContenteditableAttrEnum) *ThElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *ThElement) Id(s string) *ThElement {
	e.attributes["id"] = s

	return e
}

func (e *ThElement) Slot(s string) *ThElement {
	e.attributes["slot"] = s

	return e
}

func (e *ThElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<th")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</th>")); err != nil {
		return err
	}

	return nil
}
