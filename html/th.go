// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type ThElement struct {
	attributes thAttrs
	children []htemel.Node
	skipRender bool
}

// Th creates a tag <th> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The th element represents a header cell in a table.
func Th(children ...htemel.Node) *ThElement {
	node := &ThElement{
		children: children,
		attributes: make(thAttrs),
	}

	return node
}

func ThIf(condition bool, children ...htemel.Node) *ThElement {
	if condition {
		return Th(children...)
	}

	return &ThElement{
		skipRender: true,
	}
}

type ThAutocapitalizeEnum string

const (
	ThAutocapitalizeEnumOn ThAutocapitalizeEnum = "on"
	ThAutocapitalizeEnumSentences ThAutocapitalizeEnum = "sentences"
	ThAutocapitalizeEnumWords ThAutocapitalizeEnum = "words"
	ThAutocapitalizeEnumCharacters ThAutocapitalizeEnum = "characters"
	ThAutocapitalizeEnumNone ThAutocapitalizeEnum = "none"
	ThAutocapitalizeEnumOff ThAutocapitalizeEnum = "off"
)

type ThAutocorrectEnum string

const (
	ThAutocorrectEnumOff ThAutocorrectEnum = "off"
	ThAutocorrectEnumOn ThAutocorrectEnum = "on"
)

type ThContenteditableEnum string

const (
	ThContenteditableEnumFalse ThContenteditableEnum = "false"
	ThContenteditableEnumPlaintextOnly ThContenteditableEnum = "plaintext-only"
	ThContenteditableEnumTrue ThContenteditableEnum = "true"
)

type ThDirEnum string

const (
	ThDirEnumAuto ThDirEnum = "auto"
	ThDirEnumLtr ThDirEnum = "ltr"
	ThDirEnumRtl ThDirEnum = "rtl"
)

type ThDraggableEnum string

const (
	ThDraggableEnumFalse ThDraggableEnum = "false"
	ThDraggableEnumTrue ThDraggableEnum = "true"
)

type ThEnterkeyhintEnum string

const (
	ThEnterkeyhintEnumSearch ThEnterkeyhintEnum = "search"
	ThEnterkeyhintEnumSend ThEnterkeyhintEnum = "send"
	ThEnterkeyhintEnumDone ThEnterkeyhintEnum = "done"
	ThEnterkeyhintEnumEnter ThEnterkeyhintEnum = "enter"
	ThEnterkeyhintEnumGo ThEnterkeyhintEnum = "go"
	ThEnterkeyhintEnumNext ThEnterkeyhintEnum = "next"
	ThEnterkeyhintEnumPrevious ThEnterkeyhintEnum = "previous"
)

type ThHiddenEnum string

const (
	ThHiddenEnumHidden ThHiddenEnum = "hidden"
	ThHiddenEnumUntilFound ThHiddenEnum = "until-found"
)

type thAttrs map[string]any

func (e *ThElement) Autocapitalize(a ThAutocapitalizeEnum) *ThElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *ThElement) Autocorrect(a ThAutocorrectEnum) *ThElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *ThElement) Autofocus(b bool) *ThElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *ThElement) Class(s ...string) *ThElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *ThElement) Contenteditable(a ThContenteditableEnum) *ThElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *ThElement) Dir(a ThDirEnum) *ThElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *ThElement) Draggable(a ThDraggableEnum) *ThElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *ThElement) Enterkeyhint(a ThEnterkeyhintEnum) *ThElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *ThElement) Hidden(a ThHiddenEnum) *ThElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *ThElement) Id(s string) *ThElement {
	e.attributes["id"] = s
	
	return e
}

func (e *ThElement) Slot(s string) *ThElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *ThElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<th")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</th>")); err != nil {
		return err
	}

	return nil
}
