// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type ArticleElement struct {
	attributes articleAttrs
	children []htemel.Node
	skipRender bool
}

// Article creates a tag <article> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The article element represents a complete, or self-contained, composition in a document, page, application, or site and that is, in principle, independently distributable or reusable, e.g. in syndication. This could be a forum post, a magazine or newspaper article, a blog entry, a user-submitted comment, an interactive widget or gadget, or any other independent item of content.
func Article(children ...htemel.Node) *ArticleElement {
	node := &ArticleElement{
		children: children,
		attributes: make(articleAttrs),
	}

	return node
}

func ArticleIf(condition bool, children ...htemel.Node) *ArticleElement {
	if condition {
		return Article(children...)
	}

	return &ArticleElement{
		skipRender: true,
	}
}

type ArticleAutocapitalizeEnum string

const (
	ArticleAutocapitalizeEnumSentences ArticleAutocapitalizeEnum = "sentences"
	ArticleAutocapitalizeEnumWords ArticleAutocapitalizeEnum = "words"
	ArticleAutocapitalizeEnumCharacters ArticleAutocapitalizeEnum = "characters"
	ArticleAutocapitalizeEnumNone ArticleAutocapitalizeEnum = "none"
	ArticleAutocapitalizeEnumOff ArticleAutocapitalizeEnum = "off"
	ArticleAutocapitalizeEnumOn ArticleAutocapitalizeEnum = "on"
)

type ArticleAutocorrectEnum string

const (
	ArticleAutocorrectEnumOff ArticleAutocorrectEnum = "off"
	ArticleAutocorrectEnumOn ArticleAutocorrectEnum = "on"
)

type ArticleContenteditableEnum string

const (
	ArticleContenteditableEnumFalse ArticleContenteditableEnum = "false"
	ArticleContenteditableEnumPlaintextOnly ArticleContenteditableEnum = "plaintext-only"
	ArticleContenteditableEnumTrue ArticleContenteditableEnum = "true"
)

type ArticleDirEnum string

const (
	ArticleDirEnumAuto ArticleDirEnum = "auto"
	ArticleDirEnumLtr ArticleDirEnum = "ltr"
	ArticleDirEnumRtl ArticleDirEnum = "rtl"
)

type ArticleDraggableEnum string

const (
	ArticleDraggableEnumFalse ArticleDraggableEnum = "false"
	ArticleDraggableEnumTrue ArticleDraggableEnum = "true"
)

type ArticleEnterkeyhintEnum string

const (
	ArticleEnterkeyhintEnumEnter ArticleEnterkeyhintEnum = "enter"
	ArticleEnterkeyhintEnumGo ArticleEnterkeyhintEnum = "go"
	ArticleEnterkeyhintEnumNext ArticleEnterkeyhintEnum = "next"
	ArticleEnterkeyhintEnumPrevious ArticleEnterkeyhintEnum = "previous"
	ArticleEnterkeyhintEnumSearch ArticleEnterkeyhintEnum = "search"
	ArticleEnterkeyhintEnumSend ArticleEnterkeyhintEnum = "send"
	ArticleEnterkeyhintEnumDone ArticleEnterkeyhintEnum = "done"
)

type ArticleHiddenEnum string

const (
	ArticleHiddenEnumHidden ArticleHiddenEnum = "hidden"
	ArticleHiddenEnumUntilFound ArticleHiddenEnum = "until-found"
)

type articleAttrs map[string]any

func (e *ArticleElement) Autocapitalize(a ArticleAutocapitalizeEnum) *ArticleElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *ArticleElement) Autocorrect(a ArticleAutocorrectEnum) *ArticleElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *ArticleElement) Autofocus(b bool) *ArticleElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *ArticleElement) Class(s ...string) *ArticleElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *ArticleElement) Contenteditable(a ArticleContenteditableEnum) *ArticleElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *ArticleElement) Dir(a ArticleDirEnum) *ArticleElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *ArticleElement) Draggable(a ArticleDraggableEnum) *ArticleElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *ArticleElement) Enterkeyhint(a ArticleEnterkeyhintEnum) *ArticleElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *ArticleElement) Hidden(a ArticleHiddenEnum) *ArticleElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *ArticleElement) Id(s string) *ArticleElement {
	e.attributes["id"] = s
	
	return e
}

func (e *ArticleElement) Slot(s string) *ArticleElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *ArticleElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<article")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</article>")); err != nil {
		return err
	}

	return nil
}
