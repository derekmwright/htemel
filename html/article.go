// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type ArticleElement struct {
	attributes articleAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// Article creates a tag <article> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The article element represents a complete, or self-contained, composition in a document, page, application, or site and that is, in principle, independently distributable or reusable, e.g. in syndication. This could be a forum post, a magazine or newspaper article, a blog entry, a user-submitted comment, an interactive widget or gadget, or any other independent item of content.
func Article(children ...htemel.Node) *ArticleElement {
	node := &ArticleElement{
		children: children, attributes: make(articleAttrs),
	}

	return node
}

func ArticleIf(condition bool, children ...htemel.Node) *ArticleElement {
	if condition {
		return Article(children...)
	}

	return &ArticleElement{
		skipRender: true,
	}
}

func ArticleTernary(condition bool, true htemel.Node, false htemel.Node) *ArticleElement {
	if condition {
		return Article(true)
	}

	return Article(false)
}

type ArticleAutocapitalizeEnum string

const (
	ArticleAutocapitalizeEnumWords      ArticleAutocapitalizeEnum = "words"
	ArticleAutocapitalizeEnumCharacters ArticleAutocapitalizeEnum = "characters"
	ArticleAutocapitalizeEnumNone       ArticleAutocapitalizeEnum = "none"
	ArticleAutocapitalizeEnumOff        ArticleAutocapitalizeEnum = "off"
	ArticleAutocapitalizeEnumOn         ArticleAutocapitalizeEnum = "on"
	ArticleAutocapitalizeEnumSentences  ArticleAutocapitalizeEnum = "sentences"
)

type ArticleAutocorrectEnum string

const (
	ArticleAutocorrectEnumOn    ArticleAutocorrectEnum = "on"
	ArticleAutocorrectEnumOff   ArticleAutocorrectEnum = "off"
	ArticleAutocorrectEnumEmpty ArticleAutocorrectEnum = ""
)

type ArticleContenteditableEnum string

const (
	ArticleContenteditableEnumFalse         ArticleContenteditableEnum = "false"
	ArticleContenteditableEnumPlaintextOnly ArticleContenteditableEnum = "plaintext-only"
	ArticleContenteditableEnumTrue          ArticleContenteditableEnum = "true"
	ArticleContenteditableEnumEmpty         ArticleContenteditableEnum = ""
)

type ArticleDirEnum string

const (
	ArticleDirEnumAuto ArticleDirEnum = "auto"
	ArticleDirEnumLtr  ArticleDirEnum = "ltr"
	ArticleDirEnumRtl  ArticleDirEnum = "rtl"
)

type ArticleDraggableEnum string

const (
	ArticleDraggableEnumFalse ArticleDraggableEnum = "false"
	ArticleDraggableEnumTrue  ArticleDraggableEnum = "true"
)

type ArticleEnterkeyhintEnum string

const (
	ArticleEnterkeyhintEnumPrevious ArticleEnterkeyhintEnum = "previous"
	ArticleEnterkeyhintEnumSearch   ArticleEnterkeyhintEnum = "search"
	ArticleEnterkeyhintEnumSend     ArticleEnterkeyhintEnum = "send"
	ArticleEnterkeyhintEnumDone     ArticleEnterkeyhintEnum = "done"
	ArticleEnterkeyhintEnumEnter    ArticleEnterkeyhintEnum = "enter"
	ArticleEnterkeyhintEnumGo       ArticleEnterkeyhintEnum = "go"
	ArticleEnterkeyhintEnumNext     ArticleEnterkeyhintEnum = "next"
)

type ArticleHiddenEnum string

const (
	ArticleHiddenEnumHidden     ArticleHiddenEnum = "hidden"
	ArticleHiddenEnumUntilFound ArticleHiddenEnum = "until-found"
	ArticleHiddenEnumEmpty      ArticleHiddenEnum = ""
)

type ArticleInputmodeEnum string

const (
	ArticleInputmodeEnumText    ArticleInputmodeEnum = "text"
	ArticleInputmodeEnumUrl     ArticleInputmodeEnum = "url"
	ArticleInputmodeEnumDecimal ArticleInputmodeEnum = "decimal"
	ArticleInputmodeEnumEmail   ArticleInputmodeEnum = "email"
	ArticleInputmodeEnumNone    ArticleInputmodeEnum = "none"
	ArticleInputmodeEnumNumeric ArticleInputmodeEnum = "numeric"
	ArticleInputmodeEnumSearch  ArticleInputmodeEnum = "search"
	ArticleInputmodeEnumTel     ArticleInputmodeEnum = "tel"
)

type ArticleSpellcheckEnum string

const (
	ArticleSpellcheckEnumFalse ArticleSpellcheckEnum = "false"
	ArticleSpellcheckEnumTrue  ArticleSpellcheckEnum = "true"
	ArticleSpellcheckEnumEmpty ArticleSpellcheckEnum = ""
)

type ArticleTranslateEnum string

const (
	ArticleTranslateEnumNo    ArticleTranslateEnum = "no"
	ArticleTranslateEnumYes   ArticleTranslateEnum = "yes"
	ArticleTranslateEnumEmpty ArticleTranslateEnum = ""
)

type ArticleWritingsuggestionsEnum string

const (
	ArticleWritingsuggestionsEnumFalse ArticleWritingsuggestionsEnum = "false"
	ArticleWritingsuggestionsEnumTrue  ArticleWritingsuggestionsEnum = "true"
	ArticleWritingsuggestionsEnumEmpty ArticleWritingsuggestionsEnum = ""
)

type articleAttrs map[string]any

func (e *ArticleElement) Autocapitalize(a ArticleAutocapitalizeEnum) *ArticleElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *ArticleElement) Autocorrect(a ArticleAutocorrectEnum) *ArticleElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *ArticleElement) Autofocus(b bool) *ArticleElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *ArticleElement) Class(s ...string) *ArticleElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *ArticleElement) Contenteditable(a ArticleContenteditableEnum) *ArticleElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *ArticleElement) DataUnsafe(name string, s string) *ArticleElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *ArticleElement) Data(name string, s string) *ArticleElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *ArticleElement) Dir(a ArticleDirEnum) *ArticleElement {
	e.attributes["dir"] = a

	return e
}

func (e *ArticleElement) Draggable(a ArticleDraggableEnum) *ArticleElement {
	e.attributes["draggable"] = a

	return e
}

func (e *ArticleElement) Enterkeyhint(a ArticleEnterkeyhintEnum) *ArticleElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *ArticleElement) Hidden(a ArticleHiddenEnum) *ArticleElement {
	e.attributes["hidden"] = a

	return e
}

func (e *ArticleElement) Id(s string) *ArticleElement {
	e.attributes["id"] = s

	return e
}

func (e *ArticleElement) Inert(b bool) *ArticleElement {
	e.attributes["inert"] = b

	return e
}

func (e *ArticleElement) Inputmode(a ArticleInputmodeEnum) *ArticleElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *ArticleElement) Itemid(s string) *ArticleElement {
	e.attributes["itemid"] = s

	return e
}

func (e *ArticleElement) Itemprop(s ...string) *ArticleElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *ArticleElement) Itemref(s ...string) *ArticleElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *ArticleElement) Itemscope(b bool) *ArticleElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *ArticleElement) Itemtype(s ...string) *ArticleElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *ArticleElement) Lang(s string) *ArticleElement {
	e.attributes["lang"] = s

	return e
}

func (e *ArticleElement) Nonce(s string) *ArticleElement {
	e.attributes["nonce"] = s

	return e
}

func (e *ArticleElement) Popover(s string) *ArticleElement {
	e.attributes["popover"] = s

	return e
}

func (e *ArticleElement) Slot(s string) *ArticleElement {
	e.attributes["slot"] = s

	return e
}

func (e *ArticleElement) Spellcheck(a ArticleSpellcheckEnum) *ArticleElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *ArticleElement) Style(s string) *ArticleElement {
	e.attributes["style"] = s

	return e
}

func (e *ArticleElement) Tabindex(i int) *ArticleElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *ArticleElement) Title(s string) *ArticleElement {
	e.attributes["title"] = s

	return e
}

func (e *ArticleElement) Translate(a ArticleTranslateEnum) *ArticleElement {
	e.attributes["translate"] = a

	return e
}

func (e *ArticleElement) Writingsuggestions(a ArticleWritingsuggestionsEnum) *ArticleElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *ArticleElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<article")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}
	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</article>")); err != nil {
		return err
	}

	return nil
}
