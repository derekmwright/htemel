// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type ArticleElement struct {
	attributes articleAttrs
	children   []htemel.Node
	skipRender bool
}

// Article creates a tag <article> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The article element represents a complete, or self-contained, composition in a document, page, application, or site and that is, in principle, independently distributable or reusable, e.g. in syndication. This could be a forum post, a magazine or newspaper article, a blog entry, a user-submitted comment, an interactive widget or gadget, or any other independent item of content.
func Article(children ...htemel.Node) *ArticleElement {
	node := &ArticleElement{
		children:   children,
		attributes: make(articleAttrs),
	}

	return node
}

func ArticleIf(condition bool, children ...htemel.Node) *ArticleElement {
	if condition {
		return Article(children...)
	}

	return &ArticleElement{
		skipRender: true,
	}
}

type ArticleAutocapitalizeAttrEnum string

const (
	ArticleAutocapitalizeAttrEnumOff        ArticleAutocapitalizeAttrEnum = "off"
	ArticleAutocapitalizeAttrEnumOn         ArticleAutocapitalizeAttrEnum = "on"
	ArticleAutocapitalizeAttrEnumSentences  ArticleAutocapitalizeAttrEnum = "sentences"
	ArticleAutocapitalizeAttrEnumWords      ArticleAutocapitalizeAttrEnum = "words"
	ArticleAutocapitalizeAttrEnumCharacters ArticleAutocapitalizeAttrEnum = "characters"
	ArticleAutocapitalizeAttrEnumNone       ArticleAutocapitalizeAttrEnum = "none"
)

type ArticleAutocorrectAttrEnum string

const (
	ArticleAutocorrectAttrEnumOff ArticleAutocorrectAttrEnum = "off"
	ArticleAutocorrectAttrEnumOn  ArticleAutocorrectAttrEnum = "on"
)

type ArticleContenteditableAttrEnum string

const (
	ArticleContenteditableAttrEnumPlaintextOnly ArticleContenteditableAttrEnum = "plaintext-only"
	ArticleContenteditableAttrEnumTrue          ArticleContenteditableAttrEnum = "true"
	ArticleContenteditableAttrEnumFalse         ArticleContenteditableAttrEnum = "false"
)

type articleAttrs map[string]any

func (e *ArticleElement) Autocapitalize(a ArticleAutocapitalizeAttrEnum) *ArticleElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *ArticleElement) Autocorrect(a ArticleAutocorrectAttrEnum) *ArticleElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *ArticleElement) Autofocus(b bool) *ArticleElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *ArticleElement) Class(s ...string) *ArticleElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *ArticleElement) Contenteditable(a ArticleContenteditableAttrEnum) *ArticleElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *ArticleElement) Id(s string) *ArticleElement {
	e.attributes["id"] = s

	return e
}

func (e *ArticleElement) Slot(s string) *ArticleElement {
	e.attributes["slot"] = s

	return e
}

func (e *ArticleElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<article")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</article>")); err != nil {
		return err
	}

	return nil
}
