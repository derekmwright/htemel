// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type SearchElement struct {
	attributes searchAttrs
	children   []htemel.Node
	skipRender bool
}

// Search creates a tag <search> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The search element represents a part of a document or application that contains a set of form controls or other content related to performing a search or filtering operation. This could be a search of the web site or application; a way of searching or filtering search results on the current web page; or a global or Internet-wide search function.
func Search(children ...htemel.Node) *SearchElement {
	node := &SearchElement{
		children:   children,
		attributes: make(searchAttrs),
	}

	return node
}

func SearchIf(condition bool, children ...htemel.Node) *SearchElement {
	if condition {
		return Search(children...)
	}

	return &SearchElement{
		skipRender: true,
	}
}

func SearchTernary(condition bool, true htemel.Node, false htemel.Node) *SearchElement {
	if condition {
		return Search(true)
	}

	return Search(false)
}

type SearchAutocapitalizeEnum string

const (
	SearchAutocapitalizeEnumOn         SearchAutocapitalizeEnum = "on"
	SearchAutocapitalizeEnumSentences  SearchAutocapitalizeEnum = "sentences"
	SearchAutocapitalizeEnumWords      SearchAutocapitalizeEnum = "words"
	SearchAutocapitalizeEnumCharacters SearchAutocapitalizeEnum = "characters"
	SearchAutocapitalizeEnumNone       SearchAutocapitalizeEnum = "none"
	SearchAutocapitalizeEnumOff        SearchAutocapitalizeEnum = "off"
)

type SearchAutocorrectEnum string

const (
	SearchAutocorrectEnumOff SearchAutocorrectEnum = "off"
	SearchAutocorrectEnumOn  SearchAutocorrectEnum = "on"
)

type SearchContenteditableEnum string

const (
	SearchContenteditableEnumFalse         SearchContenteditableEnum = "false"
	SearchContenteditableEnumPlaintextOnly SearchContenteditableEnum = "plaintext-only"
	SearchContenteditableEnumTrue          SearchContenteditableEnum = "true"
)

type SearchDirEnum string

const (
	SearchDirEnumAuto SearchDirEnum = "auto"
	SearchDirEnumLtr  SearchDirEnum = "ltr"
	SearchDirEnumRtl  SearchDirEnum = "rtl"
)

type SearchDraggableEnum string

const (
	SearchDraggableEnumFalse SearchDraggableEnum = "false"
	SearchDraggableEnumTrue  SearchDraggableEnum = "true"
)

type SearchEnterkeyhintEnum string

const (
	SearchEnterkeyhintEnumSend     SearchEnterkeyhintEnum = "send"
	SearchEnterkeyhintEnumDone     SearchEnterkeyhintEnum = "done"
	SearchEnterkeyhintEnumEnter    SearchEnterkeyhintEnum = "enter"
	SearchEnterkeyhintEnumGo       SearchEnterkeyhintEnum = "go"
	SearchEnterkeyhintEnumNext     SearchEnterkeyhintEnum = "next"
	SearchEnterkeyhintEnumPrevious SearchEnterkeyhintEnum = "previous"
	SearchEnterkeyhintEnumSearch   SearchEnterkeyhintEnum = "search"
)

type SearchHiddenEnum string

const (
	SearchHiddenEnumUntilFound SearchHiddenEnum = "until-found"
	SearchHiddenEnumHidden     SearchHiddenEnum = "hidden"
	SearchHiddenEnumEmpty      SearchHiddenEnum = ""
)

type SearchInputmodeEnum string

const (
	SearchInputmodeEnumTel     SearchInputmodeEnum = "tel"
	SearchInputmodeEnumText    SearchInputmodeEnum = "text"
	SearchInputmodeEnumUrl     SearchInputmodeEnum = "url"
	SearchInputmodeEnumDecimal SearchInputmodeEnum = "decimal"
	SearchInputmodeEnumEmail   SearchInputmodeEnum = "email"
	SearchInputmodeEnumNone    SearchInputmodeEnum = "none"
	SearchInputmodeEnumNumeric SearchInputmodeEnum = "numeric"
	SearchInputmodeEnumSearch  SearchInputmodeEnum = "search"
)

type SearchSpellcheckEnum string

const (
	SearchSpellcheckEnumFalse SearchSpellcheckEnum = "false"
	SearchSpellcheckEnumTrue  SearchSpellcheckEnum = "true"
)

type SearchTranslateEnum string

const (
	SearchTranslateEnumNo  SearchTranslateEnum = "no"
	SearchTranslateEnumYes SearchTranslateEnum = "yes"
)

type SearchWritingsuggestionsEnum string

const (
	SearchWritingsuggestionsEnumFalse SearchWritingsuggestionsEnum = "false"
	SearchWritingsuggestionsEnumTrue  SearchWritingsuggestionsEnum = "true"
)

type searchAttrs map[string]any

func (e *SearchElement) Autocapitalize(a SearchAutocapitalizeEnum) *SearchElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *SearchElement) Autocorrect(a SearchAutocorrectEnum) *SearchElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *SearchElement) Autofocus(b bool) *SearchElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *SearchElement) Class(s ...string) *SearchElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *SearchElement) Contenteditable(a SearchContenteditableEnum) *SearchElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *SearchElement) Dir(a SearchDirEnum) *SearchElement {
	e.attributes["dir"] = a

	return e
}

func (e *SearchElement) Draggable(a SearchDraggableEnum) *SearchElement {
	e.attributes["draggable"] = a

	return e
}

func (e *SearchElement) Enterkeyhint(a SearchEnterkeyhintEnum) *SearchElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *SearchElement) Hidden(a SearchHiddenEnum) *SearchElement {
	e.attributes["hidden"] = a

	return e
}

func (e *SearchElement) Id(s string) *SearchElement {
	e.attributes["id"] = s

	return e
}

func (e *SearchElement) Inert(b bool) *SearchElement {
	e.attributes["inert"] = b

	return e
}

func (e *SearchElement) Inputmode(a SearchInputmodeEnum) *SearchElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *SearchElement) Itemid(s string) *SearchElement {
	e.attributes["itemid"] = s

	return e
}

func (e *SearchElement) Itemprop(s ...string) *SearchElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *SearchElement) Itemref(s ...string) *SearchElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *SearchElement) Itemscope(b bool) *SearchElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *SearchElement) Itemtype(s ...string) *SearchElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *SearchElement) Lang(s string) *SearchElement {
	e.attributes["lang"] = s

	return e
}

func (e *SearchElement) Nonce(s string) *SearchElement {
	e.attributes["nonce"] = s

	return e
}

func (e *SearchElement) Popover(s string) *SearchElement {
	e.attributes["popover"] = s

	return e
}

func (e *SearchElement) Slot(s string) *SearchElement {
	e.attributes["slot"] = s

	return e
}

func (e *SearchElement) Spellcheck(a SearchSpellcheckEnum) *SearchElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *SearchElement) Style(s string) *SearchElement {
	e.attributes["style"] = s

	return e
}

func (e *SearchElement) Tabindex(i int) *SearchElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *SearchElement) Title(s string) *SearchElement {
	e.attributes["title"] = s

	return e
}

func (e *SearchElement) Translate(a SearchTranslateEnum) *SearchElement {
	e.attributes["translate"] = a

	return e
}

func (e *SearchElement) Writingsuggestions(a SearchWritingsuggestionsEnum) *SearchElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *SearchElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<search")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</search>")); err != nil {
		return err
	}

	return nil
}
