// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type TrackElement struct {
	attributes trackAttrs
	children   []htemel.Node
	skipRender bool
}

// Track creates a tag <track> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The track element allows authors to specify explicit external timed text tracks for media elements. It does not represent anything on its own.
func Track(children ...htemel.Node) *TrackElement {
	node := &TrackElement{
		children:   children,
		attributes: make(trackAttrs),
	}

	return node
}

func TrackIf(condition bool, children ...htemel.Node) *TrackElement {
	if condition {
		return Track(children...)
	}

	return &TrackElement{
		skipRender: true,
	}
}

type TrackAutocapitalizeAttrEnum string

const (
	TrackAutocapitalizeAttrEnumWords      TrackAutocapitalizeAttrEnum = "words"
	TrackAutocapitalizeAttrEnumCharacters TrackAutocapitalizeAttrEnum = "characters"
	TrackAutocapitalizeAttrEnumNone       TrackAutocapitalizeAttrEnum = "none"
	TrackAutocapitalizeAttrEnumOff        TrackAutocapitalizeAttrEnum = "off"
	TrackAutocapitalizeAttrEnumOn         TrackAutocapitalizeAttrEnum = "on"
	TrackAutocapitalizeAttrEnumSentences  TrackAutocapitalizeAttrEnum = "sentences"
)

type TrackAutocorrectAttrEnum string

const (
	TrackAutocorrectAttrEnumOff TrackAutocorrectAttrEnum = "off"
	TrackAutocorrectAttrEnumOn  TrackAutocorrectAttrEnum = "on"
)

type TrackContenteditableAttrEnum string

const (
	TrackContenteditableAttrEnumFalse         TrackContenteditableAttrEnum = "false"
	TrackContenteditableAttrEnumPlaintextOnly TrackContenteditableAttrEnum = "plaintext-only"
	TrackContenteditableAttrEnumTrue          TrackContenteditableAttrEnum = "true"
)

type trackAttrs map[string]any

func (e *TrackElement) Autocapitalize(a TrackAutocapitalizeAttrEnum) *TrackElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *TrackElement) Autocorrect(a TrackAutocorrectAttrEnum) *TrackElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *TrackElement) Autofocus(b bool) *TrackElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *TrackElement) Class(s ...string) *TrackElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *TrackElement) Contenteditable(a TrackContenteditableAttrEnum) *TrackElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *TrackElement) Id(s string) *TrackElement {
	e.attributes["id"] = s

	return e
}

func (e *TrackElement) Slot(s string) *TrackElement {
	e.attributes["slot"] = s

	return e
}

func (e *TrackElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<track")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</track>")); err != nil {
		return err
	}

	return nil
}
