// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"golang.org/x/net/html"
)

type TrackElement struct {
	attributes trackAttrs

	skipRender bool
}

// Track creates a tag <track> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The track element allows authors to specify explicit external timed text tracks for media elements. It does not represent anything on its own.
func Track() *TrackElement {
	node := &TrackElement{
		attributes: make(trackAttrs),
	}

	return node
}

func TrackIf(condition bool) *TrackElement {
	if condition {
		return Track()
	}

	return &TrackElement{
		skipRender: true,
	}
}

type TrackAutocapitalizeEnum string

const (
	TrackAutocapitalizeEnumCharacters TrackAutocapitalizeEnum = "characters"
	TrackAutocapitalizeEnumNone       TrackAutocapitalizeEnum = "none"
	TrackAutocapitalizeEnumOff        TrackAutocapitalizeEnum = "off"
	TrackAutocapitalizeEnumOn         TrackAutocapitalizeEnum = "on"
	TrackAutocapitalizeEnumSentences  TrackAutocapitalizeEnum = "sentences"
	TrackAutocapitalizeEnumWords      TrackAutocapitalizeEnum = "words"
)

type TrackAutocorrectEnum string

const (
	TrackAutocorrectEnumOn    TrackAutocorrectEnum = "on"
	TrackAutocorrectEnumOff   TrackAutocorrectEnum = "off"
	TrackAutocorrectEnumEmpty TrackAutocorrectEnum = ""
)

type TrackContenteditableEnum string

const (
	TrackContenteditableEnumFalse         TrackContenteditableEnum = "false"
	TrackContenteditableEnumPlaintextOnly TrackContenteditableEnum = "plaintext-only"
	TrackContenteditableEnumTrue          TrackContenteditableEnum = "true"
	TrackContenteditableEnumEmpty         TrackContenteditableEnum = ""
)

type TrackDirEnum string

const (
	TrackDirEnumAuto TrackDirEnum = "auto"
	TrackDirEnumLtr  TrackDirEnum = "ltr"
	TrackDirEnumRtl  TrackDirEnum = "rtl"
)

type TrackDraggableEnum string

const (
	TrackDraggableEnumFalse TrackDraggableEnum = "false"
	TrackDraggableEnumTrue  TrackDraggableEnum = "true"
)

type TrackEnterkeyhintEnum string

const (
	TrackEnterkeyhintEnumGo       TrackEnterkeyhintEnum = "go"
	TrackEnterkeyhintEnumNext     TrackEnterkeyhintEnum = "next"
	TrackEnterkeyhintEnumPrevious TrackEnterkeyhintEnum = "previous"
	TrackEnterkeyhintEnumSearch   TrackEnterkeyhintEnum = "search"
	TrackEnterkeyhintEnumSend     TrackEnterkeyhintEnum = "send"
	TrackEnterkeyhintEnumDone     TrackEnterkeyhintEnum = "done"
	TrackEnterkeyhintEnumEnter    TrackEnterkeyhintEnum = "enter"
)

type TrackHiddenEnum string

const (
	TrackHiddenEnumHidden     TrackHiddenEnum = "hidden"
	TrackHiddenEnumUntilFound TrackHiddenEnum = "until-found"
	TrackHiddenEnumEmpty      TrackHiddenEnum = ""
)

type TrackInputmodeEnum string

const (
	TrackInputmodeEnumTel     TrackInputmodeEnum = "tel"
	TrackInputmodeEnumText    TrackInputmodeEnum = "text"
	TrackInputmodeEnumUrl     TrackInputmodeEnum = "url"
	TrackInputmodeEnumDecimal TrackInputmodeEnum = "decimal"
	TrackInputmodeEnumEmail   TrackInputmodeEnum = "email"
	TrackInputmodeEnumNone    TrackInputmodeEnum = "none"
	TrackInputmodeEnumNumeric TrackInputmodeEnum = "numeric"
	TrackInputmodeEnumSearch  TrackInputmodeEnum = "search"
)

type TrackSpellcheckEnum string

const (
	TrackSpellcheckEnumFalse TrackSpellcheckEnum = "false"
	TrackSpellcheckEnumTrue  TrackSpellcheckEnum = "true"
	TrackSpellcheckEnumEmpty TrackSpellcheckEnum = ""
)

type TrackTranslateEnum string

const (
	TrackTranslateEnumNo    TrackTranslateEnum = "no"
	TrackTranslateEnumYes   TrackTranslateEnum = "yes"
	TrackTranslateEnumEmpty TrackTranslateEnum = ""
)

type TrackWritingsuggestionsEnum string

const (
	TrackWritingsuggestionsEnumFalse TrackWritingsuggestionsEnum = "false"
	TrackWritingsuggestionsEnumTrue  TrackWritingsuggestionsEnum = "true"
	TrackWritingsuggestionsEnumEmpty TrackWritingsuggestionsEnum = ""
)

type trackAttrs map[string]any

func (e *TrackElement) Autocapitalize(a TrackAutocapitalizeEnum) *TrackElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *TrackElement) Autocorrect(a TrackAutocorrectEnum) *TrackElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *TrackElement) Autofocus(b bool) *TrackElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *TrackElement) Class(s ...string) *TrackElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *TrackElement) Contenteditable(a TrackContenteditableEnum) *TrackElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *TrackElement) DataUnsafe(name string, s string) *TrackElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *TrackElement) Data(name string, s string) *TrackElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *TrackElement) Dir(a TrackDirEnum) *TrackElement {
	e.attributes["dir"] = a

	return e
}

func (e *TrackElement) Draggable(a TrackDraggableEnum) *TrackElement {
	e.attributes["draggable"] = a

	return e
}

func (e *TrackElement) Enterkeyhint(a TrackEnterkeyhintEnum) *TrackElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *TrackElement) Hidden(a TrackHiddenEnum) *TrackElement {
	e.attributes["hidden"] = a

	return e
}

func (e *TrackElement) Id(s string) *TrackElement {
	e.attributes["id"] = s

	return e
}

func (e *TrackElement) Inert(b bool) *TrackElement {
	e.attributes["inert"] = b

	return e
}

func (e *TrackElement) Inputmode(a TrackInputmodeEnum) *TrackElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *TrackElement) Itemid(s string) *TrackElement {
	e.attributes["itemid"] = s

	return e
}

func (e *TrackElement) Itemprop(s ...string) *TrackElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *TrackElement) Itemref(s ...string) *TrackElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *TrackElement) Itemscope(b bool) *TrackElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *TrackElement) Itemtype(s ...string) *TrackElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *TrackElement) Lang(s string) *TrackElement {
	e.attributes["lang"] = s

	return e
}

func (e *TrackElement) Nonce(s string) *TrackElement {
	e.attributes["nonce"] = s

	return e
}

func (e *TrackElement) Popover(s string) *TrackElement {
	e.attributes["popover"] = s

	return e
}

func (e *TrackElement) Slot(s string) *TrackElement {
	e.attributes["slot"] = s

	return e
}

func (e *TrackElement) Spellcheck(a TrackSpellcheckEnum) *TrackElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *TrackElement) Style(s string) *TrackElement {
	e.attributes["style"] = s

	return e
}

func (e *TrackElement) Tabindex(i int) *TrackElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *TrackElement) Title(s string) *TrackElement {
	e.attributes["title"] = s

	return e
}

func (e *TrackElement) Translate(a TrackTranslateEnum) *TrackElement {
	e.attributes["translate"] = a

	return e
}

func (e *TrackElement) Writingsuggestions(a TrackWritingsuggestionsEnum) *TrackElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *TrackElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<track")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	return nil
}
