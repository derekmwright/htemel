// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type TrackElement struct {
	attributes trackAttrs
	children []htemel.Node
	skipRender bool
}

// Track creates a tag <track> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The track element allows authors to specify explicit external timed text tracks for media elements. It does not represent anything on its own.
func Track(children ...htemel.Node) *TrackElement {
	node := &TrackElement{
		children: children,
		attributes: make(trackAttrs),
	}

	return node
}

func TrackIf(condition bool, children ...htemel.Node) *TrackElement {
	if condition {
		return Track(children...)
	}

	return &TrackElement{
		skipRender: true,
	}
}

type TrackAutocapitalizeEnum string

const (
	TrackAutocapitalizeEnumSentences TrackAutocapitalizeEnum = "sentences"
	TrackAutocapitalizeEnumWords TrackAutocapitalizeEnum = "words"
	TrackAutocapitalizeEnumCharacters TrackAutocapitalizeEnum = "characters"
	TrackAutocapitalizeEnumNone TrackAutocapitalizeEnum = "none"
	TrackAutocapitalizeEnumOff TrackAutocapitalizeEnum = "off"
	TrackAutocapitalizeEnumOn TrackAutocapitalizeEnum = "on"
)

type TrackAutocorrectEnum string

const (
	TrackAutocorrectEnumOff TrackAutocorrectEnum = "off"
	TrackAutocorrectEnumOn TrackAutocorrectEnum = "on"
)

type TrackContenteditableEnum string

const (
	TrackContenteditableEnumPlaintextOnly TrackContenteditableEnum = "plaintext-only"
	TrackContenteditableEnumTrue TrackContenteditableEnum = "true"
	TrackContenteditableEnumFalse TrackContenteditableEnum = "false"
)

type TrackDirEnum string

const (
	TrackDirEnumAuto TrackDirEnum = "auto"
	TrackDirEnumLtr TrackDirEnum = "ltr"
	TrackDirEnumRtl TrackDirEnum = "rtl"
)

type TrackDraggableEnum string

const (
	TrackDraggableEnumFalse TrackDraggableEnum = "false"
	TrackDraggableEnumTrue TrackDraggableEnum = "true"
)

type TrackEnterkeyhintEnum string

const (
	TrackEnterkeyhintEnumPrevious TrackEnterkeyhintEnum = "previous"
	TrackEnterkeyhintEnumSearch TrackEnterkeyhintEnum = "search"
	TrackEnterkeyhintEnumSend TrackEnterkeyhintEnum = "send"
	TrackEnterkeyhintEnumDone TrackEnterkeyhintEnum = "done"
	TrackEnterkeyhintEnumEnter TrackEnterkeyhintEnum = "enter"
	TrackEnterkeyhintEnumGo TrackEnterkeyhintEnum = "go"
	TrackEnterkeyhintEnumNext TrackEnterkeyhintEnum = "next"
)

type TrackHiddenEnum string

const (
	TrackHiddenEnumHidden TrackHiddenEnum = "hidden"
	TrackHiddenEnumUntilFound TrackHiddenEnum = "until-found"
)

type trackAttrs map[string]any

func (e *TrackElement) Autocapitalize(a TrackAutocapitalizeEnum) *TrackElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *TrackElement) Autocorrect(a TrackAutocorrectEnum) *TrackElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *TrackElement) Autofocus(b bool) *TrackElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *TrackElement) Class(s ...string) *TrackElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *TrackElement) Contenteditable(a TrackContenteditableEnum) *TrackElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *TrackElement) Dir(a TrackDirEnum) *TrackElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *TrackElement) Draggable(a TrackDraggableEnum) *TrackElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *TrackElement) Enterkeyhint(a TrackEnterkeyhintEnum) *TrackElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *TrackElement) Hidden(a TrackHiddenEnum) *TrackElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *TrackElement) Id(s string) *TrackElement {
	e.attributes["id"] = s
	
	return e
}

func (e *TrackElement) Slot(s string) *TrackElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *TrackElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<track")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</track>")); err != nil {
		return err
	}

	return nil
}
