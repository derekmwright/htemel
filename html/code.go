// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type CodeElement struct {
	attributes codeAttrs
	children   []htemel.Node
	skipRender bool
}

// Code creates a tag <code> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The code element represents a fragment of computer code. This could be an XML element name, a filename, a computer program, or any other string that a computer would recognize.
func Code(children ...htemel.Node) *CodeElement {
	node := &CodeElement{
		children: children, attributes: make(codeAttrs),
	}

	return node
}

func CodeIf(condition bool, children ...htemel.Node) *CodeElement {
	if condition {
		return Code(children...)
	}

	return &CodeElement{
		skipRender: true,
	}
}

func CodeTernary(condition bool, true htemel.Node, false htemel.Node) *CodeElement {
	if condition {
		return Code(true)
	}

	return Code(false)
}

type CodeAutocapitalizeEnum string

const (
	CodeAutocapitalizeEnumNone       CodeAutocapitalizeEnum = "none"
	CodeAutocapitalizeEnumOff        CodeAutocapitalizeEnum = "off"
	CodeAutocapitalizeEnumOn         CodeAutocapitalizeEnum = "on"
	CodeAutocapitalizeEnumSentences  CodeAutocapitalizeEnum = "sentences"
	CodeAutocapitalizeEnumWords      CodeAutocapitalizeEnum = "words"
	CodeAutocapitalizeEnumCharacters CodeAutocapitalizeEnum = "characters"
)

type CodeAutocorrectEnum string

const (
	CodeAutocorrectEnumOff   CodeAutocorrectEnum = "off"
	CodeAutocorrectEnumOn    CodeAutocorrectEnum = "on"
	CodeAutocorrectEnumEmpty CodeAutocorrectEnum = ""
)

type CodeContenteditableEnum string

const (
	CodeContenteditableEnumPlaintextOnly CodeContenteditableEnum = "plaintext-only"
	CodeContenteditableEnumTrue          CodeContenteditableEnum = "true"
	CodeContenteditableEnumFalse         CodeContenteditableEnum = "false"
	CodeContenteditableEnumEmpty         CodeContenteditableEnum = ""
)

type CodeDirEnum string

const (
	CodeDirEnumRtl  CodeDirEnum = "rtl"
	CodeDirEnumAuto CodeDirEnum = "auto"
	CodeDirEnumLtr  CodeDirEnum = "ltr"
)

type CodeDraggableEnum string

const (
	CodeDraggableEnumFalse CodeDraggableEnum = "false"
	CodeDraggableEnumTrue  CodeDraggableEnum = "true"
)

type CodeEnterkeyhintEnum string

const (
	CodeEnterkeyhintEnumGo       CodeEnterkeyhintEnum = "go"
	CodeEnterkeyhintEnumNext     CodeEnterkeyhintEnum = "next"
	CodeEnterkeyhintEnumPrevious CodeEnterkeyhintEnum = "previous"
	CodeEnterkeyhintEnumSearch   CodeEnterkeyhintEnum = "search"
	CodeEnterkeyhintEnumSend     CodeEnterkeyhintEnum = "send"
	CodeEnterkeyhintEnumDone     CodeEnterkeyhintEnum = "done"
	CodeEnterkeyhintEnumEnter    CodeEnterkeyhintEnum = "enter"
)

type CodeHiddenEnum string

const (
	CodeHiddenEnumHidden     CodeHiddenEnum = "hidden"
	CodeHiddenEnumUntilFound CodeHiddenEnum = "until-found"
	CodeHiddenEnumEmpty      CodeHiddenEnum = ""
)

type CodeInputmodeEnum string

const (
	CodeInputmodeEnumNumeric CodeInputmodeEnum = "numeric"
	CodeInputmodeEnumSearch  CodeInputmodeEnum = "search"
	CodeInputmodeEnumTel     CodeInputmodeEnum = "tel"
	CodeInputmodeEnumText    CodeInputmodeEnum = "text"
	CodeInputmodeEnumUrl     CodeInputmodeEnum = "url"
	CodeInputmodeEnumDecimal CodeInputmodeEnum = "decimal"
	CodeInputmodeEnumEmail   CodeInputmodeEnum = "email"
	CodeInputmodeEnumNone    CodeInputmodeEnum = "none"
)

type CodeSpellcheckEnum string

const (
	CodeSpellcheckEnumFalse CodeSpellcheckEnum = "false"
	CodeSpellcheckEnumTrue  CodeSpellcheckEnum = "true"
	CodeSpellcheckEnumEmpty CodeSpellcheckEnum = ""
)

type CodeTranslateEnum string

const (
	CodeTranslateEnumNo    CodeTranslateEnum = "no"
	CodeTranslateEnumYes   CodeTranslateEnum = "yes"
	CodeTranslateEnumEmpty CodeTranslateEnum = ""
)

type CodeWritingsuggestionsEnum string

const (
	CodeWritingsuggestionsEnumFalse CodeWritingsuggestionsEnum = "false"
	CodeWritingsuggestionsEnumTrue  CodeWritingsuggestionsEnum = "true"
	CodeWritingsuggestionsEnumEmpty CodeWritingsuggestionsEnum = ""
)

type codeAttrs map[string]any

func (e *CodeElement) Autocapitalize(a CodeAutocapitalizeEnum) *CodeElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *CodeElement) Autocorrect(a CodeAutocorrectEnum) *CodeElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *CodeElement) Autofocus(b bool) *CodeElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *CodeElement) Class(s ...string) *CodeElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *CodeElement) Contenteditable(a CodeContenteditableEnum) *CodeElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *CodeElement) DataUnsafe(name string, s string) *CodeElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *CodeElement) Data(name string, s string) *CodeElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *CodeElement) Dir(a CodeDirEnum) *CodeElement {
	e.attributes["dir"] = a

	return e
}

func (e *CodeElement) Draggable(a CodeDraggableEnum) *CodeElement {
	e.attributes["draggable"] = a

	return e
}

func (e *CodeElement) Enterkeyhint(a CodeEnterkeyhintEnum) *CodeElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *CodeElement) Hidden(a CodeHiddenEnum) *CodeElement {
	e.attributes["hidden"] = a

	return e
}

func (e *CodeElement) Id(s string) *CodeElement {
	e.attributes["id"] = s

	return e
}

func (e *CodeElement) Inert(b bool) *CodeElement {
	e.attributes["inert"] = b

	return e
}

func (e *CodeElement) Inputmode(a CodeInputmodeEnum) *CodeElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *CodeElement) Itemid(s string) *CodeElement {
	e.attributes["itemid"] = s

	return e
}

func (e *CodeElement) Itemprop(s ...string) *CodeElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *CodeElement) Itemref(s ...string) *CodeElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *CodeElement) Itemscope(b bool) *CodeElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *CodeElement) Itemtype(s ...string) *CodeElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *CodeElement) Lang(s string) *CodeElement {
	e.attributes["lang"] = s

	return e
}

func (e *CodeElement) Nonce(s string) *CodeElement {
	e.attributes["nonce"] = s

	return e
}

func (e *CodeElement) Popover(s string) *CodeElement {
	e.attributes["popover"] = s

	return e
}

func (e *CodeElement) Slot(s string) *CodeElement {
	e.attributes["slot"] = s

	return e
}

func (e *CodeElement) Spellcheck(a CodeSpellcheckEnum) *CodeElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *CodeElement) Style(s string) *CodeElement {
	e.attributes["style"] = s

	return e
}

func (e *CodeElement) Tabindex(i int) *CodeElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *CodeElement) Title(s string) *CodeElement {
	e.attributes["title"] = s

	return e
}

func (e *CodeElement) Translate(a CodeTranslateEnum) *CodeElement {
	e.attributes["translate"] = a

	return e
}

func (e *CodeElement) Writingsuggestions(a CodeWritingsuggestionsEnum) *CodeElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *CodeElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<code")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}
	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</code>")); err != nil {
		return err
	}

	return nil
}
