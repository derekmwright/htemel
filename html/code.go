// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
)

type CodeElement struct {
	attributes codeAttrs
	children []htemel.Node
	skipRender bool
}

// Code creates a tag <code> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The code element represents a fragment of computer code. This could be an XML element name, a filename, a computer program, or any other string that a computer would recognize.
func Code(children ...htemel.Node) *CodeElement {
	node := &CodeElement{
		children: children,
	}

	return node
}

func CodeIf(condition bool, children ...htemel.Node) *CodeElement {
	if condition {
		return Code(children...)
	}

	return &CodeElement{
		skipRender: true,
	}
}

type CodeAutocapitalizeAttrEnum string

const (
	CodeAutocapitalizeAttrEnumOff CodeAutocapitalizeAttrEnum = "off"
	CodeAutocapitalizeAttrEnumOn CodeAutocapitalizeAttrEnum = "on"
	CodeAutocapitalizeAttrEnumSentences CodeAutocapitalizeAttrEnum = "sentences"
	CodeAutocapitalizeAttrEnumWords CodeAutocapitalizeAttrEnum = "words"
	CodeAutocapitalizeAttrEnumCharacters CodeAutocapitalizeAttrEnum = "characters"
	CodeAutocapitalizeAttrEnumNone CodeAutocapitalizeAttrEnum = "none"
)

type CodeAutocorrectAttrEnum string

const (
	CodeAutocorrectAttrEnumOff CodeAutocorrectAttrEnum = "off"
	CodeAutocorrectAttrEnumOn CodeAutocorrectAttrEnum = "on"
)

type CodeContenteditableAttrEnum string

const (
	CodeContenteditableAttrEnumFalse CodeContenteditableAttrEnum = "false"
	CodeContenteditableAttrEnumPlaintextOnly CodeContenteditableAttrEnum = "plaintext-only"
	CodeContenteditableAttrEnumTrue CodeContenteditableAttrEnum = "true"
)

type codeAttrs map[string]any

func (e *CodeElement) Autocapitalize(a CodeAutocapitalizeAttrEnum) *CodeElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *CodeElement) Autocorrect(a CodeAutocorrectAttrEnum) *CodeElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *CodeElement) Class(s ...string) *CodeElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *CodeElement) Contenteditable(a CodeContenteditableAttrEnum) *CodeElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *CodeElement) Id(s string) *CodeElement {
	e.attributes["id"] = s
	
	return e
}

func (e *CodeElement) Slot(s string) *CodeElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *CodeElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<code")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 0
	for key, v := range e.attributes {
		w.Write([]byte(key + "="))
		w.Write([]byte(html.EscapeString(fmt.Sprintf("'%v'", v))))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</code>")); err != nil {
		return err
	}

	return nil
}
