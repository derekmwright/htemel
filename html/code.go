// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type CodeElement struct {
	attributes codeAttrs
	children []htemel.Node
	skipRender bool
}

// Code creates a tag <code> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The code element represents a fragment of computer code. This could be an XML element name, a filename, a computer program, or any other string that a computer would recognize.
func Code(children ...htemel.Node) *CodeElement {
	node := &CodeElement{
		children: children,
		attributes: make(codeAttrs),
	}

	return node
}

func CodeIf(condition bool, children ...htemel.Node) *CodeElement {
	if condition {
		return Code(children...)
	}

	return &CodeElement{
		skipRender: true,
	}
}

type CodeAutocapitalizeEnum string

const (
	CodeAutocapitalizeEnumNone CodeAutocapitalizeEnum = "none"
	CodeAutocapitalizeEnumOff CodeAutocapitalizeEnum = "off"
	CodeAutocapitalizeEnumOn CodeAutocapitalizeEnum = "on"
	CodeAutocapitalizeEnumSentences CodeAutocapitalizeEnum = "sentences"
	CodeAutocapitalizeEnumWords CodeAutocapitalizeEnum = "words"
	CodeAutocapitalizeEnumCharacters CodeAutocapitalizeEnum = "characters"
)

type CodeAutocorrectEnum string

const (
	CodeAutocorrectEnumOff CodeAutocorrectEnum = "off"
	CodeAutocorrectEnumOn CodeAutocorrectEnum = "on"
)

type CodeContenteditableEnum string

const (
	CodeContenteditableEnumFalse CodeContenteditableEnum = "false"
	CodeContenteditableEnumPlaintextOnly CodeContenteditableEnum = "plaintext-only"
	CodeContenteditableEnumTrue CodeContenteditableEnum = "true"
)

type CodeDirEnum string

const (
	CodeDirEnumAuto CodeDirEnum = "auto"
	CodeDirEnumLtr CodeDirEnum = "ltr"
	CodeDirEnumRtl CodeDirEnum = "rtl"
)

type CodeDraggableEnum string

const (
	CodeDraggableEnumFalse CodeDraggableEnum = "false"
	CodeDraggableEnumTrue CodeDraggableEnum = "true"
)

type CodeEnterkeyhintEnum string

const (
	CodeEnterkeyhintEnumGo CodeEnterkeyhintEnum = "go"
	CodeEnterkeyhintEnumNext CodeEnterkeyhintEnum = "next"
	CodeEnterkeyhintEnumPrevious CodeEnterkeyhintEnum = "previous"
	CodeEnterkeyhintEnumSearch CodeEnterkeyhintEnum = "search"
	CodeEnterkeyhintEnumSend CodeEnterkeyhintEnum = "send"
	CodeEnterkeyhintEnumDone CodeEnterkeyhintEnum = "done"
	CodeEnterkeyhintEnumEnter CodeEnterkeyhintEnum = "enter"
)

type CodeHiddenEnum string

const (
	CodeHiddenEnumHidden CodeHiddenEnum = "hidden"
	CodeHiddenEnumUntilFound CodeHiddenEnum = "until-found"
)

type codeAttrs map[string]any

func (e *CodeElement) Autocapitalize(a CodeAutocapitalizeEnum) *CodeElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *CodeElement) Autocorrect(a CodeAutocorrectEnum) *CodeElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *CodeElement) Autofocus(b bool) *CodeElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *CodeElement) Class(s ...string) *CodeElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *CodeElement) Contenteditable(a CodeContenteditableEnum) *CodeElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *CodeElement) Dir(a CodeDirEnum) *CodeElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *CodeElement) Draggable(a CodeDraggableEnum) *CodeElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *CodeElement) Enterkeyhint(a CodeEnterkeyhintEnum) *CodeElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *CodeElement) Hidden(a CodeHiddenEnum) *CodeElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *CodeElement) Id(s string) *CodeElement {
	e.attributes["id"] = s
	
	return e
}

func (e *CodeElement) Slot(s string) *CodeElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *CodeElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<code")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</code>")); err != nil {
		return err
	}

	return nil
}
