// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
)

type WbrElement struct {
	attributes wbrAttrs
	children []htemel.Node
	skipRender bool
}

// Wbr creates a tag <wbr> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The wbr element represents a line break opportunity.
func Wbr(children ...htemel.Node) *WbrElement {
	node := &WbrElement{
		children: children,
	}

	return node
}

func WbrIf(condition bool, children ...htemel.Node) *WbrElement {
	if condition {
		return Wbr(children...)
	}

	return &WbrElement{
		skipRender: true,
	}
}

type WbrAutocapitalizeAttrEnum string

const (
	WbrAutocapitalizeAttrEnumCharacters WbrAutocapitalizeAttrEnum = "characters"
	WbrAutocapitalizeAttrEnumNone WbrAutocapitalizeAttrEnum = "none"
	WbrAutocapitalizeAttrEnumOff WbrAutocapitalizeAttrEnum = "off"
	WbrAutocapitalizeAttrEnumOn WbrAutocapitalizeAttrEnum = "on"
	WbrAutocapitalizeAttrEnumSentences WbrAutocapitalizeAttrEnum = "sentences"
	WbrAutocapitalizeAttrEnumWords WbrAutocapitalizeAttrEnum = "words"
)

type WbrAutocorrectAttrEnum string

const (
	WbrAutocorrectAttrEnumOff WbrAutocorrectAttrEnum = "off"
	WbrAutocorrectAttrEnumOn WbrAutocorrectAttrEnum = "on"
)

type WbrContenteditableAttrEnum string

const (
	WbrContenteditableAttrEnumTrue WbrContenteditableAttrEnum = "true"
	WbrContenteditableAttrEnumFalse WbrContenteditableAttrEnum = "false"
	WbrContenteditableAttrEnumPlaintextOnly WbrContenteditableAttrEnum = "plaintext-only"
)

type wbrAttrs map[string]any

func (e *WbrElement) Autocapitalize(a WbrAutocapitalizeAttrEnum) *WbrElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *WbrElement) Autocorrect(a WbrAutocorrectAttrEnum) *WbrElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *WbrElement) Class(s ...string) *WbrElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *WbrElement) Contenteditable(a WbrContenteditableAttrEnum) *WbrElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *WbrElement) Id(s string) *WbrElement {
	e.attributes["id"] = s
	
	return e
}

func (e *WbrElement) Slot(s string) *WbrElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *WbrElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<wbr")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 0
	for key, v := range e.attributes {
		w.Write([]byte(key + "="))
		w.Write([]byte(html.EscapeString(fmt.Sprintf("'%v'", v))))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</wbr>")); err != nil {
		return err
	}

	return nil
}
