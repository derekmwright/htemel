// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type WbrElement struct {
	attributes wbrAttrs
	children []htemel.Node
	skipRender bool
}

// Wbr creates a tag <wbr> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The wbr element represents a line break opportunity.
func Wbr(children ...htemel.Node) *WbrElement {
	node := &WbrElement{
		children: children,
		attributes: make(wbrAttrs),
	}

	return node
}

func WbrIf(condition bool, children ...htemel.Node) *WbrElement {
	if condition {
		return Wbr(children...)
	}

	return &WbrElement{
		skipRender: true,
	}
}

type WbrAutocapitalizeEnum string

const (
	WbrAutocapitalizeEnumCharacters WbrAutocapitalizeEnum = "characters"
	WbrAutocapitalizeEnumNone WbrAutocapitalizeEnum = "none"
	WbrAutocapitalizeEnumOff WbrAutocapitalizeEnum = "off"
	WbrAutocapitalizeEnumOn WbrAutocapitalizeEnum = "on"
	WbrAutocapitalizeEnumSentences WbrAutocapitalizeEnum = "sentences"
	WbrAutocapitalizeEnumWords WbrAutocapitalizeEnum = "words"
)

type WbrAutocorrectEnum string

const (
	WbrAutocorrectEnumOff WbrAutocorrectEnum = "off"
	WbrAutocorrectEnumOn WbrAutocorrectEnum = "on"
)

type WbrContenteditableEnum string

const (
	WbrContenteditableEnumFalse WbrContenteditableEnum = "false"
	WbrContenteditableEnumPlaintextOnly WbrContenteditableEnum = "plaintext-only"
	WbrContenteditableEnumTrue WbrContenteditableEnum = "true"
)

type WbrDirEnum string

const (
	WbrDirEnumAuto WbrDirEnum = "auto"
	WbrDirEnumLtr WbrDirEnum = "ltr"
	WbrDirEnumRtl WbrDirEnum = "rtl"
)

type WbrDraggableEnum string

const (
	WbrDraggableEnumFalse WbrDraggableEnum = "false"
	WbrDraggableEnumTrue WbrDraggableEnum = "true"
)

type WbrEnterkeyhintEnum string

const (
	WbrEnterkeyhintEnumEnter WbrEnterkeyhintEnum = "enter"
	WbrEnterkeyhintEnumGo WbrEnterkeyhintEnum = "go"
	WbrEnterkeyhintEnumNext WbrEnterkeyhintEnum = "next"
	WbrEnterkeyhintEnumPrevious WbrEnterkeyhintEnum = "previous"
	WbrEnterkeyhintEnumSearch WbrEnterkeyhintEnum = "search"
	WbrEnterkeyhintEnumSend WbrEnterkeyhintEnum = "send"
	WbrEnterkeyhintEnumDone WbrEnterkeyhintEnum = "done"
)

type WbrHiddenEnum string

const (
	WbrHiddenEnumHidden WbrHiddenEnum = "hidden"
	WbrHiddenEnumUntilFound WbrHiddenEnum = "until-found"
)

type wbrAttrs map[string]any

func (e *WbrElement) Autocapitalize(a WbrAutocapitalizeEnum) *WbrElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *WbrElement) Autocorrect(a WbrAutocorrectEnum) *WbrElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *WbrElement) Autofocus(b bool) *WbrElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *WbrElement) Class(s ...string) *WbrElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *WbrElement) Contenteditable(a WbrContenteditableEnum) *WbrElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *WbrElement) Dir(a WbrDirEnum) *WbrElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *WbrElement) Draggable(a WbrDraggableEnum) *WbrElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *WbrElement) Enterkeyhint(a WbrEnterkeyhintEnum) *WbrElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *WbrElement) Hidden(a WbrHiddenEnum) *WbrElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *WbrElement) Id(s string) *WbrElement {
	e.attributes["id"] = s
	
	return e
}

func (e *WbrElement) Slot(s string) *WbrElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *WbrElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<wbr")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</wbr>")); err != nil {
		return err
	}

	return nil
}
