// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type BrElement struct {
	attributes brAttrs

	skipRender bool
	indent     int
}

// Br creates a tag <br> instance and returns it for further modification.
//
// Spec Description: The br element represents a line break.
func Br() *BrElement {
	node := &BrElement{
		attributes: make(brAttrs),
	}

	return node
}

func BrIf(condition bool) *BrElement {
	if condition {
		return Br()
	}

	return &BrElement{
		skipRender: true,
	}
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *BrElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *BrElement) AddIndent(i int) {
	e.indent = i + 1
}

type BrAutocapitalizeEnum string

const (
	BrAutocapitalizeEnumOff        BrAutocapitalizeEnum = "off"
	BrAutocapitalizeEnumOn         BrAutocapitalizeEnum = "on"
	BrAutocapitalizeEnumSentences  BrAutocapitalizeEnum = "sentences"
	BrAutocapitalizeEnumWords      BrAutocapitalizeEnum = "words"
	BrAutocapitalizeEnumCharacters BrAutocapitalizeEnum = "characters"
	BrAutocapitalizeEnumNone       BrAutocapitalizeEnum = "none"
)

type BrAutocorrectEnum string

const (
	BrAutocorrectEnumOff   BrAutocorrectEnum = "off"
	BrAutocorrectEnumOn    BrAutocorrectEnum = "on"
	BrAutocorrectEnumEmpty BrAutocorrectEnum = ""
)

type BrContenteditableEnum string

const (
	BrContenteditableEnumTrue          BrContenteditableEnum = "true"
	BrContenteditableEnumFalse         BrContenteditableEnum = "false"
	BrContenteditableEnumPlaintextOnly BrContenteditableEnum = "plaintext-only"
	BrContenteditableEnumEmpty         BrContenteditableEnum = ""
)

type BrDirEnum string

const (
	BrDirEnumAuto BrDirEnum = "auto"
	BrDirEnumLtr  BrDirEnum = "ltr"
	BrDirEnumRtl  BrDirEnum = "rtl"
)

type BrDraggableEnum string

const (
	BrDraggableEnumTrue  BrDraggableEnum = "true"
	BrDraggableEnumFalse BrDraggableEnum = "false"
)

type BrEnterkeyhintEnum string

const (
	BrEnterkeyhintEnumPrevious BrEnterkeyhintEnum = "previous"
	BrEnterkeyhintEnumSearch   BrEnterkeyhintEnum = "search"
	BrEnterkeyhintEnumSend     BrEnterkeyhintEnum = "send"
	BrEnterkeyhintEnumDone     BrEnterkeyhintEnum = "done"
	BrEnterkeyhintEnumEnter    BrEnterkeyhintEnum = "enter"
	BrEnterkeyhintEnumGo       BrEnterkeyhintEnum = "go"
	BrEnterkeyhintEnumNext     BrEnterkeyhintEnum = "next"
)

type BrHiddenEnum string

const (
	BrHiddenEnumUntilFound BrHiddenEnum = "until-found"
	BrHiddenEnumHidden     BrHiddenEnum = "hidden"
	BrHiddenEnumEmpty      BrHiddenEnum = ""
)

type BrInputmodeEnum string

const (
	BrInputmodeEnumUrl     BrInputmodeEnum = "url"
	BrInputmodeEnumDecimal BrInputmodeEnum = "decimal"
	BrInputmodeEnumEmail   BrInputmodeEnum = "email"
	BrInputmodeEnumNone    BrInputmodeEnum = "none"
	BrInputmodeEnumNumeric BrInputmodeEnum = "numeric"
	BrInputmodeEnumSearch  BrInputmodeEnum = "search"
	BrInputmodeEnumTel     BrInputmodeEnum = "tel"
	BrInputmodeEnumText    BrInputmodeEnum = "text"
)

type BrSpellcheckEnum string

const (
	BrSpellcheckEnumFalse BrSpellcheckEnum = "false"
	BrSpellcheckEnumTrue  BrSpellcheckEnum = "true"
	BrSpellcheckEnumEmpty BrSpellcheckEnum = ""
)

type BrTranslateEnum string

const (
	BrTranslateEnumNo    BrTranslateEnum = "no"
	BrTranslateEnumYes   BrTranslateEnum = "yes"
	BrTranslateEnumEmpty BrTranslateEnum = ""
)

type BrWritingsuggestionsEnum string

const (
	BrWritingsuggestionsEnumFalse BrWritingsuggestionsEnum = "false"
	BrWritingsuggestionsEnumTrue  BrWritingsuggestionsEnum = "true"
	BrWritingsuggestionsEnumEmpty BrWritingsuggestionsEnum = ""
)

type brAttrs map[string]any

func (e *BrElement) Autocapitalize(a BrAutocapitalizeEnum) *BrElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *BrElement) Autocorrect(a BrAutocorrectEnum) *BrElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *BrElement) Autofocus(b bool) *BrElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *BrElement) Class(s ...string) *BrElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *BrElement) Contenteditable(a BrContenteditableEnum) *BrElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *BrElement) DataUnsafe(name string, s string) *BrElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *BrElement) Data(name string, s string) *BrElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *BrElement) Dir(a BrDirEnum) *BrElement {
	e.attributes["dir"] = a

	return e
}

func (e *BrElement) Draggable(a BrDraggableEnum) *BrElement {
	e.attributes["draggable"] = a

	return e
}

func (e *BrElement) Enterkeyhint(a BrEnterkeyhintEnum) *BrElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *BrElement) Hidden(a BrHiddenEnum) *BrElement {
	e.attributes["hidden"] = a

	return e
}

func (e *BrElement) Id(s string) *BrElement {
	e.attributes["id"] = s

	return e
}

func (e *BrElement) Inert(b bool) *BrElement {
	e.attributes["inert"] = b

	return e
}

func (e *BrElement) Inputmode(a BrInputmodeEnum) *BrElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *BrElement) Itemid(s string) *BrElement {
	e.attributes["itemid"] = s

	return e
}

func (e *BrElement) Itemprop(s ...string) *BrElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *BrElement) Itemref(s ...string) *BrElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *BrElement) Itemscope(b bool) *BrElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *BrElement) Itemtype(s ...string) *BrElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *BrElement) Lang(s string) *BrElement {
	e.attributes["lang"] = s

	return e
}

func (e *BrElement) Nonce(s string) *BrElement {
	e.attributes["nonce"] = s

	return e
}

func (e *BrElement) Popover(s string) *BrElement {
	e.attributes["popover"] = s

	return e
}

func (e *BrElement) Slot(s string) *BrElement {
	e.attributes["slot"] = s

	return e
}

func (e *BrElement) Spellcheck(a BrSpellcheckEnum) *BrElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *BrElement) Style(s string) *BrElement {
	e.attributes["style"] = s

	return e
}

func (e *BrElement) Tabindex(i int) *BrElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *BrElement) Title(s string) *BrElement {
	e.attributes["title"] = s

	return e
}

func (e *BrElement) Translate(a BrTranslateEnum) *BrElement {
	e.attributes["translate"] = a

	return e
}

func (e *BrElement) Writingsuggestions(a BrWritingsuggestionsEnum) *BrElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *BrElement) Render(w io.Writer) error {
	indent := htemel.SetIndent(e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<br")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}

	return nil
}
