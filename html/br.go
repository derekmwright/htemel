// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type BrElement struct {
	attributes brAttrs
	children []htemel.Node
	skipRender bool
}

// Br creates a tag <br> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The br element represents a line break.
func Br(children ...htemel.Node) *BrElement {
	node := &BrElement{
		children: children,
		attributes: make(brAttrs),
	}

	return node
}

func BrIf(condition bool, children ...htemel.Node) *BrElement {
	if condition {
		return Br(children...)
	}

	return &BrElement{
		skipRender: true,
	}
}

type BrAutocapitalizeEnum string

const (
	BrAutocapitalizeEnumWords BrAutocapitalizeEnum = "words"
	BrAutocapitalizeEnumCharacters BrAutocapitalizeEnum = "characters"
	BrAutocapitalizeEnumNone BrAutocapitalizeEnum = "none"
	BrAutocapitalizeEnumOff BrAutocapitalizeEnum = "off"
	BrAutocapitalizeEnumOn BrAutocapitalizeEnum = "on"
	BrAutocapitalizeEnumSentences BrAutocapitalizeEnum = "sentences"
)

type BrAutocorrectEnum string

const (
	BrAutocorrectEnumOff BrAutocorrectEnum = "off"
	BrAutocorrectEnumOn BrAutocorrectEnum = "on"
)

type BrContenteditableEnum string

const (
	BrContenteditableEnumPlaintextOnly BrContenteditableEnum = "plaintext-only"
	BrContenteditableEnumTrue BrContenteditableEnum = "true"
	BrContenteditableEnumFalse BrContenteditableEnum = "false"
)

type BrDirEnum string

const (
	BrDirEnumAuto BrDirEnum = "auto"
	BrDirEnumLtr BrDirEnum = "ltr"
	BrDirEnumRtl BrDirEnum = "rtl"
)

type BrDraggableEnum string

const (
	BrDraggableEnumFalse BrDraggableEnum = "false"
	BrDraggableEnumTrue BrDraggableEnum = "true"
)

type BrEnterkeyhintEnum string

const (
	BrEnterkeyhintEnumDone BrEnterkeyhintEnum = "done"
	BrEnterkeyhintEnumEnter BrEnterkeyhintEnum = "enter"
	BrEnterkeyhintEnumGo BrEnterkeyhintEnum = "go"
	BrEnterkeyhintEnumNext BrEnterkeyhintEnum = "next"
	BrEnterkeyhintEnumPrevious BrEnterkeyhintEnum = "previous"
	BrEnterkeyhintEnumSearch BrEnterkeyhintEnum = "search"
	BrEnterkeyhintEnumSend BrEnterkeyhintEnum = "send"
)

type BrHiddenEnum string

const (
	BrHiddenEnumHidden BrHiddenEnum = "hidden"
	BrHiddenEnumUntilFound BrHiddenEnum = "until-found"
)

type brAttrs map[string]any

func (e *BrElement) Autocapitalize(a BrAutocapitalizeEnum) *BrElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *BrElement) Autocorrect(a BrAutocorrectEnum) *BrElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *BrElement) Autofocus(b bool) *BrElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *BrElement) Class(s ...string) *BrElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *BrElement) Contenteditable(a BrContenteditableEnum) *BrElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *BrElement) Dir(a BrDirEnum) *BrElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *BrElement) Draggable(a BrDraggableEnum) *BrElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *BrElement) Enterkeyhint(a BrEnterkeyhintEnum) *BrElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *BrElement) Hidden(a BrHiddenEnum) *BrElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *BrElement) Id(s string) *BrElement {
	e.attributes["id"] = s
	
	return e
}

func (e *BrElement) Slot(s string) *BrElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *BrElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<br")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</br>")); err != nil {
		return err
	}

	return nil
}
