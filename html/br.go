// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type BrElement struct {
	attributes brAttrs
	children []htemel.Node
	skipRender bool
}

// Br creates a tag <br> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The br element represents a line break.
func Br(children ...htemel.Node) *BrElement {
	node := &BrElement{
		children: children,
		attributes: make(brAttrs),
	}

	return node
}

func BrIf(condition bool, children ...htemel.Node) *BrElement {
	if condition {
		return Br(children...)
	}

	return &BrElement{
		skipRender: true,
	}
}

type BrAutocapitalizeAttrEnum string

const (
	BrAutocapitalizeAttrEnumOff BrAutocapitalizeAttrEnum = "off"
	BrAutocapitalizeAttrEnumOn BrAutocapitalizeAttrEnum = "on"
	BrAutocapitalizeAttrEnumSentences BrAutocapitalizeAttrEnum = "sentences"
	BrAutocapitalizeAttrEnumWords BrAutocapitalizeAttrEnum = "words"
	BrAutocapitalizeAttrEnumCharacters BrAutocapitalizeAttrEnum = "characters"
	BrAutocapitalizeAttrEnumNone BrAutocapitalizeAttrEnum = "none"
)

type BrAutocorrectAttrEnum string

const (
	BrAutocorrectAttrEnumOff BrAutocorrectAttrEnum = "off"
	BrAutocorrectAttrEnumOn BrAutocorrectAttrEnum = "on"
)

type BrContenteditableAttrEnum string

const (
	BrContenteditableAttrEnumFalse BrContenteditableAttrEnum = "false"
	BrContenteditableAttrEnumPlaintextOnly BrContenteditableAttrEnum = "plaintext-only"
	BrContenteditableAttrEnumTrue BrContenteditableAttrEnum = "true"
)

type brAttrs map[string]any

func (e *BrElement) Autocapitalize(a BrAutocapitalizeAttrEnum) *BrElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *BrElement) Autocorrect(a BrAutocorrectAttrEnum) *BrElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *BrElement) Class(s ...string) *BrElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *BrElement) Contenteditable(a BrContenteditableAttrEnum) *BrElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *BrElement) Id(s string) *BrElement {
	e.attributes["id"] = s
	
	return e
}

func (e *BrElement) Slot(s string) *BrElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *BrElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<br")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		w.Write([]byte(" " + key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</br>")); err != nil {
		return err
	}

	return nil
}
