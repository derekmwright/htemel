// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type TbodyElement struct {
	attributes tbodyAttrs
	children []htemel.Node
	skipRender bool
}

// Tbody creates a tag <tbody> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The tbody element represents a block of rows that consist of a body of data for the parent table element, if the tbody element has a parent and it is a table.
func Tbody(children ...htemel.Node) *TbodyElement {
	node := &TbodyElement{
		children: children,
		attributes: make(tbodyAttrs),
	}

	return node
}

func TbodyIf(condition bool, children ...htemel.Node) *TbodyElement {
	if condition {
		return Tbody(children...)
	}

	return &TbodyElement{
		skipRender: true,
	}
}

type TbodyAutocapitalizeEnum string

const (
	TbodyAutocapitalizeEnumWords TbodyAutocapitalizeEnum = "words"
	TbodyAutocapitalizeEnumCharacters TbodyAutocapitalizeEnum = "characters"
	TbodyAutocapitalizeEnumNone TbodyAutocapitalizeEnum = "none"
	TbodyAutocapitalizeEnumOff TbodyAutocapitalizeEnum = "off"
	TbodyAutocapitalizeEnumOn TbodyAutocapitalizeEnum = "on"
	TbodyAutocapitalizeEnumSentences TbodyAutocapitalizeEnum = "sentences"
)

type TbodyAutocorrectEnum string

const (
	TbodyAutocorrectEnumOn TbodyAutocorrectEnum = "on"
	TbodyAutocorrectEnumOff TbodyAutocorrectEnum = "off"
)

type TbodyContenteditableEnum string

const (
	TbodyContenteditableEnumFalse TbodyContenteditableEnum = "false"
	TbodyContenteditableEnumPlaintextOnly TbodyContenteditableEnum = "plaintext-only"
	TbodyContenteditableEnumTrue TbodyContenteditableEnum = "true"
)

type TbodyDirEnum string

const (
	TbodyDirEnumAuto TbodyDirEnum = "auto"
	TbodyDirEnumLtr TbodyDirEnum = "ltr"
	TbodyDirEnumRtl TbodyDirEnum = "rtl"
)

type TbodyDraggableEnum string

const (
	TbodyDraggableEnumFalse TbodyDraggableEnum = "false"
	TbodyDraggableEnumTrue TbodyDraggableEnum = "true"
)

type TbodyEnterkeyhintEnum string

const (
	TbodyEnterkeyhintEnumEnter TbodyEnterkeyhintEnum = "enter"
	TbodyEnterkeyhintEnumGo TbodyEnterkeyhintEnum = "go"
	TbodyEnterkeyhintEnumNext TbodyEnterkeyhintEnum = "next"
	TbodyEnterkeyhintEnumPrevious TbodyEnterkeyhintEnum = "previous"
	TbodyEnterkeyhintEnumSearch TbodyEnterkeyhintEnum = "search"
	TbodyEnterkeyhintEnumSend TbodyEnterkeyhintEnum = "send"
	TbodyEnterkeyhintEnumDone TbodyEnterkeyhintEnum = "done"
)

type TbodyHiddenEnum string

const (
	TbodyHiddenEnumHidden TbodyHiddenEnum = "hidden"
	TbodyHiddenEnumUntilFound TbodyHiddenEnum = "until-found"
)

type tbodyAttrs map[string]any

func (e *TbodyElement) Autocapitalize(a TbodyAutocapitalizeEnum) *TbodyElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *TbodyElement) Autocorrect(a TbodyAutocorrectEnum) *TbodyElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *TbodyElement) Autofocus(b bool) *TbodyElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *TbodyElement) Class(s ...string) *TbodyElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *TbodyElement) Contenteditable(a TbodyContenteditableEnum) *TbodyElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *TbodyElement) Dir(a TbodyDirEnum) *TbodyElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *TbodyElement) Draggable(a TbodyDraggableEnum) *TbodyElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *TbodyElement) Enterkeyhint(a TbodyEnterkeyhintEnum) *TbodyElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *TbodyElement) Hidden(a TbodyHiddenEnum) *TbodyElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *TbodyElement) Id(s string) *TbodyElement {
	e.attributes["id"] = s
	
	return e
}

func (e *TbodyElement) Slot(s string) *TbodyElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *TbodyElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<tbody")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</tbody>")); err != nil {
		return err
	}

	return nil
}
