// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type TbodyElement struct {
	attributes tbodyAttrs
	children   []htemel.Node
	skipRender bool
}

// Tbody creates a tag <tbody> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The tbody element represents a block of rows that consist of a body of data for the parent table element, if the tbody element has a parent and it is a table.
func Tbody(children ...htemel.Node) *TbodyElement {
	node := &TbodyElement{
		children:   children,
		attributes: make(tbodyAttrs),
	}

	return node
}

func TbodyIf(condition bool, children ...htemel.Node) *TbodyElement {
	if condition {
		return Tbody(children...)
	}

	return &TbodyElement{
		skipRender: true,
	}
}

type TbodyAutocapitalizeAttrEnum string

const (
	TbodyAutocapitalizeAttrEnumCharacters TbodyAutocapitalizeAttrEnum = "characters"
	TbodyAutocapitalizeAttrEnumNone       TbodyAutocapitalizeAttrEnum = "none"
	TbodyAutocapitalizeAttrEnumOff        TbodyAutocapitalizeAttrEnum = "off"
	TbodyAutocapitalizeAttrEnumOn         TbodyAutocapitalizeAttrEnum = "on"
	TbodyAutocapitalizeAttrEnumSentences  TbodyAutocapitalizeAttrEnum = "sentences"
	TbodyAutocapitalizeAttrEnumWords      TbodyAutocapitalizeAttrEnum = "words"
)

type TbodyAutocorrectAttrEnum string

const (
	TbodyAutocorrectAttrEnumOff TbodyAutocorrectAttrEnum = "off"
	TbodyAutocorrectAttrEnumOn  TbodyAutocorrectAttrEnum = "on"
)

type TbodyContenteditableAttrEnum string

const (
	TbodyContenteditableAttrEnumFalse         TbodyContenteditableAttrEnum = "false"
	TbodyContenteditableAttrEnumPlaintextOnly TbodyContenteditableAttrEnum = "plaintext-only"
	TbodyContenteditableAttrEnumTrue          TbodyContenteditableAttrEnum = "true"
)

type tbodyAttrs map[string]any

func (e *TbodyElement) Autocapitalize(a TbodyAutocapitalizeAttrEnum) *TbodyElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *TbodyElement) Autocorrect(a TbodyAutocorrectAttrEnum) *TbodyElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *TbodyElement) Autofocus(b bool) *TbodyElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *TbodyElement) Class(s ...string) *TbodyElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *TbodyElement) Contenteditable(a TbodyContenteditableAttrEnum) *TbodyElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *TbodyElement) Id(s string) *TbodyElement {
	e.attributes["id"] = s

	return e
}

func (e *TbodyElement) Slot(s string) *TbodyElement {
	e.attributes["slot"] = s

	return e
}

func (e *TbodyElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<tbody")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		w.Write([]byte(" " + key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</tbody>")); err != nil {
		return err
	}

	return nil
}
