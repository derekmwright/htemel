// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type TbodyElement struct {
	attributes tbodyAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// Tbody creates a tag <tbody> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The tbody element represents a block of rows that consist of a body of data for the parent table element, if the tbody element has a parent and it is a table.
func Tbody(children ...htemel.Node) *TbodyElement {
	node := &TbodyElement{
		children: children, attributes: make(tbodyAttrs),
	}

	return node
}

func TbodyIf(condition bool, children ...htemel.Node) *TbodyElement {
	if condition {
		return Tbody(children...)
	}

	return &TbodyElement{
		skipRender: true,
	}
}

func TbodyTernary(condition bool, true htemel.Node, false htemel.Node) *TbodyElement {
	if condition {
		return Tbody(true)
	}

	return Tbody(false)
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *TbodyElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *TbodyElement) AddIndent(i int) {
	e.indent = i + 1
}

type TbodyAutocapitalizeEnum string

const (
	TbodyAutocapitalizeEnumCharacters TbodyAutocapitalizeEnum = "characters"
	TbodyAutocapitalizeEnumNone       TbodyAutocapitalizeEnum = "none"
	TbodyAutocapitalizeEnumOff        TbodyAutocapitalizeEnum = "off"
	TbodyAutocapitalizeEnumOn         TbodyAutocapitalizeEnum = "on"
	TbodyAutocapitalizeEnumSentences  TbodyAutocapitalizeEnum = "sentences"
	TbodyAutocapitalizeEnumWords      TbodyAutocapitalizeEnum = "words"
)

type TbodyAutocorrectEnum string

const (
	TbodyAutocorrectEnumOn    TbodyAutocorrectEnum = "on"
	TbodyAutocorrectEnumOff   TbodyAutocorrectEnum = "off"
	TbodyAutocorrectEnumEmpty TbodyAutocorrectEnum = ""
)

type TbodyContenteditableEnum string

const (
	TbodyContenteditableEnumFalse         TbodyContenteditableEnum = "false"
	TbodyContenteditableEnumPlaintextOnly TbodyContenteditableEnum = "plaintext-only"
	TbodyContenteditableEnumTrue          TbodyContenteditableEnum = "true"
	TbodyContenteditableEnumEmpty         TbodyContenteditableEnum = ""
)

type TbodyDirEnum string

const (
	TbodyDirEnumAuto TbodyDirEnum = "auto"
	TbodyDirEnumLtr  TbodyDirEnum = "ltr"
	TbodyDirEnumRtl  TbodyDirEnum = "rtl"
)

type TbodyDraggableEnum string

const (
	TbodyDraggableEnumFalse TbodyDraggableEnum = "false"
	TbodyDraggableEnumTrue  TbodyDraggableEnum = "true"
)

type TbodyEnterkeyhintEnum string

const (
	TbodyEnterkeyhintEnumSend     TbodyEnterkeyhintEnum = "send"
	TbodyEnterkeyhintEnumDone     TbodyEnterkeyhintEnum = "done"
	TbodyEnterkeyhintEnumEnter    TbodyEnterkeyhintEnum = "enter"
	TbodyEnterkeyhintEnumGo       TbodyEnterkeyhintEnum = "go"
	TbodyEnterkeyhintEnumNext     TbodyEnterkeyhintEnum = "next"
	TbodyEnterkeyhintEnumPrevious TbodyEnterkeyhintEnum = "previous"
	TbodyEnterkeyhintEnumSearch   TbodyEnterkeyhintEnum = "search"
)

type TbodyHiddenEnum string

const (
	TbodyHiddenEnumUntilFound TbodyHiddenEnum = "until-found"
	TbodyHiddenEnumHidden     TbodyHiddenEnum = "hidden"
	TbodyHiddenEnumEmpty      TbodyHiddenEnum = ""
)

type TbodyInputmodeEnum string

const (
	TbodyInputmodeEnumNumeric TbodyInputmodeEnum = "numeric"
	TbodyInputmodeEnumSearch  TbodyInputmodeEnum = "search"
	TbodyInputmodeEnumTel     TbodyInputmodeEnum = "tel"
	TbodyInputmodeEnumText    TbodyInputmodeEnum = "text"
	TbodyInputmodeEnumUrl     TbodyInputmodeEnum = "url"
	TbodyInputmodeEnumDecimal TbodyInputmodeEnum = "decimal"
	TbodyInputmodeEnumEmail   TbodyInputmodeEnum = "email"
	TbodyInputmodeEnumNone    TbodyInputmodeEnum = "none"
)

type TbodySpellcheckEnum string

const (
	TbodySpellcheckEnumFalse TbodySpellcheckEnum = "false"
	TbodySpellcheckEnumTrue  TbodySpellcheckEnum = "true"
	TbodySpellcheckEnumEmpty TbodySpellcheckEnum = ""
)

type TbodyTranslateEnum string

const (
	TbodyTranslateEnumNo    TbodyTranslateEnum = "no"
	TbodyTranslateEnumYes   TbodyTranslateEnum = "yes"
	TbodyTranslateEnumEmpty TbodyTranslateEnum = ""
)

type TbodyWritingsuggestionsEnum string

const (
	TbodyWritingsuggestionsEnumFalse TbodyWritingsuggestionsEnum = "false"
	TbodyWritingsuggestionsEnumTrue  TbodyWritingsuggestionsEnum = "true"
	TbodyWritingsuggestionsEnumEmpty TbodyWritingsuggestionsEnum = ""
)

type tbodyAttrs map[string]any

func (e *TbodyElement) Autocapitalize(a TbodyAutocapitalizeEnum) *TbodyElement {
	e.attributes["autocapitalize"] = a

	return e
}

func TbodyAutocapitalizeCustom(s string) TbodyAutocapitalizeEnum {
	return TbodyAutocapitalizeEnum(s)
}

func (e *TbodyElement) Autocorrect(a TbodyAutocorrectEnum) *TbodyElement {
	e.attributes["autocorrect"] = a

	return e
}

func TbodyAutocorrectCustom(s string) TbodyAutocorrectEnum {
	return TbodyAutocorrectEnum(s)
}

func (e *TbodyElement) Autofocus(b bool) *TbodyElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *TbodyElement) Class(s ...string) *TbodyElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *TbodyElement) Contenteditable(a TbodyContenteditableEnum) *TbodyElement {
	e.attributes["contenteditable"] = a

	return e
}

func TbodyContenteditableCustom(s string) TbodyContenteditableEnum {
	return TbodyContenteditableEnum(s)
}

func (e *TbodyElement) DataUnsafe(name string, s string) *TbodyElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *TbodyElement) Data(name string, s string) *TbodyElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *TbodyElement) Dir(a TbodyDirEnum) *TbodyElement {
	e.attributes["dir"] = a

	return e
}

func TbodyDirCustom(s string) TbodyDirEnum {
	return TbodyDirEnum(s)
}

func (e *TbodyElement) Draggable(a TbodyDraggableEnum) *TbodyElement {
	e.attributes["draggable"] = a

	return e
}

func TbodyDraggableCustom(s string) TbodyDraggableEnum {
	return TbodyDraggableEnum(s)
}

func (e *TbodyElement) Enterkeyhint(a TbodyEnterkeyhintEnum) *TbodyElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func TbodyEnterkeyhintCustom(s string) TbodyEnterkeyhintEnum {
	return TbodyEnterkeyhintEnum(s)
}

func (e *TbodyElement) Hidden(a TbodyHiddenEnum) *TbodyElement {
	e.attributes["hidden"] = a

	return e
}

func TbodyHiddenCustom(s string) TbodyHiddenEnum {
	return TbodyHiddenEnum(s)
}

func (e *TbodyElement) Id(s string) *TbodyElement {
	e.attributes["id"] = s

	return e
}

func (e *TbodyElement) Inert(b bool) *TbodyElement {
	e.attributes["inert"] = b

	return e
}

func (e *TbodyElement) Inputmode(a TbodyInputmodeEnum) *TbodyElement {
	e.attributes["inputmode"] = a

	return e
}

func TbodyInputmodeCustom(s string) TbodyInputmodeEnum {
	return TbodyInputmodeEnum(s)
}

func (e *TbodyElement) Itemid(s string) *TbodyElement {
	e.attributes["itemid"] = s

	return e
}

func (e *TbodyElement) Itemprop(s ...string) *TbodyElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *TbodyElement) Itemref(s ...string) *TbodyElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *TbodyElement) Itemscope(b bool) *TbodyElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *TbodyElement) Itemtype(s ...string) *TbodyElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *TbodyElement) Lang(s string) *TbodyElement {
	e.attributes["lang"] = s

	return e
}

func (e *TbodyElement) Nonce(s string) *TbodyElement {
	e.attributes["nonce"] = s

	return e
}

func (e *TbodyElement) Popover(s string) *TbodyElement {
	e.attributes["popover"] = s

	return e
}

func (e *TbodyElement) Slot(s string) *TbodyElement {
	e.attributes["slot"] = s

	return e
}

func (e *TbodyElement) Spellcheck(a TbodySpellcheckEnum) *TbodyElement {
	e.attributes["spellcheck"] = a

	return e
}

func TbodySpellcheckCustom(s string) TbodySpellcheckEnum {
	return TbodySpellcheckEnum(s)
}

func (e *TbodyElement) Style(s string) *TbodyElement {
	e.attributes["style"] = s

	return e
}

func (e *TbodyElement) Tabindex(i int) *TbodyElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *TbodyElement) Title(s string) *TbodyElement {
	e.attributes["title"] = s

	return e
}

func (e *TbodyElement) Translate(a TbodyTranslateEnum) *TbodyElement {
	e.attributes["translate"] = a

	return e
}

func TbodyTranslateCustom(s string) TbodyTranslateEnum {
	return TbodyTranslateEnum(s)
}

func (e *TbodyElement) Writingsuggestions(a TbodyWritingsuggestionsEnum) *TbodyElement {
	e.attributes["writingsuggestions"] = a

	return e
}

func TbodyWritingsuggestionsCustom(s string) TbodyWritingsuggestionsEnum {
	return TbodyWritingsuggestionsEnum(s)
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *TbodyElement) Render(w io.Writer) error {
	indent := htemel.SetIndent(e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<tbody")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}
	for _, child := range e.children {
		child.AddIndent(e.Indent())
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(indent + "</tbody>\n")); err != nil {
		return err
	}

	return nil
}
