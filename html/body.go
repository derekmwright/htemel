// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type BodyElement struct {
	attributes bodyAttrs
	children   []htemel.Node
	skipRender bool
}

// Body creates a tag <body> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The body element represents the contents of the document.
func Body(children ...htemel.Node) *BodyElement {
	node := &BodyElement{
		children:   children,
		attributes: make(bodyAttrs),
	}

	return node
}

func BodyIf(condition bool, children ...htemel.Node) *BodyElement {
	if condition {
		return Body(children...)
	}

	return &BodyElement{
		skipRender: true,
	}
}

type BodyAutocapitalizeAttrEnum string

const (
	BodyAutocapitalizeAttrEnumOn         BodyAutocapitalizeAttrEnum = "on"
	BodyAutocapitalizeAttrEnumSentences  BodyAutocapitalizeAttrEnum = "sentences"
	BodyAutocapitalizeAttrEnumWords      BodyAutocapitalizeAttrEnum = "words"
	BodyAutocapitalizeAttrEnumCharacters BodyAutocapitalizeAttrEnum = "characters"
	BodyAutocapitalizeAttrEnumNone       BodyAutocapitalizeAttrEnum = "none"
	BodyAutocapitalizeAttrEnumOff        BodyAutocapitalizeAttrEnum = "off"
)

type BodyAutocorrectAttrEnum string

const (
	BodyAutocorrectAttrEnumOff BodyAutocorrectAttrEnum = "off"
	BodyAutocorrectAttrEnumOn  BodyAutocorrectAttrEnum = "on"
)

type BodyContenteditableAttrEnum string

const (
	BodyContenteditableAttrEnumFalse         BodyContenteditableAttrEnum = "false"
	BodyContenteditableAttrEnumPlaintextOnly BodyContenteditableAttrEnum = "plaintext-only"
	BodyContenteditableAttrEnumTrue          BodyContenteditableAttrEnum = "true"
)

type bodyAttrs map[string]any

func (e *BodyElement) Autocapitalize(a BodyAutocapitalizeAttrEnum) *BodyElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *BodyElement) Autocorrect(a BodyAutocorrectAttrEnum) *BodyElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *BodyElement) Autofocus(b bool) *BodyElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *BodyElement) Class(s ...string) *BodyElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *BodyElement) Contenteditable(a BodyContenteditableAttrEnum) *BodyElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *BodyElement) Id(s string) *BodyElement {
	e.attributes["id"] = s

	return e
}

func (e *BodyElement) Slot(s string) *BodyElement {
	e.attributes["slot"] = s

	return e
}

func (e *BodyElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<body")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		w.Write([]byte(" " + key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</body>")); err != nil {
		return err
	}

	return nil
}
