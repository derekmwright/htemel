// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type CaptionElement struct {
	attributes captionAttrs
	children []htemel.Node
	skipRender bool
}

// Caption creates a tag <caption> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The caption element represents the title of the table that is its parent, if it has a parent and that is a table element.
func Caption(children ...htemel.Node) *CaptionElement {
	node := &CaptionElement{
		children: children,
		attributes: make(captionAttrs),
	}

	return node
}

func CaptionIf(condition bool, children ...htemel.Node) *CaptionElement {
	if condition {
		return Caption(children...)
	}

	return &CaptionElement{
		skipRender: true,
	}
}

type CaptionAutocapitalizeEnum string

const (
	CaptionAutocapitalizeEnumOff CaptionAutocapitalizeEnum = "off"
	CaptionAutocapitalizeEnumOn CaptionAutocapitalizeEnum = "on"
	CaptionAutocapitalizeEnumSentences CaptionAutocapitalizeEnum = "sentences"
	CaptionAutocapitalizeEnumWords CaptionAutocapitalizeEnum = "words"
	CaptionAutocapitalizeEnumCharacters CaptionAutocapitalizeEnum = "characters"
	CaptionAutocapitalizeEnumNone CaptionAutocapitalizeEnum = "none"
)

type CaptionAutocorrectEnum string

const (
	CaptionAutocorrectEnumOff CaptionAutocorrectEnum = "off"
	CaptionAutocorrectEnumOn CaptionAutocorrectEnum = "on"
)

type CaptionContenteditableEnum string

const (
	CaptionContenteditableEnumFalse CaptionContenteditableEnum = "false"
	CaptionContenteditableEnumPlaintextOnly CaptionContenteditableEnum = "plaintext-only"
	CaptionContenteditableEnumTrue CaptionContenteditableEnum = "true"
)

type CaptionDirEnum string

const (
	CaptionDirEnumRtl CaptionDirEnum = "rtl"
	CaptionDirEnumAuto CaptionDirEnum = "auto"
	CaptionDirEnumLtr CaptionDirEnum = "ltr"
)

type CaptionDraggableEnum string

const (
	CaptionDraggableEnumFalse CaptionDraggableEnum = "false"
	CaptionDraggableEnumTrue CaptionDraggableEnum = "true"
)

type CaptionEnterkeyhintEnum string

const (
	CaptionEnterkeyhintEnumSearch CaptionEnterkeyhintEnum = "search"
	CaptionEnterkeyhintEnumSend CaptionEnterkeyhintEnum = "send"
	CaptionEnterkeyhintEnumDone CaptionEnterkeyhintEnum = "done"
	CaptionEnterkeyhintEnumEnter CaptionEnterkeyhintEnum = "enter"
	CaptionEnterkeyhintEnumGo CaptionEnterkeyhintEnum = "go"
	CaptionEnterkeyhintEnumNext CaptionEnterkeyhintEnum = "next"
	CaptionEnterkeyhintEnumPrevious CaptionEnterkeyhintEnum = "previous"
)

type CaptionHiddenEnum string

const (
	CaptionHiddenEnumUntilFound CaptionHiddenEnum = "until-found"
	CaptionHiddenEnumHidden CaptionHiddenEnum = "hidden"
)

type captionAttrs map[string]any

func (e *CaptionElement) Autocapitalize(a CaptionAutocapitalizeEnum) *CaptionElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *CaptionElement) Autocorrect(a CaptionAutocorrectEnum) *CaptionElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *CaptionElement) Autofocus(b bool) *CaptionElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *CaptionElement) Class(s ...string) *CaptionElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *CaptionElement) Contenteditable(a CaptionContenteditableEnum) *CaptionElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *CaptionElement) Dir(a CaptionDirEnum) *CaptionElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *CaptionElement) Draggable(a CaptionDraggableEnum) *CaptionElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *CaptionElement) Enterkeyhint(a CaptionEnterkeyhintEnum) *CaptionElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *CaptionElement) Hidden(a CaptionHiddenEnum) *CaptionElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *CaptionElement) Id(s string) *CaptionElement {
	e.attributes["id"] = s
	
	return e
}

func (e *CaptionElement) Slot(s string) *CaptionElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *CaptionElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<caption")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</caption>")); err != nil {
		return err
	}

	return nil
}
