// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
)

type CaptionElement struct {
	attributes captionAttrs
	children []htemel.Node
	skipRender bool
}

// Caption creates a tag <caption> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The caption element represents the title of the table that is its parent, if it has a parent and that is a table element.
func Caption(children ...htemel.Node) *CaptionElement {
	node := &CaptionElement{
		children: children,
	}

	return node
}

func CaptionIf(condition bool, children ...htemel.Node) *CaptionElement {
	if condition {
		return Caption(children...)
	}

	return &CaptionElement{
		skipRender: true,
	}
}

type CaptionAutocapitalizeAttrEnum string

const (
	CaptionAutocapitalizeAttrEnumOn CaptionAutocapitalizeAttrEnum = "on"
	CaptionAutocapitalizeAttrEnumSentences CaptionAutocapitalizeAttrEnum = "sentences"
	CaptionAutocapitalizeAttrEnumWords CaptionAutocapitalizeAttrEnum = "words"
	CaptionAutocapitalizeAttrEnumCharacters CaptionAutocapitalizeAttrEnum = "characters"
	CaptionAutocapitalizeAttrEnumNone CaptionAutocapitalizeAttrEnum = "none"
	CaptionAutocapitalizeAttrEnumOff CaptionAutocapitalizeAttrEnum = "off"
)

type CaptionAutocorrectAttrEnum string

const (
	CaptionAutocorrectAttrEnumOff CaptionAutocorrectAttrEnum = "off"
	CaptionAutocorrectAttrEnumOn CaptionAutocorrectAttrEnum = "on"
)

type CaptionContenteditableAttrEnum string

const (
	CaptionContenteditableAttrEnumFalse CaptionContenteditableAttrEnum = "false"
	CaptionContenteditableAttrEnumPlaintextOnly CaptionContenteditableAttrEnum = "plaintext-only"
	CaptionContenteditableAttrEnumTrue CaptionContenteditableAttrEnum = "true"
)

type captionAttrs map[string]any

func (e *CaptionElement) Autocapitalize(a CaptionAutocapitalizeAttrEnum) *CaptionElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *CaptionElement) Autocorrect(a CaptionAutocorrectAttrEnum) *CaptionElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *CaptionElement) Class(s ...string) *CaptionElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *CaptionElement) Contenteditable(a CaptionContenteditableAttrEnum) *CaptionElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *CaptionElement) Id(s string) *CaptionElement {
	e.attributes["id"] = s
	
	return e
}

func (e *CaptionElement) Slot(s string) *CaptionElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *CaptionElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<caption")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 0
	for key, v := range e.attributes {
		w.Write([]byte(key + "="))
		w.Write([]byte(html.EscapeString(fmt.Sprintf("'%v'", v))))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</caption>")); err != nil {
		return err
	}

	return nil
}
