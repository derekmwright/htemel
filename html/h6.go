// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type H6Element struct {
	attributes h6Attrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// H6 creates a tag <h6> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: These elements represent headings for their sections.
func H6(children ...htemel.Node) *H6Element {
	node := &H6Element{
		children: children, attributes: make(h6Attrs),
	}

	return node
}

func H6If(condition bool, children ...htemel.Node) *H6Element {
	if condition {
		return H6(children...)
	}

	return &H6Element{
		skipRender: true,
	}
}

func H6Ternary(condition bool, true htemel.Node, false htemel.Node) *H6Element {
	if condition {
		return H6(true)
	}

	return H6(false)
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *H6Element) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *H6Element) AddIndent(i int) {
	e.indent = i + 1
}

type H6AutocapitalizeEnum string

const (
	H6AutocapitalizeEnumOff        H6AutocapitalizeEnum = "off"
	H6AutocapitalizeEnumOn         H6AutocapitalizeEnum = "on"
	H6AutocapitalizeEnumSentences  H6AutocapitalizeEnum = "sentences"
	H6AutocapitalizeEnumWords      H6AutocapitalizeEnum = "words"
	H6AutocapitalizeEnumCharacters H6AutocapitalizeEnum = "characters"
	H6AutocapitalizeEnumNone       H6AutocapitalizeEnum = "none"
)

type H6AutocorrectEnum string

const (
	H6AutocorrectEnumOn    H6AutocorrectEnum = "on"
	H6AutocorrectEnumOff   H6AutocorrectEnum = "off"
	H6AutocorrectEnumEmpty H6AutocorrectEnum = ""
)

type H6ContenteditableEnum string

const (
	H6ContenteditableEnumTrue          H6ContenteditableEnum = "true"
	H6ContenteditableEnumFalse         H6ContenteditableEnum = "false"
	H6ContenteditableEnumPlaintextOnly H6ContenteditableEnum = "plaintext-only"
	H6ContenteditableEnumEmpty         H6ContenteditableEnum = ""
)

type H6DirEnum string

const (
	H6DirEnumRtl  H6DirEnum = "rtl"
	H6DirEnumAuto H6DirEnum = "auto"
	H6DirEnumLtr  H6DirEnum = "ltr"
)

type H6DraggableEnum string

const (
	H6DraggableEnumFalse H6DraggableEnum = "false"
	H6DraggableEnumTrue  H6DraggableEnum = "true"
)

type H6EnterkeyhintEnum string

const (
	H6EnterkeyhintEnumSearch   H6EnterkeyhintEnum = "search"
	H6EnterkeyhintEnumSend     H6EnterkeyhintEnum = "send"
	H6EnterkeyhintEnumDone     H6EnterkeyhintEnum = "done"
	H6EnterkeyhintEnumEnter    H6EnterkeyhintEnum = "enter"
	H6EnterkeyhintEnumGo       H6EnterkeyhintEnum = "go"
	H6EnterkeyhintEnumNext     H6EnterkeyhintEnum = "next"
	H6EnterkeyhintEnumPrevious H6EnterkeyhintEnum = "previous"
)

type H6HiddenEnum string

const (
	H6HiddenEnumHidden     H6HiddenEnum = "hidden"
	H6HiddenEnumUntilFound H6HiddenEnum = "until-found"
	H6HiddenEnumEmpty      H6HiddenEnum = ""
)

type H6InputmodeEnum string

const (
	H6InputmodeEnumUrl     H6InputmodeEnum = "url"
	H6InputmodeEnumDecimal H6InputmodeEnum = "decimal"
	H6InputmodeEnumEmail   H6InputmodeEnum = "email"
	H6InputmodeEnumNone    H6InputmodeEnum = "none"
	H6InputmodeEnumNumeric H6InputmodeEnum = "numeric"
	H6InputmodeEnumSearch  H6InputmodeEnum = "search"
	H6InputmodeEnumTel     H6InputmodeEnum = "tel"
	H6InputmodeEnumText    H6InputmodeEnum = "text"
)

type H6SpellcheckEnum string

const (
	H6SpellcheckEnumFalse H6SpellcheckEnum = "false"
	H6SpellcheckEnumTrue  H6SpellcheckEnum = "true"
	H6SpellcheckEnumEmpty H6SpellcheckEnum = ""
)

type H6TranslateEnum string

const (
	H6TranslateEnumNo    H6TranslateEnum = "no"
	H6TranslateEnumYes   H6TranslateEnum = "yes"
	H6TranslateEnumEmpty H6TranslateEnum = ""
)

type H6WritingsuggestionsEnum string

const (
	H6WritingsuggestionsEnumFalse H6WritingsuggestionsEnum = "false"
	H6WritingsuggestionsEnumTrue  H6WritingsuggestionsEnum = "true"
	H6WritingsuggestionsEnumEmpty H6WritingsuggestionsEnum = ""
)

type h6Attrs map[string]any

func (e *H6Element) Autocapitalize(a H6AutocapitalizeEnum) *H6Element {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *H6Element) Autocorrect(a H6AutocorrectEnum) *H6Element {
	e.attributes["autocorrect"] = a

	return e
}

func (e *H6Element) Autofocus(b bool) *H6Element {
	e.attributes["autofocus"] = b

	return e
}

func (e *H6Element) Class(s ...string) *H6Element {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *H6Element) Contenteditable(a H6ContenteditableEnum) *H6Element {
	e.attributes["contenteditable"] = a

	return e
}

func (e *H6Element) DataUnsafe(name string, s string) *H6Element {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *H6Element) Data(name string, s string) *H6Element {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *H6Element) Dir(a H6DirEnum) *H6Element {
	e.attributes["dir"] = a

	return e
}

func (e *H6Element) Draggable(a H6DraggableEnum) *H6Element {
	e.attributes["draggable"] = a

	return e
}

func (e *H6Element) Enterkeyhint(a H6EnterkeyhintEnum) *H6Element {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *H6Element) Hidden(a H6HiddenEnum) *H6Element {
	e.attributes["hidden"] = a

	return e
}

func (e *H6Element) Id(s string) *H6Element {
	e.attributes["id"] = s

	return e
}

func (e *H6Element) Inert(b bool) *H6Element {
	e.attributes["inert"] = b

	return e
}

func (e *H6Element) Inputmode(a H6InputmodeEnum) *H6Element {
	e.attributes["inputmode"] = a

	return e
}

func (e *H6Element) Itemid(s string) *H6Element {
	e.attributes["itemid"] = s

	return e
}

func (e *H6Element) Itemprop(s ...string) *H6Element {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *H6Element) Itemref(s ...string) *H6Element {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *H6Element) Itemscope(b bool) *H6Element {
	e.attributes["itemscope"] = b

	return e
}

func (e *H6Element) Itemtype(s ...string) *H6Element {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *H6Element) Lang(s string) *H6Element {
	e.attributes["lang"] = s

	return e
}

func (e *H6Element) Nonce(s string) *H6Element {
	e.attributes["nonce"] = s

	return e
}

func (e *H6Element) Popover(s string) *H6Element {
	e.attributes["popover"] = s

	return e
}

func (e *H6Element) Slot(s string) *H6Element {
	e.attributes["slot"] = s

	return e
}

func (e *H6Element) Spellcheck(a H6SpellcheckEnum) *H6Element {
	e.attributes["spellcheck"] = a

	return e
}

func (e *H6Element) Style(s string) *H6Element {
	e.attributes["style"] = s

	return e
}

func (e *H6Element) Tabindex(i int) *H6Element {
	e.attributes["tabindex"] = i

	return e
}

func (e *H6Element) Title(s string) *H6Element {
	e.attributes["title"] = s

	return e
}

func (e *H6Element) Translate(a H6TranslateEnum) *H6Element {
	e.attributes["translate"] = a

	return e
}

func (e *H6Element) Writingsuggestions(a H6WritingsuggestionsEnum) *H6Element {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *H6Element) Render(w io.Writer) error {
	indent := htemel.SetIndent(e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<h6")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}
	for _, child := range e.children {
		child.AddIndent(e.Indent())
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(indent + "</h6>\n")); err != nil {
		return err
	}

	return nil
}
