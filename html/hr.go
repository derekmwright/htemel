// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type HrElement struct {
	attributes hrAttrs
	children   []htemel.Node
	skipRender bool
}

// Hr creates a tag <hr> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The hr element represents a paragraph-level thematic break, e.g., a scene change in a story, or a transition to another topic within a section of a reference book; alternatively, it represents a separator between a set of options of a select element.
func Hr(children ...htemel.Node) *HrElement {
	node := &HrElement{
		children:   children,
		attributes: make(hrAttrs),
	}

	return node
}

func HrIf(condition bool, children ...htemel.Node) *HrElement {
	if condition {
		return Hr(children...)
	}

	return &HrElement{
		skipRender: true,
	}
}

type HrAutocapitalizeAttrEnum string

const (
	HrAutocapitalizeAttrEnumCharacters HrAutocapitalizeAttrEnum = "characters"
	HrAutocapitalizeAttrEnumNone       HrAutocapitalizeAttrEnum = "none"
	HrAutocapitalizeAttrEnumOff        HrAutocapitalizeAttrEnum = "off"
	HrAutocapitalizeAttrEnumOn         HrAutocapitalizeAttrEnum = "on"
	HrAutocapitalizeAttrEnumSentences  HrAutocapitalizeAttrEnum = "sentences"
	HrAutocapitalizeAttrEnumWords      HrAutocapitalizeAttrEnum = "words"
)

type HrAutocorrectAttrEnum string

const (
	HrAutocorrectAttrEnumOff HrAutocorrectAttrEnum = "off"
	HrAutocorrectAttrEnumOn  HrAutocorrectAttrEnum = "on"
)

type HrContenteditableAttrEnum string

const (
	HrContenteditableAttrEnumFalse         HrContenteditableAttrEnum = "false"
	HrContenteditableAttrEnumPlaintextOnly HrContenteditableAttrEnum = "plaintext-only"
	HrContenteditableAttrEnumTrue          HrContenteditableAttrEnum = "true"
)

type hrAttrs map[string]any

func (e *HrElement) Autocapitalize(a HrAutocapitalizeAttrEnum) *HrElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *HrElement) Autocorrect(a HrAutocorrectAttrEnum) *HrElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *HrElement) Autofocus(b bool) *HrElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *HrElement) Class(s ...string) *HrElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *HrElement) Contenteditable(a HrContenteditableAttrEnum) *HrElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *HrElement) Id(s string) *HrElement {
	e.attributes["id"] = s

	return e
}

func (e *HrElement) Slot(s string) *HrElement {
	e.attributes["slot"] = s

	return e
}

func (e *HrElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<hr")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</hr>")); err != nil {
		return err
	}

	return nil
}
