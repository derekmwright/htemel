// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type HrElement struct {
	attributes hrAttrs

	skipRender bool
	indent     int
}

// Hr creates a tag <hr> instance and returns it for further modification.
//
// Spec Description: The hr element represents a paragraph-level thematic break, e.g., a scene change in a story, or a transition to another topic within a section of a reference book; alternatively, it represents a separator between a set of options of a select element.
func Hr() *HrElement {
	node := &HrElement{
		attributes: make(hrAttrs),
	}

	return node
}

func HrIf(condition bool) *HrElement {
	if condition {
		return Hr()
	}

	return &HrElement{
		skipRender: true,
	}
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *HrElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *HrElement) AddIndent(i int) {
	e.indent = i + 1
}

type HrAutocapitalizeEnum string

const (
	HrAutocapitalizeEnumSentences  HrAutocapitalizeEnum = "sentences"
	HrAutocapitalizeEnumWords      HrAutocapitalizeEnum = "words"
	HrAutocapitalizeEnumCharacters HrAutocapitalizeEnum = "characters"
	HrAutocapitalizeEnumNone       HrAutocapitalizeEnum = "none"
	HrAutocapitalizeEnumOff        HrAutocapitalizeEnum = "off"
	HrAutocapitalizeEnumOn         HrAutocapitalizeEnum = "on"
)

type HrAutocorrectEnum string

const (
	HrAutocorrectEnumOff   HrAutocorrectEnum = "off"
	HrAutocorrectEnumOn    HrAutocorrectEnum = "on"
	HrAutocorrectEnumEmpty HrAutocorrectEnum = ""
)

type HrContenteditableEnum string

const (
	HrContenteditableEnumTrue          HrContenteditableEnum = "true"
	HrContenteditableEnumFalse         HrContenteditableEnum = "false"
	HrContenteditableEnumPlaintextOnly HrContenteditableEnum = "plaintext-only"
	HrContenteditableEnumEmpty         HrContenteditableEnum = ""
)

type HrDirEnum string

const (
	HrDirEnumAuto HrDirEnum = "auto"
	HrDirEnumLtr  HrDirEnum = "ltr"
	HrDirEnumRtl  HrDirEnum = "rtl"
)

type HrDraggableEnum string

const (
	HrDraggableEnumTrue  HrDraggableEnum = "true"
	HrDraggableEnumFalse HrDraggableEnum = "false"
)

type HrEnterkeyhintEnum string

const (
	HrEnterkeyhintEnumGo       HrEnterkeyhintEnum = "go"
	HrEnterkeyhintEnumNext     HrEnterkeyhintEnum = "next"
	HrEnterkeyhintEnumPrevious HrEnterkeyhintEnum = "previous"
	HrEnterkeyhintEnumSearch   HrEnterkeyhintEnum = "search"
	HrEnterkeyhintEnumSend     HrEnterkeyhintEnum = "send"
	HrEnterkeyhintEnumDone     HrEnterkeyhintEnum = "done"
	HrEnterkeyhintEnumEnter    HrEnterkeyhintEnum = "enter"
)

type HrHiddenEnum string

const (
	HrHiddenEnumHidden     HrHiddenEnum = "hidden"
	HrHiddenEnumUntilFound HrHiddenEnum = "until-found"
	HrHiddenEnumEmpty      HrHiddenEnum = ""
)

type HrInputmodeEnum string

const (
	HrInputmodeEnumTel     HrInputmodeEnum = "tel"
	HrInputmodeEnumText    HrInputmodeEnum = "text"
	HrInputmodeEnumUrl     HrInputmodeEnum = "url"
	HrInputmodeEnumDecimal HrInputmodeEnum = "decimal"
	HrInputmodeEnumEmail   HrInputmodeEnum = "email"
	HrInputmodeEnumNone    HrInputmodeEnum = "none"
	HrInputmodeEnumNumeric HrInputmodeEnum = "numeric"
	HrInputmodeEnumSearch  HrInputmodeEnum = "search"
)

type HrSpellcheckEnum string

const (
	HrSpellcheckEnumFalse HrSpellcheckEnum = "false"
	HrSpellcheckEnumTrue  HrSpellcheckEnum = "true"
	HrSpellcheckEnumEmpty HrSpellcheckEnum = ""
)

type HrTranslateEnum string

const (
	HrTranslateEnumNo    HrTranslateEnum = "no"
	HrTranslateEnumYes   HrTranslateEnum = "yes"
	HrTranslateEnumEmpty HrTranslateEnum = ""
)

type HrWritingsuggestionsEnum string

const (
	HrWritingsuggestionsEnumFalse HrWritingsuggestionsEnum = "false"
	HrWritingsuggestionsEnumTrue  HrWritingsuggestionsEnum = "true"
	HrWritingsuggestionsEnumEmpty HrWritingsuggestionsEnum = ""
)

type hrAttrs map[string]any

func (e *HrElement) Autocapitalize(a HrAutocapitalizeEnum) *HrElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *HrElement) Autocorrect(a HrAutocorrectEnum) *HrElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *HrElement) Autofocus(b bool) *HrElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *HrElement) Class(s ...string) *HrElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *HrElement) Contenteditable(a HrContenteditableEnum) *HrElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *HrElement) DataUnsafe(name string, s string) *HrElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *HrElement) Data(name string, s string) *HrElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *HrElement) Dir(a HrDirEnum) *HrElement {
	e.attributes["dir"] = a

	return e
}

func (e *HrElement) Draggable(a HrDraggableEnum) *HrElement {
	e.attributes["draggable"] = a

	return e
}

func (e *HrElement) Enterkeyhint(a HrEnterkeyhintEnum) *HrElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *HrElement) Hidden(a HrHiddenEnum) *HrElement {
	e.attributes["hidden"] = a

	return e
}

func (e *HrElement) Id(s string) *HrElement {
	e.attributes["id"] = s

	return e
}

func (e *HrElement) Inert(b bool) *HrElement {
	e.attributes["inert"] = b

	return e
}

func (e *HrElement) Inputmode(a HrInputmodeEnum) *HrElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *HrElement) Itemid(s string) *HrElement {
	e.attributes["itemid"] = s

	return e
}

func (e *HrElement) Itemprop(s ...string) *HrElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *HrElement) Itemref(s ...string) *HrElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *HrElement) Itemscope(b bool) *HrElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *HrElement) Itemtype(s ...string) *HrElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *HrElement) Lang(s string) *HrElement {
	e.attributes["lang"] = s

	return e
}

func (e *HrElement) Nonce(s string) *HrElement {
	e.attributes["nonce"] = s

	return e
}

func (e *HrElement) Popover(s string) *HrElement {
	e.attributes["popover"] = s

	return e
}

func (e *HrElement) Slot(s string) *HrElement {
	e.attributes["slot"] = s

	return e
}

func (e *HrElement) Spellcheck(a HrSpellcheckEnum) *HrElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *HrElement) Style(s string) *HrElement {
	e.attributes["style"] = s

	return e
}

func (e *HrElement) Tabindex(i int) *HrElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *HrElement) Title(s string) *HrElement {
	e.attributes["title"] = s

	return e
}

func (e *HrElement) Translate(a HrTranslateEnum) *HrElement {
	e.attributes["translate"] = a

	return e
}

func (e *HrElement) Writingsuggestions(a HrWritingsuggestionsEnum) *HrElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *HrElement) Render(w io.Writer) error {
	indent := htemel.SetIndent(e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<hr")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}

	return nil
}
