// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type TitleElement struct {
	attributes titleAttrs
	children []htemel.Node
	skipRender bool
}

// Title creates a tag <title> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The title element represents the document's title or name. Authors should use titles that identify their documents even when they are used out of context, for example in a user's history or bookmarks, or in search results. The document's title is often different from its first heading, since the first heading does not have to stand alone when taken out of context.
func Title(children ...htemel.Node) *TitleElement {
	node := &TitleElement{
		children: children,
		attributes: make(titleAttrs),
	}

	return node
}

func TitleIf(condition bool, children ...htemel.Node) *TitleElement {
	if condition {
		return Title(children...)
	}

	return &TitleElement{
		skipRender: true,
	}
}

type TitleAutocapitalizeEnum string

const (
	TitleAutocapitalizeEnumCharacters TitleAutocapitalizeEnum = "characters"
	TitleAutocapitalizeEnumNone TitleAutocapitalizeEnum = "none"
	TitleAutocapitalizeEnumOff TitleAutocapitalizeEnum = "off"
	TitleAutocapitalizeEnumOn TitleAutocapitalizeEnum = "on"
	TitleAutocapitalizeEnumSentences TitleAutocapitalizeEnum = "sentences"
	TitleAutocapitalizeEnumWords TitleAutocapitalizeEnum = "words"
)

type TitleAutocorrectEnum string

const (
	TitleAutocorrectEnumOff TitleAutocorrectEnum = "off"
	TitleAutocorrectEnumOn TitleAutocorrectEnum = "on"
)

type TitleContenteditableEnum string

const (
	TitleContenteditableEnumFalse TitleContenteditableEnum = "false"
	TitleContenteditableEnumPlaintextOnly TitleContenteditableEnum = "plaintext-only"
	TitleContenteditableEnumTrue TitleContenteditableEnum = "true"
)

type TitleDirEnum string

const (
	TitleDirEnumLtr TitleDirEnum = "ltr"
	TitleDirEnumRtl TitleDirEnum = "rtl"
	TitleDirEnumAuto TitleDirEnum = "auto"
)

type TitleDraggableEnum string

const (
	TitleDraggableEnumFalse TitleDraggableEnum = "false"
	TitleDraggableEnumTrue TitleDraggableEnum = "true"
)

type TitleEnterkeyhintEnum string

const (
	TitleEnterkeyhintEnumNext TitleEnterkeyhintEnum = "next"
	TitleEnterkeyhintEnumPrevious TitleEnterkeyhintEnum = "previous"
	TitleEnterkeyhintEnumSearch TitleEnterkeyhintEnum = "search"
	TitleEnterkeyhintEnumSend TitleEnterkeyhintEnum = "send"
	TitleEnterkeyhintEnumDone TitleEnterkeyhintEnum = "done"
	TitleEnterkeyhintEnumEnter TitleEnterkeyhintEnum = "enter"
	TitleEnterkeyhintEnumGo TitleEnterkeyhintEnum = "go"
)

type TitleHiddenEnum string

const (
	TitleHiddenEnumHidden TitleHiddenEnum = "hidden"
	TitleHiddenEnumUntilFound TitleHiddenEnum = "until-found"
)

type titleAttrs map[string]any

func (e *TitleElement) Autocapitalize(a TitleAutocapitalizeEnum) *TitleElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *TitleElement) Autocorrect(a TitleAutocorrectEnum) *TitleElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *TitleElement) Autofocus(b bool) *TitleElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *TitleElement) Class(s ...string) *TitleElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *TitleElement) Contenteditable(a TitleContenteditableEnum) *TitleElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *TitleElement) Dir(a TitleDirEnum) *TitleElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *TitleElement) Draggable(a TitleDraggableEnum) *TitleElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *TitleElement) Enterkeyhint(a TitleEnterkeyhintEnum) *TitleElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *TitleElement) Hidden(a TitleHiddenEnum) *TitleElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *TitleElement) Id(s string) *TitleElement {
	e.attributes["id"] = s
	
	return e
}

func (e *TitleElement) Slot(s string) *TitleElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *TitleElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<title")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</title>")); err != nil {
		return err
	}

	return nil
}
