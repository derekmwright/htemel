// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type TitleElement struct {
	attributes titleAttrs
	children   []htemel.Node
	skipRender bool
}

// Title creates a tag <title> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The title element represents the document's title or name. Authors should use titles that identify their documents even when they are used out of context, for example in a user's history or bookmarks, or in search results. The document's title is often different from its first heading, since the first heading does not have to stand alone when taken out of context.
func Title(children ...htemel.Node) *TitleElement {
	node := &TitleElement{
		children:   children,
		attributes: make(titleAttrs),
	}

	return node
}

func TitleIf(condition bool, children ...htemel.Node) *TitleElement {
	if condition {
		return Title(children...)
	}

	return &TitleElement{
		skipRender: true,
	}
}

type TitleAutocapitalizeAttrEnum string

const (
	TitleAutocapitalizeAttrEnumCharacters TitleAutocapitalizeAttrEnum = "characters"
	TitleAutocapitalizeAttrEnumNone       TitleAutocapitalizeAttrEnum = "none"
	TitleAutocapitalizeAttrEnumOff        TitleAutocapitalizeAttrEnum = "off"
	TitleAutocapitalizeAttrEnumOn         TitleAutocapitalizeAttrEnum = "on"
	TitleAutocapitalizeAttrEnumSentences  TitleAutocapitalizeAttrEnum = "sentences"
	TitleAutocapitalizeAttrEnumWords      TitleAutocapitalizeAttrEnum = "words"
)

type TitleAutocorrectAttrEnum string

const (
	TitleAutocorrectAttrEnumOff TitleAutocorrectAttrEnum = "off"
	TitleAutocorrectAttrEnumOn  TitleAutocorrectAttrEnum = "on"
)

type TitleContenteditableAttrEnum string

const (
	TitleContenteditableAttrEnumFalse         TitleContenteditableAttrEnum = "false"
	TitleContenteditableAttrEnumPlaintextOnly TitleContenteditableAttrEnum = "plaintext-only"
	TitleContenteditableAttrEnumTrue          TitleContenteditableAttrEnum = "true"
)

type titleAttrs map[string]any

func (e *TitleElement) Autocapitalize(a TitleAutocapitalizeAttrEnum) *TitleElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *TitleElement) Autocorrect(a TitleAutocorrectAttrEnum) *TitleElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *TitleElement) Autofocus(b bool) *TitleElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *TitleElement) Class(s ...string) *TitleElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *TitleElement) Contenteditable(a TitleContenteditableAttrEnum) *TitleElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *TitleElement) Id(s string) *TitleElement {
	e.attributes["id"] = s

	return e
}

func (e *TitleElement) Slot(s string) *TitleElement {
	e.attributes["slot"] = s

	return e
}

func (e *TitleElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<title")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		w.Write([]byte(" " + key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</title>")); err != nil {
		return err
	}

	return nil
}
