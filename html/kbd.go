// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type KbdElement struct {
	attributes kbdAttrs
	children []htemel.Node
	skipRender bool
}

// Kbd creates a tag <kbd> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The kbd element represents user input (typically keyboard input, although it may also be used to represent other input, such as voice commands).
func Kbd(children ...htemel.Node) *KbdElement {
	node := &KbdElement{
		children: children,
		attributes: make(kbdAttrs),
	}

	return node
}

func KbdIf(condition bool, children ...htemel.Node) *KbdElement {
	if condition {
		return Kbd(children...)
	}

	return &KbdElement{
		skipRender: true,
	}
}

type KbdAutocapitalizeEnum string

const (
	KbdAutocapitalizeEnumWords KbdAutocapitalizeEnum = "words"
	KbdAutocapitalizeEnumCharacters KbdAutocapitalizeEnum = "characters"
	KbdAutocapitalizeEnumNone KbdAutocapitalizeEnum = "none"
	KbdAutocapitalizeEnumOff KbdAutocapitalizeEnum = "off"
	KbdAutocapitalizeEnumOn KbdAutocapitalizeEnum = "on"
	KbdAutocapitalizeEnumSentences KbdAutocapitalizeEnum = "sentences"
)

type KbdAutocorrectEnum string

const (
	KbdAutocorrectEnumOff KbdAutocorrectEnum = "off"
	KbdAutocorrectEnumOn KbdAutocorrectEnum = "on"
)

type KbdContenteditableEnum string

const (
	KbdContenteditableEnumFalse KbdContenteditableEnum = "false"
	KbdContenteditableEnumPlaintextOnly KbdContenteditableEnum = "plaintext-only"
	KbdContenteditableEnumTrue KbdContenteditableEnum = "true"
)

type KbdDirEnum string

const (
	KbdDirEnumAuto KbdDirEnum = "auto"
	KbdDirEnumLtr KbdDirEnum = "ltr"
	KbdDirEnumRtl KbdDirEnum = "rtl"
)

type KbdDraggableEnum string

const (
	KbdDraggableEnumFalse KbdDraggableEnum = "false"
	KbdDraggableEnumTrue KbdDraggableEnum = "true"
)

type KbdEnterkeyhintEnum string

const (
	KbdEnterkeyhintEnumPrevious KbdEnterkeyhintEnum = "previous"
	KbdEnterkeyhintEnumSearch KbdEnterkeyhintEnum = "search"
	KbdEnterkeyhintEnumSend KbdEnterkeyhintEnum = "send"
	KbdEnterkeyhintEnumDone KbdEnterkeyhintEnum = "done"
	KbdEnterkeyhintEnumEnter KbdEnterkeyhintEnum = "enter"
	KbdEnterkeyhintEnumGo KbdEnterkeyhintEnum = "go"
	KbdEnterkeyhintEnumNext KbdEnterkeyhintEnum = "next"
)

type KbdHiddenEnum string

const (
	KbdHiddenEnumHidden KbdHiddenEnum = "hidden"
	KbdHiddenEnumUntilFound KbdHiddenEnum = "until-found"
)

type kbdAttrs map[string]any

func (e *KbdElement) Autocapitalize(a KbdAutocapitalizeEnum) *KbdElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *KbdElement) Autocorrect(a KbdAutocorrectEnum) *KbdElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *KbdElement) Autofocus(b bool) *KbdElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *KbdElement) Class(s ...string) *KbdElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *KbdElement) Contenteditable(a KbdContenteditableEnum) *KbdElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *KbdElement) Dir(a KbdDirEnum) *KbdElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *KbdElement) Draggable(a KbdDraggableEnum) *KbdElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *KbdElement) Enterkeyhint(a KbdEnterkeyhintEnum) *KbdElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *KbdElement) Hidden(a KbdHiddenEnum) *KbdElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *KbdElement) Id(s string) *KbdElement {
	e.attributes["id"] = s
	
	return e
}

func (e *KbdElement) Slot(s string) *KbdElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *KbdElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<kbd")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</kbd>")); err != nil {
		return err
	}

	return nil
}
