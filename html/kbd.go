// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type KbdElement struct {
	attributes kbdAttrs
	children []htemel.Node
	skipRender bool
}

// Kbd creates a tag <kbd> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The kbd element represents user input (typically keyboard input, although it may also be used to represent other input, such as voice commands).
func Kbd(children ...htemel.Node) *KbdElement {
	node := &KbdElement{
		children: children,
		attributes: make(kbdAttrs),
	}

	return node
}

func KbdIf(condition bool, children ...htemel.Node) *KbdElement {
	if condition {
		return Kbd(children...)
	}

	return &KbdElement{
		skipRender: true,
	}
}

type KbdAutocapitalizeAttrEnum string

const (
	KbdAutocapitalizeAttrEnumOff KbdAutocapitalizeAttrEnum = "off"
	KbdAutocapitalizeAttrEnumOn KbdAutocapitalizeAttrEnum = "on"
	KbdAutocapitalizeAttrEnumSentences KbdAutocapitalizeAttrEnum = "sentences"
	KbdAutocapitalizeAttrEnumWords KbdAutocapitalizeAttrEnum = "words"
	KbdAutocapitalizeAttrEnumCharacters KbdAutocapitalizeAttrEnum = "characters"
	KbdAutocapitalizeAttrEnumNone KbdAutocapitalizeAttrEnum = "none"
)

type KbdAutocorrectAttrEnum string

const (
	KbdAutocorrectAttrEnumOff KbdAutocorrectAttrEnum = "off"
	KbdAutocorrectAttrEnumOn KbdAutocorrectAttrEnum = "on"
)

type KbdContenteditableAttrEnum string

const (
	KbdContenteditableAttrEnumFalse KbdContenteditableAttrEnum = "false"
	KbdContenteditableAttrEnumPlaintextOnly KbdContenteditableAttrEnum = "plaintext-only"
	KbdContenteditableAttrEnumTrue KbdContenteditableAttrEnum = "true"
)

type kbdAttrs map[string]any

func (e *KbdElement) Autocapitalize(a KbdAutocapitalizeAttrEnum) *KbdElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *KbdElement) Autocorrect(a KbdAutocorrectAttrEnum) *KbdElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *KbdElement) Class(s ...string) *KbdElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *KbdElement) Contenteditable(a KbdContenteditableAttrEnum) *KbdElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *KbdElement) Id(s string) *KbdElement {
	e.attributes["id"] = s
	
	return e
}

func (e *KbdElement) Slot(s string) *KbdElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *KbdElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<kbd")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		w.Write([]byte(" " + key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</kbd>")); err != nil {
		return err
	}

	return nil
}
