// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type H5Element struct {
	attributes h5Attrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// H5 creates a tag <h5> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: These elements represent headings for their sections.
func H5(children ...htemel.Node) *H5Element {
	node := &H5Element{
		children: children, attributes: make(h5Attrs),
	}

	return node
}

func H5If(condition bool, children ...htemel.Node) *H5Element {
	if condition {
		return H5(children...)
	}

	return &H5Element{
		skipRender: true,
	}
}

func H5Ternary(condition bool, true htemel.Node, false htemel.Node) *H5Element {
	if condition {
		return H5(true)
	}

	return H5(false)
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *H5Element) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *H5Element) AddIndent(i int) {
	e.indent = i + 1
}

type H5AutocapitalizeEnum string

const (
	H5AutocapitalizeEnumWords      H5AutocapitalizeEnum = "words"
	H5AutocapitalizeEnumCharacters H5AutocapitalizeEnum = "characters"
	H5AutocapitalizeEnumNone       H5AutocapitalizeEnum = "none"
	H5AutocapitalizeEnumOff        H5AutocapitalizeEnum = "off"
	H5AutocapitalizeEnumOn         H5AutocapitalizeEnum = "on"
	H5AutocapitalizeEnumSentences  H5AutocapitalizeEnum = "sentences"
)

type H5AutocorrectEnum string

const (
	H5AutocorrectEnumOff   H5AutocorrectEnum = "off"
	H5AutocorrectEnumOn    H5AutocorrectEnum = "on"
	H5AutocorrectEnumEmpty H5AutocorrectEnum = ""
)

type H5ContenteditableEnum string

const (
	H5ContenteditableEnumTrue          H5ContenteditableEnum = "true"
	H5ContenteditableEnumFalse         H5ContenteditableEnum = "false"
	H5ContenteditableEnumPlaintextOnly H5ContenteditableEnum = "plaintext-only"
	H5ContenteditableEnumEmpty         H5ContenteditableEnum = ""
)

type H5DirEnum string

const (
	H5DirEnumLtr  H5DirEnum = "ltr"
	H5DirEnumRtl  H5DirEnum = "rtl"
	H5DirEnumAuto H5DirEnum = "auto"
)

type H5DraggableEnum string

const (
	H5DraggableEnumFalse H5DraggableEnum = "false"
	H5DraggableEnumTrue  H5DraggableEnum = "true"
)

type H5EnterkeyhintEnum string

const (
	H5EnterkeyhintEnumEnter    H5EnterkeyhintEnum = "enter"
	H5EnterkeyhintEnumGo       H5EnterkeyhintEnum = "go"
	H5EnterkeyhintEnumNext     H5EnterkeyhintEnum = "next"
	H5EnterkeyhintEnumPrevious H5EnterkeyhintEnum = "previous"
	H5EnterkeyhintEnumSearch   H5EnterkeyhintEnum = "search"
	H5EnterkeyhintEnumSend     H5EnterkeyhintEnum = "send"
	H5EnterkeyhintEnumDone     H5EnterkeyhintEnum = "done"
)

type H5HiddenEnum string

const (
	H5HiddenEnumHidden     H5HiddenEnum = "hidden"
	H5HiddenEnumUntilFound H5HiddenEnum = "until-found"
	H5HiddenEnumEmpty      H5HiddenEnum = ""
)

type H5InputmodeEnum string

const (
	H5InputmodeEnumUrl     H5InputmodeEnum = "url"
	H5InputmodeEnumDecimal H5InputmodeEnum = "decimal"
	H5InputmodeEnumEmail   H5InputmodeEnum = "email"
	H5InputmodeEnumNone    H5InputmodeEnum = "none"
	H5InputmodeEnumNumeric H5InputmodeEnum = "numeric"
	H5InputmodeEnumSearch  H5InputmodeEnum = "search"
	H5InputmodeEnumTel     H5InputmodeEnum = "tel"
	H5InputmodeEnumText    H5InputmodeEnum = "text"
)

type H5SpellcheckEnum string

const (
	H5SpellcheckEnumTrue  H5SpellcheckEnum = "true"
	H5SpellcheckEnumFalse H5SpellcheckEnum = "false"
	H5SpellcheckEnumEmpty H5SpellcheckEnum = ""
)

type H5TranslateEnum string

const (
	H5TranslateEnumNo    H5TranslateEnum = "no"
	H5TranslateEnumYes   H5TranslateEnum = "yes"
	H5TranslateEnumEmpty H5TranslateEnum = ""
)

type H5WritingsuggestionsEnum string

const (
	H5WritingsuggestionsEnumFalse H5WritingsuggestionsEnum = "false"
	H5WritingsuggestionsEnumTrue  H5WritingsuggestionsEnum = "true"
	H5WritingsuggestionsEnumEmpty H5WritingsuggestionsEnum = ""
)

type h5Attrs map[string]any

func (e *H5Element) Autocapitalize(a H5AutocapitalizeEnum) *H5Element {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *H5Element) Autocorrect(a H5AutocorrectEnum) *H5Element {
	e.attributes["autocorrect"] = a

	return e
}

func (e *H5Element) Autofocus(b bool) *H5Element {
	e.attributes["autofocus"] = b

	return e
}

func (e *H5Element) Class(s ...string) *H5Element {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *H5Element) Contenteditable(a H5ContenteditableEnum) *H5Element {
	e.attributes["contenteditable"] = a

	return e
}

func (e *H5Element) DataUnsafe(name string, s string) *H5Element {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *H5Element) Data(name string, s string) *H5Element {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *H5Element) Dir(a H5DirEnum) *H5Element {
	e.attributes["dir"] = a

	return e
}

func (e *H5Element) Draggable(a H5DraggableEnum) *H5Element {
	e.attributes["draggable"] = a

	return e
}

func (e *H5Element) Enterkeyhint(a H5EnterkeyhintEnum) *H5Element {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *H5Element) Hidden(a H5HiddenEnum) *H5Element {
	e.attributes["hidden"] = a

	return e
}

func (e *H5Element) Id(s string) *H5Element {
	e.attributes["id"] = s

	return e
}

func (e *H5Element) Inert(b bool) *H5Element {
	e.attributes["inert"] = b

	return e
}

func (e *H5Element) Inputmode(a H5InputmodeEnum) *H5Element {
	e.attributes["inputmode"] = a

	return e
}

func (e *H5Element) Itemid(s string) *H5Element {
	e.attributes["itemid"] = s

	return e
}

func (e *H5Element) Itemprop(s ...string) *H5Element {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *H5Element) Itemref(s ...string) *H5Element {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *H5Element) Itemscope(b bool) *H5Element {
	e.attributes["itemscope"] = b

	return e
}

func (e *H5Element) Itemtype(s ...string) *H5Element {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *H5Element) Lang(s string) *H5Element {
	e.attributes["lang"] = s

	return e
}

func (e *H5Element) Nonce(s string) *H5Element {
	e.attributes["nonce"] = s

	return e
}

func (e *H5Element) Popover(s string) *H5Element {
	e.attributes["popover"] = s

	return e
}

func (e *H5Element) Slot(s string) *H5Element {
	e.attributes["slot"] = s

	return e
}

func (e *H5Element) Spellcheck(a H5SpellcheckEnum) *H5Element {
	e.attributes["spellcheck"] = a

	return e
}

func (e *H5Element) Style(s string) *H5Element {
	e.attributes["style"] = s

	return e
}

func (e *H5Element) Tabindex(i int) *H5Element {
	e.attributes["tabindex"] = i

	return e
}

func (e *H5Element) Title(s string) *H5Element {
	e.attributes["title"] = s

	return e
}

func (e *H5Element) Translate(a H5TranslateEnum) *H5Element {
	e.attributes["translate"] = a

	return e
}

func (e *H5Element) Writingsuggestions(a H5WritingsuggestionsEnum) *H5Element {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *H5Element) Render(w io.Writer) error {
	indent := strings.Repeat("  ", e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<h5")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}
	for _, child := range e.children {
		child.AddIndent(e.Indent())
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(indent + "</h5>\n")); err != nil {
		return err
	}

	return nil
}
