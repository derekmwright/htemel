// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type HeadElement struct {
	attributes headAttrs
	children []htemel.Node
	skipRender bool
}

// Head creates a tag <head> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The head element represents a collection of metadata for the Document.
func Head(children ...htemel.Node) *HeadElement {
	node := &HeadElement{
		children: children,
		attributes: make(headAttrs),
	}

	return node
}

func HeadIf(condition bool, children ...htemel.Node) *HeadElement {
	if condition {
		return Head(children...)
	}

	return &HeadElement{
		skipRender: true,
	}
}

type HeadAutocapitalizeEnum string

const (
	HeadAutocapitalizeEnumCharacters HeadAutocapitalizeEnum = "characters"
	HeadAutocapitalizeEnumNone HeadAutocapitalizeEnum = "none"
	HeadAutocapitalizeEnumOff HeadAutocapitalizeEnum = "off"
	HeadAutocapitalizeEnumOn HeadAutocapitalizeEnum = "on"
	HeadAutocapitalizeEnumSentences HeadAutocapitalizeEnum = "sentences"
	HeadAutocapitalizeEnumWords HeadAutocapitalizeEnum = "words"
)

type HeadAutocorrectEnum string

const (
	HeadAutocorrectEnumOff HeadAutocorrectEnum = "off"
	HeadAutocorrectEnumOn HeadAutocorrectEnum = "on"
)

type HeadContenteditableEnum string

const (
	HeadContenteditableEnumFalse HeadContenteditableEnum = "false"
	HeadContenteditableEnumPlaintextOnly HeadContenteditableEnum = "plaintext-only"
	HeadContenteditableEnumTrue HeadContenteditableEnum = "true"
)

type HeadDirEnum string

const (
	HeadDirEnumLtr HeadDirEnum = "ltr"
	HeadDirEnumRtl HeadDirEnum = "rtl"
	HeadDirEnumAuto HeadDirEnum = "auto"
)

type HeadDraggableEnum string

const (
	HeadDraggableEnumFalse HeadDraggableEnum = "false"
	HeadDraggableEnumTrue HeadDraggableEnum = "true"
)

type HeadEnterkeyhintEnum string

const (
	HeadEnterkeyhintEnumDone HeadEnterkeyhintEnum = "done"
	HeadEnterkeyhintEnumEnter HeadEnterkeyhintEnum = "enter"
	HeadEnterkeyhintEnumGo HeadEnterkeyhintEnum = "go"
	HeadEnterkeyhintEnumNext HeadEnterkeyhintEnum = "next"
	HeadEnterkeyhintEnumPrevious HeadEnterkeyhintEnum = "previous"
	HeadEnterkeyhintEnumSearch HeadEnterkeyhintEnum = "search"
	HeadEnterkeyhintEnumSend HeadEnterkeyhintEnum = "send"
)

type HeadHiddenEnum string

const (
	HeadHiddenEnumHidden HeadHiddenEnum = "hidden"
	HeadHiddenEnumUntilFound HeadHiddenEnum = "until-found"
)

type headAttrs map[string]any

func (e *HeadElement) Autocapitalize(a HeadAutocapitalizeEnum) *HeadElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *HeadElement) Autocorrect(a HeadAutocorrectEnum) *HeadElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *HeadElement) Autofocus(b bool) *HeadElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *HeadElement) Class(s ...string) *HeadElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *HeadElement) Contenteditable(a HeadContenteditableEnum) *HeadElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *HeadElement) Dir(a HeadDirEnum) *HeadElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *HeadElement) Draggable(a HeadDraggableEnum) *HeadElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *HeadElement) Enterkeyhint(a HeadEnterkeyhintEnum) *HeadElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *HeadElement) Hidden(a HeadHiddenEnum) *HeadElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *HeadElement) Id(s string) *HeadElement {
	e.attributes["id"] = s
	
	return e
}

func (e *HeadElement) Slot(s string) *HeadElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *HeadElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<head")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</head>")); err != nil {
		return err
	}

	return nil
}
