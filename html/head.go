// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type HeadElement struct {
	attributes headAttrs
	children   []htemel.Node
	skipRender bool
}

// Head creates a tag <head> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The head element represents a collection of metadata for the Document.
func Head(children ...htemel.Node) *HeadElement {
	node := &HeadElement{
		children:   children,
		attributes: make(headAttrs),
	}

	return node
}

func HeadIf(condition bool, children ...htemel.Node) *HeadElement {
	if condition {
		return Head(children...)
	}

	return &HeadElement{
		skipRender: true,
	}
}

type HeadAutocapitalizeAttrEnum string

const (
	HeadAutocapitalizeAttrEnumOn         HeadAutocapitalizeAttrEnum = "on"
	HeadAutocapitalizeAttrEnumSentences  HeadAutocapitalizeAttrEnum = "sentences"
	HeadAutocapitalizeAttrEnumWords      HeadAutocapitalizeAttrEnum = "words"
	HeadAutocapitalizeAttrEnumCharacters HeadAutocapitalizeAttrEnum = "characters"
	HeadAutocapitalizeAttrEnumNone       HeadAutocapitalizeAttrEnum = "none"
	HeadAutocapitalizeAttrEnumOff        HeadAutocapitalizeAttrEnum = "off"
)

type HeadAutocorrectAttrEnum string

const (
	HeadAutocorrectAttrEnumOff HeadAutocorrectAttrEnum = "off"
	HeadAutocorrectAttrEnumOn  HeadAutocorrectAttrEnum = "on"
)

type HeadContenteditableAttrEnum string

const (
	HeadContenteditableAttrEnumPlaintextOnly HeadContenteditableAttrEnum = "plaintext-only"
	HeadContenteditableAttrEnumTrue          HeadContenteditableAttrEnum = "true"
	HeadContenteditableAttrEnumFalse         HeadContenteditableAttrEnum = "false"
)

type headAttrs map[string]any

func (e *HeadElement) Autocapitalize(a HeadAutocapitalizeAttrEnum) *HeadElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *HeadElement) Autocorrect(a HeadAutocorrectAttrEnum) *HeadElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *HeadElement) Autofocus(b bool) *HeadElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *HeadElement) Class(s ...string) *HeadElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *HeadElement) Contenteditable(a HeadContenteditableAttrEnum) *HeadElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *HeadElement) Id(s string) *HeadElement {
	e.attributes["id"] = s

	return e
}

func (e *HeadElement) Slot(s string) *HeadElement {
	e.attributes["slot"] = s

	return e
}

func (e *HeadElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<head")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</head>")); err != nil {
		return err
	}

	return nil
}
