// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type ButtonElement struct {
	attributes buttonAttrs
	children   []htemel.Node
	skipRender bool
}

// Button creates a tag <button> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The button element represents a button labeled by its contents.
func Button(children ...htemel.Node) *ButtonElement {
	node := &ButtonElement{
		children:   children,
		attributes: make(buttonAttrs),
	}

	return node
}

func ButtonIf(condition bool, children ...htemel.Node) *ButtonElement {
	if condition {
		return Button(children...)
	}

	return &ButtonElement{
		skipRender: true,
	}
}

type ButtonAutocapitalizeAttrEnum string

const (
	ButtonAutocapitalizeAttrEnumSentences  ButtonAutocapitalizeAttrEnum = "sentences"
	ButtonAutocapitalizeAttrEnumWords      ButtonAutocapitalizeAttrEnum = "words"
	ButtonAutocapitalizeAttrEnumCharacters ButtonAutocapitalizeAttrEnum = "characters"
	ButtonAutocapitalizeAttrEnumNone       ButtonAutocapitalizeAttrEnum = "none"
	ButtonAutocapitalizeAttrEnumOff        ButtonAutocapitalizeAttrEnum = "off"
	ButtonAutocapitalizeAttrEnumOn         ButtonAutocapitalizeAttrEnum = "on"
)

type ButtonAutocorrectAttrEnum string

const (
	ButtonAutocorrectAttrEnumOff ButtonAutocorrectAttrEnum = "off"
	ButtonAutocorrectAttrEnumOn  ButtonAutocorrectAttrEnum = "on"
)

type ButtonContenteditableAttrEnum string

const (
	ButtonContenteditableAttrEnumFalse         ButtonContenteditableAttrEnum = "false"
	ButtonContenteditableAttrEnumPlaintextOnly ButtonContenteditableAttrEnum = "plaintext-only"
	ButtonContenteditableAttrEnumTrue          ButtonContenteditableAttrEnum = "true"
)

type buttonAttrs map[string]any

func (e *ButtonElement) Autocapitalize(a ButtonAutocapitalizeAttrEnum) *ButtonElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *ButtonElement) Autocorrect(a ButtonAutocorrectAttrEnum) *ButtonElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *ButtonElement) Autofocus(b bool) *ButtonElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *ButtonElement) Class(s ...string) *ButtonElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *ButtonElement) Contenteditable(a ButtonContenteditableAttrEnum) *ButtonElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *ButtonElement) Id(s string) *ButtonElement {
	e.attributes["id"] = s

	return e
}

func (e *ButtonElement) Slot(s string) *ButtonElement {
	e.attributes["slot"] = s

	return e
}

func (e *ButtonElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<button")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</button>")); err != nil {
		return err
	}

	return nil
}
