// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type ButtonElement struct {
	attributes buttonAttrs
	children []htemel.Node
	skipRender bool
}

// Button creates a tag <button> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The button element represents a button labeled by its contents.
func Button(children ...htemel.Node) *ButtonElement {
	node := &ButtonElement{
		children: children,
		attributes: make(buttonAttrs),
	}

	return node
}

func ButtonIf(condition bool, children ...htemel.Node) *ButtonElement {
	if condition {
		return Button(children...)
	}

	return &ButtonElement{
		skipRender: true,
	}
}

type ButtonAutocapitalizeEnum string

const (
	ButtonAutocapitalizeEnumCharacters ButtonAutocapitalizeEnum = "characters"
	ButtonAutocapitalizeEnumNone ButtonAutocapitalizeEnum = "none"
	ButtonAutocapitalizeEnumOff ButtonAutocapitalizeEnum = "off"
	ButtonAutocapitalizeEnumOn ButtonAutocapitalizeEnum = "on"
	ButtonAutocapitalizeEnumSentences ButtonAutocapitalizeEnum = "sentences"
	ButtonAutocapitalizeEnumWords ButtonAutocapitalizeEnum = "words"
)

type ButtonAutocorrectEnum string

const (
	ButtonAutocorrectEnumOn ButtonAutocorrectEnum = "on"
	ButtonAutocorrectEnumOff ButtonAutocorrectEnum = "off"
)

type ButtonContenteditableEnum string

const (
	ButtonContenteditableEnumFalse ButtonContenteditableEnum = "false"
	ButtonContenteditableEnumPlaintextOnly ButtonContenteditableEnum = "plaintext-only"
	ButtonContenteditableEnumTrue ButtonContenteditableEnum = "true"
)

type ButtonDirEnum string

const (
	ButtonDirEnumAuto ButtonDirEnum = "auto"
	ButtonDirEnumLtr ButtonDirEnum = "ltr"
	ButtonDirEnumRtl ButtonDirEnum = "rtl"
)

type ButtonDraggableEnum string

const (
	ButtonDraggableEnumFalse ButtonDraggableEnum = "false"
	ButtonDraggableEnumTrue ButtonDraggableEnum = "true"
)

type ButtonEnterkeyhintEnum string

const (
	ButtonEnterkeyhintEnumDone ButtonEnterkeyhintEnum = "done"
	ButtonEnterkeyhintEnumEnter ButtonEnterkeyhintEnum = "enter"
	ButtonEnterkeyhintEnumGo ButtonEnterkeyhintEnum = "go"
	ButtonEnterkeyhintEnumNext ButtonEnterkeyhintEnum = "next"
	ButtonEnterkeyhintEnumPrevious ButtonEnterkeyhintEnum = "previous"
	ButtonEnterkeyhintEnumSearch ButtonEnterkeyhintEnum = "search"
	ButtonEnterkeyhintEnumSend ButtonEnterkeyhintEnum = "send"
)

type ButtonHiddenEnum string

const (
	ButtonHiddenEnumHidden ButtonHiddenEnum = "hidden"
	ButtonHiddenEnumUntilFound ButtonHiddenEnum = "until-found"
)

type buttonAttrs map[string]any

func (e *ButtonElement) Autocapitalize(a ButtonAutocapitalizeEnum) *ButtonElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *ButtonElement) Autocorrect(a ButtonAutocorrectEnum) *ButtonElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *ButtonElement) Autofocus(b bool) *ButtonElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *ButtonElement) Class(s ...string) *ButtonElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *ButtonElement) Contenteditable(a ButtonContenteditableEnum) *ButtonElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *ButtonElement) Dir(a ButtonDirEnum) *ButtonElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *ButtonElement) Draggable(a ButtonDraggableEnum) *ButtonElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *ButtonElement) Enterkeyhint(a ButtonEnterkeyhintEnum) *ButtonElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *ButtonElement) Hidden(a ButtonHiddenEnum) *ButtonElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *ButtonElement) Id(s string) *ButtonElement {
	e.attributes["id"] = s
	
	return e
}

func (e *ButtonElement) Slot(s string) *ButtonElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *ButtonElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<button")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</button>")); err != nil {
		return err
	}

	return nil
}
