// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type MapElement struct {
	attributes mapAttrs
	children []htemel.Node
	skipRender bool
}

// Map creates a tag <map> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The map element, in conjunction with an img element and any area element descendants, defines an image map. The element represents its children.
func Map(children ...htemel.Node) *MapElement {
	node := &MapElement{
		children: children,
		attributes: make(mapAttrs),
	}

	return node
}

func MapIf(condition bool, children ...htemel.Node) *MapElement {
	if condition {
		return Map(children...)
	}

	return &MapElement{
		skipRender: true,
	}
}

type MapAutocapitalizeEnum string

const (
	MapAutocapitalizeEnumWords MapAutocapitalizeEnum = "words"
	MapAutocapitalizeEnumCharacters MapAutocapitalizeEnum = "characters"
	MapAutocapitalizeEnumNone MapAutocapitalizeEnum = "none"
	MapAutocapitalizeEnumOff MapAutocapitalizeEnum = "off"
	MapAutocapitalizeEnumOn MapAutocapitalizeEnum = "on"
	MapAutocapitalizeEnumSentences MapAutocapitalizeEnum = "sentences"
)

type MapAutocorrectEnum string

const (
	MapAutocorrectEnumOff MapAutocorrectEnum = "off"
	MapAutocorrectEnumOn MapAutocorrectEnum = "on"
)

type MapContenteditableEnum string

const (
	MapContenteditableEnumFalse MapContenteditableEnum = "false"
	MapContenteditableEnumPlaintextOnly MapContenteditableEnum = "plaintext-only"
	MapContenteditableEnumTrue MapContenteditableEnum = "true"
)

type MapDirEnum string

const (
	MapDirEnumAuto MapDirEnum = "auto"
	MapDirEnumLtr MapDirEnum = "ltr"
	MapDirEnumRtl MapDirEnum = "rtl"
)

type MapDraggableEnum string

const (
	MapDraggableEnumFalse MapDraggableEnum = "false"
	MapDraggableEnumTrue MapDraggableEnum = "true"
)

type MapEnterkeyhintEnum string

const (
	MapEnterkeyhintEnumGo MapEnterkeyhintEnum = "go"
	MapEnterkeyhintEnumNext MapEnterkeyhintEnum = "next"
	MapEnterkeyhintEnumPrevious MapEnterkeyhintEnum = "previous"
	MapEnterkeyhintEnumSearch MapEnterkeyhintEnum = "search"
	MapEnterkeyhintEnumSend MapEnterkeyhintEnum = "send"
	MapEnterkeyhintEnumDone MapEnterkeyhintEnum = "done"
	MapEnterkeyhintEnumEnter MapEnterkeyhintEnum = "enter"
)

type MapHiddenEnum string

const (
	MapHiddenEnumHidden MapHiddenEnum = "hidden"
	MapHiddenEnumUntilFound MapHiddenEnum = "until-found"
)

type mapAttrs map[string]any

func (e *MapElement) Autocapitalize(a MapAutocapitalizeEnum) *MapElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *MapElement) Autocorrect(a MapAutocorrectEnum) *MapElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *MapElement) Autofocus(b bool) *MapElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *MapElement) Class(s ...string) *MapElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *MapElement) Contenteditable(a MapContenteditableEnum) *MapElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *MapElement) Dir(a MapDirEnum) *MapElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *MapElement) Draggable(a MapDraggableEnum) *MapElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *MapElement) Enterkeyhint(a MapEnterkeyhintEnum) *MapElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *MapElement) Hidden(a MapHiddenEnum) *MapElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *MapElement) Id(s string) *MapElement {
	e.attributes["id"] = s
	
	return e
}

func (e *MapElement) Slot(s string) *MapElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *MapElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<map")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</map>")); err != nil {
		return err
	}

	return nil
}
