// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type MapElement struct {
	attributes mapAttrs
	children   []htemel.Node
	skipRender bool
}

// Map creates a tag <map> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The map element, in conjunction with an img element and any area element descendants, defines an image map. The element represents its children.
func Map(children ...htemel.Node) *MapElement {
	node := &MapElement{
		children:   children,
		attributes: make(mapAttrs),
	}

	return node
}

func MapIf(condition bool, children ...htemel.Node) *MapElement {
	if condition {
		return Map(children...)
	}

	return &MapElement{
		skipRender: true,
	}
}

type MapAutocapitalizeAttrEnum string

const (
	MapAutocapitalizeAttrEnumCharacters MapAutocapitalizeAttrEnum = "characters"
	MapAutocapitalizeAttrEnumNone       MapAutocapitalizeAttrEnum = "none"
	MapAutocapitalizeAttrEnumOff        MapAutocapitalizeAttrEnum = "off"
	MapAutocapitalizeAttrEnumOn         MapAutocapitalizeAttrEnum = "on"
	MapAutocapitalizeAttrEnumSentences  MapAutocapitalizeAttrEnum = "sentences"
	MapAutocapitalizeAttrEnumWords      MapAutocapitalizeAttrEnum = "words"
)

type MapAutocorrectAttrEnum string

const (
	MapAutocorrectAttrEnumOn  MapAutocorrectAttrEnum = "on"
	MapAutocorrectAttrEnumOff MapAutocorrectAttrEnum = "off"
)

type MapContenteditableAttrEnum string

const (
	MapContenteditableAttrEnumTrue          MapContenteditableAttrEnum = "true"
	MapContenteditableAttrEnumFalse         MapContenteditableAttrEnum = "false"
	MapContenteditableAttrEnumPlaintextOnly MapContenteditableAttrEnum = "plaintext-only"
)

type mapAttrs map[string]any

func (e *MapElement) Autocapitalize(a MapAutocapitalizeAttrEnum) *MapElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *MapElement) Autocorrect(a MapAutocorrectAttrEnum) *MapElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *MapElement) Autofocus(b bool) *MapElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *MapElement) Class(s ...string) *MapElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *MapElement) Contenteditable(a MapContenteditableAttrEnum) *MapElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *MapElement) Id(s string) *MapElement {
	e.attributes["id"] = s

	return e
}

func (e *MapElement) Slot(s string) *MapElement {
	e.attributes["slot"] = s

	return e
}

func (e *MapElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<map")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</map>")); err != nil {
		return err
	}

	return nil
}
