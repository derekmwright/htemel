// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type MapElement struct {
	attributes mapAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// Map creates a tag <map> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The map element, in conjunction with an img element and any area element descendants, defines an image map. The element represents its children.
func Map(children ...htemel.Node) *MapElement {
	node := &MapElement{
		children: children, attributes: make(mapAttrs),
	}

	return node
}

func MapIf(condition bool, children ...htemel.Node) *MapElement {
	if condition {
		return Map(children...)
	}

	return &MapElement{
		skipRender: true,
	}
}

func MapTernary(condition bool, true htemel.Node, false htemel.Node) *MapElement {
	if condition {
		return Map(true)
	}

	return Map(false)
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *MapElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *MapElement) AddIndent(i int) {
	e.indent = i + 1
}

type MapAutocapitalizeEnum string

const (
	MapAutocapitalizeEnumCharacters MapAutocapitalizeEnum = "characters"
	MapAutocapitalizeEnumNone       MapAutocapitalizeEnum = "none"
	MapAutocapitalizeEnumOff        MapAutocapitalizeEnum = "off"
	MapAutocapitalizeEnumOn         MapAutocapitalizeEnum = "on"
	MapAutocapitalizeEnumSentences  MapAutocapitalizeEnum = "sentences"
	MapAutocapitalizeEnumWords      MapAutocapitalizeEnum = "words"
)

type MapAutocorrectEnum string

const (
	MapAutocorrectEnumOff   MapAutocorrectEnum = "off"
	MapAutocorrectEnumOn    MapAutocorrectEnum = "on"
	MapAutocorrectEnumEmpty MapAutocorrectEnum = ""
)

type MapContenteditableEnum string

const (
	MapContenteditableEnumFalse         MapContenteditableEnum = "false"
	MapContenteditableEnumPlaintextOnly MapContenteditableEnum = "plaintext-only"
	MapContenteditableEnumTrue          MapContenteditableEnum = "true"
	MapContenteditableEnumEmpty         MapContenteditableEnum = ""
)

type MapDirEnum string

const (
	MapDirEnumAuto MapDirEnum = "auto"
	MapDirEnumLtr  MapDirEnum = "ltr"
	MapDirEnumRtl  MapDirEnum = "rtl"
)

type MapDraggableEnum string

const (
	MapDraggableEnumFalse MapDraggableEnum = "false"
	MapDraggableEnumTrue  MapDraggableEnum = "true"
)

type MapEnterkeyhintEnum string

const (
	MapEnterkeyhintEnumSend     MapEnterkeyhintEnum = "send"
	MapEnterkeyhintEnumDone     MapEnterkeyhintEnum = "done"
	MapEnterkeyhintEnumEnter    MapEnterkeyhintEnum = "enter"
	MapEnterkeyhintEnumGo       MapEnterkeyhintEnum = "go"
	MapEnterkeyhintEnumNext     MapEnterkeyhintEnum = "next"
	MapEnterkeyhintEnumPrevious MapEnterkeyhintEnum = "previous"
	MapEnterkeyhintEnumSearch   MapEnterkeyhintEnum = "search"
)

type MapHiddenEnum string

const (
	MapHiddenEnumHidden     MapHiddenEnum = "hidden"
	MapHiddenEnumUntilFound MapHiddenEnum = "until-found"
	MapHiddenEnumEmpty      MapHiddenEnum = ""
)

type MapInputmodeEnum string

const (
	MapInputmodeEnumNumeric MapInputmodeEnum = "numeric"
	MapInputmodeEnumSearch  MapInputmodeEnum = "search"
	MapInputmodeEnumTel     MapInputmodeEnum = "tel"
	MapInputmodeEnumText    MapInputmodeEnum = "text"
	MapInputmodeEnumUrl     MapInputmodeEnum = "url"
	MapInputmodeEnumDecimal MapInputmodeEnum = "decimal"
	MapInputmodeEnumEmail   MapInputmodeEnum = "email"
	MapInputmodeEnumNone    MapInputmodeEnum = "none"
)

type MapSpellcheckEnum string

const (
	MapSpellcheckEnumTrue  MapSpellcheckEnum = "true"
	MapSpellcheckEnumFalse MapSpellcheckEnum = "false"
	MapSpellcheckEnumEmpty MapSpellcheckEnum = ""
)

type MapTranslateEnum string

const (
	MapTranslateEnumNo    MapTranslateEnum = "no"
	MapTranslateEnumYes   MapTranslateEnum = "yes"
	MapTranslateEnumEmpty MapTranslateEnum = ""
)

type MapWritingsuggestionsEnum string

const (
	MapWritingsuggestionsEnumFalse MapWritingsuggestionsEnum = "false"
	MapWritingsuggestionsEnumTrue  MapWritingsuggestionsEnum = "true"
	MapWritingsuggestionsEnumEmpty MapWritingsuggestionsEnum = ""
)

type mapAttrs map[string]any

func (e *MapElement) Name(s string) *MapElement {
	e.attributes["name"] = s

	return e
}

func (e *MapElement) Autocapitalize(a MapAutocapitalizeEnum) *MapElement {
	e.attributes["autocapitalize"] = a

	return e
}

func MapAutocapitalizeCustom(s string) MapAutocapitalizeEnum {
	return MapAutocapitalizeEnum(s)
}

func (e *MapElement) Autocorrect(a MapAutocorrectEnum) *MapElement {
	e.attributes["autocorrect"] = a

	return e
}

func MapAutocorrectCustom(s string) MapAutocorrectEnum {
	return MapAutocorrectEnum(s)
}

func (e *MapElement) Autofocus(b bool) *MapElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *MapElement) Class(s ...string) *MapElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *MapElement) Contenteditable(a MapContenteditableEnum) *MapElement {
	e.attributes["contenteditable"] = a

	return e
}

func MapContenteditableCustom(s string) MapContenteditableEnum {
	return MapContenteditableEnum(s)
}

func (e *MapElement) DataUnsafe(name string, s string) *MapElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *MapElement) Data(name string, s string) *MapElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *MapElement) Dir(a MapDirEnum) *MapElement {
	e.attributes["dir"] = a

	return e
}

func MapDirCustom(s string) MapDirEnum {
	return MapDirEnum(s)
}

func (e *MapElement) Draggable(a MapDraggableEnum) *MapElement {
	e.attributes["draggable"] = a

	return e
}

func MapDraggableCustom(s string) MapDraggableEnum {
	return MapDraggableEnum(s)
}

func (e *MapElement) Enterkeyhint(a MapEnterkeyhintEnum) *MapElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func MapEnterkeyhintCustom(s string) MapEnterkeyhintEnum {
	return MapEnterkeyhintEnum(s)
}

func (e *MapElement) Hidden(a MapHiddenEnum) *MapElement {
	e.attributes["hidden"] = a

	return e
}

func MapHiddenCustom(s string) MapHiddenEnum {
	return MapHiddenEnum(s)
}

func (e *MapElement) Id(s string) *MapElement {
	e.attributes["id"] = s

	return e
}

func (e *MapElement) Inert(b bool) *MapElement {
	e.attributes["inert"] = b

	return e
}

func (e *MapElement) Inputmode(a MapInputmodeEnum) *MapElement {
	e.attributes["inputmode"] = a

	return e
}

func MapInputmodeCustom(s string) MapInputmodeEnum {
	return MapInputmodeEnum(s)
}

func (e *MapElement) Itemid(s string) *MapElement {
	e.attributes["itemid"] = s

	return e
}

func (e *MapElement) Itemprop(s ...string) *MapElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *MapElement) Itemref(s ...string) *MapElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *MapElement) Itemscope(b bool) *MapElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *MapElement) Itemtype(s ...string) *MapElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *MapElement) Lang(s string) *MapElement {
	e.attributes["lang"] = s

	return e
}

func (e *MapElement) Nonce(s string) *MapElement {
	e.attributes["nonce"] = s

	return e
}

func (e *MapElement) Popover(s string) *MapElement {
	e.attributes["popover"] = s

	return e
}

func (e *MapElement) Slot(s string) *MapElement {
	e.attributes["slot"] = s

	return e
}

func (e *MapElement) Spellcheck(a MapSpellcheckEnum) *MapElement {
	e.attributes["spellcheck"] = a

	return e
}

func MapSpellcheckCustom(s string) MapSpellcheckEnum {
	return MapSpellcheckEnum(s)
}

func (e *MapElement) Style(s string) *MapElement {
	e.attributes["style"] = s

	return e
}

func (e *MapElement) Tabindex(i int) *MapElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *MapElement) Title(s string) *MapElement {
	e.attributes["title"] = s

	return e
}

func (e *MapElement) Translate(a MapTranslateEnum) *MapElement {
	e.attributes["translate"] = a

	return e
}

func MapTranslateCustom(s string) MapTranslateEnum {
	return MapTranslateEnum(s)
}

func (e *MapElement) Writingsuggestions(a MapWritingsuggestionsEnum) *MapElement {
	e.attributes["writingsuggestions"] = a

	return e
}

func MapWritingsuggestionsCustom(s string) MapWritingsuggestionsEnum {
	return MapWritingsuggestionsEnum(s)
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *MapElement) Render(w io.Writer) error {
	indent := htemel.SetIndent(e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<map")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}
	for _, child := range e.children {
		child.AddIndent(e.Indent())
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(indent + "</map>\n")); err != nil {
		return err
	}

	return nil
}
