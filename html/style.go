// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type StyleElement struct {
	attributes styleAttrs
	children []htemel.Node
	skipRender bool
}

// Style creates a tag <style> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The style element allows authors to embed CSS style sheets in their documents. The style element is one of several inputs to the styling processing model. The element does not represent content for the user.
func Style(children ...htemel.Node) *StyleElement {
	node := &StyleElement{
		children: children,
		attributes: make(styleAttrs),
	}

	return node
}

func StyleIf(condition bool, children ...htemel.Node) *StyleElement {
	if condition {
		return Style(children...)
	}

	return &StyleElement{
		skipRender: true,
	}
}

type StyleAutocapitalizeEnum string

const (
	StyleAutocapitalizeEnumOn StyleAutocapitalizeEnum = "on"
	StyleAutocapitalizeEnumSentences StyleAutocapitalizeEnum = "sentences"
	StyleAutocapitalizeEnumWords StyleAutocapitalizeEnum = "words"
	StyleAutocapitalizeEnumCharacters StyleAutocapitalizeEnum = "characters"
	StyleAutocapitalizeEnumNone StyleAutocapitalizeEnum = "none"
	StyleAutocapitalizeEnumOff StyleAutocapitalizeEnum = "off"
)

type StyleAutocorrectEnum string

const (
	StyleAutocorrectEnumOff StyleAutocorrectEnum = "off"
	StyleAutocorrectEnumOn StyleAutocorrectEnum = "on"
)

type StyleContenteditableEnum string

const (
	StyleContenteditableEnumFalse StyleContenteditableEnum = "false"
	StyleContenteditableEnumPlaintextOnly StyleContenteditableEnum = "plaintext-only"
	StyleContenteditableEnumTrue StyleContenteditableEnum = "true"
)

type StyleDirEnum string

const (
	StyleDirEnumAuto StyleDirEnum = "auto"
	StyleDirEnumLtr StyleDirEnum = "ltr"
	StyleDirEnumRtl StyleDirEnum = "rtl"
)

type StyleDraggableEnum string

const (
	StyleDraggableEnumFalse StyleDraggableEnum = "false"
	StyleDraggableEnumTrue StyleDraggableEnum = "true"
)

type StyleEnterkeyhintEnum string

const (
	StyleEnterkeyhintEnumSend StyleEnterkeyhintEnum = "send"
	StyleEnterkeyhintEnumDone StyleEnterkeyhintEnum = "done"
	StyleEnterkeyhintEnumEnter StyleEnterkeyhintEnum = "enter"
	StyleEnterkeyhintEnumGo StyleEnterkeyhintEnum = "go"
	StyleEnterkeyhintEnumNext StyleEnterkeyhintEnum = "next"
	StyleEnterkeyhintEnumPrevious StyleEnterkeyhintEnum = "previous"
	StyleEnterkeyhintEnumSearch StyleEnterkeyhintEnum = "search"
)

type StyleHiddenEnum string

const (
	StyleHiddenEnumHidden StyleHiddenEnum = "hidden"
	StyleHiddenEnumUntilFound StyleHiddenEnum = "until-found"
)

type styleAttrs map[string]any

func (e *StyleElement) Autocapitalize(a StyleAutocapitalizeEnum) *StyleElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *StyleElement) Autocorrect(a StyleAutocorrectEnum) *StyleElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *StyleElement) Autofocus(b bool) *StyleElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *StyleElement) Class(s ...string) *StyleElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *StyleElement) Contenteditable(a StyleContenteditableEnum) *StyleElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *StyleElement) Dir(a StyleDirEnum) *StyleElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *StyleElement) Draggable(a StyleDraggableEnum) *StyleElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *StyleElement) Enterkeyhint(a StyleEnterkeyhintEnum) *StyleElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *StyleElement) Hidden(a StyleHiddenEnum) *StyleElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *StyleElement) Id(s string) *StyleElement {
	e.attributes["id"] = s
	
	return e
}

func (e *StyleElement) Slot(s string) *StyleElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *StyleElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<style")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</style>")); err != nil {
		return err
	}

	return nil
}
