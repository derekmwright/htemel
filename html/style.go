// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type StyleElement struct {
	attributes styleAttrs
	children   []htemel.Node
	skipRender bool
}

// Style creates a tag <style> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The style element allows authors to embed CSS style sheets in their documents. The style element is one of several inputs to the styling processing model. The element does not represent content for the user.
func Style(children ...htemel.Node) *StyleElement {
	node := &StyleElement{
		children: children, attributes: make(styleAttrs),
	}

	return node
}

func StyleIf(condition bool, children ...htemel.Node) *StyleElement {
	if condition {
		return Style(children...)
	}

	return &StyleElement{
		skipRender: true,
	}
}

func StyleTernary(condition bool, true htemel.Node, false htemel.Node) *StyleElement {
	if condition {
		return Style(true)
	}

	return Style(false)
}

type StyleAutocapitalizeEnum string

const (
	StyleAutocapitalizeEnumOff        StyleAutocapitalizeEnum = "off"
	StyleAutocapitalizeEnumOn         StyleAutocapitalizeEnum = "on"
	StyleAutocapitalizeEnumSentences  StyleAutocapitalizeEnum = "sentences"
	StyleAutocapitalizeEnumWords      StyleAutocapitalizeEnum = "words"
	StyleAutocapitalizeEnumCharacters StyleAutocapitalizeEnum = "characters"
	StyleAutocapitalizeEnumNone       StyleAutocapitalizeEnum = "none"
)

type StyleAutocorrectEnum string

const (
	StyleAutocorrectEnumOff   StyleAutocorrectEnum = "off"
	StyleAutocorrectEnumOn    StyleAutocorrectEnum = "on"
	StyleAutocorrectEnumEmpty StyleAutocorrectEnum = ""
)

type StyleContenteditableEnum string

const (
	StyleContenteditableEnumFalse         StyleContenteditableEnum = "false"
	StyleContenteditableEnumPlaintextOnly StyleContenteditableEnum = "plaintext-only"
	StyleContenteditableEnumTrue          StyleContenteditableEnum = "true"
	StyleContenteditableEnumEmpty         StyleContenteditableEnum = ""
)

type StyleDirEnum string

const (
	StyleDirEnumRtl  StyleDirEnum = "rtl"
	StyleDirEnumAuto StyleDirEnum = "auto"
	StyleDirEnumLtr  StyleDirEnum = "ltr"
)

type StyleDraggableEnum string

const (
	StyleDraggableEnumFalse StyleDraggableEnum = "false"
	StyleDraggableEnumTrue  StyleDraggableEnum = "true"
)

type StyleEnterkeyhintEnum string

const (
	StyleEnterkeyhintEnumPrevious StyleEnterkeyhintEnum = "previous"
	StyleEnterkeyhintEnumSearch   StyleEnterkeyhintEnum = "search"
	StyleEnterkeyhintEnumSend     StyleEnterkeyhintEnum = "send"
	StyleEnterkeyhintEnumDone     StyleEnterkeyhintEnum = "done"
	StyleEnterkeyhintEnumEnter    StyleEnterkeyhintEnum = "enter"
	StyleEnterkeyhintEnumGo       StyleEnterkeyhintEnum = "go"
	StyleEnterkeyhintEnumNext     StyleEnterkeyhintEnum = "next"
)

type StyleHiddenEnum string

const (
	StyleHiddenEnumHidden     StyleHiddenEnum = "hidden"
	StyleHiddenEnumUntilFound StyleHiddenEnum = "until-found"
	StyleHiddenEnumEmpty      StyleHiddenEnum = ""
)

type StyleInputmodeEnum string

const (
	StyleInputmodeEnumTel     StyleInputmodeEnum = "tel"
	StyleInputmodeEnumText    StyleInputmodeEnum = "text"
	StyleInputmodeEnumUrl     StyleInputmodeEnum = "url"
	StyleInputmodeEnumDecimal StyleInputmodeEnum = "decimal"
	StyleInputmodeEnumEmail   StyleInputmodeEnum = "email"
	StyleInputmodeEnumNone    StyleInputmodeEnum = "none"
	StyleInputmodeEnumNumeric StyleInputmodeEnum = "numeric"
	StyleInputmodeEnumSearch  StyleInputmodeEnum = "search"
)

type StyleSpellcheckEnum string

const (
	StyleSpellcheckEnumTrue  StyleSpellcheckEnum = "true"
	StyleSpellcheckEnumFalse StyleSpellcheckEnum = "false"
	StyleSpellcheckEnumEmpty StyleSpellcheckEnum = ""
)

type StyleTranslateEnum string

const (
	StyleTranslateEnumNo    StyleTranslateEnum = "no"
	StyleTranslateEnumYes   StyleTranslateEnum = "yes"
	StyleTranslateEnumEmpty StyleTranslateEnum = ""
)

type StyleWritingsuggestionsEnum string

const (
	StyleWritingsuggestionsEnumTrue  StyleWritingsuggestionsEnum = "true"
	StyleWritingsuggestionsEnumFalse StyleWritingsuggestionsEnum = "false"
	StyleWritingsuggestionsEnumEmpty StyleWritingsuggestionsEnum = ""
)

type styleAttrs map[string]any

func (e *StyleElement) Media(s string) *StyleElement {
	e.attributes["media"] = s

	return e
}

func (e *StyleElement) Blocking(s string) *StyleElement {
	e.attributes["blocking"] = s

	return e
}

func (e *StyleElement) Autocapitalize(a StyleAutocapitalizeEnum) *StyleElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *StyleElement) Autocorrect(a StyleAutocorrectEnum) *StyleElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *StyleElement) Autofocus(b bool) *StyleElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *StyleElement) Class(s ...string) *StyleElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *StyleElement) Contenteditable(a StyleContenteditableEnum) *StyleElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *StyleElement) DataUnsafe(name string, s string) *StyleElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *StyleElement) Data(name string, s string) *StyleElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *StyleElement) Dir(a StyleDirEnum) *StyleElement {
	e.attributes["dir"] = a

	return e
}

func (e *StyleElement) Draggable(a StyleDraggableEnum) *StyleElement {
	e.attributes["draggable"] = a

	return e
}

func (e *StyleElement) Enterkeyhint(a StyleEnterkeyhintEnum) *StyleElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *StyleElement) Hidden(a StyleHiddenEnum) *StyleElement {
	e.attributes["hidden"] = a

	return e
}

func (e *StyleElement) Id(s string) *StyleElement {
	e.attributes["id"] = s

	return e
}

func (e *StyleElement) Inert(b bool) *StyleElement {
	e.attributes["inert"] = b

	return e
}

func (e *StyleElement) Inputmode(a StyleInputmodeEnum) *StyleElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *StyleElement) Itemid(s string) *StyleElement {
	e.attributes["itemid"] = s

	return e
}

func (e *StyleElement) Itemprop(s ...string) *StyleElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *StyleElement) Itemref(s ...string) *StyleElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *StyleElement) Itemscope(b bool) *StyleElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *StyleElement) Itemtype(s ...string) *StyleElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *StyleElement) Lang(s string) *StyleElement {
	e.attributes["lang"] = s

	return e
}

func (e *StyleElement) Nonce(s string) *StyleElement {
	e.attributes["nonce"] = s

	return e
}

func (e *StyleElement) Popover(s string) *StyleElement {
	e.attributes["popover"] = s

	return e
}

func (e *StyleElement) Slot(s string) *StyleElement {
	e.attributes["slot"] = s

	return e
}

func (e *StyleElement) Spellcheck(a StyleSpellcheckEnum) *StyleElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *StyleElement) Style(s string) *StyleElement {
	e.attributes["style"] = s

	return e
}

func (e *StyleElement) Tabindex(i int) *StyleElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *StyleElement) Title(s string) *StyleElement {
	e.attributes["title"] = s

	return e
}

func (e *StyleElement) Translate(a StyleTranslateEnum) *StyleElement {
	e.attributes["translate"] = a

	return e
}

func (e *StyleElement) Writingsuggestions(a StyleWritingsuggestionsEnum) *StyleElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *StyleElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<style")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}
	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</style>")); err != nil {
		return err
	}

	return nil
}
