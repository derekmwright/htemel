// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
)

type StyleElement struct {
	attributes styleAttrs
	children []htemel.Node
	skipRender bool
}

// Style creates a tag <style> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The style element allows authors to embed CSS style sheets in their documents. The style element is one of several inputs to the styling processing model. The element does not represent content for the user.
func Style(children ...htemel.Node) *StyleElement {
	node := &StyleElement{
		children: children,
	}

	return node
}

func StyleIf(condition bool, children ...htemel.Node) *StyleElement {
	if condition {
		return Style(children...)
	}

	return &StyleElement{
		skipRender: true,
	}
}

type StyleAutocapitalizeAttrEnum string

const (
	StyleAutocapitalizeAttrEnumCharacters StyleAutocapitalizeAttrEnum = "characters"
	StyleAutocapitalizeAttrEnumNone StyleAutocapitalizeAttrEnum = "none"
	StyleAutocapitalizeAttrEnumOff StyleAutocapitalizeAttrEnum = "off"
	StyleAutocapitalizeAttrEnumOn StyleAutocapitalizeAttrEnum = "on"
	StyleAutocapitalizeAttrEnumSentences StyleAutocapitalizeAttrEnum = "sentences"
	StyleAutocapitalizeAttrEnumWords StyleAutocapitalizeAttrEnum = "words"
)

type StyleAutocorrectAttrEnum string

const (
	StyleAutocorrectAttrEnumOff StyleAutocorrectAttrEnum = "off"
	StyleAutocorrectAttrEnumOn StyleAutocorrectAttrEnum = "on"
)

type StyleContenteditableAttrEnum string

const (
	StyleContenteditableAttrEnumPlaintextOnly StyleContenteditableAttrEnum = "plaintext-only"
	StyleContenteditableAttrEnumTrue StyleContenteditableAttrEnum = "true"
	StyleContenteditableAttrEnumFalse StyleContenteditableAttrEnum = "false"
)

type styleAttrs map[string]any

func (e *StyleElement) Autocapitalize(a StyleAutocapitalizeAttrEnum) *StyleElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *StyleElement) Autocorrect(a StyleAutocorrectAttrEnum) *StyleElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *StyleElement) Class(s ...string) *StyleElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *StyleElement) Contenteditable(a StyleContenteditableAttrEnum) *StyleElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *StyleElement) Id(s string) *StyleElement {
	e.attributes["id"] = s
	
	return e
}

func (e *StyleElement) Slot(s string) *StyleElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *StyleElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<style")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 0
	for key, v := range e.attributes {
		w.Write([]byte(key + "="))
		w.Write([]byte(html.EscapeString(fmt.Sprintf("'%v'", v))))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</style>")); err != nil {
		return err
	}

	return nil
}
