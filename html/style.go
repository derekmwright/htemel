// Code generated by htemel. DO NOT EDIT.
package html

import (
  "github.com/derekmwright/htemel"
  "io"
)

type StyleElement struct {
	children []htemel.Node
	skipRender bool
}

// Style creates a tag <style> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The style element allows authors to embed CSS style sheets in their documents. The style element is one of several inputs to the styling processing model. The element does not represent content for the user.
func Style(children ...htemel.Node) *StyleElement {
	node := &StyleElement{
		children: children,
	}

	return node
}

func StyleIf(condition bool, children ...htemel.Node) *StyleElement {
	if condition {
		return Style(children...)
	}

	return &StyleElement{
		skipRender: true,
	}
}

func (e *StyleElement) Autocapitalize() *StyleElement {
	return e
}

func (e *StyleElement) Autocorrect() *StyleElement {
	return e
}

func (e *StyleElement) Autofocus() *StyleElement {
	return e
}

func (e *StyleElement) Class() *StyleElement {
	return e
}

func (e *StyleElement) Contenteditable() *StyleElement {
	return e
}

func (e *StyleElement) Id() *StyleElement {
	return e
}

func (e *StyleElement) Slot() *StyleElement {
	return e
}

func (e *StyleElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<style")); err != nil {
		return err
	}

	// TODO: Attribute stuff here

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</style>")); err != nil {
		return err
	}

	return nil
}
