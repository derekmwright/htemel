// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type InsElement struct {
	attributes insAttrs
	children []htemel.Node
	skipRender bool
}

// Ins creates a tag <ins> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The ins element represents an addition to the document.
func Ins(children ...htemel.Node) *InsElement {
	node := &InsElement{
		children: children,
		attributes: make(insAttrs),
	}

	return node
}

func InsIf(condition bool, children ...htemel.Node) *InsElement {
	if condition {
		return Ins(children...)
	}

	return &InsElement{
		skipRender: true,
	}
}

type InsAutocapitalizeEnum string

const (
	InsAutocapitalizeEnumCharacters InsAutocapitalizeEnum = "characters"
	InsAutocapitalizeEnumNone InsAutocapitalizeEnum = "none"
	InsAutocapitalizeEnumOff InsAutocapitalizeEnum = "off"
	InsAutocapitalizeEnumOn InsAutocapitalizeEnum = "on"
	InsAutocapitalizeEnumSentences InsAutocapitalizeEnum = "sentences"
	InsAutocapitalizeEnumWords InsAutocapitalizeEnum = "words"
)

type InsAutocorrectEnum string

const (
	InsAutocorrectEnumOn InsAutocorrectEnum = "on"
	InsAutocorrectEnumOff InsAutocorrectEnum = "off"
)

type InsContenteditableEnum string

const (
	InsContenteditableEnumTrue InsContenteditableEnum = "true"
	InsContenteditableEnumFalse InsContenteditableEnum = "false"
	InsContenteditableEnumPlaintextOnly InsContenteditableEnum = "plaintext-only"
)

type InsDirEnum string

const (
	InsDirEnumAuto InsDirEnum = "auto"
	InsDirEnumLtr InsDirEnum = "ltr"
	InsDirEnumRtl InsDirEnum = "rtl"
)

type InsDraggableEnum string

const (
	InsDraggableEnumFalse InsDraggableEnum = "false"
	InsDraggableEnumTrue InsDraggableEnum = "true"
)

type InsEnterkeyhintEnum string

const (
	InsEnterkeyhintEnumNext InsEnterkeyhintEnum = "next"
	InsEnterkeyhintEnumPrevious InsEnterkeyhintEnum = "previous"
	InsEnterkeyhintEnumSearch InsEnterkeyhintEnum = "search"
	InsEnterkeyhintEnumSend InsEnterkeyhintEnum = "send"
	InsEnterkeyhintEnumDone InsEnterkeyhintEnum = "done"
	InsEnterkeyhintEnumEnter InsEnterkeyhintEnum = "enter"
	InsEnterkeyhintEnumGo InsEnterkeyhintEnum = "go"
)

type InsHiddenEnum string

const (
	InsHiddenEnumHidden InsHiddenEnum = "hidden"
	InsHiddenEnumUntilFound InsHiddenEnum = "until-found"
)

type insAttrs map[string]any

func (e *InsElement) Autocapitalize(a InsAutocapitalizeEnum) *InsElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *InsElement) Autocorrect(a InsAutocorrectEnum) *InsElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *InsElement) Autofocus(b bool) *InsElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *InsElement) Class(s ...string) *InsElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *InsElement) Contenteditable(a InsContenteditableEnum) *InsElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *InsElement) Dir(a InsDirEnum) *InsElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *InsElement) Draggable(a InsDraggableEnum) *InsElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *InsElement) Enterkeyhint(a InsEnterkeyhintEnum) *InsElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *InsElement) Hidden(a InsHiddenEnum) *InsElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *InsElement) Id(s string) *InsElement {
	e.attributes["id"] = s
	
	return e
}

func (e *InsElement) Slot(s string) *InsElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *InsElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<ins")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</ins>")); err != nil {
		return err
	}

	return nil
}
