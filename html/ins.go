// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
)

type InsElement struct {
	attributes insAttrs
	children []htemel.Node
	skipRender bool
}

// Ins creates a tag <ins> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The ins element represents an addition to the document.
func Ins(children ...htemel.Node) *InsElement {
	node := &InsElement{
		children: children,
	}

	return node
}

func InsIf(condition bool, children ...htemel.Node) *InsElement {
	if condition {
		return Ins(children...)
	}

	return &InsElement{
		skipRender: true,
	}
}

type InsAutocapitalizeAttrEnum string

const (
	InsAutocapitalizeAttrEnumNone InsAutocapitalizeAttrEnum = "none"
	InsAutocapitalizeAttrEnumOff InsAutocapitalizeAttrEnum = "off"
	InsAutocapitalizeAttrEnumOn InsAutocapitalizeAttrEnum = "on"
	InsAutocapitalizeAttrEnumSentences InsAutocapitalizeAttrEnum = "sentences"
	InsAutocapitalizeAttrEnumWords InsAutocapitalizeAttrEnum = "words"
	InsAutocapitalizeAttrEnumCharacters InsAutocapitalizeAttrEnum = "characters"
)

type InsAutocorrectAttrEnum string

const (
	InsAutocorrectAttrEnumOff InsAutocorrectAttrEnum = "off"
	InsAutocorrectAttrEnumOn InsAutocorrectAttrEnum = "on"
)

type InsContenteditableAttrEnum string

const (
	InsContenteditableAttrEnumFalse InsContenteditableAttrEnum = "false"
	InsContenteditableAttrEnumPlaintextOnly InsContenteditableAttrEnum = "plaintext-only"
	InsContenteditableAttrEnumTrue InsContenteditableAttrEnum = "true"
)

type insAttrs map[string]any

func (e *InsElement) Autocapitalize(a InsAutocapitalizeAttrEnum) *InsElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *InsElement) Autocorrect(a InsAutocorrectAttrEnum) *InsElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *InsElement) Class(s ...string) *InsElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *InsElement) Contenteditable(a InsContenteditableAttrEnum) *InsElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *InsElement) Id(s string) *InsElement {
	e.attributes["id"] = s
	
	return e
}

func (e *InsElement) Slot(s string) *InsElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *InsElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<ins")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 0
	for key, v := range e.attributes {
		w.Write([]byte(key + "="))
		w.Write([]byte(html.EscapeString(fmt.Sprintf("'%v'", v))))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</ins>")); err != nil {
		return err
	}

	return nil
}
