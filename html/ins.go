// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type InsElement struct {
	attributes insAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// Ins creates a tag <ins> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The ins element represents an addition to the document.
func Ins(children ...htemel.Node) *InsElement {
	node := &InsElement{
		children: children, attributes: make(insAttrs),
	}

	return node
}

func InsIf(condition bool, children ...htemel.Node) *InsElement {
	if condition {
		return Ins(children...)
	}

	return &InsElement{
		skipRender: true,
	}
}

func InsTernary(condition bool, true htemel.Node, false htemel.Node) *InsElement {
	if condition {
		return Ins(true)
	}

	return Ins(false)
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *InsElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *InsElement) AddIndent(i int) {
	e.indent = i + 1
}

type InsAutocapitalizeEnum string

const (
	InsAutocapitalizeEnumCharacters InsAutocapitalizeEnum = "characters"
	InsAutocapitalizeEnumNone       InsAutocapitalizeEnum = "none"
	InsAutocapitalizeEnumOff        InsAutocapitalizeEnum = "off"
	InsAutocapitalizeEnumOn         InsAutocapitalizeEnum = "on"
	InsAutocapitalizeEnumSentences  InsAutocapitalizeEnum = "sentences"
	InsAutocapitalizeEnumWords      InsAutocapitalizeEnum = "words"
)

type InsAutocorrectEnum string

const (
	InsAutocorrectEnumOff   InsAutocorrectEnum = "off"
	InsAutocorrectEnumOn    InsAutocorrectEnum = "on"
	InsAutocorrectEnumEmpty InsAutocorrectEnum = ""
)

type InsContenteditableEnum string

const (
	InsContenteditableEnumFalse         InsContenteditableEnum = "false"
	InsContenteditableEnumPlaintextOnly InsContenteditableEnum = "plaintext-only"
	InsContenteditableEnumTrue          InsContenteditableEnum = "true"
	InsContenteditableEnumEmpty         InsContenteditableEnum = ""
)

type InsDirEnum string

const (
	InsDirEnumAuto InsDirEnum = "auto"
	InsDirEnumLtr  InsDirEnum = "ltr"
	InsDirEnumRtl  InsDirEnum = "rtl"
)

type InsDraggableEnum string

const (
	InsDraggableEnumFalse InsDraggableEnum = "false"
	InsDraggableEnumTrue  InsDraggableEnum = "true"
)

type InsEnterkeyhintEnum string

const (
	InsEnterkeyhintEnumGo       InsEnterkeyhintEnum = "go"
	InsEnterkeyhintEnumNext     InsEnterkeyhintEnum = "next"
	InsEnterkeyhintEnumPrevious InsEnterkeyhintEnum = "previous"
	InsEnterkeyhintEnumSearch   InsEnterkeyhintEnum = "search"
	InsEnterkeyhintEnumSend     InsEnterkeyhintEnum = "send"
	InsEnterkeyhintEnumDone     InsEnterkeyhintEnum = "done"
	InsEnterkeyhintEnumEnter    InsEnterkeyhintEnum = "enter"
)

type InsHiddenEnum string

const (
	InsHiddenEnumUntilFound InsHiddenEnum = "until-found"
	InsHiddenEnumHidden     InsHiddenEnum = "hidden"
	InsHiddenEnumEmpty      InsHiddenEnum = ""
)

type InsInputmodeEnum string

const (
	InsInputmodeEnumText    InsInputmodeEnum = "text"
	InsInputmodeEnumUrl     InsInputmodeEnum = "url"
	InsInputmodeEnumDecimal InsInputmodeEnum = "decimal"
	InsInputmodeEnumEmail   InsInputmodeEnum = "email"
	InsInputmodeEnumNone    InsInputmodeEnum = "none"
	InsInputmodeEnumNumeric InsInputmodeEnum = "numeric"
	InsInputmodeEnumSearch  InsInputmodeEnum = "search"
	InsInputmodeEnumTel     InsInputmodeEnum = "tel"
)

type InsSpellcheckEnum string

const (
	InsSpellcheckEnumFalse InsSpellcheckEnum = "false"
	InsSpellcheckEnumTrue  InsSpellcheckEnum = "true"
	InsSpellcheckEnumEmpty InsSpellcheckEnum = ""
)

type InsTranslateEnum string

const (
	InsTranslateEnumNo    InsTranslateEnum = "no"
	InsTranslateEnumYes   InsTranslateEnum = "yes"
	InsTranslateEnumEmpty InsTranslateEnum = ""
)

type InsWritingsuggestionsEnum string

const (
	InsWritingsuggestionsEnumFalse InsWritingsuggestionsEnum = "false"
	InsWritingsuggestionsEnumTrue  InsWritingsuggestionsEnum = "true"
	InsWritingsuggestionsEnumEmpty InsWritingsuggestionsEnum = ""
)

type insAttrs map[string]any

func (e *InsElement) Cite(s string) *InsElement {
	e.attributes["cite"] = s

	return e
}

func (e *InsElement) Datetime(s string) *InsElement {
	e.attributes["datetime"] = s

	return e
}

func (e *InsElement) Autocapitalize(a InsAutocapitalizeEnum) *InsElement {
	e.attributes["autocapitalize"] = a

	return e
}

func InsAutocapitalizeCustom(s string) InsAutocapitalizeEnum {
	return InsAutocapitalizeEnum(s)
}

func (e *InsElement) Autocorrect(a InsAutocorrectEnum) *InsElement {
	e.attributes["autocorrect"] = a

	return e
}

func InsAutocorrectCustom(s string) InsAutocorrectEnum {
	return InsAutocorrectEnum(s)
}

func (e *InsElement) Autofocus(b bool) *InsElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *InsElement) Class(s ...string) *InsElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *InsElement) Contenteditable(a InsContenteditableEnum) *InsElement {
	e.attributes["contenteditable"] = a

	return e
}

func InsContenteditableCustom(s string) InsContenteditableEnum {
	return InsContenteditableEnum(s)
}

func (e *InsElement) DataUnsafe(name string, s string) *InsElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *InsElement) Data(name string, s string) *InsElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *InsElement) Dir(a InsDirEnum) *InsElement {
	e.attributes["dir"] = a

	return e
}

func InsDirCustom(s string) InsDirEnum {
	return InsDirEnum(s)
}

func (e *InsElement) Draggable(a InsDraggableEnum) *InsElement {
	e.attributes["draggable"] = a

	return e
}

func InsDraggableCustom(s string) InsDraggableEnum {
	return InsDraggableEnum(s)
}

func (e *InsElement) Enterkeyhint(a InsEnterkeyhintEnum) *InsElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func InsEnterkeyhintCustom(s string) InsEnterkeyhintEnum {
	return InsEnterkeyhintEnum(s)
}

func (e *InsElement) Hidden(a InsHiddenEnum) *InsElement {
	e.attributes["hidden"] = a

	return e
}

func InsHiddenCustom(s string) InsHiddenEnum {
	return InsHiddenEnum(s)
}

func (e *InsElement) Id(s string) *InsElement {
	e.attributes["id"] = s

	return e
}

func (e *InsElement) Inert(b bool) *InsElement {
	e.attributes["inert"] = b

	return e
}

func (e *InsElement) Inputmode(a InsInputmodeEnum) *InsElement {
	e.attributes["inputmode"] = a

	return e
}

func InsInputmodeCustom(s string) InsInputmodeEnum {
	return InsInputmodeEnum(s)
}

func (e *InsElement) Itemid(s string) *InsElement {
	e.attributes["itemid"] = s

	return e
}

func (e *InsElement) Itemprop(s ...string) *InsElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *InsElement) Itemref(s ...string) *InsElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *InsElement) Itemscope(b bool) *InsElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *InsElement) Itemtype(s ...string) *InsElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *InsElement) Lang(s string) *InsElement {
	e.attributes["lang"] = s

	return e
}

func (e *InsElement) Nonce(s string) *InsElement {
	e.attributes["nonce"] = s

	return e
}

func (e *InsElement) Popover(s string) *InsElement {
	e.attributes["popover"] = s

	return e
}

func (e *InsElement) Slot(s string) *InsElement {
	e.attributes["slot"] = s

	return e
}

func (e *InsElement) Spellcheck(a InsSpellcheckEnum) *InsElement {
	e.attributes["spellcheck"] = a

	return e
}

func InsSpellcheckCustom(s string) InsSpellcheckEnum {
	return InsSpellcheckEnum(s)
}

func (e *InsElement) Style(s string) *InsElement {
	e.attributes["style"] = s

	return e
}

func (e *InsElement) Tabindex(i int) *InsElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *InsElement) Title(s string) *InsElement {
	e.attributes["title"] = s

	return e
}

func (e *InsElement) Translate(a InsTranslateEnum) *InsElement {
	e.attributes["translate"] = a

	return e
}

func InsTranslateCustom(s string) InsTranslateEnum {
	return InsTranslateEnum(s)
}

func (e *InsElement) Writingsuggestions(a InsWritingsuggestionsEnum) *InsElement {
	e.attributes["writingsuggestions"] = a

	return e
}

func InsWritingsuggestionsCustom(s string) InsWritingsuggestionsEnum {
	return InsWritingsuggestionsEnum(s)
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *InsElement) Render(w io.Writer) error {
	indent := htemel.SetIndent(e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<ins")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}
	for _, child := range e.children {
		child.AddIndent(e.Indent())
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(indent + "</ins>\n")); err != nil {
		return err
	}

	return nil
}
