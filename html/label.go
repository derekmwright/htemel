// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type LabelElement struct {
	attributes labelAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// Label creates a tag <label> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The label element represents a caption in a user interface. The caption can be associated with a specific form control, known as the label element's labeled control, either using the for attribute, or by putting the form control inside the label element itself.
func Label(children ...htemel.Node) *LabelElement {
	node := &LabelElement{
		children: children, attributes: make(labelAttrs),
	}

	return node
}

func LabelIf(condition bool, children ...htemel.Node) *LabelElement {
	if condition {
		return Label(children...)
	}

	return &LabelElement{
		skipRender: true,
	}
}

func LabelTernary(condition bool, true htemel.Node, false htemel.Node) *LabelElement {
	if condition {
		return Label(true)
	}

	return Label(false)
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *LabelElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *LabelElement) AddIndent(i int) {
	e.indent = i + 1
}

type LabelAutocapitalizeEnum string

const (
	LabelAutocapitalizeEnumWords      LabelAutocapitalizeEnum = "words"
	LabelAutocapitalizeEnumCharacters LabelAutocapitalizeEnum = "characters"
	LabelAutocapitalizeEnumNone       LabelAutocapitalizeEnum = "none"
	LabelAutocapitalizeEnumOff        LabelAutocapitalizeEnum = "off"
	LabelAutocapitalizeEnumOn         LabelAutocapitalizeEnum = "on"
	LabelAutocapitalizeEnumSentences  LabelAutocapitalizeEnum = "sentences"
)

type LabelAutocorrectEnum string

const (
	LabelAutocorrectEnumOn    LabelAutocorrectEnum = "on"
	LabelAutocorrectEnumOff   LabelAutocorrectEnum = "off"
	LabelAutocorrectEnumEmpty LabelAutocorrectEnum = ""
)

type LabelContenteditableEnum string

const (
	LabelContenteditableEnumFalse         LabelContenteditableEnum = "false"
	LabelContenteditableEnumPlaintextOnly LabelContenteditableEnum = "plaintext-only"
	LabelContenteditableEnumTrue          LabelContenteditableEnum = "true"
	LabelContenteditableEnumEmpty         LabelContenteditableEnum = ""
)

type LabelDirEnum string

const (
	LabelDirEnumAuto LabelDirEnum = "auto"
	LabelDirEnumLtr  LabelDirEnum = "ltr"
	LabelDirEnumRtl  LabelDirEnum = "rtl"
)

type LabelDraggableEnum string

const (
	LabelDraggableEnumFalse LabelDraggableEnum = "false"
	LabelDraggableEnumTrue  LabelDraggableEnum = "true"
)

type LabelEnterkeyhintEnum string

const (
	LabelEnterkeyhintEnumSend     LabelEnterkeyhintEnum = "send"
	LabelEnterkeyhintEnumDone     LabelEnterkeyhintEnum = "done"
	LabelEnterkeyhintEnumEnter    LabelEnterkeyhintEnum = "enter"
	LabelEnterkeyhintEnumGo       LabelEnterkeyhintEnum = "go"
	LabelEnterkeyhintEnumNext     LabelEnterkeyhintEnum = "next"
	LabelEnterkeyhintEnumPrevious LabelEnterkeyhintEnum = "previous"
	LabelEnterkeyhintEnumSearch   LabelEnterkeyhintEnum = "search"
)

type LabelHiddenEnum string

const (
	LabelHiddenEnumHidden     LabelHiddenEnum = "hidden"
	LabelHiddenEnumUntilFound LabelHiddenEnum = "until-found"
	LabelHiddenEnumEmpty      LabelHiddenEnum = ""
)

type LabelInputmodeEnum string

const (
	LabelInputmodeEnumNone    LabelInputmodeEnum = "none"
	LabelInputmodeEnumNumeric LabelInputmodeEnum = "numeric"
	LabelInputmodeEnumSearch  LabelInputmodeEnum = "search"
	LabelInputmodeEnumTel     LabelInputmodeEnum = "tel"
	LabelInputmodeEnumText    LabelInputmodeEnum = "text"
	LabelInputmodeEnumUrl     LabelInputmodeEnum = "url"
	LabelInputmodeEnumDecimal LabelInputmodeEnum = "decimal"
	LabelInputmodeEnumEmail   LabelInputmodeEnum = "email"
)

type LabelSpellcheckEnum string

const (
	LabelSpellcheckEnumTrue  LabelSpellcheckEnum = "true"
	LabelSpellcheckEnumFalse LabelSpellcheckEnum = "false"
	LabelSpellcheckEnumEmpty LabelSpellcheckEnum = ""
)

type LabelTranslateEnum string

const (
	LabelTranslateEnumNo    LabelTranslateEnum = "no"
	LabelTranslateEnumYes   LabelTranslateEnum = "yes"
	LabelTranslateEnumEmpty LabelTranslateEnum = ""
)

type LabelWritingsuggestionsEnum string

const (
	LabelWritingsuggestionsEnumTrue  LabelWritingsuggestionsEnum = "true"
	LabelWritingsuggestionsEnumFalse LabelWritingsuggestionsEnum = "false"
	LabelWritingsuggestionsEnumEmpty LabelWritingsuggestionsEnum = ""
)

type labelAttrs map[string]any

func (e *LabelElement) For(s string) *LabelElement {
	e.attributes["for"] = s

	return e
}

func (e *LabelElement) Autocapitalize(a LabelAutocapitalizeEnum) *LabelElement {
	e.attributes["autocapitalize"] = a

	return e
}

func LabelAutocapitalizeCustom(s string) LabelAutocapitalizeEnum {
	return LabelAutocapitalizeEnum(s)
}

func (e *LabelElement) Autocorrect(a LabelAutocorrectEnum) *LabelElement {
	e.attributes["autocorrect"] = a

	return e
}

func LabelAutocorrectCustom(s string) LabelAutocorrectEnum {
	return LabelAutocorrectEnum(s)
}

func (e *LabelElement) Autofocus(b bool) *LabelElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *LabelElement) Class(s ...string) *LabelElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *LabelElement) Contenteditable(a LabelContenteditableEnum) *LabelElement {
	e.attributes["contenteditable"] = a

	return e
}

func LabelContenteditableCustom(s string) LabelContenteditableEnum {
	return LabelContenteditableEnum(s)
}

func (e *LabelElement) DataUnsafe(name string, s string) *LabelElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *LabelElement) Data(name string, s string) *LabelElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *LabelElement) Dir(a LabelDirEnum) *LabelElement {
	e.attributes["dir"] = a

	return e
}

func LabelDirCustom(s string) LabelDirEnum {
	return LabelDirEnum(s)
}

func (e *LabelElement) Draggable(a LabelDraggableEnum) *LabelElement {
	e.attributes["draggable"] = a

	return e
}

func LabelDraggableCustom(s string) LabelDraggableEnum {
	return LabelDraggableEnum(s)
}

func (e *LabelElement) Enterkeyhint(a LabelEnterkeyhintEnum) *LabelElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func LabelEnterkeyhintCustom(s string) LabelEnterkeyhintEnum {
	return LabelEnterkeyhintEnum(s)
}

func (e *LabelElement) Hidden(a LabelHiddenEnum) *LabelElement {
	e.attributes["hidden"] = a

	return e
}

func LabelHiddenCustom(s string) LabelHiddenEnum {
	return LabelHiddenEnum(s)
}

func (e *LabelElement) Id(s string) *LabelElement {
	e.attributes["id"] = s

	return e
}

func (e *LabelElement) Inert(b bool) *LabelElement {
	e.attributes["inert"] = b

	return e
}

func (e *LabelElement) Inputmode(a LabelInputmodeEnum) *LabelElement {
	e.attributes["inputmode"] = a

	return e
}

func LabelInputmodeCustom(s string) LabelInputmodeEnum {
	return LabelInputmodeEnum(s)
}

func (e *LabelElement) Itemid(s string) *LabelElement {
	e.attributes["itemid"] = s

	return e
}

func (e *LabelElement) Itemprop(s ...string) *LabelElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *LabelElement) Itemref(s ...string) *LabelElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *LabelElement) Itemscope(b bool) *LabelElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *LabelElement) Itemtype(s ...string) *LabelElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *LabelElement) Lang(s string) *LabelElement {
	e.attributes["lang"] = s

	return e
}

func (e *LabelElement) Nonce(s string) *LabelElement {
	e.attributes["nonce"] = s

	return e
}

func (e *LabelElement) Popover(s string) *LabelElement {
	e.attributes["popover"] = s

	return e
}

func (e *LabelElement) Slot(s string) *LabelElement {
	e.attributes["slot"] = s

	return e
}

func (e *LabelElement) Spellcheck(a LabelSpellcheckEnum) *LabelElement {
	e.attributes["spellcheck"] = a

	return e
}

func LabelSpellcheckCustom(s string) LabelSpellcheckEnum {
	return LabelSpellcheckEnum(s)
}

func (e *LabelElement) Style(s string) *LabelElement {
	e.attributes["style"] = s

	return e
}

func (e *LabelElement) Tabindex(i int) *LabelElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *LabelElement) Title(s string) *LabelElement {
	e.attributes["title"] = s

	return e
}

func (e *LabelElement) Translate(a LabelTranslateEnum) *LabelElement {
	e.attributes["translate"] = a

	return e
}

func LabelTranslateCustom(s string) LabelTranslateEnum {
	return LabelTranslateEnum(s)
}

func (e *LabelElement) Writingsuggestions(a LabelWritingsuggestionsEnum) *LabelElement {
	e.attributes["writingsuggestions"] = a

	return e
}

func LabelWritingsuggestionsCustom(s string) LabelWritingsuggestionsEnum {
	return LabelWritingsuggestionsEnum(s)
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *LabelElement) Render(w io.Writer) error {
	indent := htemel.SetIndent(e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<label")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}
	for _, child := range e.children {
		child.AddIndent(e.Indent())
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(indent + "</label>\n")); err != nil {
		return err
	}

	return nil
}
