// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type LabelElement struct {
	attributes labelAttrs
	children []htemel.Node
	skipRender bool
}

// Label creates a tag <label> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The label element represents a caption in a user interface. The caption can be associated with a specific form control, known as the label element's labeled control, either using the for attribute, or by putting the form control inside the label element itself.
func Label(children ...htemel.Node) *LabelElement {
	node := &LabelElement{
		children: children,
		attributes: make(labelAttrs),
	}

	return node
}

func LabelIf(condition bool, children ...htemel.Node) *LabelElement {
	if condition {
		return Label(children...)
	}

	return &LabelElement{
		skipRender: true,
	}
}

type LabelAutocapitalizeAttrEnum string

const (
	LabelAutocapitalizeAttrEnumCharacters LabelAutocapitalizeAttrEnum = "characters"
	LabelAutocapitalizeAttrEnumNone LabelAutocapitalizeAttrEnum = "none"
	LabelAutocapitalizeAttrEnumOff LabelAutocapitalizeAttrEnum = "off"
	LabelAutocapitalizeAttrEnumOn LabelAutocapitalizeAttrEnum = "on"
	LabelAutocapitalizeAttrEnumSentences LabelAutocapitalizeAttrEnum = "sentences"
	LabelAutocapitalizeAttrEnumWords LabelAutocapitalizeAttrEnum = "words"
)

type LabelAutocorrectAttrEnum string

const (
	LabelAutocorrectAttrEnumOn LabelAutocorrectAttrEnum = "on"
	LabelAutocorrectAttrEnumOff LabelAutocorrectAttrEnum = "off"
)

type LabelContenteditableAttrEnum string

const (
	LabelContenteditableAttrEnumFalse LabelContenteditableAttrEnum = "false"
	LabelContenteditableAttrEnumPlaintextOnly LabelContenteditableAttrEnum = "plaintext-only"
	LabelContenteditableAttrEnumTrue LabelContenteditableAttrEnum = "true"
)

type labelAttrs map[string]any

func (e *LabelElement) Autocapitalize(a LabelAutocapitalizeAttrEnum) *LabelElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *LabelElement) Autocorrect(a LabelAutocorrectAttrEnum) *LabelElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *LabelElement) Class(s ...string) *LabelElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *LabelElement) Contenteditable(a LabelContenteditableAttrEnum) *LabelElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *LabelElement) Id(s string) *LabelElement {
	e.attributes["id"] = s
	
	return e
}

func (e *LabelElement) Slot(s string) *LabelElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *LabelElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<label")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		w.Write([]byte(" " + key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</label>")); err != nil {
		return err
	}

	return nil
}
