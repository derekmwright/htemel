// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type AddressElement struct {
	attributes addressAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// Address creates a tag <address> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The address element represents the contact information for its nearest article or body element ancestor. If that is the body element, then the contact information applies to the document as a whole.
func Address(children ...htemel.Node) *AddressElement {
	node := &AddressElement{
		children: children, attributes: make(addressAttrs),
	}

	return node
}

func AddressIf(condition bool, children ...htemel.Node) *AddressElement {
	if condition {
		return Address(children...)
	}

	return &AddressElement{
		skipRender: true,
	}
}

func AddressTernary(condition bool, true htemel.Node, false htemel.Node) *AddressElement {
	if condition {
		return Address(true)
	}

	return Address(false)
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *AddressElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *AddressElement) AddIndent(i int) {
	e.indent = i + 1
}

type AddressAutocapitalizeEnum string

const (
	AddressAutocapitalizeEnumCharacters AddressAutocapitalizeEnum = "characters"
	AddressAutocapitalizeEnumNone       AddressAutocapitalizeEnum = "none"
	AddressAutocapitalizeEnumOff        AddressAutocapitalizeEnum = "off"
	AddressAutocapitalizeEnumOn         AddressAutocapitalizeEnum = "on"
	AddressAutocapitalizeEnumSentences  AddressAutocapitalizeEnum = "sentences"
	AddressAutocapitalizeEnumWords      AddressAutocapitalizeEnum = "words"
)

type AddressAutocorrectEnum string

const (
	AddressAutocorrectEnumOff   AddressAutocorrectEnum = "off"
	AddressAutocorrectEnumOn    AddressAutocorrectEnum = "on"
	AddressAutocorrectEnumEmpty AddressAutocorrectEnum = ""
)

type AddressContenteditableEnum string

const (
	AddressContenteditableEnumFalse         AddressContenteditableEnum = "false"
	AddressContenteditableEnumPlaintextOnly AddressContenteditableEnum = "plaintext-only"
	AddressContenteditableEnumTrue          AddressContenteditableEnum = "true"
	AddressContenteditableEnumEmpty         AddressContenteditableEnum = ""
)

type AddressDirEnum string

const (
	AddressDirEnumAuto AddressDirEnum = "auto"
	AddressDirEnumLtr  AddressDirEnum = "ltr"
	AddressDirEnumRtl  AddressDirEnum = "rtl"
)

type AddressDraggableEnum string

const (
	AddressDraggableEnumFalse AddressDraggableEnum = "false"
	AddressDraggableEnumTrue  AddressDraggableEnum = "true"
)

type AddressEnterkeyhintEnum string

const (
	AddressEnterkeyhintEnumSend     AddressEnterkeyhintEnum = "send"
	AddressEnterkeyhintEnumDone     AddressEnterkeyhintEnum = "done"
	AddressEnterkeyhintEnumEnter    AddressEnterkeyhintEnum = "enter"
	AddressEnterkeyhintEnumGo       AddressEnterkeyhintEnum = "go"
	AddressEnterkeyhintEnumNext     AddressEnterkeyhintEnum = "next"
	AddressEnterkeyhintEnumPrevious AddressEnterkeyhintEnum = "previous"
	AddressEnterkeyhintEnumSearch   AddressEnterkeyhintEnum = "search"
)

type AddressHiddenEnum string

const (
	AddressHiddenEnumUntilFound AddressHiddenEnum = "until-found"
	AddressHiddenEnumHidden     AddressHiddenEnum = "hidden"
	AddressHiddenEnumEmpty      AddressHiddenEnum = ""
)

type AddressInputmodeEnum string

const (
	AddressInputmodeEnumNone    AddressInputmodeEnum = "none"
	AddressInputmodeEnumNumeric AddressInputmodeEnum = "numeric"
	AddressInputmodeEnumSearch  AddressInputmodeEnum = "search"
	AddressInputmodeEnumTel     AddressInputmodeEnum = "tel"
	AddressInputmodeEnumText    AddressInputmodeEnum = "text"
	AddressInputmodeEnumUrl     AddressInputmodeEnum = "url"
	AddressInputmodeEnumDecimal AddressInputmodeEnum = "decimal"
	AddressInputmodeEnumEmail   AddressInputmodeEnum = "email"
)

type AddressSpellcheckEnum string

const (
	AddressSpellcheckEnumFalse AddressSpellcheckEnum = "false"
	AddressSpellcheckEnumTrue  AddressSpellcheckEnum = "true"
	AddressSpellcheckEnumEmpty AddressSpellcheckEnum = ""
)

type AddressTranslateEnum string

const (
	AddressTranslateEnumNo    AddressTranslateEnum = "no"
	AddressTranslateEnumYes   AddressTranslateEnum = "yes"
	AddressTranslateEnumEmpty AddressTranslateEnum = ""
)

type AddressWritingsuggestionsEnum string

const (
	AddressWritingsuggestionsEnumTrue  AddressWritingsuggestionsEnum = "true"
	AddressWritingsuggestionsEnumFalse AddressWritingsuggestionsEnum = "false"
	AddressWritingsuggestionsEnumEmpty AddressWritingsuggestionsEnum = ""
)

type addressAttrs map[string]any

func (e *AddressElement) Autocapitalize(a AddressAutocapitalizeEnum) *AddressElement {
	e.attributes["autocapitalize"] = a

	return e
}

func AddressAutocapitalizeCustom(s string) AddressAutocapitalizeEnum {
	return AddressAutocapitalizeEnum(s)
}

func (e *AddressElement) Autocorrect(a AddressAutocorrectEnum) *AddressElement {
	e.attributes["autocorrect"] = a

	return e
}

func AddressAutocorrectCustom(s string) AddressAutocorrectEnum {
	return AddressAutocorrectEnum(s)
}

func (e *AddressElement) Autofocus(b bool) *AddressElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *AddressElement) Class(s ...string) *AddressElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *AddressElement) Contenteditable(a AddressContenteditableEnum) *AddressElement {
	e.attributes["contenteditable"] = a

	return e
}

func AddressContenteditableCustom(s string) AddressContenteditableEnum {
	return AddressContenteditableEnum(s)
}

func (e *AddressElement) DataUnsafe(name string, s string) *AddressElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *AddressElement) Data(name string, s string) *AddressElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *AddressElement) Dir(a AddressDirEnum) *AddressElement {
	e.attributes["dir"] = a

	return e
}

func AddressDirCustom(s string) AddressDirEnum {
	return AddressDirEnum(s)
}

func (e *AddressElement) Draggable(a AddressDraggableEnum) *AddressElement {
	e.attributes["draggable"] = a

	return e
}

func AddressDraggableCustom(s string) AddressDraggableEnum {
	return AddressDraggableEnum(s)
}

func (e *AddressElement) Enterkeyhint(a AddressEnterkeyhintEnum) *AddressElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func AddressEnterkeyhintCustom(s string) AddressEnterkeyhintEnum {
	return AddressEnterkeyhintEnum(s)
}

func (e *AddressElement) Hidden(a AddressHiddenEnum) *AddressElement {
	e.attributes["hidden"] = a

	return e
}

func AddressHiddenCustom(s string) AddressHiddenEnum {
	return AddressHiddenEnum(s)
}

func (e *AddressElement) Id(s string) *AddressElement {
	e.attributes["id"] = s

	return e
}

func (e *AddressElement) Inert(b bool) *AddressElement {
	e.attributes["inert"] = b

	return e
}

func (e *AddressElement) Inputmode(a AddressInputmodeEnum) *AddressElement {
	e.attributes["inputmode"] = a

	return e
}

func AddressInputmodeCustom(s string) AddressInputmodeEnum {
	return AddressInputmodeEnum(s)
}

func (e *AddressElement) Itemid(s string) *AddressElement {
	e.attributes["itemid"] = s

	return e
}

func (e *AddressElement) Itemprop(s ...string) *AddressElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *AddressElement) Itemref(s ...string) *AddressElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *AddressElement) Itemscope(b bool) *AddressElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *AddressElement) Itemtype(s ...string) *AddressElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *AddressElement) Lang(s string) *AddressElement {
	e.attributes["lang"] = s

	return e
}

func (e *AddressElement) Nonce(s string) *AddressElement {
	e.attributes["nonce"] = s

	return e
}

func (e *AddressElement) Popover(s string) *AddressElement {
	e.attributes["popover"] = s

	return e
}

func (e *AddressElement) Slot(s string) *AddressElement {
	e.attributes["slot"] = s

	return e
}

func (e *AddressElement) Spellcheck(a AddressSpellcheckEnum) *AddressElement {
	e.attributes["spellcheck"] = a

	return e
}

func AddressSpellcheckCustom(s string) AddressSpellcheckEnum {
	return AddressSpellcheckEnum(s)
}

func (e *AddressElement) Style(s string) *AddressElement {
	e.attributes["style"] = s

	return e
}

func (e *AddressElement) Tabindex(i int) *AddressElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *AddressElement) Title(s string) *AddressElement {
	e.attributes["title"] = s

	return e
}

func (e *AddressElement) Translate(a AddressTranslateEnum) *AddressElement {
	e.attributes["translate"] = a

	return e
}

func AddressTranslateCustom(s string) AddressTranslateEnum {
	return AddressTranslateEnum(s)
}

func (e *AddressElement) Writingsuggestions(a AddressWritingsuggestionsEnum) *AddressElement {
	e.attributes["writingsuggestions"] = a

	return e
}

func AddressWritingsuggestionsCustom(s string) AddressWritingsuggestionsEnum {
	return AddressWritingsuggestionsEnum(s)
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *AddressElement) Render(w io.Writer) error {
	indent := htemel.SetIndent(e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<address")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}
	for _, child := range e.children {
		child.AddIndent(e.Indent())
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(indent + "</address>\n")); err != nil {
		return err
	}

	return nil
}
