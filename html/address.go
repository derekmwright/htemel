// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
)

type AddressElement struct {
	attributes addressAttrs
	children []htemel.Node
	skipRender bool
}

// Address creates a tag <address> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The address element represents the contact information for its nearest article or body element ancestor. If that is the body element, then the contact information applies to the document as a whole.
func Address(children ...htemel.Node) *AddressElement {
	node := &AddressElement{
		children: children,
	}

	return node
}

func AddressIf(condition bool, children ...htemel.Node) *AddressElement {
	if condition {
		return Address(children...)
	}

	return &AddressElement{
		skipRender: true,
	}
}

type AddressAutocapitalizeAttrEnum string

const (
	AddressAutocapitalizeAttrEnumOn AddressAutocapitalizeAttrEnum = "on"
	AddressAutocapitalizeAttrEnumSentences AddressAutocapitalizeAttrEnum = "sentences"
	AddressAutocapitalizeAttrEnumWords AddressAutocapitalizeAttrEnum = "words"
	AddressAutocapitalizeAttrEnumCharacters AddressAutocapitalizeAttrEnum = "characters"
	AddressAutocapitalizeAttrEnumNone AddressAutocapitalizeAttrEnum = "none"
	AddressAutocapitalizeAttrEnumOff AddressAutocapitalizeAttrEnum = "off"
)

type AddressAutocorrectAttrEnum string

const (
	AddressAutocorrectAttrEnumOn AddressAutocorrectAttrEnum = "on"
	AddressAutocorrectAttrEnumOff AddressAutocorrectAttrEnum = "off"
)

type AddressContenteditableAttrEnum string

const (
	AddressContenteditableAttrEnumPlaintextOnly AddressContenteditableAttrEnum = "plaintext-only"
	AddressContenteditableAttrEnumTrue AddressContenteditableAttrEnum = "true"
	AddressContenteditableAttrEnumFalse AddressContenteditableAttrEnum = "false"
)

type addressAttrs map[string]any

func (e *AddressElement) Autocapitalize(a AddressAutocapitalizeAttrEnum) *AddressElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *AddressElement) Autocorrect(a AddressAutocorrectAttrEnum) *AddressElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *AddressElement) Class(s ...string) *AddressElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *AddressElement) Contenteditable(a AddressContenteditableAttrEnum) *AddressElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *AddressElement) Id(s string) *AddressElement {
	e.attributes["id"] = s
	
	return e
}

func (e *AddressElement) Slot(s string) *AddressElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *AddressElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<address")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 0
	for key, v := range e.attributes {
		w.Write([]byte(key + "="))
		w.Write([]byte(html.EscapeString(fmt.Sprintf("'%v'", v))))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</address>")); err != nil {
		return err
	}

	return nil
}
