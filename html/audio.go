// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type AudioElement struct {
	attributes audioAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// Audio creates a tag <audio> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: An audio element represents a sound or audio stream.
func Audio(children ...htemel.Node) *AudioElement {
	node := &AudioElement{
		children: children, attributes: make(audioAttrs),
	}

	return node
}

func AudioIf(condition bool, children ...htemel.Node) *AudioElement {
	if condition {
		return Audio(children...)
	}

	return &AudioElement{
		skipRender: true,
	}
}

func AudioTernary(condition bool, true htemel.Node, false htemel.Node) *AudioElement {
	if condition {
		return Audio(true)
	}

	return Audio(false)
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *AudioElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *AudioElement) AddIndent(i int) {
	e.indent = i + 1
}

type AudioCrossoriginEnum string

const (
	AudioCrossoriginEnumAnonymous      AudioCrossoriginEnum = "anonymous"
	AudioCrossoriginEnumUseCredentials AudioCrossoriginEnum = "use-credentials"
	AudioCrossoriginEnumEmpty          AudioCrossoriginEnum = ""
)

type AudioPreloadEnum string

const (
	AudioPreloadEnumAuto     AudioPreloadEnum = "auto"
	AudioPreloadEnumMetadata AudioPreloadEnum = "metadata"
	AudioPreloadEnumNone     AudioPreloadEnum = "none"
	AudioPreloadEnumEmpty    AudioPreloadEnum = ""
)

type AudioAutocapitalizeEnum string

const (
	AudioAutocapitalizeEnumCharacters AudioAutocapitalizeEnum = "characters"
	AudioAutocapitalizeEnumNone       AudioAutocapitalizeEnum = "none"
	AudioAutocapitalizeEnumOff        AudioAutocapitalizeEnum = "off"
	AudioAutocapitalizeEnumOn         AudioAutocapitalizeEnum = "on"
	AudioAutocapitalizeEnumSentences  AudioAutocapitalizeEnum = "sentences"
	AudioAutocapitalizeEnumWords      AudioAutocapitalizeEnum = "words"
)

type AudioAutocorrectEnum string

const (
	AudioAutocorrectEnumOn    AudioAutocorrectEnum = "on"
	AudioAutocorrectEnumOff   AudioAutocorrectEnum = "off"
	AudioAutocorrectEnumEmpty AudioAutocorrectEnum = ""
)

type AudioContenteditableEnum string

const (
	AudioContenteditableEnumFalse         AudioContenteditableEnum = "false"
	AudioContenteditableEnumPlaintextOnly AudioContenteditableEnum = "plaintext-only"
	AudioContenteditableEnumTrue          AudioContenteditableEnum = "true"
	AudioContenteditableEnumEmpty         AudioContenteditableEnum = ""
)

type AudioDirEnum string

const (
	AudioDirEnumRtl  AudioDirEnum = "rtl"
	AudioDirEnumAuto AudioDirEnum = "auto"
	AudioDirEnumLtr  AudioDirEnum = "ltr"
)

type AudioDraggableEnum string

const (
	AudioDraggableEnumFalse AudioDraggableEnum = "false"
	AudioDraggableEnumTrue  AudioDraggableEnum = "true"
)

type AudioEnterkeyhintEnum string

const (
	AudioEnterkeyhintEnumSearch   AudioEnterkeyhintEnum = "search"
	AudioEnterkeyhintEnumSend     AudioEnterkeyhintEnum = "send"
	AudioEnterkeyhintEnumDone     AudioEnterkeyhintEnum = "done"
	AudioEnterkeyhintEnumEnter    AudioEnterkeyhintEnum = "enter"
	AudioEnterkeyhintEnumGo       AudioEnterkeyhintEnum = "go"
	AudioEnterkeyhintEnumNext     AudioEnterkeyhintEnum = "next"
	AudioEnterkeyhintEnumPrevious AudioEnterkeyhintEnum = "previous"
)

type AudioHiddenEnum string

const (
	AudioHiddenEnumUntilFound AudioHiddenEnum = "until-found"
	AudioHiddenEnumHidden     AudioHiddenEnum = "hidden"
	AudioHiddenEnumEmpty      AudioHiddenEnum = ""
)

type AudioInputmodeEnum string

const (
	AudioInputmodeEnumSearch  AudioInputmodeEnum = "search"
	AudioInputmodeEnumTel     AudioInputmodeEnum = "tel"
	AudioInputmodeEnumText    AudioInputmodeEnum = "text"
	AudioInputmodeEnumUrl     AudioInputmodeEnum = "url"
	AudioInputmodeEnumDecimal AudioInputmodeEnum = "decimal"
	AudioInputmodeEnumEmail   AudioInputmodeEnum = "email"
	AudioInputmodeEnumNone    AudioInputmodeEnum = "none"
	AudioInputmodeEnumNumeric AudioInputmodeEnum = "numeric"
)

type AudioSpellcheckEnum string

const (
	AudioSpellcheckEnumFalse AudioSpellcheckEnum = "false"
	AudioSpellcheckEnumTrue  AudioSpellcheckEnum = "true"
	AudioSpellcheckEnumEmpty AudioSpellcheckEnum = ""
)

type AudioTranslateEnum string

const (
	AudioTranslateEnumNo    AudioTranslateEnum = "no"
	AudioTranslateEnumYes   AudioTranslateEnum = "yes"
	AudioTranslateEnumEmpty AudioTranslateEnum = ""
)

type AudioWritingsuggestionsEnum string

const (
	AudioWritingsuggestionsEnumFalse AudioWritingsuggestionsEnum = "false"
	AudioWritingsuggestionsEnumTrue  AudioWritingsuggestionsEnum = "true"
	AudioWritingsuggestionsEnumEmpty AudioWritingsuggestionsEnum = ""
)

type audioAttrs map[string]any

func (e *AudioElement) Src(s string) *AudioElement {
	e.attributes["src"] = s

	return e
}

func (e *AudioElement) Crossorigin(a AudioCrossoriginEnum) *AudioElement {
	e.attributes["crossorigin"] = a

	return e
}

func AudioCrossoriginCustom(s string) AudioCrossoriginEnum {
	return AudioCrossoriginEnum(s)
}

func (e *AudioElement) Preload(a AudioPreloadEnum) *AudioElement {
	e.attributes["preload"] = a

	return e
}

func AudioPreloadCustom(s string) AudioPreloadEnum {
	return AudioPreloadEnum(s)
}

func (e *AudioElement) Autoplay(b bool) *AudioElement {
	e.attributes["autoplay"] = b

	return e
}

func (e *AudioElement) Playsinline(b bool) *AudioElement {
	e.attributes["playsinline"] = b

	return e
}

func (e *AudioElement) Loop(b bool) *AudioElement {
	e.attributes["loop"] = b

	return e
}

func (e *AudioElement) Muted(b bool) *AudioElement {
	e.attributes["muted"] = b

	return e
}

func (e *AudioElement) Controls(b bool) *AudioElement {
	e.attributes["controls"] = b

	return e
}

func (e *AudioElement) Autocapitalize(a AudioAutocapitalizeEnum) *AudioElement {
	e.attributes["autocapitalize"] = a

	return e
}

func AudioAutocapitalizeCustom(s string) AudioAutocapitalizeEnum {
	return AudioAutocapitalizeEnum(s)
}

func (e *AudioElement) Autocorrect(a AudioAutocorrectEnum) *AudioElement {
	e.attributes["autocorrect"] = a

	return e
}

func AudioAutocorrectCustom(s string) AudioAutocorrectEnum {
	return AudioAutocorrectEnum(s)
}

func (e *AudioElement) Autofocus(b bool) *AudioElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *AudioElement) Class(s ...string) *AudioElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *AudioElement) Contenteditable(a AudioContenteditableEnum) *AudioElement {
	e.attributes["contenteditable"] = a

	return e
}

func AudioContenteditableCustom(s string) AudioContenteditableEnum {
	return AudioContenteditableEnum(s)
}

func (e *AudioElement) DataUnsafe(name string, s string) *AudioElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *AudioElement) Data(name string, s string) *AudioElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *AudioElement) Dir(a AudioDirEnum) *AudioElement {
	e.attributes["dir"] = a

	return e
}

func AudioDirCustom(s string) AudioDirEnum {
	return AudioDirEnum(s)
}

func (e *AudioElement) Draggable(a AudioDraggableEnum) *AudioElement {
	e.attributes["draggable"] = a

	return e
}

func AudioDraggableCustom(s string) AudioDraggableEnum {
	return AudioDraggableEnum(s)
}

func (e *AudioElement) Enterkeyhint(a AudioEnterkeyhintEnum) *AudioElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func AudioEnterkeyhintCustom(s string) AudioEnterkeyhintEnum {
	return AudioEnterkeyhintEnum(s)
}

func (e *AudioElement) Hidden(a AudioHiddenEnum) *AudioElement {
	e.attributes["hidden"] = a

	return e
}

func AudioHiddenCustom(s string) AudioHiddenEnum {
	return AudioHiddenEnum(s)
}

func (e *AudioElement) Id(s string) *AudioElement {
	e.attributes["id"] = s

	return e
}

func (e *AudioElement) Inert(b bool) *AudioElement {
	e.attributes["inert"] = b

	return e
}

func (e *AudioElement) Inputmode(a AudioInputmodeEnum) *AudioElement {
	e.attributes["inputmode"] = a

	return e
}

func AudioInputmodeCustom(s string) AudioInputmodeEnum {
	return AudioInputmodeEnum(s)
}

func (e *AudioElement) Itemid(s string) *AudioElement {
	e.attributes["itemid"] = s

	return e
}

func (e *AudioElement) Itemprop(s ...string) *AudioElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *AudioElement) Itemref(s ...string) *AudioElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *AudioElement) Itemscope(b bool) *AudioElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *AudioElement) Itemtype(s ...string) *AudioElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *AudioElement) Lang(s string) *AudioElement {
	e.attributes["lang"] = s

	return e
}

func (e *AudioElement) Nonce(s string) *AudioElement {
	e.attributes["nonce"] = s

	return e
}

func (e *AudioElement) Popover(s string) *AudioElement {
	e.attributes["popover"] = s

	return e
}

func (e *AudioElement) Slot(s string) *AudioElement {
	e.attributes["slot"] = s

	return e
}

func (e *AudioElement) Spellcheck(a AudioSpellcheckEnum) *AudioElement {
	e.attributes["spellcheck"] = a

	return e
}

func AudioSpellcheckCustom(s string) AudioSpellcheckEnum {
	return AudioSpellcheckEnum(s)
}

func (e *AudioElement) Style(s string) *AudioElement {
	e.attributes["style"] = s

	return e
}

func (e *AudioElement) Tabindex(i int) *AudioElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *AudioElement) Title(s string) *AudioElement {
	e.attributes["title"] = s

	return e
}

func (e *AudioElement) Translate(a AudioTranslateEnum) *AudioElement {
	e.attributes["translate"] = a

	return e
}

func AudioTranslateCustom(s string) AudioTranslateEnum {
	return AudioTranslateEnum(s)
}

func (e *AudioElement) Writingsuggestions(a AudioWritingsuggestionsEnum) *AudioElement {
	e.attributes["writingsuggestions"] = a

	return e
}

func AudioWritingsuggestionsCustom(s string) AudioWritingsuggestionsEnum {
	return AudioWritingsuggestionsEnum(s)
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *AudioElement) Render(w io.Writer) error {
	indent := htemel.SetIndent(e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<audio")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}
	for _, child := range e.children {
		child.AddIndent(e.Indent())
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(indent + "</audio>\n")); err != nil {
		return err
	}

	return nil
}
