// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type AudioElement struct {
	attributes audioAttrs
	children []htemel.Node
	skipRender bool
}

// Audio creates a tag <audio> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: An audio element represents a sound or audio stream.
func Audio(children ...htemel.Node) *AudioElement {
	node := &AudioElement{
		children: children,
		attributes: make(audioAttrs),
	}

	return node
}

func AudioIf(condition bool, children ...htemel.Node) *AudioElement {
	if condition {
		return Audio(children...)
	}

	return &AudioElement{
		skipRender: true,
	}
}

type AudioAutocapitalizeEnum string

const (
	AudioAutocapitalizeEnumCharacters AudioAutocapitalizeEnum = "characters"
	AudioAutocapitalizeEnumNone AudioAutocapitalizeEnum = "none"
	AudioAutocapitalizeEnumOff AudioAutocapitalizeEnum = "off"
	AudioAutocapitalizeEnumOn AudioAutocapitalizeEnum = "on"
	AudioAutocapitalizeEnumSentences AudioAutocapitalizeEnum = "sentences"
	AudioAutocapitalizeEnumWords AudioAutocapitalizeEnum = "words"
)

type AudioAutocorrectEnum string

const (
	AudioAutocorrectEnumOff AudioAutocorrectEnum = "off"
	AudioAutocorrectEnumOn AudioAutocorrectEnum = "on"
)

type AudioContenteditableEnum string

const (
	AudioContenteditableEnumFalse AudioContenteditableEnum = "false"
	AudioContenteditableEnumPlaintextOnly AudioContenteditableEnum = "plaintext-only"
	AudioContenteditableEnumTrue AudioContenteditableEnum = "true"
)

type AudioDirEnum string

const (
	AudioDirEnumAuto AudioDirEnum = "auto"
	AudioDirEnumLtr AudioDirEnum = "ltr"
	AudioDirEnumRtl AudioDirEnum = "rtl"
)

type AudioDraggableEnum string

const (
	AudioDraggableEnumFalse AudioDraggableEnum = "false"
	AudioDraggableEnumTrue AudioDraggableEnum = "true"
)

type AudioEnterkeyhintEnum string

const (
	AudioEnterkeyhintEnumPrevious AudioEnterkeyhintEnum = "previous"
	AudioEnterkeyhintEnumSearch AudioEnterkeyhintEnum = "search"
	AudioEnterkeyhintEnumSend AudioEnterkeyhintEnum = "send"
	AudioEnterkeyhintEnumDone AudioEnterkeyhintEnum = "done"
	AudioEnterkeyhintEnumEnter AudioEnterkeyhintEnum = "enter"
	AudioEnterkeyhintEnumGo AudioEnterkeyhintEnum = "go"
	AudioEnterkeyhintEnumNext AudioEnterkeyhintEnum = "next"
)

type AudioHiddenEnum string

const (
	AudioHiddenEnumHidden AudioHiddenEnum = "hidden"
	AudioHiddenEnumUntilFound AudioHiddenEnum = "until-found"
)

type audioAttrs map[string]any

func (e *AudioElement) Autocapitalize(a AudioAutocapitalizeEnum) *AudioElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *AudioElement) Autocorrect(a AudioAutocorrectEnum) *AudioElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *AudioElement) Autofocus(b bool) *AudioElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *AudioElement) Class(s ...string) *AudioElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *AudioElement) Contenteditable(a AudioContenteditableEnum) *AudioElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *AudioElement) Dir(a AudioDirEnum) *AudioElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *AudioElement) Draggable(a AudioDraggableEnum) *AudioElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *AudioElement) Enterkeyhint(a AudioEnterkeyhintEnum) *AudioElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *AudioElement) Hidden(a AudioHiddenEnum) *AudioElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *AudioElement) Id(s string) *AudioElement {
	e.attributes["id"] = s
	
	return e
}

func (e *AudioElement) Slot(s string) *AudioElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *AudioElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<audio")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</audio>")); err != nil {
		return err
	}

	return nil
}
