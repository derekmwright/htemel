// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type H4Element struct {
	attributes h4Attrs
	children   []htemel.Node
	skipRender bool
}

// H4 creates a tag <h4> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: These elements represent headings for their sections.
func H4(children ...htemel.Node) *H4Element {
	node := &H4Element{
		children: children, attributes: make(h4Attrs),
	}

	return node
}

func H4If(condition bool, children ...htemel.Node) *H4Element {
	if condition {
		return H4(children...)
	}

	return &H4Element{
		skipRender: true,
	}
}

func H4Ternary(condition bool, true htemel.Node, false htemel.Node) *H4Element {
	if condition {
		return H4(true)
	}

	return H4(false)
}

type H4AutocapitalizeEnum string

const (
	H4AutocapitalizeEnumOff        H4AutocapitalizeEnum = "off"
	H4AutocapitalizeEnumOn         H4AutocapitalizeEnum = "on"
	H4AutocapitalizeEnumSentences  H4AutocapitalizeEnum = "sentences"
	H4AutocapitalizeEnumWords      H4AutocapitalizeEnum = "words"
	H4AutocapitalizeEnumCharacters H4AutocapitalizeEnum = "characters"
	H4AutocapitalizeEnumNone       H4AutocapitalizeEnum = "none"
)

type H4AutocorrectEnum string

const (
	H4AutocorrectEnumOff   H4AutocorrectEnum = "off"
	H4AutocorrectEnumOn    H4AutocorrectEnum = "on"
	H4AutocorrectEnumEmpty H4AutocorrectEnum = ""
)

type H4ContenteditableEnum string

const (
	H4ContenteditableEnumTrue          H4ContenteditableEnum = "true"
	H4ContenteditableEnumFalse         H4ContenteditableEnum = "false"
	H4ContenteditableEnumPlaintextOnly H4ContenteditableEnum = "plaintext-only"
	H4ContenteditableEnumEmpty         H4ContenteditableEnum = ""
)

type H4DirEnum string

const (
	H4DirEnumLtr  H4DirEnum = "ltr"
	H4DirEnumRtl  H4DirEnum = "rtl"
	H4DirEnumAuto H4DirEnum = "auto"
)

type H4DraggableEnum string

const (
	H4DraggableEnumFalse H4DraggableEnum = "false"
	H4DraggableEnumTrue  H4DraggableEnum = "true"
)

type H4EnterkeyhintEnum string

const (
	H4EnterkeyhintEnumSend     H4EnterkeyhintEnum = "send"
	H4EnterkeyhintEnumDone     H4EnterkeyhintEnum = "done"
	H4EnterkeyhintEnumEnter    H4EnterkeyhintEnum = "enter"
	H4EnterkeyhintEnumGo       H4EnterkeyhintEnum = "go"
	H4EnterkeyhintEnumNext     H4EnterkeyhintEnum = "next"
	H4EnterkeyhintEnumPrevious H4EnterkeyhintEnum = "previous"
	H4EnterkeyhintEnumSearch   H4EnterkeyhintEnum = "search"
)

type H4HiddenEnum string

const (
	H4HiddenEnumHidden     H4HiddenEnum = "hidden"
	H4HiddenEnumUntilFound H4HiddenEnum = "until-found"
	H4HiddenEnumEmpty      H4HiddenEnum = ""
)

type H4InputmodeEnum string

const (
	H4InputmodeEnumUrl     H4InputmodeEnum = "url"
	H4InputmodeEnumDecimal H4InputmodeEnum = "decimal"
	H4InputmodeEnumEmail   H4InputmodeEnum = "email"
	H4InputmodeEnumNone    H4InputmodeEnum = "none"
	H4InputmodeEnumNumeric H4InputmodeEnum = "numeric"
	H4InputmodeEnumSearch  H4InputmodeEnum = "search"
	H4InputmodeEnumTel     H4InputmodeEnum = "tel"
	H4InputmodeEnumText    H4InputmodeEnum = "text"
)

type H4SpellcheckEnum string

const (
	H4SpellcheckEnumTrue  H4SpellcheckEnum = "true"
	H4SpellcheckEnumFalse H4SpellcheckEnum = "false"
	H4SpellcheckEnumEmpty H4SpellcheckEnum = ""
)

type H4TranslateEnum string

const (
	H4TranslateEnumNo    H4TranslateEnum = "no"
	H4TranslateEnumYes   H4TranslateEnum = "yes"
	H4TranslateEnumEmpty H4TranslateEnum = ""
)

type H4WritingsuggestionsEnum string

const (
	H4WritingsuggestionsEnumFalse H4WritingsuggestionsEnum = "false"
	H4WritingsuggestionsEnumTrue  H4WritingsuggestionsEnum = "true"
	H4WritingsuggestionsEnumEmpty H4WritingsuggestionsEnum = ""
)

type h4Attrs map[string]any

func (e *H4Element) Autocapitalize(a H4AutocapitalizeEnum) *H4Element {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *H4Element) Autocorrect(a H4AutocorrectEnum) *H4Element {
	e.attributes["autocorrect"] = a

	return e
}

func (e *H4Element) Autofocus(b bool) *H4Element {
	e.attributes["autofocus"] = b

	return e
}

func (e *H4Element) Class(s ...string) *H4Element {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *H4Element) Contenteditable(a H4ContenteditableEnum) *H4Element {
	e.attributes["contenteditable"] = a

	return e
}

func (e *H4Element) DataUnsafe(name string, s string) *H4Element {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *H4Element) Data(name string, s string) *H4Element {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *H4Element) Dir(a H4DirEnum) *H4Element {
	e.attributes["dir"] = a

	return e
}

func (e *H4Element) Draggable(a H4DraggableEnum) *H4Element {
	e.attributes["draggable"] = a

	return e
}

func (e *H4Element) Enterkeyhint(a H4EnterkeyhintEnum) *H4Element {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *H4Element) Hidden(a H4HiddenEnum) *H4Element {
	e.attributes["hidden"] = a

	return e
}

func (e *H4Element) Id(s string) *H4Element {
	e.attributes["id"] = s

	return e
}

func (e *H4Element) Inert(b bool) *H4Element {
	e.attributes["inert"] = b

	return e
}

func (e *H4Element) Inputmode(a H4InputmodeEnum) *H4Element {
	e.attributes["inputmode"] = a

	return e
}

func (e *H4Element) Itemid(s string) *H4Element {
	e.attributes["itemid"] = s

	return e
}

func (e *H4Element) Itemprop(s ...string) *H4Element {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *H4Element) Itemref(s ...string) *H4Element {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *H4Element) Itemscope(b bool) *H4Element {
	e.attributes["itemscope"] = b

	return e
}

func (e *H4Element) Itemtype(s ...string) *H4Element {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *H4Element) Lang(s string) *H4Element {
	e.attributes["lang"] = s

	return e
}

func (e *H4Element) Nonce(s string) *H4Element {
	e.attributes["nonce"] = s

	return e
}

func (e *H4Element) Popover(s string) *H4Element {
	e.attributes["popover"] = s

	return e
}

func (e *H4Element) Slot(s string) *H4Element {
	e.attributes["slot"] = s

	return e
}

func (e *H4Element) Spellcheck(a H4SpellcheckEnum) *H4Element {
	e.attributes["spellcheck"] = a

	return e
}

func (e *H4Element) Style(s string) *H4Element {
	e.attributes["style"] = s

	return e
}

func (e *H4Element) Tabindex(i int) *H4Element {
	e.attributes["tabindex"] = i

	return e
}

func (e *H4Element) Title(s string) *H4Element {
	e.attributes["title"] = s

	return e
}

func (e *H4Element) Translate(a H4TranslateEnum) *H4Element {
	e.attributes["translate"] = a

	return e
}

func (e *H4Element) Writingsuggestions(a H4WritingsuggestionsEnum) *H4Element {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *H4Element) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<h4")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}
	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</h4>")); err != nil {
		return err
	}

	return nil
}
