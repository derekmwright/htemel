// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type TableElement struct {
	attributes tableAttrs
	children []htemel.Node
	skipRender bool
}

// Table creates a tag <table> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The table element represents data with more than one dimension, in the form of a table.
func Table(children ...htemel.Node) *TableElement {
	node := &TableElement{
		children: children,
		attributes: make(tableAttrs),
	}

	return node
}

func TableIf(condition bool, children ...htemel.Node) *TableElement {
	if condition {
		return Table(children...)
	}

	return &TableElement{
		skipRender: true,
	}
}

type TableAutocapitalizeEnum string

const (
	TableAutocapitalizeEnumCharacters TableAutocapitalizeEnum = "characters"
	TableAutocapitalizeEnumNone TableAutocapitalizeEnum = "none"
	TableAutocapitalizeEnumOff TableAutocapitalizeEnum = "off"
	TableAutocapitalizeEnumOn TableAutocapitalizeEnum = "on"
	TableAutocapitalizeEnumSentences TableAutocapitalizeEnum = "sentences"
	TableAutocapitalizeEnumWords TableAutocapitalizeEnum = "words"
)

type TableAutocorrectEnum string

const (
	TableAutocorrectEnumOff TableAutocorrectEnum = "off"
	TableAutocorrectEnumOn TableAutocorrectEnum = "on"
)

type TableContenteditableEnum string

const (
	TableContenteditableEnumTrue TableContenteditableEnum = "true"
	TableContenteditableEnumFalse TableContenteditableEnum = "false"
	TableContenteditableEnumPlaintextOnly TableContenteditableEnum = "plaintext-only"
)

type TableDirEnum string

const (
	TableDirEnumRtl TableDirEnum = "rtl"
	TableDirEnumAuto TableDirEnum = "auto"
	TableDirEnumLtr TableDirEnum = "ltr"
)

type TableDraggableEnum string

const (
	TableDraggableEnumFalse TableDraggableEnum = "false"
	TableDraggableEnumTrue TableDraggableEnum = "true"
)

type TableEnterkeyhintEnum string

const (
	TableEnterkeyhintEnumGo TableEnterkeyhintEnum = "go"
	TableEnterkeyhintEnumNext TableEnterkeyhintEnum = "next"
	TableEnterkeyhintEnumPrevious TableEnterkeyhintEnum = "previous"
	TableEnterkeyhintEnumSearch TableEnterkeyhintEnum = "search"
	TableEnterkeyhintEnumSend TableEnterkeyhintEnum = "send"
	TableEnterkeyhintEnumDone TableEnterkeyhintEnum = "done"
	TableEnterkeyhintEnumEnter TableEnterkeyhintEnum = "enter"
)

type TableHiddenEnum string

const (
	TableHiddenEnumHidden TableHiddenEnum = "hidden"
	TableHiddenEnumUntilFound TableHiddenEnum = "until-found"
)

type tableAttrs map[string]any

func (e *TableElement) Autocapitalize(a TableAutocapitalizeEnum) *TableElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *TableElement) Autocorrect(a TableAutocorrectEnum) *TableElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *TableElement) Autofocus(b bool) *TableElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *TableElement) Class(s ...string) *TableElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *TableElement) Contenteditable(a TableContenteditableEnum) *TableElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *TableElement) Dir(a TableDirEnum) *TableElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *TableElement) Draggable(a TableDraggableEnum) *TableElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *TableElement) Enterkeyhint(a TableEnterkeyhintEnum) *TableElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *TableElement) Hidden(a TableHiddenEnum) *TableElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *TableElement) Id(s string) *TableElement {
	e.attributes["id"] = s
	
	return e
}

func (e *TableElement) Slot(s string) *TableElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *TableElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<table")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</table>")); err != nil {
		return err
	}

	return nil
}
