// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type TableElement struct {
	attributes tableAttrs
	children   []htemel.Node
	skipRender bool
}

// Table creates a tag <table> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The table element represents data with more than one dimension, in the form of a table.
func Table(children ...htemel.Node) *TableElement {
	node := &TableElement{
		children:   children,
		attributes: make(tableAttrs),
	}

	return node
}

func TableIf(condition bool, children ...htemel.Node) *TableElement {
	if condition {
		return Table(children...)
	}

	return &TableElement{
		skipRender: true,
	}
}

type TableAutocapitalizeAttrEnum string

const (
	TableAutocapitalizeAttrEnumCharacters TableAutocapitalizeAttrEnum = "characters"
	TableAutocapitalizeAttrEnumNone       TableAutocapitalizeAttrEnum = "none"
	TableAutocapitalizeAttrEnumOff        TableAutocapitalizeAttrEnum = "off"
	TableAutocapitalizeAttrEnumOn         TableAutocapitalizeAttrEnum = "on"
	TableAutocapitalizeAttrEnumSentences  TableAutocapitalizeAttrEnum = "sentences"
	TableAutocapitalizeAttrEnumWords      TableAutocapitalizeAttrEnum = "words"
)

type TableAutocorrectAttrEnum string

const (
	TableAutocorrectAttrEnumOff TableAutocorrectAttrEnum = "off"
	TableAutocorrectAttrEnumOn  TableAutocorrectAttrEnum = "on"
)

type TableContenteditableAttrEnum string

const (
	TableContenteditableAttrEnumFalse         TableContenteditableAttrEnum = "false"
	TableContenteditableAttrEnumPlaintextOnly TableContenteditableAttrEnum = "plaintext-only"
	TableContenteditableAttrEnumTrue          TableContenteditableAttrEnum = "true"
)

type tableAttrs map[string]any

func (e *TableElement) Autocapitalize(a TableAutocapitalizeAttrEnum) *TableElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *TableElement) Autocorrect(a TableAutocorrectAttrEnum) *TableElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *TableElement) Autofocus(b bool) *TableElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *TableElement) Class(s ...string) *TableElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *TableElement) Contenteditable(a TableContenteditableAttrEnum) *TableElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *TableElement) Id(s string) *TableElement {
	e.attributes["id"] = s

	return e
}

func (e *TableElement) Slot(s string) *TableElement {
	e.attributes["slot"] = s

	return e
}

func (e *TableElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<table")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</table>")); err != nil {
		return err
	}

	return nil
}
