// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type TableElement struct {
	attributes tableAttrs
	children   []htemel.Node
	skipRender bool
}

// Table creates a tag <table> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The table element represents data with more than one dimension, in the form of a table.
func Table(children ...htemel.Node) *TableElement {
	node := &TableElement{
		children:   children,
		attributes: make(tableAttrs),
	}

	return node
}

func TableIf(condition bool, children ...htemel.Node) *TableElement {
	if condition {
		return Table(children...)
	}

	return &TableElement{
		skipRender: true,
	}
}

func TableTernary(condition bool, true htemel.Node, false htemel.Node) *TableElement {
	if condition {
		return Table(true)
	}

	return Table(false)
}

type TableAutocapitalizeEnum string

const (
	TableAutocapitalizeEnumCharacters TableAutocapitalizeEnum = "characters"
	TableAutocapitalizeEnumNone       TableAutocapitalizeEnum = "none"
	TableAutocapitalizeEnumOff        TableAutocapitalizeEnum = "off"
	TableAutocapitalizeEnumOn         TableAutocapitalizeEnum = "on"
	TableAutocapitalizeEnumSentences  TableAutocapitalizeEnum = "sentences"
	TableAutocapitalizeEnumWords      TableAutocapitalizeEnum = "words"
)

type TableAutocorrectEnum string

const (
	TableAutocorrectEnumOff TableAutocorrectEnum = "off"
	TableAutocorrectEnumOn  TableAutocorrectEnum = "on"
)

type TableContenteditableEnum string

const (
	TableContenteditableEnumFalse         TableContenteditableEnum = "false"
	TableContenteditableEnumPlaintextOnly TableContenteditableEnum = "plaintext-only"
	TableContenteditableEnumTrue          TableContenteditableEnum = "true"
)

type TableDirEnum string

const (
	TableDirEnumAuto TableDirEnum = "auto"
	TableDirEnumLtr  TableDirEnum = "ltr"
	TableDirEnumRtl  TableDirEnum = "rtl"
)

type TableDraggableEnum string

const (
	TableDraggableEnumFalse TableDraggableEnum = "false"
	TableDraggableEnumTrue  TableDraggableEnum = "true"
)

type TableEnterkeyhintEnum string

const (
	TableEnterkeyhintEnumGo       TableEnterkeyhintEnum = "go"
	TableEnterkeyhintEnumNext     TableEnterkeyhintEnum = "next"
	TableEnterkeyhintEnumPrevious TableEnterkeyhintEnum = "previous"
	TableEnterkeyhintEnumSearch   TableEnterkeyhintEnum = "search"
	TableEnterkeyhintEnumSend     TableEnterkeyhintEnum = "send"
	TableEnterkeyhintEnumDone     TableEnterkeyhintEnum = "done"
	TableEnterkeyhintEnumEnter    TableEnterkeyhintEnum = "enter"
)

type TableHiddenEnum string

const (
	TableHiddenEnumHidden     TableHiddenEnum = "hidden"
	TableHiddenEnumUntilFound TableHiddenEnum = "until-found"
	TableHiddenEnumEmpty      TableHiddenEnum = ""
)

type TableInputmodeEnum string

const (
	TableInputmodeEnumTel     TableInputmodeEnum = "tel"
	TableInputmodeEnumText    TableInputmodeEnum = "text"
	TableInputmodeEnumUrl     TableInputmodeEnum = "url"
	TableInputmodeEnumDecimal TableInputmodeEnum = "decimal"
	TableInputmodeEnumEmail   TableInputmodeEnum = "email"
	TableInputmodeEnumNone    TableInputmodeEnum = "none"
	TableInputmodeEnumNumeric TableInputmodeEnum = "numeric"
	TableInputmodeEnumSearch  TableInputmodeEnum = "search"
)

type TableSpellcheckEnum string

const (
	TableSpellcheckEnumFalse TableSpellcheckEnum = "false"
	TableSpellcheckEnumTrue  TableSpellcheckEnum = "true"
)

type TableTranslateEnum string

const (
	TableTranslateEnumNo  TableTranslateEnum = "no"
	TableTranslateEnumYes TableTranslateEnum = "yes"
)

type TableWritingsuggestionsEnum string

const (
	TableWritingsuggestionsEnumFalse TableWritingsuggestionsEnum = "false"
	TableWritingsuggestionsEnumTrue  TableWritingsuggestionsEnum = "true"
)

type tableAttrs map[string]any

func (e *TableElement) Autocapitalize(a TableAutocapitalizeEnum) *TableElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *TableElement) Autocorrect(a TableAutocorrectEnum) *TableElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *TableElement) Autofocus(b bool) *TableElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *TableElement) Class(s ...string) *TableElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *TableElement) Contenteditable(a TableContenteditableEnum) *TableElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *TableElement) DataUnsafe(name string, s string) *TableElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *TableElement) Data(name string, s string) *TableElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *TableElement) Dir(a TableDirEnum) *TableElement {
	e.attributes["dir"] = a

	return e
}

func (e *TableElement) Draggable(a TableDraggableEnum) *TableElement {
	e.attributes["draggable"] = a

	return e
}

func (e *TableElement) Enterkeyhint(a TableEnterkeyhintEnum) *TableElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *TableElement) Hidden(a TableHiddenEnum) *TableElement {
	e.attributes["hidden"] = a

	return e
}

func (e *TableElement) Id(s string) *TableElement {
	e.attributes["id"] = s

	return e
}

func (e *TableElement) Inert(b bool) *TableElement {
	e.attributes["inert"] = b

	return e
}

func (e *TableElement) Inputmode(a TableInputmodeEnum) *TableElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *TableElement) Itemid(s string) *TableElement {
	e.attributes["itemid"] = s

	return e
}

func (e *TableElement) Itemprop(s ...string) *TableElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *TableElement) Itemref(s ...string) *TableElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *TableElement) Itemscope(b bool) *TableElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *TableElement) Itemtype(s ...string) *TableElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *TableElement) Lang(s string) *TableElement {
	e.attributes["lang"] = s

	return e
}

func (e *TableElement) Nonce(s string) *TableElement {
	e.attributes["nonce"] = s

	return e
}

func (e *TableElement) Popover(s string) *TableElement {
	e.attributes["popover"] = s

	return e
}

func (e *TableElement) Slot(s string) *TableElement {
	e.attributes["slot"] = s

	return e
}

func (e *TableElement) Spellcheck(a TableSpellcheckEnum) *TableElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *TableElement) Style(s string) *TableElement {
	e.attributes["style"] = s

	return e
}

func (e *TableElement) Tabindex(i int) *TableElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *TableElement) Title(s string) *TableElement {
	e.attributes["title"] = s

	return e
}

func (e *TableElement) Translate(a TableTranslateEnum) *TableElement {
	e.attributes["translate"] = a

	return e
}

func (e *TableElement) Writingsuggestions(a TableWritingsuggestionsEnum) *TableElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *TableElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<table")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</table>")); err != nil {
		return err
	}

	return nil
}
