// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type SElement struct {
	attributes sAttrs
	children   []htemel.Node
	skipRender bool
}

// S creates a tag <s> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The s element represents contents that are no longer accurate or no longer relevant.
func S(children ...htemel.Node) *SElement {
	node := &SElement{
		children:   children,
		attributes: make(sAttrs),
	}

	return node
}

func SIf(condition bool, children ...htemel.Node) *SElement {
	if condition {
		return S(children...)
	}

	return &SElement{
		skipRender: true,
	}
}

type SAutocapitalizeAttrEnum string

const (
	SAutocapitalizeAttrEnumOn         SAutocapitalizeAttrEnum = "on"
	SAutocapitalizeAttrEnumSentences  SAutocapitalizeAttrEnum = "sentences"
	SAutocapitalizeAttrEnumWords      SAutocapitalizeAttrEnum = "words"
	SAutocapitalizeAttrEnumCharacters SAutocapitalizeAttrEnum = "characters"
	SAutocapitalizeAttrEnumNone       SAutocapitalizeAttrEnum = "none"
	SAutocapitalizeAttrEnumOff        SAutocapitalizeAttrEnum = "off"
)

type SAutocorrectAttrEnum string

const (
	SAutocorrectAttrEnumOff SAutocorrectAttrEnum = "off"
	SAutocorrectAttrEnumOn  SAutocorrectAttrEnum = "on"
)

type SContenteditableAttrEnum string

const (
	SContenteditableAttrEnumFalse         SContenteditableAttrEnum = "false"
	SContenteditableAttrEnumPlaintextOnly SContenteditableAttrEnum = "plaintext-only"
	SContenteditableAttrEnumTrue          SContenteditableAttrEnum = "true"
)

type sAttrs map[string]any

func (e *SElement) Autocapitalize(a SAutocapitalizeAttrEnum) *SElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *SElement) Autocorrect(a SAutocorrectAttrEnum) *SElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *SElement) Autofocus(b bool) *SElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *SElement) Class(s ...string) *SElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *SElement) Contenteditable(a SContenteditableAttrEnum) *SElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *SElement) Id(s string) *SElement {
	e.attributes["id"] = s

	return e
}

func (e *SElement) Slot(s string) *SElement {
	e.attributes["slot"] = s

	return e
}

func (e *SElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<s")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</s>")); err != nil {
		return err
	}

	return nil
}
