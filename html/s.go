// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type SElement struct {
	attributes sAttrs
	children []htemel.Node
	skipRender bool
}

// S creates a tag <s> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The s element represents contents that are no longer accurate or no longer relevant.
func S(children ...htemel.Node) *SElement {
	node := &SElement{
		children: children,
		attributes: make(sAttrs),
	}

	return node
}

func SIf(condition bool, children ...htemel.Node) *SElement {
	if condition {
		return S(children...)
	}

	return &SElement{
		skipRender: true,
	}
}

type SAutocapitalizeEnum string

const (
	SAutocapitalizeEnumNone SAutocapitalizeEnum = "none"
	SAutocapitalizeEnumOff SAutocapitalizeEnum = "off"
	SAutocapitalizeEnumOn SAutocapitalizeEnum = "on"
	SAutocapitalizeEnumSentences SAutocapitalizeEnum = "sentences"
	SAutocapitalizeEnumWords SAutocapitalizeEnum = "words"
	SAutocapitalizeEnumCharacters SAutocapitalizeEnum = "characters"
)

type SAutocorrectEnum string

const (
	SAutocorrectEnumOff SAutocorrectEnum = "off"
	SAutocorrectEnumOn SAutocorrectEnum = "on"
)

type SContenteditableEnum string

const (
	SContenteditableEnumFalse SContenteditableEnum = "false"
	SContenteditableEnumPlaintextOnly SContenteditableEnum = "plaintext-only"
	SContenteditableEnumTrue SContenteditableEnum = "true"
)

type SDirEnum string

const (
	SDirEnumLtr SDirEnum = "ltr"
	SDirEnumRtl SDirEnum = "rtl"
	SDirEnumAuto SDirEnum = "auto"
)

type SDraggableEnum string

const (
	SDraggableEnumFalse SDraggableEnum = "false"
	SDraggableEnumTrue SDraggableEnum = "true"
)

type SEnterkeyhintEnum string

const (
	SEnterkeyhintEnumPrevious SEnterkeyhintEnum = "previous"
	SEnterkeyhintEnumSearch SEnterkeyhintEnum = "search"
	SEnterkeyhintEnumSend SEnterkeyhintEnum = "send"
	SEnterkeyhintEnumDone SEnterkeyhintEnum = "done"
	SEnterkeyhintEnumEnter SEnterkeyhintEnum = "enter"
	SEnterkeyhintEnumGo SEnterkeyhintEnum = "go"
	SEnterkeyhintEnumNext SEnterkeyhintEnum = "next"
)

type SHiddenEnum string

const (
	SHiddenEnumHidden SHiddenEnum = "hidden"
	SHiddenEnumUntilFound SHiddenEnum = "until-found"
)

type sAttrs map[string]any

func (e *SElement) Autocapitalize(a SAutocapitalizeEnum) *SElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *SElement) Autocorrect(a SAutocorrectEnum) *SElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *SElement) Autofocus(b bool) *SElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *SElement) Class(s ...string) *SElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *SElement) Contenteditable(a SContenteditableEnum) *SElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *SElement) Dir(a SDirEnum) *SElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *SElement) Draggable(a SDraggableEnum) *SElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *SElement) Enterkeyhint(a SEnterkeyhintEnum) *SElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *SElement) Hidden(a SHiddenEnum) *SElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *SElement) Id(s string) *SElement {
	e.attributes["id"] = s
	
	return e
}

func (e *SElement) Slot(s string) *SElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *SElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<s")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</s>")); err != nil {
		return err
	}

	return nil
}
