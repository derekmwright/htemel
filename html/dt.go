// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type DtElement struct {
	attributes dtAttrs
	children []htemel.Node
	skipRender bool
}

// Dt creates a tag <dt> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The dt element represents the term, or name, part of a term-description group in a description list (dl element).
func Dt(children ...htemel.Node) *DtElement {
	node := &DtElement{
		children: children,
		attributes: make(dtAttrs),
	}

	return node
}

func DtIf(condition bool, children ...htemel.Node) *DtElement {
	if condition {
		return Dt(children...)
	}

	return &DtElement{
		skipRender: true,
	}
}

type DtAutocapitalizeEnum string

const (
	DtAutocapitalizeEnumWords DtAutocapitalizeEnum = "words"
	DtAutocapitalizeEnumCharacters DtAutocapitalizeEnum = "characters"
	DtAutocapitalizeEnumNone DtAutocapitalizeEnum = "none"
	DtAutocapitalizeEnumOff DtAutocapitalizeEnum = "off"
	DtAutocapitalizeEnumOn DtAutocapitalizeEnum = "on"
	DtAutocapitalizeEnumSentences DtAutocapitalizeEnum = "sentences"
)

type DtAutocorrectEnum string

const (
	DtAutocorrectEnumOff DtAutocorrectEnum = "off"
	DtAutocorrectEnumOn DtAutocorrectEnum = "on"
)

type DtContenteditableEnum string

const (
	DtContenteditableEnumTrue DtContenteditableEnum = "true"
	DtContenteditableEnumFalse DtContenteditableEnum = "false"
	DtContenteditableEnumPlaintextOnly DtContenteditableEnum = "plaintext-only"
)

type DtDirEnum string

const (
	DtDirEnumAuto DtDirEnum = "auto"
	DtDirEnumLtr DtDirEnum = "ltr"
	DtDirEnumRtl DtDirEnum = "rtl"
)

type DtDraggableEnum string

const (
	DtDraggableEnumFalse DtDraggableEnum = "false"
	DtDraggableEnumTrue DtDraggableEnum = "true"
)

type DtEnterkeyhintEnum string

const (
	DtEnterkeyhintEnumEnter DtEnterkeyhintEnum = "enter"
	DtEnterkeyhintEnumGo DtEnterkeyhintEnum = "go"
	DtEnterkeyhintEnumNext DtEnterkeyhintEnum = "next"
	DtEnterkeyhintEnumPrevious DtEnterkeyhintEnum = "previous"
	DtEnterkeyhintEnumSearch DtEnterkeyhintEnum = "search"
	DtEnterkeyhintEnumSend DtEnterkeyhintEnum = "send"
	DtEnterkeyhintEnumDone DtEnterkeyhintEnum = "done"
)

type DtHiddenEnum string

const (
	DtHiddenEnumUntilFound DtHiddenEnum = "until-found"
	DtHiddenEnumHidden DtHiddenEnum = "hidden"
)

type dtAttrs map[string]any

func (e *DtElement) Autocapitalize(a DtAutocapitalizeEnum) *DtElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *DtElement) Autocorrect(a DtAutocorrectEnum) *DtElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *DtElement) Autofocus(b bool) *DtElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *DtElement) Class(s ...string) *DtElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *DtElement) Contenteditable(a DtContenteditableEnum) *DtElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *DtElement) Dir(a DtDirEnum) *DtElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *DtElement) Draggable(a DtDraggableEnum) *DtElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *DtElement) Enterkeyhint(a DtEnterkeyhintEnum) *DtElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *DtElement) Hidden(a DtHiddenEnum) *DtElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *DtElement) Id(s string) *DtElement {
	e.attributes["id"] = s
	
	return e
}

func (e *DtElement) Slot(s string) *DtElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *DtElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<dt")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</dt>")); err != nil {
		return err
	}

	return nil
}
