// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type DtElement struct {
	attributes dtAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// Dt creates a tag <dt> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The dt element represents the term, or name, part of a term-description group in a description list (dl element).
func Dt(children ...htemel.Node) *DtElement {
	node := &DtElement{
		children: children, attributes: make(dtAttrs),
	}

	return node
}

func DtIf(condition bool, children ...htemel.Node) *DtElement {
	if condition {
		return Dt(children...)
	}

	return &DtElement{
		skipRender: true,
	}
}

func DtTernary(condition bool, true htemel.Node, false htemel.Node) *DtElement {
	if condition {
		return Dt(true)
	}

	return Dt(false)
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *DtElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *DtElement) AddIndent(i int) {
	e.indent = i + 1
}

type DtAutocapitalizeEnum string

const (
	DtAutocapitalizeEnumCharacters DtAutocapitalizeEnum = "characters"
	DtAutocapitalizeEnumNone       DtAutocapitalizeEnum = "none"
	DtAutocapitalizeEnumOff        DtAutocapitalizeEnum = "off"
	DtAutocapitalizeEnumOn         DtAutocapitalizeEnum = "on"
	DtAutocapitalizeEnumSentences  DtAutocapitalizeEnum = "sentences"
	DtAutocapitalizeEnumWords      DtAutocapitalizeEnum = "words"
)

type DtAutocorrectEnum string

const (
	DtAutocorrectEnumOff   DtAutocorrectEnum = "off"
	DtAutocorrectEnumOn    DtAutocorrectEnum = "on"
	DtAutocorrectEnumEmpty DtAutocorrectEnum = ""
)

type DtContenteditableEnum string

const (
	DtContenteditableEnumFalse         DtContenteditableEnum = "false"
	DtContenteditableEnumPlaintextOnly DtContenteditableEnum = "plaintext-only"
	DtContenteditableEnumTrue          DtContenteditableEnum = "true"
	DtContenteditableEnumEmpty         DtContenteditableEnum = ""
)

type DtDirEnum string

const (
	DtDirEnumAuto DtDirEnum = "auto"
	DtDirEnumLtr  DtDirEnum = "ltr"
	DtDirEnumRtl  DtDirEnum = "rtl"
)

type DtDraggableEnum string

const (
	DtDraggableEnumFalse DtDraggableEnum = "false"
	DtDraggableEnumTrue  DtDraggableEnum = "true"
)

type DtEnterkeyhintEnum string

const (
	DtEnterkeyhintEnumPrevious DtEnterkeyhintEnum = "previous"
	DtEnterkeyhintEnumSearch   DtEnterkeyhintEnum = "search"
	DtEnterkeyhintEnumSend     DtEnterkeyhintEnum = "send"
	DtEnterkeyhintEnumDone     DtEnterkeyhintEnum = "done"
	DtEnterkeyhintEnumEnter    DtEnterkeyhintEnum = "enter"
	DtEnterkeyhintEnumGo       DtEnterkeyhintEnum = "go"
	DtEnterkeyhintEnumNext     DtEnterkeyhintEnum = "next"
)

type DtHiddenEnum string

const (
	DtHiddenEnumHidden     DtHiddenEnum = "hidden"
	DtHiddenEnumUntilFound DtHiddenEnum = "until-found"
	DtHiddenEnumEmpty      DtHiddenEnum = ""
)

type DtInputmodeEnum string

const (
	DtInputmodeEnumNumeric DtInputmodeEnum = "numeric"
	DtInputmodeEnumSearch  DtInputmodeEnum = "search"
	DtInputmodeEnumTel     DtInputmodeEnum = "tel"
	DtInputmodeEnumText    DtInputmodeEnum = "text"
	DtInputmodeEnumUrl     DtInputmodeEnum = "url"
	DtInputmodeEnumDecimal DtInputmodeEnum = "decimal"
	DtInputmodeEnumEmail   DtInputmodeEnum = "email"
	DtInputmodeEnumNone    DtInputmodeEnum = "none"
)

type DtSpellcheckEnum string

const (
	DtSpellcheckEnumFalse DtSpellcheckEnum = "false"
	DtSpellcheckEnumTrue  DtSpellcheckEnum = "true"
	DtSpellcheckEnumEmpty DtSpellcheckEnum = ""
)

type DtTranslateEnum string

const (
	DtTranslateEnumNo    DtTranslateEnum = "no"
	DtTranslateEnumYes   DtTranslateEnum = "yes"
	DtTranslateEnumEmpty DtTranslateEnum = ""
)

type DtWritingsuggestionsEnum string

const (
	DtWritingsuggestionsEnumFalse DtWritingsuggestionsEnum = "false"
	DtWritingsuggestionsEnumTrue  DtWritingsuggestionsEnum = "true"
	DtWritingsuggestionsEnumEmpty DtWritingsuggestionsEnum = ""
)

type dtAttrs map[string]any

func (e *DtElement) Autocapitalize(a DtAutocapitalizeEnum) *DtElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *DtElement) Autocorrect(a DtAutocorrectEnum) *DtElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *DtElement) Autofocus(b bool) *DtElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *DtElement) Class(s ...string) *DtElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *DtElement) Contenteditable(a DtContenteditableEnum) *DtElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *DtElement) DataUnsafe(name string, s string) *DtElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *DtElement) Data(name string, s string) *DtElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *DtElement) Dir(a DtDirEnum) *DtElement {
	e.attributes["dir"] = a

	return e
}

func (e *DtElement) Draggable(a DtDraggableEnum) *DtElement {
	e.attributes["draggable"] = a

	return e
}

func (e *DtElement) Enterkeyhint(a DtEnterkeyhintEnum) *DtElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *DtElement) Hidden(a DtHiddenEnum) *DtElement {
	e.attributes["hidden"] = a

	return e
}

func (e *DtElement) Id(s string) *DtElement {
	e.attributes["id"] = s

	return e
}

func (e *DtElement) Inert(b bool) *DtElement {
	e.attributes["inert"] = b

	return e
}

func (e *DtElement) Inputmode(a DtInputmodeEnum) *DtElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *DtElement) Itemid(s string) *DtElement {
	e.attributes["itemid"] = s

	return e
}

func (e *DtElement) Itemprop(s ...string) *DtElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *DtElement) Itemref(s ...string) *DtElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *DtElement) Itemscope(b bool) *DtElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *DtElement) Itemtype(s ...string) *DtElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *DtElement) Lang(s string) *DtElement {
	e.attributes["lang"] = s

	return e
}

func (e *DtElement) Nonce(s string) *DtElement {
	e.attributes["nonce"] = s

	return e
}

func (e *DtElement) Popover(s string) *DtElement {
	e.attributes["popover"] = s

	return e
}

func (e *DtElement) Slot(s string) *DtElement {
	e.attributes["slot"] = s

	return e
}

func (e *DtElement) Spellcheck(a DtSpellcheckEnum) *DtElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *DtElement) Style(s string) *DtElement {
	e.attributes["style"] = s

	return e
}

func (e *DtElement) Tabindex(i int) *DtElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *DtElement) Title(s string) *DtElement {
	e.attributes["title"] = s

	return e
}

func (e *DtElement) Translate(a DtTranslateEnum) *DtElement {
	e.attributes["translate"] = a

	return e
}

func (e *DtElement) Writingsuggestions(a DtWritingsuggestionsEnum) *DtElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *DtElement) Render(w io.Writer) error {
	indent := strings.Repeat("  ", e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<dt")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}
	for _, child := range e.children {
		child.AddIndent(e.Indent())
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(indent + "</dt>\n")); err != nil {
		return err
	}

	return nil
}
