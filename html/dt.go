// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type DtElement struct {
	attributes dtAttrs
	children   []htemel.Node
	skipRender bool
}

// Dt creates a tag <dt> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The dt element represents the term, or name, part of a term-description group in a description list (dl element).
func Dt(children ...htemel.Node) *DtElement {
	node := &DtElement{
		children:   children,
		attributes: make(dtAttrs),
	}

	return node
}

func DtIf(condition bool, children ...htemel.Node) *DtElement {
	if condition {
		return Dt(children...)
	}

	return &DtElement{
		skipRender: true,
	}
}

type DtAutocapitalizeAttrEnum string

const (
	DtAutocapitalizeAttrEnumSentences  DtAutocapitalizeAttrEnum = "sentences"
	DtAutocapitalizeAttrEnumWords      DtAutocapitalizeAttrEnum = "words"
	DtAutocapitalizeAttrEnumCharacters DtAutocapitalizeAttrEnum = "characters"
	DtAutocapitalizeAttrEnumNone       DtAutocapitalizeAttrEnum = "none"
	DtAutocapitalizeAttrEnumOff        DtAutocapitalizeAttrEnum = "off"
	DtAutocapitalizeAttrEnumOn         DtAutocapitalizeAttrEnum = "on"
)

type DtAutocorrectAttrEnum string

const (
	DtAutocorrectAttrEnumOff DtAutocorrectAttrEnum = "off"
	DtAutocorrectAttrEnumOn  DtAutocorrectAttrEnum = "on"
)

type DtContenteditableAttrEnum string

const (
	DtContenteditableAttrEnumFalse         DtContenteditableAttrEnum = "false"
	DtContenteditableAttrEnumPlaintextOnly DtContenteditableAttrEnum = "plaintext-only"
	DtContenteditableAttrEnumTrue          DtContenteditableAttrEnum = "true"
)

type dtAttrs map[string]any

func (e *DtElement) Autocapitalize(a DtAutocapitalizeAttrEnum) *DtElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *DtElement) Autocorrect(a DtAutocorrectAttrEnum) *DtElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *DtElement) Autofocus(b bool) *DtElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *DtElement) Class(s ...string) *DtElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *DtElement) Contenteditable(a DtContenteditableAttrEnum) *DtElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *DtElement) Id(s string) *DtElement {
	e.attributes["id"] = s

	return e
}

func (e *DtElement) Slot(s string) *DtElement {
	e.attributes["slot"] = s

	return e
}

func (e *DtElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<dt")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</dt>")); err != nil {
		return err
	}

	return nil
}
