// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type FigcaptionElement struct {
	attributes figcaptionAttrs
	children   []htemel.Node
	skipRender bool
}

// Figcaption creates a tag <figcaption> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The figcaption element represents a caption or legend for the rest of the contents of the figcaption element's parent figure element, if any.
func Figcaption(children ...htemel.Node) *FigcaptionElement {
	node := &FigcaptionElement{
		children:   children,
		attributes: make(figcaptionAttrs),
	}

	return node
}

func FigcaptionIf(condition bool, children ...htemel.Node) *FigcaptionElement {
	if condition {
		return Figcaption(children...)
	}

	return &FigcaptionElement{
		skipRender: true,
	}
}

type FigcaptionAutocapitalizeAttrEnum string

const (
	FigcaptionAutocapitalizeAttrEnumCharacters FigcaptionAutocapitalizeAttrEnum = "characters"
	FigcaptionAutocapitalizeAttrEnumNone       FigcaptionAutocapitalizeAttrEnum = "none"
	FigcaptionAutocapitalizeAttrEnumOff        FigcaptionAutocapitalizeAttrEnum = "off"
	FigcaptionAutocapitalizeAttrEnumOn         FigcaptionAutocapitalizeAttrEnum = "on"
	FigcaptionAutocapitalizeAttrEnumSentences  FigcaptionAutocapitalizeAttrEnum = "sentences"
	FigcaptionAutocapitalizeAttrEnumWords      FigcaptionAutocapitalizeAttrEnum = "words"
)

type FigcaptionAutocorrectAttrEnum string

const (
	FigcaptionAutocorrectAttrEnumOff FigcaptionAutocorrectAttrEnum = "off"
	FigcaptionAutocorrectAttrEnumOn  FigcaptionAutocorrectAttrEnum = "on"
)

type FigcaptionContenteditableAttrEnum string

const (
	FigcaptionContenteditableAttrEnumPlaintextOnly FigcaptionContenteditableAttrEnum = "plaintext-only"
	FigcaptionContenteditableAttrEnumTrue          FigcaptionContenteditableAttrEnum = "true"
	FigcaptionContenteditableAttrEnumFalse         FigcaptionContenteditableAttrEnum = "false"
)

type figcaptionAttrs map[string]any

func (e *FigcaptionElement) Autocapitalize(a FigcaptionAutocapitalizeAttrEnum) *FigcaptionElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *FigcaptionElement) Autocorrect(a FigcaptionAutocorrectAttrEnum) *FigcaptionElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *FigcaptionElement) Autofocus(b bool) *FigcaptionElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *FigcaptionElement) Class(s ...string) *FigcaptionElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *FigcaptionElement) Contenteditable(a FigcaptionContenteditableAttrEnum) *FigcaptionElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *FigcaptionElement) Id(s string) *FigcaptionElement {
	e.attributes["id"] = s

	return e
}

func (e *FigcaptionElement) Slot(s string) *FigcaptionElement {
	e.attributes["slot"] = s

	return e
}

func (e *FigcaptionElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<figcaption")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		w.Write([]byte(" " + key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</figcaption>")); err != nil {
		return err
	}

	return nil
}
