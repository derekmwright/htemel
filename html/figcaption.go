// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type FigcaptionElement struct {
	attributes figcaptionAttrs
	children []htemel.Node
	skipRender bool
}

// Figcaption creates a tag <figcaption> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The figcaption element represents a caption or legend for the rest of the contents of the figcaption element's parent figure element, if any.
func Figcaption(children ...htemel.Node) *FigcaptionElement {
	node := &FigcaptionElement{
		children: children,
		attributes: make(figcaptionAttrs),
	}

	return node
}

func FigcaptionIf(condition bool, children ...htemel.Node) *FigcaptionElement {
	if condition {
		return Figcaption(children...)
	}

	return &FigcaptionElement{
		skipRender: true,
	}
}

type FigcaptionAutocapitalizeEnum string

const (
	FigcaptionAutocapitalizeEnumCharacters FigcaptionAutocapitalizeEnum = "characters"
	FigcaptionAutocapitalizeEnumNone FigcaptionAutocapitalizeEnum = "none"
	FigcaptionAutocapitalizeEnumOff FigcaptionAutocapitalizeEnum = "off"
	FigcaptionAutocapitalizeEnumOn FigcaptionAutocapitalizeEnum = "on"
	FigcaptionAutocapitalizeEnumSentences FigcaptionAutocapitalizeEnum = "sentences"
	FigcaptionAutocapitalizeEnumWords FigcaptionAutocapitalizeEnum = "words"
)

type FigcaptionAutocorrectEnum string

const (
	FigcaptionAutocorrectEnumOff FigcaptionAutocorrectEnum = "off"
	FigcaptionAutocorrectEnumOn FigcaptionAutocorrectEnum = "on"
)

type FigcaptionContenteditableEnum string

const (
	FigcaptionContenteditableEnumFalse FigcaptionContenteditableEnum = "false"
	FigcaptionContenteditableEnumPlaintextOnly FigcaptionContenteditableEnum = "plaintext-only"
	FigcaptionContenteditableEnumTrue FigcaptionContenteditableEnum = "true"
)

type FigcaptionDirEnum string

const (
	FigcaptionDirEnumLtr FigcaptionDirEnum = "ltr"
	FigcaptionDirEnumRtl FigcaptionDirEnum = "rtl"
	FigcaptionDirEnumAuto FigcaptionDirEnum = "auto"
)

type FigcaptionDraggableEnum string

const (
	FigcaptionDraggableEnumFalse FigcaptionDraggableEnum = "false"
	FigcaptionDraggableEnumTrue FigcaptionDraggableEnum = "true"
)

type FigcaptionEnterkeyhintEnum string

const (
	FigcaptionEnterkeyhintEnumSend FigcaptionEnterkeyhintEnum = "send"
	FigcaptionEnterkeyhintEnumDone FigcaptionEnterkeyhintEnum = "done"
	FigcaptionEnterkeyhintEnumEnter FigcaptionEnterkeyhintEnum = "enter"
	FigcaptionEnterkeyhintEnumGo FigcaptionEnterkeyhintEnum = "go"
	FigcaptionEnterkeyhintEnumNext FigcaptionEnterkeyhintEnum = "next"
	FigcaptionEnterkeyhintEnumPrevious FigcaptionEnterkeyhintEnum = "previous"
	FigcaptionEnterkeyhintEnumSearch FigcaptionEnterkeyhintEnum = "search"
)

type FigcaptionHiddenEnum string

const (
	FigcaptionHiddenEnumHidden FigcaptionHiddenEnum = "hidden"
	FigcaptionHiddenEnumUntilFound FigcaptionHiddenEnum = "until-found"
)

type figcaptionAttrs map[string]any

func (e *FigcaptionElement) Autocapitalize(a FigcaptionAutocapitalizeEnum) *FigcaptionElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *FigcaptionElement) Autocorrect(a FigcaptionAutocorrectEnum) *FigcaptionElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *FigcaptionElement) Autofocus(b bool) *FigcaptionElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *FigcaptionElement) Class(s ...string) *FigcaptionElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *FigcaptionElement) Contenteditable(a FigcaptionContenteditableEnum) *FigcaptionElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *FigcaptionElement) Dir(a FigcaptionDirEnum) *FigcaptionElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *FigcaptionElement) Draggable(a FigcaptionDraggableEnum) *FigcaptionElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *FigcaptionElement) Enterkeyhint(a FigcaptionEnterkeyhintEnum) *FigcaptionElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *FigcaptionElement) Hidden(a FigcaptionHiddenEnum) *FigcaptionElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *FigcaptionElement) Id(s string) *FigcaptionElement {
	e.attributes["id"] = s
	
	return e
}

func (e *FigcaptionElement) Slot(s string) *FigcaptionElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *FigcaptionElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<figcaption")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</figcaption>")); err != nil {
		return err
	}

	return nil
}
