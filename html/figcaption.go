// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type FigcaptionElement struct {
	attributes figcaptionAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// Figcaption creates a tag <figcaption> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The figcaption element represents a caption or legend for the rest of the contents of the figcaption element's parent figure element, if any.
func Figcaption(children ...htemel.Node) *FigcaptionElement {
	node := &FigcaptionElement{
		children: children, attributes: make(figcaptionAttrs),
	}

	return node
}

func FigcaptionIf(condition bool, children ...htemel.Node) *FigcaptionElement {
	if condition {
		return Figcaption(children...)
	}

	return &FigcaptionElement{
		skipRender: true,
	}
}

func FigcaptionTernary(condition bool, true htemel.Node, false htemel.Node) *FigcaptionElement {
	if condition {
		return Figcaption(true)
	}

	return Figcaption(false)
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *FigcaptionElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *FigcaptionElement) AddIndent(i int) {
	e.indent = i + 1
}

type FigcaptionAutocapitalizeEnum string

const (
	FigcaptionAutocapitalizeEnumOff        FigcaptionAutocapitalizeEnum = "off"
	FigcaptionAutocapitalizeEnumOn         FigcaptionAutocapitalizeEnum = "on"
	FigcaptionAutocapitalizeEnumSentences  FigcaptionAutocapitalizeEnum = "sentences"
	FigcaptionAutocapitalizeEnumWords      FigcaptionAutocapitalizeEnum = "words"
	FigcaptionAutocapitalizeEnumCharacters FigcaptionAutocapitalizeEnum = "characters"
	FigcaptionAutocapitalizeEnumNone       FigcaptionAutocapitalizeEnum = "none"
)

type FigcaptionAutocorrectEnum string

const (
	FigcaptionAutocorrectEnumOff   FigcaptionAutocorrectEnum = "off"
	FigcaptionAutocorrectEnumOn    FigcaptionAutocorrectEnum = "on"
	FigcaptionAutocorrectEnumEmpty FigcaptionAutocorrectEnum = ""
)

type FigcaptionContenteditableEnum string

const (
	FigcaptionContenteditableEnumFalse         FigcaptionContenteditableEnum = "false"
	FigcaptionContenteditableEnumPlaintextOnly FigcaptionContenteditableEnum = "plaintext-only"
	FigcaptionContenteditableEnumTrue          FigcaptionContenteditableEnum = "true"
	FigcaptionContenteditableEnumEmpty         FigcaptionContenteditableEnum = ""
)

type FigcaptionDirEnum string

const (
	FigcaptionDirEnumAuto FigcaptionDirEnum = "auto"
	FigcaptionDirEnumLtr  FigcaptionDirEnum = "ltr"
	FigcaptionDirEnumRtl  FigcaptionDirEnum = "rtl"
)

type FigcaptionDraggableEnum string

const (
	FigcaptionDraggableEnumFalse FigcaptionDraggableEnum = "false"
	FigcaptionDraggableEnumTrue  FigcaptionDraggableEnum = "true"
)

type FigcaptionEnterkeyhintEnum string

const (
	FigcaptionEnterkeyhintEnumDone     FigcaptionEnterkeyhintEnum = "done"
	FigcaptionEnterkeyhintEnumEnter    FigcaptionEnterkeyhintEnum = "enter"
	FigcaptionEnterkeyhintEnumGo       FigcaptionEnterkeyhintEnum = "go"
	FigcaptionEnterkeyhintEnumNext     FigcaptionEnterkeyhintEnum = "next"
	FigcaptionEnterkeyhintEnumPrevious FigcaptionEnterkeyhintEnum = "previous"
	FigcaptionEnterkeyhintEnumSearch   FigcaptionEnterkeyhintEnum = "search"
	FigcaptionEnterkeyhintEnumSend     FigcaptionEnterkeyhintEnum = "send"
)

type FigcaptionHiddenEnum string

const (
	FigcaptionHiddenEnumHidden     FigcaptionHiddenEnum = "hidden"
	FigcaptionHiddenEnumUntilFound FigcaptionHiddenEnum = "until-found"
	FigcaptionHiddenEnumEmpty      FigcaptionHiddenEnum = ""
)

type FigcaptionInputmodeEnum string

const (
	FigcaptionInputmodeEnumNumeric FigcaptionInputmodeEnum = "numeric"
	FigcaptionInputmodeEnumSearch  FigcaptionInputmodeEnum = "search"
	FigcaptionInputmodeEnumTel     FigcaptionInputmodeEnum = "tel"
	FigcaptionInputmodeEnumText    FigcaptionInputmodeEnum = "text"
	FigcaptionInputmodeEnumUrl     FigcaptionInputmodeEnum = "url"
	FigcaptionInputmodeEnumDecimal FigcaptionInputmodeEnum = "decimal"
	FigcaptionInputmodeEnumEmail   FigcaptionInputmodeEnum = "email"
	FigcaptionInputmodeEnumNone    FigcaptionInputmodeEnum = "none"
)

type FigcaptionSpellcheckEnum string

const (
	FigcaptionSpellcheckEnumFalse FigcaptionSpellcheckEnum = "false"
	FigcaptionSpellcheckEnumTrue  FigcaptionSpellcheckEnum = "true"
	FigcaptionSpellcheckEnumEmpty FigcaptionSpellcheckEnum = ""
)

type FigcaptionTranslateEnum string

const (
	FigcaptionTranslateEnumNo    FigcaptionTranslateEnum = "no"
	FigcaptionTranslateEnumYes   FigcaptionTranslateEnum = "yes"
	FigcaptionTranslateEnumEmpty FigcaptionTranslateEnum = ""
)

type FigcaptionWritingsuggestionsEnum string

const (
	FigcaptionWritingsuggestionsEnumFalse FigcaptionWritingsuggestionsEnum = "false"
	FigcaptionWritingsuggestionsEnumTrue  FigcaptionWritingsuggestionsEnum = "true"
	FigcaptionWritingsuggestionsEnumEmpty FigcaptionWritingsuggestionsEnum = ""
)

type figcaptionAttrs map[string]any

func (e *FigcaptionElement) Autocapitalize(a FigcaptionAutocapitalizeEnum) *FigcaptionElement {
	e.attributes["autocapitalize"] = a

	return e
}

func FigcaptionAutocapitalizeCustom(s string) FigcaptionAutocapitalizeEnum {
	return FigcaptionAutocapitalizeEnum(s)
}

func (e *FigcaptionElement) Autocorrect(a FigcaptionAutocorrectEnum) *FigcaptionElement {
	e.attributes["autocorrect"] = a

	return e
}

func FigcaptionAutocorrectCustom(s string) FigcaptionAutocorrectEnum {
	return FigcaptionAutocorrectEnum(s)
}

func (e *FigcaptionElement) Autofocus(b bool) *FigcaptionElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *FigcaptionElement) Class(s ...string) *FigcaptionElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *FigcaptionElement) Contenteditable(a FigcaptionContenteditableEnum) *FigcaptionElement {
	e.attributes["contenteditable"] = a

	return e
}

func FigcaptionContenteditableCustom(s string) FigcaptionContenteditableEnum {
	return FigcaptionContenteditableEnum(s)
}

func (e *FigcaptionElement) DataUnsafe(name string, s string) *FigcaptionElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *FigcaptionElement) Data(name string, s string) *FigcaptionElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *FigcaptionElement) Dir(a FigcaptionDirEnum) *FigcaptionElement {
	e.attributes["dir"] = a

	return e
}

func FigcaptionDirCustom(s string) FigcaptionDirEnum {
	return FigcaptionDirEnum(s)
}

func (e *FigcaptionElement) Draggable(a FigcaptionDraggableEnum) *FigcaptionElement {
	e.attributes["draggable"] = a

	return e
}

func FigcaptionDraggableCustom(s string) FigcaptionDraggableEnum {
	return FigcaptionDraggableEnum(s)
}

func (e *FigcaptionElement) Enterkeyhint(a FigcaptionEnterkeyhintEnum) *FigcaptionElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func FigcaptionEnterkeyhintCustom(s string) FigcaptionEnterkeyhintEnum {
	return FigcaptionEnterkeyhintEnum(s)
}

func (e *FigcaptionElement) Hidden(a FigcaptionHiddenEnum) *FigcaptionElement {
	e.attributes["hidden"] = a

	return e
}

func FigcaptionHiddenCustom(s string) FigcaptionHiddenEnum {
	return FigcaptionHiddenEnum(s)
}

func (e *FigcaptionElement) Id(s string) *FigcaptionElement {
	e.attributes["id"] = s

	return e
}

func (e *FigcaptionElement) Inert(b bool) *FigcaptionElement {
	e.attributes["inert"] = b

	return e
}

func (e *FigcaptionElement) Inputmode(a FigcaptionInputmodeEnum) *FigcaptionElement {
	e.attributes["inputmode"] = a

	return e
}

func FigcaptionInputmodeCustom(s string) FigcaptionInputmodeEnum {
	return FigcaptionInputmodeEnum(s)
}

func (e *FigcaptionElement) Itemid(s string) *FigcaptionElement {
	e.attributes["itemid"] = s

	return e
}

func (e *FigcaptionElement) Itemprop(s ...string) *FigcaptionElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *FigcaptionElement) Itemref(s ...string) *FigcaptionElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *FigcaptionElement) Itemscope(b bool) *FigcaptionElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *FigcaptionElement) Itemtype(s ...string) *FigcaptionElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *FigcaptionElement) Lang(s string) *FigcaptionElement {
	e.attributes["lang"] = s

	return e
}

func (e *FigcaptionElement) Nonce(s string) *FigcaptionElement {
	e.attributes["nonce"] = s

	return e
}

func (e *FigcaptionElement) Popover(s string) *FigcaptionElement {
	e.attributes["popover"] = s

	return e
}

func (e *FigcaptionElement) Slot(s string) *FigcaptionElement {
	e.attributes["slot"] = s

	return e
}

func (e *FigcaptionElement) Spellcheck(a FigcaptionSpellcheckEnum) *FigcaptionElement {
	e.attributes["spellcheck"] = a

	return e
}

func FigcaptionSpellcheckCustom(s string) FigcaptionSpellcheckEnum {
	return FigcaptionSpellcheckEnum(s)
}

func (e *FigcaptionElement) Style(s string) *FigcaptionElement {
	e.attributes["style"] = s

	return e
}

func (e *FigcaptionElement) Tabindex(i int) *FigcaptionElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *FigcaptionElement) Title(s string) *FigcaptionElement {
	e.attributes["title"] = s

	return e
}

func (e *FigcaptionElement) Translate(a FigcaptionTranslateEnum) *FigcaptionElement {
	e.attributes["translate"] = a

	return e
}

func FigcaptionTranslateCustom(s string) FigcaptionTranslateEnum {
	return FigcaptionTranslateEnum(s)
}

func (e *FigcaptionElement) Writingsuggestions(a FigcaptionWritingsuggestionsEnum) *FigcaptionElement {
	e.attributes["writingsuggestions"] = a

	return e
}

func FigcaptionWritingsuggestionsCustom(s string) FigcaptionWritingsuggestionsEnum {
	return FigcaptionWritingsuggestionsEnum(s)
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *FigcaptionElement) Render(w io.Writer) error {
	indent := htemel.SetIndent(e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<figcaption")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}
	for _, child := range e.children {
		child.AddIndent(e.Indent())
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(indent + "</figcaption>\n")); err != nil {
		return err
	}

	return nil
}
