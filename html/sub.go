// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type SubElement struct {
	attributes subAttrs
	children []htemel.Node
	skipRender bool
}

// Sub creates a tag <sub> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The sup element represents a superscript and the sub element represents a subscript.
func Sub(children ...htemel.Node) *SubElement {
	node := &SubElement{
		children: children,
		attributes: make(subAttrs),
	}

	return node
}

func SubIf(condition bool, children ...htemel.Node) *SubElement {
	if condition {
		return Sub(children...)
	}

	return &SubElement{
		skipRender: true,
	}
}

type SubAutocapitalizeEnum string

const (
	SubAutocapitalizeEnumOn SubAutocapitalizeEnum = "on"
	SubAutocapitalizeEnumSentences SubAutocapitalizeEnum = "sentences"
	SubAutocapitalizeEnumWords SubAutocapitalizeEnum = "words"
	SubAutocapitalizeEnumCharacters SubAutocapitalizeEnum = "characters"
	SubAutocapitalizeEnumNone SubAutocapitalizeEnum = "none"
	SubAutocapitalizeEnumOff SubAutocapitalizeEnum = "off"
)

type SubAutocorrectEnum string

const (
	SubAutocorrectEnumOff SubAutocorrectEnum = "off"
	SubAutocorrectEnumOn SubAutocorrectEnum = "on"
)

type SubContenteditableEnum string

const (
	SubContenteditableEnumFalse SubContenteditableEnum = "false"
	SubContenteditableEnumPlaintextOnly SubContenteditableEnum = "plaintext-only"
	SubContenteditableEnumTrue SubContenteditableEnum = "true"
)

type SubDirEnum string

const (
	SubDirEnumAuto SubDirEnum = "auto"
	SubDirEnumLtr SubDirEnum = "ltr"
	SubDirEnumRtl SubDirEnum = "rtl"
)

type SubDraggableEnum string

const (
	SubDraggableEnumFalse SubDraggableEnum = "false"
	SubDraggableEnumTrue SubDraggableEnum = "true"
)

type SubEnterkeyhintEnum string

const (
	SubEnterkeyhintEnumSend SubEnterkeyhintEnum = "send"
	SubEnterkeyhintEnumDone SubEnterkeyhintEnum = "done"
	SubEnterkeyhintEnumEnter SubEnterkeyhintEnum = "enter"
	SubEnterkeyhintEnumGo SubEnterkeyhintEnum = "go"
	SubEnterkeyhintEnumNext SubEnterkeyhintEnum = "next"
	SubEnterkeyhintEnumPrevious SubEnterkeyhintEnum = "previous"
	SubEnterkeyhintEnumSearch SubEnterkeyhintEnum = "search"
)

type SubHiddenEnum string

const (
	SubHiddenEnumHidden SubHiddenEnum = "hidden"
	SubHiddenEnumUntilFound SubHiddenEnum = "until-found"
)

type subAttrs map[string]any

func (e *SubElement) Autocapitalize(a SubAutocapitalizeEnum) *SubElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *SubElement) Autocorrect(a SubAutocorrectEnum) *SubElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *SubElement) Autofocus(b bool) *SubElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *SubElement) Class(s ...string) *SubElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *SubElement) Contenteditable(a SubContenteditableEnum) *SubElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *SubElement) Dir(a SubDirEnum) *SubElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *SubElement) Draggable(a SubDraggableEnum) *SubElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *SubElement) Enterkeyhint(a SubEnterkeyhintEnum) *SubElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *SubElement) Hidden(a SubHiddenEnum) *SubElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *SubElement) Id(s string) *SubElement {
	e.attributes["id"] = s
	
	return e
}

func (e *SubElement) Slot(s string) *SubElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *SubElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<sub")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</sub>")); err != nil {
		return err
	}

	return nil
}
