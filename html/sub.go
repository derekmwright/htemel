// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
)

type SubElement struct {
	attributes subAttrs
	children []htemel.Node
	skipRender bool
}

// Sub creates a tag <sub> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The sup element represents a superscript and the sub element represents a subscript.
func Sub(children ...htemel.Node) *SubElement {
	node := &SubElement{
		children: children,
	}

	return node
}

func SubIf(condition bool, children ...htemel.Node) *SubElement {
	if condition {
		return Sub(children...)
	}

	return &SubElement{
		skipRender: true,
	}
}

type SubAutocapitalizeAttrEnum string

const (
	SubAutocapitalizeAttrEnumWords SubAutocapitalizeAttrEnum = "words"
	SubAutocapitalizeAttrEnumCharacters SubAutocapitalizeAttrEnum = "characters"
	SubAutocapitalizeAttrEnumNone SubAutocapitalizeAttrEnum = "none"
	SubAutocapitalizeAttrEnumOff SubAutocapitalizeAttrEnum = "off"
	SubAutocapitalizeAttrEnumOn SubAutocapitalizeAttrEnum = "on"
	SubAutocapitalizeAttrEnumSentences SubAutocapitalizeAttrEnum = "sentences"
)

type SubAutocorrectAttrEnum string

const (
	SubAutocorrectAttrEnumOff SubAutocorrectAttrEnum = "off"
	SubAutocorrectAttrEnumOn SubAutocorrectAttrEnum = "on"
)

type SubContenteditableAttrEnum string

const (
	SubContenteditableAttrEnumFalse SubContenteditableAttrEnum = "false"
	SubContenteditableAttrEnumPlaintextOnly SubContenteditableAttrEnum = "plaintext-only"
	SubContenteditableAttrEnumTrue SubContenteditableAttrEnum = "true"
)

type subAttrs map[string]any

func (e *SubElement) Autocapitalize(a SubAutocapitalizeAttrEnum) *SubElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *SubElement) Autocorrect(a SubAutocorrectAttrEnum) *SubElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *SubElement) Class(s ...string) *SubElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *SubElement) Contenteditable(a SubContenteditableAttrEnum) *SubElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *SubElement) Id(s string) *SubElement {
	e.attributes["id"] = s
	
	return e
}

func (e *SubElement) Slot(s string) *SubElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *SubElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<sub")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 0
	for key, v := range e.attributes {
		w.Write([]byte(key + "="))
		w.Write([]byte(html.EscapeString(fmt.Sprintf("'%v'", v))))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</sub>")); err != nil {
		return err
	}

	return nil
}
