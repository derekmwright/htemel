// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type AreaElement struct {
	attributes areaAttrs

	skipRender bool
	indent     int
}

// Area creates a tag <area> instance and returns it for further modification.
//
// Spec Description: The area element represents either a hyperlink with some text and a corresponding area on an image map, or a dead area on an image map.
func Area() *AreaElement {
	node := &AreaElement{
		attributes: make(areaAttrs),
	}

	return node
}

func AreaIf(condition bool) *AreaElement {
	if condition {
		return Area()
	}

	return &AreaElement{
		skipRender: true,
	}
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *AreaElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *AreaElement) AddIndent(i int) {
	e.indent = i + 1
}

type AreaAutocapitalizeEnum string

const (
	AreaAutocapitalizeEnumCharacters AreaAutocapitalizeEnum = "characters"
	AreaAutocapitalizeEnumNone       AreaAutocapitalizeEnum = "none"
	AreaAutocapitalizeEnumOff        AreaAutocapitalizeEnum = "off"
	AreaAutocapitalizeEnumOn         AreaAutocapitalizeEnum = "on"
	AreaAutocapitalizeEnumSentences  AreaAutocapitalizeEnum = "sentences"
	AreaAutocapitalizeEnumWords      AreaAutocapitalizeEnum = "words"
)

type AreaAutocorrectEnum string

const (
	AreaAutocorrectEnumOff   AreaAutocorrectEnum = "off"
	AreaAutocorrectEnumOn    AreaAutocorrectEnum = "on"
	AreaAutocorrectEnumEmpty AreaAutocorrectEnum = ""
)

type AreaContenteditableEnum string

const (
	AreaContenteditableEnumFalse         AreaContenteditableEnum = "false"
	AreaContenteditableEnumPlaintextOnly AreaContenteditableEnum = "plaintext-only"
	AreaContenteditableEnumTrue          AreaContenteditableEnum = "true"
	AreaContenteditableEnumEmpty         AreaContenteditableEnum = ""
)

type AreaDirEnum string

const (
	AreaDirEnumAuto AreaDirEnum = "auto"
	AreaDirEnumLtr  AreaDirEnum = "ltr"
	AreaDirEnumRtl  AreaDirEnum = "rtl"
)

type AreaDraggableEnum string

const (
	AreaDraggableEnumFalse AreaDraggableEnum = "false"
	AreaDraggableEnumTrue  AreaDraggableEnum = "true"
)

type AreaEnterkeyhintEnum string

const (
	AreaEnterkeyhintEnumSend     AreaEnterkeyhintEnum = "send"
	AreaEnterkeyhintEnumDone     AreaEnterkeyhintEnum = "done"
	AreaEnterkeyhintEnumEnter    AreaEnterkeyhintEnum = "enter"
	AreaEnterkeyhintEnumGo       AreaEnterkeyhintEnum = "go"
	AreaEnterkeyhintEnumNext     AreaEnterkeyhintEnum = "next"
	AreaEnterkeyhintEnumPrevious AreaEnterkeyhintEnum = "previous"
	AreaEnterkeyhintEnumSearch   AreaEnterkeyhintEnum = "search"
)

type AreaHiddenEnum string

const (
	AreaHiddenEnumHidden     AreaHiddenEnum = "hidden"
	AreaHiddenEnumUntilFound AreaHiddenEnum = "until-found"
	AreaHiddenEnumEmpty      AreaHiddenEnum = ""
)

type AreaInputmodeEnum string

const (
	AreaInputmodeEnumDecimal AreaInputmodeEnum = "decimal"
	AreaInputmodeEnumEmail   AreaInputmodeEnum = "email"
	AreaInputmodeEnumNone    AreaInputmodeEnum = "none"
	AreaInputmodeEnumNumeric AreaInputmodeEnum = "numeric"
	AreaInputmodeEnumSearch  AreaInputmodeEnum = "search"
	AreaInputmodeEnumTel     AreaInputmodeEnum = "tel"
	AreaInputmodeEnumText    AreaInputmodeEnum = "text"
	AreaInputmodeEnumUrl     AreaInputmodeEnum = "url"
)

type AreaSpellcheckEnum string

const (
	AreaSpellcheckEnumFalse AreaSpellcheckEnum = "false"
	AreaSpellcheckEnumTrue  AreaSpellcheckEnum = "true"
	AreaSpellcheckEnumEmpty AreaSpellcheckEnum = ""
)

type AreaTranslateEnum string

const (
	AreaTranslateEnumNo    AreaTranslateEnum = "no"
	AreaTranslateEnumYes   AreaTranslateEnum = "yes"
	AreaTranslateEnumEmpty AreaTranslateEnum = ""
)

type AreaWritingsuggestionsEnum string

const (
	AreaWritingsuggestionsEnumFalse AreaWritingsuggestionsEnum = "false"
	AreaWritingsuggestionsEnumTrue  AreaWritingsuggestionsEnum = "true"
	AreaWritingsuggestionsEnumEmpty AreaWritingsuggestionsEnum = ""
)

type areaAttrs map[string]any

func (e *AreaElement) Autocapitalize(a AreaAutocapitalizeEnum) *AreaElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *AreaElement) Autocorrect(a AreaAutocorrectEnum) *AreaElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *AreaElement) Autofocus(b bool) *AreaElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *AreaElement) Class(s ...string) *AreaElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *AreaElement) Contenteditable(a AreaContenteditableEnum) *AreaElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *AreaElement) DataUnsafe(name string, s string) *AreaElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *AreaElement) Data(name string, s string) *AreaElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *AreaElement) Dir(a AreaDirEnum) *AreaElement {
	e.attributes["dir"] = a

	return e
}

func (e *AreaElement) Draggable(a AreaDraggableEnum) *AreaElement {
	e.attributes["draggable"] = a

	return e
}

func (e *AreaElement) Enterkeyhint(a AreaEnterkeyhintEnum) *AreaElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *AreaElement) Hidden(a AreaHiddenEnum) *AreaElement {
	e.attributes["hidden"] = a

	return e
}

func (e *AreaElement) Id(s string) *AreaElement {
	e.attributes["id"] = s

	return e
}

func (e *AreaElement) Inert(b bool) *AreaElement {
	e.attributes["inert"] = b

	return e
}

func (e *AreaElement) Inputmode(a AreaInputmodeEnum) *AreaElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *AreaElement) Itemid(s string) *AreaElement {
	e.attributes["itemid"] = s

	return e
}

func (e *AreaElement) Itemprop(s ...string) *AreaElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *AreaElement) Itemref(s ...string) *AreaElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *AreaElement) Itemscope(b bool) *AreaElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *AreaElement) Itemtype(s ...string) *AreaElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *AreaElement) Lang(s string) *AreaElement {
	e.attributes["lang"] = s

	return e
}

func (e *AreaElement) Nonce(s string) *AreaElement {
	e.attributes["nonce"] = s

	return e
}

func (e *AreaElement) Popover(s string) *AreaElement {
	e.attributes["popover"] = s

	return e
}

func (e *AreaElement) Slot(s string) *AreaElement {
	e.attributes["slot"] = s

	return e
}

func (e *AreaElement) Spellcheck(a AreaSpellcheckEnum) *AreaElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *AreaElement) Style(s string) *AreaElement {
	e.attributes["style"] = s

	return e
}

func (e *AreaElement) Tabindex(i int) *AreaElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *AreaElement) Title(s string) *AreaElement {
	e.attributes["title"] = s

	return e
}

func (e *AreaElement) Translate(a AreaTranslateEnum) *AreaElement {
	e.attributes["translate"] = a

	return e
}

func (e *AreaElement) Writingsuggestions(a AreaWritingsuggestionsEnum) *AreaElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *AreaElement) Render(w io.Writer) error {
	indent := htemel.SetIndent(e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<area")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}

	return nil
}
