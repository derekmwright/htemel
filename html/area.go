// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type AreaElement struct {
	attributes areaAttrs
	children []htemel.Node
	skipRender bool
}

// Area creates a tag <area> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The area element represents either a hyperlink with some text and a corresponding area on an image map, or a dead area on an image map.
func Area(children ...htemel.Node) *AreaElement {
	node := &AreaElement{
		children: children,
		attributes: make(areaAttrs),
	}

	return node
}

func AreaIf(condition bool, children ...htemel.Node) *AreaElement {
	if condition {
		return Area(children...)
	}

	return &AreaElement{
		skipRender: true,
	}
}

type AreaAutocapitalizeEnum string

const (
	AreaAutocapitalizeEnumSentences AreaAutocapitalizeEnum = "sentences"
	AreaAutocapitalizeEnumWords AreaAutocapitalizeEnum = "words"
	AreaAutocapitalizeEnumCharacters AreaAutocapitalizeEnum = "characters"
	AreaAutocapitalizeEnumNone AreaAutocapitalizeEnum = "none"
	AreaAutocapitalizeEnumOff AreaAutocapitalizeEnum = "off"
	AreaAutocapitalizeEnumOn AreaAutocapitalizeEnum = "on"
)

type AreaAutocorrectEnum string

const (
	AreaAutocorrectEnumOff AreaAutocorrectEnum = "off"
	AreaAutocorrectEnumOn AreaAutocorrectEnum = "on"
)

type AreaContenteditableEnum string

const (
	AreaContenteditableEnumFalse AreaContenteditableEnum = "false"
	AreaContenteditableEnumPlaintextOnly AreaContenteditableEnum = "plaintext-only"
	AreaContenteditableEnumTrue AreaContenteditableEnum = "true"
)

type AreaDirEnum string

const (
	AreaDirEnumAuto AreaDirEnum = "auto"
	AreaDirEnumLtr AreaDirEnum = "ltr"
	AreaDirEnumRtl AreaDirEnum = "rtl"
)

type AreaDraggableEnum string

const (
	AreaDraggableEnumFalse AreaDraggableEnum = "false"
	AreaDraggableEnumTrue AreaDraggableEnum = "true"
)

type AreaEnterkeyhintEnum string

const (
	AreaEnterkeyhintEnumDone AreaEnterkeyhintEnum = "done"
	AreaEnterkeyhintEnumEnter AreaEnterkeyhintEnum = "enter"
	AreaEnterkeyhintEnumGo AreaEnterkeyhintEnum = "go"
	AreaEnterkeyhintEnumNext AreaEnterkeyhintEnum = "next"
	AreaEnterkeyhintEnumPrevious AreaEnterkeyhintEnum = "previous"
	AreaEnterkeyhintEnumSearch AreaEnterkeyhintEnum = "search"
	AreaEnterkeyhintEnumSend AreaEnterkeyhintEnum = "send"
)

type AreaHiddenEnum string

const (
	AreaHiddenEnumUntilFound AreaHiddenEnum = "until-found"
	AreaHiddenEnumHidden AreaHiddenEnum = "hidden"
)

type areaAttrs map[string]any

func (e *AreaElement) Autocapitalize(a AreaAutocapitalizeEnum) *AreaElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *AreaElement) Autocorrect(a AreaAutocorrectEnum) *AreaElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *AreaElement) Autofocus(b bool) *AreaElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *AreaElement) Class(s ...string) *AreaElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *AreaElement) Contenteditable(a AreaContenteditableEnum) *AreaElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *AreaElement) Dir(a AreaDirEnum) *AreaElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *AreaElement) Draggable(a AreaDraggableEnum) *AreaElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *AreaElement) Enterkeyhint(a AreaEnterkeyhintEnum) *AreaElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *AreaElement) Hidden(a AreaHiddenEnum) *AreaElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *AreaElement) Id(s string) *AreaElement {
	e.attributes["id"] = s
	
	return e
}

func (e *AreaElement) Slot(s string) *AreaElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *AreaElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<area")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</area>")); err != nil {
		return err
	}

	return nil
}
