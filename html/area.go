// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type AreaElement struct {
	attributes areaAttrs
	children   []htemel.Node
	skipRender bool
}

// Area creates a tag <area> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The area element represents either a hyperlink with some text and a corresponding area on an image map, or a dead area on an image map.
func Area(children ...htemel.Node) *AreaElement {
	node := &AreaElement{
		children:   children,
		attributes: make(areaAttrs),
	}

	return node
}

func AreaIf(condition bool, children ...htemel.Node) *AreaElement {
	if condition {
		return Area(children...)
	}

	return &AreaElement{
		skipRender: true,
	}
}

type AreaAutocapitalizeAttrEnum string

const (
	AreaAutocapitalizeAttrEnumNone       AreaAutocapitalizeAttrEnum = "none"
	AreaAutocapitalizeAttrEnumOff        AreaAutocapitalizeAttrEnum = "off"
	AreaAutocapitalizeAttrEnumOn         AreaAutocapitalizeAttrEnum = "on"
	AreaAutocapitalizeAttrEnumSentences  AreaAutocapitalizeAttrEnum = "sentences"
	AreaAutocapitalizeAttrEnumWords      AreaAutocapitalizeAttrEnum = "words"
	AreaAutocapitalizeAttrEnumCharacters AreaAutocapitalizeAttrEnum = "characters"
)

type AreaAutocorrectAttrEnum string

const (
	AreaAutocorrectAttrEnumOff AreaAutocorrectAttrEnum = "off"
	AreaAutocorrectAttrEnumOn  AreaAutocorrectAttrEnum = "on"
)

type AreaContenteditableAttrEnum string

const (
	AreaContenteditableAttrEnumPlaintextOnly AreaContenteditableAttrEnum = "plaintext-only"
	AreaContenteditableAttrEnumTrue          AreaContenteditableAttrEnum = "true"
	AreaContenteditableAttrEnumFalse         AreaContenteditableAttrEnum = "false"
)

type areaAttrs map[string]any

func (e *AreaElement) Autocapitalize(a AreaAutocapitalizeAttrEnum) *AreaElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *AreaElement) Autocorrect(a AreaAutocorrectAttrEnum) *AreaElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *AreaElement) Autofocus(b bool) *AreaElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *AreaElement) Class(s ...string) *AreaElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *AreaElement) Contenteditable(a AreaContenteditableAttrEnum) *AreaElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *AreaElement) Id(s string) *AreaElement {
	e.attributes["id"] = s

	return e
}

func (e *AreaElement) Slot(s string) *AreaElement {
	e.attributes["slot"] = s

	return e
}

func (e *AreaElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<area")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</area>")); err != nil {
		return err
	}

	return nil
}
