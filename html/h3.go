// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type H3Element struct {
	attributes h3Attrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// H3 creates a tag <h3> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: These elements represent headings for their sections.
func H3(children ...htemel.Node) *H3Element {
	node := &H3Element{
		children: children, attributes: make(h3Attrs),
	}

	return node
}

func H3If(condition bool, children ...htemel.Node) *H3Element {
	if condition {
		return H3(children...)
	}

	return &H3Element{
		skipRender: true,
	}
}

func H3Ternary(condition bool, true htemel.Node, false htemel.Node) *H3Element {
	if condition {
		return H3(true)
	}

	return H3(false)
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *H3Element) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *H3Element) AddIndent(i int) {
	e.indent = i + 1
}

type H3AutocapitalizeEnum string

const (
	H3AutocapitalizeEnumCharacters H3AutocapitalizeEnum = "characters"
	H3AutocapitalizeEnumNone       H3AutocapitalizeEnum = "none"
	H3AutocapitalizeEnumOff        H3AutocapitalizeEnum = "off"
	H3AutocapitalizeEnumOn         H3AutocapitalizeEnum = "on"
	H3AutocapitalizeEnumSentences  H3AutocapitalizeEnum = "sentences"
	H3AutocapitalizeEnumWords      H3AutocapitalizeEnum = "words"
)

type H3AutocorrectEnum string

const (
	H3AutocorrectEnumOff   H3AutocorrectEnum = "off"
	H3AutocorrectEnumOn    H3AutocorrectEnum = "on"
	H3AutocorrectEnumEmpty H3AutocorrectEnum = ""
)

type H3ContenteditableEnum string

const (
	H3ContenteditableEnumFalse         H3ContenteditableEnum = "false"
	H3ContenteditableEnumPlaintextOnly H3ContenteditableEnum = "plaintext-only"
	H3ContenteditableEnumTrue          H3ContenteditableEnum = "true"
	H3ContenteditableEnumEmpty         H3ContenteditableEnum = ""
)

type H3DirEnum string

const (
	H3DirEnumLtr  H3DirEnum = "ltr"
	H3DirEnumRtl  H3DirEnum = "rtl"
	H3DirEnumAuto H3DirEnum = "auto"
)

type H3DraggableEnum string

const (
	H3DraggableEnumFalse H3DraggableEnum = "false"
	H3DraggableEnumTrue  H3DraggableEnum = "true"
)

type H3EnterkeyhintEnum string

const (
	H3EnterkeyhintEnumPrevious H3EnterkeyhintEnum = "previous"
	H3EnterkeyhintEnumSearch   H3EnterkeyhintEnum = "search"
	H3EnterkeyhintEnumSend     H3EnterkeyhintEnum = "send"
	H3EnterkeyhintEnumDone     H3EnterkeyhintEnum = "done"
	H3EnterkeyhintEnumEnter    H3EnterkeyhintEnum = "enter"
	H3EnterkeyhintEnumGo       H3EnterkeyhintEnum = "go"
	H3EnterkeyhintEnumNext     H3EnterkeyhintEnum = "next"
)

type H3HiddenEnum string

const (
	H3HiddenEnumHidden     H3HiddenEnum = "hidden"
	H3HiddenEnumUntilFound H3HiddenEnum = "until-found"
	H3HiddenEnumEmpty      H3HiddenEnum = ""
)

type H3InputmodeEnum string

const (
	H3InputmodeEnumText    H3InputmodeEnum = "text"
	H3InputmodeEnumUrl     H3InputmodeEnum = "url"
	H3InputmodeEnumDecimal H3InputmodeEnum = "decimal"
	H3InputmodeEnumEmail   H3InputmodeEnum = "email"
	H3InputmodeEnumNone    H3InputmodeEnum = "none"
	H3InputmodeEnumNumeric H3InputmodeEnum = "numeric"
	H3InputmodeEnumSearch  H3InputmodeEnum = "search"
	H3InputmodeEnumTel     H3InputmodeEnum = "tel"
)

type H3SpellcheckEnum string

const (
	H3SpellcheckEnumFalse H3SpellcheckEnum = "false"
	H3SpellcheckEnumTrue  H3SpellcheckEnum = "true"
	H3SpellcheckEnumEmpty H3SpellcheckEnum = ""
)

type H3TranslateEnum string

const (
	H3TranslateEnumNo    H3TranslateEnum = "no"
	H3TranslateEnumYes   H3TranslateEnum = "yes"
	H3TranslateEnumEmpty H3TranslateEnum = ""
)

type H3WritingsuggestionsEnum string

const (
	H3WritingsuggestionsEnumFalse H3WritingsuggestionsEnum = "false"
	H3WritingsuggestionsEnumTrue  H3WritingsuggestionsEnum = "true"
	H3WritingsuggestionsEnumEmpty H3WritingsuggestionsEnum = ""
)

type h3Attrs map[string]any

func (e *H3Element) Autocapitalize(a H3AutocapitalizeEnum) *H3Element {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *H3Element) Autocorrect(a H3AutocorrectEnum) *H3Element {
	e.attributes["autocorrect"] = a

	return e
}

func (e *H3Element) Autofocus(b bool) *H3Element {
	e.attributes["autofocus"] = b

	return e
}

func (e *H3Element) Class(s ...string) *H3Element {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *H3Element) Contenteditable(a H3ContenteditableEnum) *H3Element {
	e.attributes["contenteditable"] = a

	return e
}

func (e *H3Element) DataUnsafe(name string, s string) *H3Element {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *H3Element) Data(name string, s string) *H3Element {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *H3Element) Dir(a H3DirEnum) *H3Element {
	e.attributes["dir"] = a

	return e
}

func (e *H3Element) Draggable(a H3DraggableEnum) *H3Element {
	e.attributes["draggable"] = a

	return e
}

func (e *H3Element) Enterkeyhint(a H3EnterkeyhintEnum) *H3Element {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *H3Element) Hidden(a H3HiddenEnum) *H3Element {
	e.attributes["hidden"] = a

	return e
}

func (e *H3Element) Id(s string) *H3Element {
	e.attributes["id"] = s

	return e
}

func (e *H3Element) Inert(b bool) *H3Element {
	e.attributes["inert"] = b

	return e
}

func (e *H3Element) Inputmode(a H3InputmodeEnum) *H3Element {
	e.attributes["inputmode"] = a

	return e
}

func (e *H3Element) Itemid(s string) *H3Element {
	e.attributes["itemid"] = s

	return e
}

func (e *H3Element) Itemprop(s ...string) *H3Element {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *H3Element) Itemref(s ...string) *H3Element {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *H3Element) Itemscope(b bool) *H3Element {
	e.attributes["itemscope"] = b

	return e
}

func (e *H3Element) Itemtype(s ...string) *H3Element {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *H3Element) Lang(s string) *H3Element {
	e.attributes["lang"] = s

	return e
}

func (e *H3Element) Nonce(s string) *H3Element {
	e.attributes["nonce"] = s

	return e
}

func (e *H3Element) Popover(s string) *H3Element {
	e.attributes["popover"] = s

	return e
}

func (e *H3Element) Slot(s string) *H3Element {
	e.attributes["slot"] = s

	return e
}

func (e *H3Element) Spellcheck(a H3SpellcheckEnum) *H3Element {
	e.attributes["spellcheck"] = a

	return e
}

func (e *H3Element) Style(s string) *H3Element {
	e.attributes["style"] = s

	return e
}

func (e *H3Element) Tabindex(i int) *H3Element {
	e.attributes["tabindex"] = i

	return e
}

func (e *H3Element) Title(s string) *H3Element {
	e.attributes["title"] = s

	return e
}

func (e *H3Element) Translate(a H3TranslateEnum) *H3Element {
	e.attributes["translate"] = a

	return e
}

func (e *H3Element) Writingsuggestions(a H3WritingsuggestionsEnum) *H3Element {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *H3Element) Render(w io.Writer) error {
	indent := htemel.SetIndent(e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<h3")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}
	for _, child := range e.children {
		child.AddIndent(e.Indent())
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(indent + "</h3>\n")); err != nil {
		return err
	}

	return nil
}
