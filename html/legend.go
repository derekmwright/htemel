// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type LegendElement struct {
	attributes legendAttrs
	children []htemel.Node
	skipRender bool
}

// Legend creates a tag <legend> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The legend element represents a caption for the rest of the contents of the legend element's parent fieldset element, if any. Otherwise, if the legend has a parent optgroup element, then the legend represents the optgroup's label.
func Legend(children ...htemel.Node) *LegendElement {
	node := &LegendElement{
		children: children,
		attributes: make(legendAttrs),
	}

	return node
}

func LegendIf(condition bool, children ...htemel.Node) *LegendElement {
	if condition {
		return Legend(children...)
	}

	return &LegendElement{
		skipRender: true,
	}
}

type LegendAutocapitalizeEnum string

const (
	LegendAutocapitalizeEnumCharacters LegendAutocapitalizeEnum = "characters"
	LegendAutocapitalizeEnumNone LegendAutocapitalizeEnum = "none"
	LegendAutocapitalizeEnumOff LegendAutocapitalizeEnum = "off"
	LegendAutocapitalizeEnumOn LegendAutocapitalizeEnum = "on"
	LegendAutocapitalizeEnumSentences LegendAutocapitalizeEnum = "sentences"
	LegendAutocapitalizeEnumWords LegendAutocapitalizeEnum = "words"
)

type LegendAutocorrectEnum string

const (
	LegendAutocorrectEnumOff LegendAutocorrectEnum = "off"
	LegendAutocorrectEnumOn LegendAutocorrectEnum = "on"
)

type LegendContenteditableEnum string

const (
	LegendContenteditableEnumFalse LegendContenteditableEnum = "false"
	LegendContenteditableEnumPlaintextOnly LegendContenteditableEnum = "plaintext-only"
	LegendContenteditableEnumTrue LegendContenteditableEnum = "true"
)

type LegendDirEnum string

const (
	LegendDirEnumAuto LegendDirEnum = "auto"
	LegendDirEnumLtr LegendDirEnum = "ltr"
	LegendDirEnumRtl LegendDirEnum = "rtl"
)

type LegendDraggableEnum string

const (
	LegendDraggableEnumTrue LegendDraggableEnum = "true"
	LegendDraggableEnumFalse LegendDraggableEnum = "false"
)

type LegendEnterkeyhintEnum string

const (
	LegendEnterkeyhintEnumDone LegendEnterkeyhintEnum = "done"
	LegendEnterkeyhintEnumEnter LegendEnterkeyhintEnum = "enter"
	LegendEnterkeyhintEnumGo LegendEnterkeyhintEnum = "go"
	LegendEnterkeyhintEnumNext LegendEnterkeyhintEnum = "next"
	LegendEnterkeyhintEnumPrevious LegendEnterkeyhintEnum = "previous"
	LegendEnterkeyhintEnumSearch LegendEnterkeyhintEnum = "search"
	LegendEnterkeyhintEnumSend LegendEnterkeyhintEnum = "send"
)

type LegendHiddenEnum string

const (
	LegendHiddenEnumHidden LegendHiddenEnum = "hidden"
	LegendHiddenEnumUntilFound LegendHiddenEnum = "until-found"
)

type legendAttrs map[string]any

func (e *LegendElement) Autocapitalize(a LegendAutocapitalizeEnum) *LegendElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *LegendElement) Autocorrect(a LegendAutocorrectEnum) *LegendElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *LegendElement) Autofocus(b bool) *LegendElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *LegendElement) Class(s ...string) *LegendElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *LegendElement) Contenteditable(a LegendContenteditableEnum) *LegendElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *LegendElement) Dir(a LegendDirEnum) *LegendElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *LegendElement) Draggable(a LegendDraggableEnum) *LegendElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *LegendElement) Enterkeyhint(a LegendEnterkeyhintEnum) *LegendElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *LegendElement) Hidden(a LegendHiddenEnum) *LegendElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *LegendElement) Id(s string) *LegendElement {
	e.attributes["id"] = s
	
	return e
}

func (e *LegendElement) Slot(s string) *LegendElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *LegendElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<legend")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</legend>")); err != nil {
		return err
	}

	return nil
}
