// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type LegendElement struct {
	attributes legendAttrs
	children   []htemel.Node
	skipRender bool
}

// Legend creates a tag <legend> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The legend element represents a caption for the rest of the contents of the legend element's parent fieldset element, if any. Otherwise, if the legend has a parent optgroup element, then the legend represents the optgroup's label.
func Legend(children ...htemel.Node) *LegendElement {
	node := &LegendElement{
		children: children, attributes: make(legendAttrs),
	}

	return node
}

func LegendIf(condition bool, children ...htemel.Node) *LegendElement {
	if condition {
		return Legend(children...)
	}

	return &LegendElement{
		skipRender: true,
	}
}

func LegendTernary(condition bool, true htemel.Node, false htemel.Node) *LegendElement {
	if condition {
		return Legend(true)
	}

	return Legend(false)
}

type LegendAutocapitalizeEnum string

const (
	LegendAutocapitalizeEnumOff        LegendAutocapitalizeEnum = "off"
	LegendAutocapitalizeEnumOn         LegendAutocapitalizeEnum = "on"
	LegendAutocapitalizeEnumSentences  LegendAutocapitalizeEnum = "sentences"
	LegendAutocapitalizeEnumWords      LegendAutocapitalizeEnum = "words"
	LegendAutocapitalizeEnumCharacters LegendAutocapitalizeEnum = "characters"
	LegendAutocapitalizeEnumNone       LegendAutocapitalizeEnum = "none"
)

type LegendAutocorrectEnum string

const (
	LegendAutocorrectEnumOff   LegendAutocorrectEnum = "off"
	LegendAutocorrectEnumOn    LegendAutocorrectEnum = "on"
	LegendAutocorrectEnumEmpty LegendAutocorrectEnum = ""
)

type LegendContenteditableEnum string

const (
	LegendContenteditableEnumFalse         LegendContenteditableEnum = "false"
	LegendContenteditableEnumPlaintextOnly LegendContenteditableEnum = "plaintext-only"
	LegendContenteditableEnumTrue          LegendContenteditableEnum = "true"
	LegendContenteditableEnumEmpty         LegendContenteditableEnum = ""
)

type LegendDirEnum string

const (
	LegendDirEnumAuto LegendDirEnum = "auto"
	LegendDirEnumLtr  LegendDirEnum = "ltr"
	LegendDirEnumRtl  LegendDirEnum = "rtl"
)

type LegendDraggableEnum string

const (
	LegendDraggableEnumFalse LegendDraggableEnum = "false"
	LegendDraggableEnumTrue  LegendDraggableEnum = "true"
)

type LegendEnterkeyhintEnum string

const (
	LegendEnterkeyhintEnumGo       LegendEnterkeyhintEnum = "go"
	LegendEnterkeyhintEnumNext     LegendEnterkeyhintEnum = "next"
	LegendEnterkeyhintEnumPrevious LegendEnterkeyhintEnum = "previous"
	LegendEnterkeyhintEnumSearch   LegendEnterkeyhintEnum = "search"
	LegendEnterkeyhintEnumSend     LegendEnterkeyhintEnum = "send"
	LegendEnterkeyhintEnumDone     LegendEnterkeyhintEnum = "done"
	LegendEnterkeyhintEnumEnter    LegendEnterkeyhintEnum = "enter"
)

type LegendHiddenEnum string

const (
	LegendHiddenEnumHidden     LegendHiddenEnum = "hidden"
	LegendHiddenEnumUntilFound LegendHiddenEnum = "until-found"
	LegendHiddenEnumEmpty      LegendHiddenEnum = ""
)

type LegendInputmodeEnum string

const (
	LegendInputmodeEnumSearch  LegendInputmodeEnum = "search"
	LegendInputmodeEnumTel     LegendInputmodeEnum = "tel"
	LegendInputmodeEnumText    LegendInputmodeEnum = "text"
	LegendInputmodeEnumUrl     LegendInputmodeEnum = "url"
	LegendInputmodeEnumDecimal LegendInputmodeEnum = "decimal"
	LegendInputmodeEnumEmail   LegendInputmodeEnum = "email"
	LegendInputmodeEnumNone    LegendInputmodeEnum = "none"
	LegendInputmodeEnumNumeric LegendInputmodeEnum = "numeric"
)

type LegendSpellcheckEnum string

const (
	LegendSpellcheckEnumFalse LegendSpellcheckEnum = "false"
	LegendSpellcheckEnumTrue  LegendSpellcheckEnum = "true"
	LegendSpellcheckEnumEmpty LegendSpellcheckEnum = ""
)

type LegendTranslateEnum string

const (
	LegendTranslateEnumNo    LegendTranslateEnum = "no"
	LegendTranslateEnumYes   LegendTranslateEnum = "yes"
	LegendTranslateEnumEmpty LegendTranslateEnum = ""
)

type LegendWritingsuggestionsEnum string

const (
	LegendWritingsuggestionsEnumFalse LegendWritingsuggestionsEnum = "false"
	LegendWritingsuggestionsEnumTrue  LegendWritingsuggestionsEnum = "true"
	LegendWritingsuggestionsEnumEmpty LegendWritingsuggestionsEnum = ""
)

type legendAttrs map[string]any

func (e *LegendElement) Autocapitalize(a LegendAutocapitalizeEnum) *LegendElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *LegendElement) Autocorrect(a LegendAutocorrectEnum) *LegendElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *LegendElement) Autofocus(b bool) *LegendElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *LegendElement) Class(s ...string) *LegendElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *LegendElement) Contenteditable(a LegendContenteditableEnum) *LegendElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *LegendElement) DataUnsafe(name string, s string) *LegendElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *LegendElement) Data(name string, s string) *LegendElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *LegendElement) Dir(a LegendDirEnum) *LegendElement {
	e.attributes["dir"] = a

	return e
}

func (e *LegendElement) Draggable(a LegendDraggableEnum) *LegendElement {
	e.attributes["draggable"] = a

	return e
}

func (e *LegendElement) Enterkeyhint(a LegendEnterkeyhintEnum) *LegendElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *LegendElement) Hidden(a LegendHiddenEnum) *LegendElement {
	e.attributes["hidden"] = a

	return e
}

func (e *LegendElement) Id(s string) *LegendElement {
	e.attributes["id"] = s

	return e
}

func (e *LegendElement) Inert(b bool) *LegendElement {
	e.attributes["inert"] = b

	return e
}

func (e *LegendElement) Inputmode(a LegendInputmodeEnum) *LegendElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *LegendElement) Itemid(s string) *LegendElement {
	e.attributes["itemid"] = s

	return e
}

func (e *LegendElement) Itemprop(s ...string) *LegendElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *LegendElement) Itemref(s ...string) *LegendElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *LegendElement) Itemscope(b bool) *LegendElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *LegendElement) Itemtype(s ...string) *LegendElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *LegendElement) Lang(s string) *LegendElement {
	e.attributes["lang"] = s

	return e
}

func (e *LegendElement) Nonce(s string) *LegendElement {
	e.attributes["nonce"] = s

	return e
}

func (e *LegendElement) Popover(s string) *LegendElement {
	e.attributes["popover"] = s

	return e
}

func (e *LegendElement) Slot(s string) *LegendElement {
	e.attributes["slot"] = s

	return e
}

func (e *LegendElement) Spellcheck(a LegendSpellcheckEnum) *LegendElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *LegendElement) Style(s string) *LegendElement {
	e.attributes["style"] = s

	return e
}

func (e *LegendElement) Tabindex(i int) *LegendElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *LegendElement) Title(s string) *LegendElement {
	e.attributes["title"] = s

	return e
}

func (e *LegendElement) Translate(a LegendTranslateEnum) *LegendElement {
	e.attributes["translate"] = a

	return e
}

func (e *LegendElement) Writingsuggestions(a LegendWritingsuggestionsEnum) *LegendElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *LegendElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<legend")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}
	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</legend>")); err != nil {
		return err
	}

	return nil
}
