// Code generated by htemel. DO NOT EDIT.
package html

import (
  "github.com/derekmwright/htemel"
  "io"
)

type BaseElement struct {
	children []htemel.Node
	skipRender bool
}

// Base creates a tag <base> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The base element allows authors to specify the document base URL for the purposes of parsing URLs, and the name of the default navigable for the purposes of following hyperlinks. The element does not represent any content beyond this information.
func Base(children ...htemel.Node) *BaseElement {
	node := &BaseElement{
		children: children,
	}

	return node
}

func BaseIf(condition bool, children ...htemel.Node) *BaseElement {
	if condition {
		return Base(children...)
	}

	return &BaseElement{
		skipRender: true,
	}
}

func (e *BaseElement) Autocapitalize() *BaseElement {
	return e
}

func (e *BaseElement) Autocorrect() *BaseElement {
	return e
}

func (e *BaseElement) Autofocus() *BaseElement {
	return e
}

func (e *BaseElement) Class() *BaseElement {
	return e
}

func (e *BaseElement) Contenteditable() *BaseElement {
	return e
}

func (e *BaseElement) Id() *BaseElement {
	return e
}

func (e *BaseElement) Slot() *BaseElement {
	return e
}

func (e *BaseElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<base")); err != nil {
		return err
	}

	// TODO: Attribute stuff here

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</base>")); err != nil {
		return err
	}

	return nil
}
