// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type BaseElement struct {
	attributes baseAttrs
	children   []htemel.Node
	skipRender bool
}

// Base creates a tag <base> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The base element allows authors to specify the document base URL for the purposes of parsing URLs, and the name of the default navigable for the purposes of following hyperlinks. The element does not represent any content beyond this information.
func Base(children ...htemel.Node) *BaseElement {
	node := &BaseElement{
		children:   children,
		attributes: make(baseAttrs),
	}

	return node
}

func BaseIf(condition bool, children ...htemel.Node) *BaseElement {
	if condition {
		return Base(children...)
	}

	return &BaseElement{
		skipRender: true,
	}
}

type BaseAutocapitalizeAttrEnum string

const (
	BaseAutocapitalizeAttrEnumOn         BaseAutocapitalizeAttrEnum = "on"
	BaseAutocapitalizeAttrEnumSentences  BaseAutocapitalizeAttrEnum = "sentences"
	BaseAutocapitalizeAttrEnumWords      BaseAutocapitalizeAttrEnum = "words"
	BaseAutocapitalizeAttrEnumCharacters BaseAutocapitalizeAttrEnum = "characters"
	BaseAutocapitalizeAttrEnumNone       BaseAutocapitalizeAttrEnum = "none"
	BaseAutocapitalizeAttrEnumOff        BaseAutocapitalizeAttrEnum = "off"
)

type BaseAutocorrectAttrEnum string

const (
	BaseAutocorrectAttrEnumOff BaseAutocorrectAttrEnum = "off"
	BaseAutocorrectAttrEnumOn  BaseAutocorrectAttrEnum = "on"
)

type BaseContenteditableAttrEnum string

const (
	BaseContenteditableAttrEnumFalse         BaseContenteditableAttrEnum = "false"
	BaseContenteditableAttrEnumPlaintextOnly BaseContenteditableAttrEnum = "plaintext-only"
	BaseContenteditableAttrEnumTrue          BaseContenteditableAttrEnum = "true"
)

type baseAttrs map[string]any

func (e *BaseElement) Autocapitalize(a BaseAutocapitalizeAttrEnum) *BaseElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *BaseElement) Autocorrect(a BaseAutocorrectAttrEnum) *BaseElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *BaseElement) Autofocus(b bool) *BaseElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *BaseElement) Class(s ...string) *BaseElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *BaseElement) Contenteditable(a BaseContenteditableAttrEnum) *BaseElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *BaseElement) Id(s string) *BaseElement {
	e.attributes["id"] = s

	return e
}

func (e *BaseElement) Slot(s string) *BaseElement {
	e.attributes["slot"] = s

	return e
}

func (e *BaseElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<base")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</base>")); err != nil {
		return err
	}

	return nil
}
