// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type BaseElement struct {
	attributes baseAttrs

	skipRender bool
	indent     int
}

// Base creates a tag <base> instance and returns it for further modification.
//
// Spec Description: The base element allows authors to specify the document base URL for the purposes of parsing URLs, and the name of the default navigable for the purposes of following hyperlinks. The element does not represent any content beyond this information.
func Base() *BaseElement {
	node := &BaseElement{
		attributes: make(baseAttrs),
	}

	return node
}

func BaseIf(condition bool) *BaseElement {
	if condition {
		return Base()
	}

	return &BaseElement{
		skipRender: true,
	}
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *BaseElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *BaseElement) AddIndent(i int) {
	e.indent = i + 1
}

type BaseAutocapitalizeEnum string

const (
	BaseAutocapitalizeEnumWords      BaseAutocapitalizeEnum = "words"
	BaseAutocapitalizeEnumCharacters BaseAutocapitalizeEnum = "characters"
	BaseAutocapitalizeEnumNone       BaseAutocapitalizeEnum = "none"
	BaseAutocapitalizeEnumOff        BaseAutocapitalizeEnum = "off"
	BaseAutocapitalizeEnumOn         BaseAutocapitalizeEnum = "on"
	BaseAutocapitalizeEnumSentences  BaseAutocapitalizeEnum = "sentences"
)

type BaseAutocorrectEnum string

const (
	BaseAutocorrectEnumOff   BaseAutocorrectEnum = "off"
	BaseAutocorrectEnumOn    BaseAutocorrectEnum = "on"
	BaseAutocorrectEnumEmpty BaseAutocorrectEnum = ""
)

type BaseContenteditableEnum string

const (
	BaseContenteditableEnumFalse         BaseContenteditableEnum = "false"
	BaseContenteditableEnumPlaintextOnly BaseContenteditableEnum = "plaintext-only"
	BaseContenteditableEnumTrue          BaseContenteditableEnum = "true"
	BaseContenteditableEnumEmpty         BaseContenteditableEnum = ""
)

type BaseDirEnum string

const (
	BaseDirEnumAuto BaseDirEnum = "auto"
	BaseDirEnumLtr  BaseDirEnum = "ltr"
	BaseDirEnumRtl  BaseDirEnum = "rtl"
)

type BaseDraggableEnum string

const (
	BaseDraggableEnumFalse BaseDraggableEnum = "false"
	BaseDraggableEnumTrue  BaseDraggableEnum = "true"
)

type BaseEnterkeyhintEnum string

const (
	BaseEnterkeyhintEnumGo       BaseEnterkeyhintEnum = "go"
	BaseEnterkeyhintEnumNext     BaseEnterkeyhintEnum = "next"
	BaseEnterkeyhintEnumPrevious BaseEnterkeyhintEnum = "previous"
	BaseEnterkeyhintEnumSearch   BaseEnterkeyhintEnum = "search"
	BaseEnterkeyhintEnumSend     BaseEnterkeyhintEnum = "send"
	BaseEnterkeyhintEnumDone     BaseEnterkeyhintEnum = "done"
	BaseEnterkeyhintEnumEnter    BaseEnterkeyhintEnum = "enter"
)

type BaseHiddenEnum string

const (
	BaseHiddenEnumHidden     BaseHiddenEnum = "hidden"
	BaseHiddenEnumUntilFound BaseHiddenEnum = "until-found"
	BaseHiddenEnumEmpty      BaseHiddenEnum = ""
)

type BaseInputmodeEnum string

const (
	BaseInputmodeEnumEmail   BaseInputmodeEnum = "email"
	BaseInputmodeEnumNone    BaseInputmodeEnum = "none"
	BaseInputmodeEnumNumeric BaseInputmodeEnum = "numeric"
	BaseInputmodeEnumSearch  BaseInputmodeEnum = "search"
	BaseInputmodeEnumTel     BaseInputmodeEnum = "tel"
	BaseInputmodeEnumText    BaseInputmodeEnum = "text"
	BaseInputmodeEnumUrl     BaseInputmodeEnum = "url"
	BaseInputmodeEnumDecimal BaseInputmodeEnum = "decimal"
)

type BaseSpellcheckEnum string

const (
	BaseSpellcheckEnumFalse BaseSpellcheckEnum = "false"
	BaseSpellcheckEnumTrue  BaseSpellcheckEnum = "true"
	BaseSpellcheckEnumEmpty BaseSpellcheckEnum = ""
)

type BaseTranslateEnum string

const (
	BaseTranslateEnumNo    BaseTranslateEnum = "no"
	BaseTranslateEnumYes   BaseTranslateEnum = "yes"
	BaseTranslateEnumEmpty BaseTranslateEnum = ""
)

type BaseWritingsuggestionsEnum string

const (
	BaseWritingsuggestionsEnumTrue  BaseWritingsuggestionsEnum = "true"
	BaseWritingsuggestionsEnumFalse BaseWritingsuggestionsEnum = "false"
	BaseWritingsuggestionsEnumEmpty BaseWritingsuggestionsEnum = ""
)

type baseAttrs map[string]any

func (e *BaseElement) Href(s string) *BaseElement {
	e.attributes["href"] = s

	return e
}

func (e *BaseElement) Target(s string) *BaseElement {
	e.attributes["target"] = s

	return e
}

func (e *BaseElement) Autocapitalize(a BaseAutocapitalizeEnum) *BaseElement {
	e.attributes["autocapitalize"] = a

	return e
}

func BaseAutocapitalizeCustom(s string) BaseAutocapitalizeEnum {
	return BaseAutocapitalizeEnum(s)
}

func (e *BaseElement) Autocorrect(a BaseAutocorrectEnum) *BaseElement {
	e.attributes["autocorrect"] = a

	return e
}

func BaseAutocorrectCustom(s string) BaseAutocorrectEnum {
	return BaseAutocorrectEnum(s)
}

func (e *BaseElement) Autofocus(b bool) *BaseElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *BaseElement) Class(s ...string) *BaseElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *BaseElement) Contenteditable(a BaseContenteditableEnum) *BaseElement {
	e.attributes["contenteditable"] = a

	return e
}

func BaseContenteditableCustom(s string) BaseContenteditableEnum {
	return BaseContenteditableEnum(s)
}

func (e *BaseElement) DataUnsafe(name string, s string) *BaseElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *BaseElement) Data(name string, s string) *BaseElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *BaseElement) Dir(a BaseDirEnum) *BaseElement {
	e.attributes["dir"] = a

	return e
}

func BaseDirCustom(s string) BaseDirEnum {
	return BaseDirEnum(s)
}

func (e *BaseElement) Draggable(a BaseDraggableEnum) *BaseElement {
	e.attributes["draggable"] = a

	return e
}

func BaseDraggableCustom(s string) BaseDraggableEnum {
	return BaseDraggableEnum(s)
}

func (e *BaseElement) Enterkeyhint(a BaseEnterkeyhintEnum) *BaseElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func BaseEnterkeyhintCustom(s string) BaseEnterkeyhintEnum {
	return BaseEnterkeyhintEnum(s)
}

func (e *BaseElement) Hidden(a BaseHiddenEnum) *BaseElement {
	e.attributes["hidden"] = a

	return e
}

func BaseHiddenCustom(s string) BaseHiddenEnum {
	return BaseHiddenEnum(s)
}

func (e *BaseElement) Id(s string) *BaseElement {
	e.attributes["id"] = s

	return e
}

func (e *BaseElement) Inert(b bool) *BaseElement {
	e.attributes["inert"] = b

	return e
}

func (e *BaseElement) Inputmode(a BaseInputmodeEnum) *BaseElement {
	e.attributes["inputmode"] = a

	return e
}

func BaseInputmodeCustom(s string) BaseInputmodeEnum {
	return BaseInputmodeEnum(s)
}

func (e *BaseElement) Itemid(s string) *BaseElement {
	e.attributes["itemid"] = s

	return e
}

func (e *BaseElement) Itemprop(s ...string) *BaseElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *BaseElement) Itemref(s ...string) *BaseElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *BaseElement) Itemscope(b bool) *BaseElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *BaseElement) Itemtype(s ...string) *BaseElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *BaseElement) Lang(s string) *BaseElement {
	e.attributes["lang"] = s

	return e
}

func (e *BaseElement) Nonce(s string) *BaseElement {
	e.attributes["nonce"] = s

	return e
}

func (e *BaseElement) Popover(s string) *BaseElement {
	e.attributes["popover"] = s

	return e
}

func (e *BaseElement) Slot(s string) *BaseElement {
	e.attributes["slot"] = s

	return e
}

func (e *BaseElement) Spellcheck(a BaseSpellcheckEnum) *BaseElement {
	e.attributes["spellcheck"] = a

	return e
}

func BaseSpellcheckCustom(s string) BaseSpellcheckEnum {
	return BaseSpellcheckEnum(s)
}

func (e *BaseElement) Style(s string) *BaseElement {
	e.attributes["style"] = s

	return e
}

func (e *BaseElement) Tabindex(i int) *BaseElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *BaseElement) Title(s string) *BaseElement {
	e.attributes["title"] = s

	return e
}

func (e *BaseElement) Translate(a BaseTranslateEnum) *BaseElement {
	e.attributes["translate"] = a

	return e
}

func BaseTranslateCustom(s string) BaseTranslateEnum {
	return BaseTranslateEnum(s)
}

func (e *BaseElement) Writingsuggestions(a BaseWritingsuggestionsEnum) *BaseElement {
	e.attributes["writingsuggestions"] = a

	return e
}

func BaseWritingsuggestionsCustom(s string) BaseWritingsuggestionsEnum {
	return BaseWritingsuggestionsEnum(s)
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *BaseElement) Render(w io.Writer) error {
	indent := htemel.SetIndent(e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<base")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}

	return nil
}
