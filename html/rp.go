// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type RpElement struct {
	attributes rpAttrs
	children   []htemel.Node
	skipRender bool
}

// Rp creates a tag <rp> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The rp element can be used to provide parentheses or other content around a ruby text component of a ruby annotation, to be shown by user agents that don't support ruby annotations.
func Rp(children ...htemel.Node) *RpElement {
	node := &RpElement{
		children:   children,
		attributes: make(rpAttrs),
	}

	return node
}

func RpIf(condition bool, children ...htemel.Node) *RpElement {
	if condition {
		return Rp(children...)
	}

	return &RpElement{
		skipRender: true,
	}
}

type RpAutocapitalizeAttrEnum string

const (
	RpAutocapitalizeAttrEnumSentences  RpAutocapitalizeAttrEnum = "sentences"
	RpAutocapitalizeAttrEnumWords      RpAutocapitalizeAttrEnum = "words"
	RpAutocapitalizeAttrEnumCharacters RpAutocapitalizeAttrEnum = "characters"
	RpAutocapitalizeAttrEnumNone       RpAutocapitalizeAttrEnum = "none"
	RpAutocapitalizeAttrEnumOff        RpAutocapitalizeAttrEnum = "off"
	RpAutocapitalizeAttrEnumOn         RpAutocapitalizeAttrEnum = "on"
)

type RpAutocorrectAttrEnum string

const (
	RpAutocorrectAttrEnumOff RpAutocorrectAttrEnum = "off"
	RpAutocorrectAttrEnumOn  RpAutocorrectAttrEnum = "on"
)

type RpContenteditableAttrEnum string

const (
	RpContenteditableAttrEnumFalse         RpContenteditableAttrEnum = "false"
	RpContenteditableAttrEnumPlaintextOnly RpContenteditableAttrEnum = "plaintext-only"
	RpContenteditableAttrEnumTrue          RpContenteditableAttrEnum = "true"
)

type rpAttrs map[string]any

func (e *RpElement) Autocapitalize(a RpAutocapitalizeAttrEnum) *RpElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *RpElement) Autocorrect(a RpAutocorrectAttrEnum) *RpElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *RpElement) Autofocus(b bool) *RpElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *RpElement) Class(s ...string) *RpElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *RpElement) Contenteditable(a RpContenteditableAttrEnum) *RpElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *RpElement) Id(s string) *RpElement {
	e.attributes["id"] = s

	return e
}

func (e *RpElement) Slot(s string) *RpElement {
	e.attributes["slot"] = s

	return e
}

func (e *RpElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<rp")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</rp>")); err != nil {
		return err
	}

	return nil
}
