// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type RpElement struct {
	attributes rpAttrs
	children []htemel.Node
	skipRender bool
}

// Rp creates a tag <rp> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The rp element can be used to provide parentheses or other content around a ruby text component of a ruby annotation, to be shown by user agents that don't support ruby annotations.
func Rp(children ...htemel.Node) *RpElement {
	node := &RpElement{
		children: children,
		attributes: make(rpAttrs),
	}

	return node
}

func RpIf(condition bool, children ...htemel.Node) *RpElement {
	if condition {
		return Rp(children...)
	}

	return &RpElement{
		skipRender: true,
	}
}

type RpAutocapitalizeEnum string

const (
	RpAutocapitalizeEnumCharacters RpAutocapitalizeEnum = "characters"
	RpAutocapitalizeEnumNone RpAutocapitalizeEnum = "none"
	RpAutocapitalizeEnumOff RpAutocapitalizeEnum = "off"
	RpAutocapitalizeEnumOn RpAutocapitalizeEnum = "on"
	RpAutocapitalizeEnumSentences RpAutocapitalizeEnum = "sentences"
	RpAutocapitalizeEnumWords RpAutocapitalizeEnum = "words"
)

type RpAutocorrectEnum string

const (
	RpAutocorrectEnumOff RpAutocorrectEnum = "off"
	RpAutocorrectEnumOn RpAutocorrectEnum = "on"
)

type RpContenteditableEnum string

const (
	RpContenteditableEnumFalse RpContenteditableEnum = "false"
	RpContenteditableEnumPlaintextOnly RpContenteditableEnum = "plaintext-only"
	RpContenteditableEnumTrue RpContenteditableEnum = "true"
)

type RpDirEnum string

const (
	RpDirEnumAuto RpDirEnum = "auto"
	RpDirEnumLtr RpDirEnum = "ltr"
	RpDirEnumRtl RpDirEnum = "rtl"
)

type RpDraggableEnum string

const (
	RpDraggableEnumFalse RpDraggableEnum = "false"
	RpDraggableEnumTrue RpDraggableEnum = "true"
)

type RpEnterkeyhintEnum string

const (
	RpEnterkeyhintEnumEnter RpEnterkeyhintEnum = "enter"
	RpEnterkeyhintEnumGo RpEnterkeyhintEnum = "go"
	RpEnterkeyhintEnumNext RpEnterkeyhintEnum = "next"
	RpEnterkeyhintEnumPrevious RpEnterkeyhintEnum = "previous"
	RpEnterkeyhintEnumSearch RpEnterkeyhintEnum = "search"
	RpEnterkeyhintEnumSend RpEnterkeyhintEnum = "send"
	RpEnterkeyhintEnumDone RpEnterkeyhintEnum = "done"
)

type RpHiddenEnum string

const (
	RpHiddenEnumHidden RpHiddenEnum = "hidden"
	RpHiddenEnumUntilFound RpHiddenEnum = "until-found"
)

type rpAttrs map[string]any

func (e *RpElement) Autocapitalize(a RpAutocapitalizeEnum) *RpElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *RpElement) Autocorrect(a RpAutocorrectEnum) *RpElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *RpElement) Autofocus(b bool) *RpElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *RpElement) Class(s ...string) *RpElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *RpElement) Contenteditable(a RpContenteditableEnum) *RpElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *RpElement) Dir(a RpDirEnum) *RpElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *RpElement) Draggable(a RpDraggableEnum) *RpElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *RpElement) Enterkeyhint(a RpEnterkeyhintEnum) *RpElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *RpElement) Hidden(a RpHiddenEnum) *RpElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *RpElement) Id(s string) *RpElement {
	e.attributes["id"] = s
	
	return e
}

func (e *RpElement) Slot(s string) *RpElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *RpElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<rp")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</rp>")); err != nil {
		return err
	}

	return nil
}
