// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type RpElement struct {
	attributes rpAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// Rp creates a tag <rp> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The rp element can be used to provide parentheses or other content around a ruby text component of a ruby annotation, to be shown by user agents that don't support ruby annotations.
func Rp(children ...htemel.Node) *RpElement {
	node := &RpElement{
		children: children, attributes: make(rpAttrs),
	}

	return node
}

func RpIf(condition bool, children ...htemel.Node) *RpElement {
	if condition {
		return Rp(children...)
	}

	return &RpElement{
		skipRender: true,
	}
}

func RpTernary(condition bool, true htemel.Node, false htemel.Node) *RpElement {
	if condition {
		return Rp(true)
	}

	return Rp(false)
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *RpElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *RpElement) AddIndent(i int) {
	e.indent = i + 1
}

type RpAutocapitalizeEnum string

const (
	RpAutocapitalizeEnumWords      RpAutocapitalizeEnum = "words"
	RpAutocapitalizeEnumCharacters RpAutocapitalizeEnum = "characters"
	RpAutocapitalizeEnumNone       RpAutocapitalizeEnum = "none"
	RpAutocapitalizeEnumOff        RpAutocapitalizeEnum = "off"
	RpAutocapitalizeEnumOn         RpAutocapitalizeEnum = "on"
	RpAutocapitalizeEnumSentences  RpAutocapitalizeEnum = "sentences"
)

type RpAutocorrectEnum string

const (
	RpAutocorrectEnumOff   RpAutocorrectEnum = "off"
	RpAutocorrectEnumOn    RpAutocorrectEnum = "on"
	RpAutocorrectEnumEmpty RpAutocorrectEnum = ""
)

type RpContenteditableEnum string

const (
	RpContenteditableEnumPlaintextOnly RpContenteditableEnum = "plaintext-only"
	RpContenteditableEnumTrue          RpContenteditableEnum = "true"
	RpContenteditableEnumFalse         RpContenteditableEnum = "false"
	RpContenteditableEnumEmpty         RpContenteditableEnum = ""
)

type RpDirEnum string

const (
	RpDirEnumAuto RpDirEnum = "auto"
	RpDirEnumLtr  RpDirEnum = "ltr"
	RpDirEnumRtl  RpDirEnum = "rtl"
)

type RpDraggableEnum string

const (
	RpDraggableEnumFalse RpDraggableEnum = "false"
	RpDraggableEnumTrue  RpDraggableEnum = "true"
)

type RpEnterkeyhintEnum string

const (
	RpEnterkeyhintEnumPrevious RpEnterkeyhintEnum = "previous"
	RpEnterkeyhintEnumSearch   RpEnterkeyhintEnum = "search"
	RpEnterkeyhintEnumSend     RpEnterkeyhintEnum = "send"
	RpEnterkeyhintEnumDone     RpEnterkeyhintEnum = "done"
	RpEnterkeyhintEnumEnter    RpEnterkeyhintEnum = "enter"
	RpEnterkeyhintEnumGo       RpEnterkeyhintEnum = "go"
	RpEnterkeyhintEnumNext     RpEnterkeyhintEnum = "next"
)

type RpHiddenEnum string

const (
	RpHiddenEnumHidden     RpHiddenEnum = "hidden"
	RpHiddenEnumUntilFound RpHiddenEnum = "until-found"
	RpHiddenEnumEmpty      RpHiddenEnum = ""
)

type RpInputmodeEnum string

const (
	RpInputmodeEnumUrl     RpInputmodeEnum = "url"
	RpInputmodeEnumDecimal RpInputmodeEnum = "decimal"
	RpInputmodeEnumEmail   RpInputmodeEnum = "email"
	RpInputmodeEnumNone    RpInputmodeEnum = "none"
	RpInputmodeEnumNumeric RpInputmodeEnum = "numeric"
	RpInputmodeEnumSearch  RpInputmodeEnum = "search"
	RpInputmodeEnumTel     RpInputmodeEnum = "tel"
	RpInputmodeEnumText    RpInputmodeEnum = "text"
)

type RpSpellcheckEnum string

const (
	RpSpellcheckEnumFalse RpSpellcheckEnum = "false"
	RpSpellcheckEnumTrue  RpSpellcheckEnum = "true"
	RpSpellcheckEnumEmpty RpSpellcheckEnum = ""
)

type RpTranslateEnum string

const (
	RpTranslateEnumNo    RpTranslateEnum = "no"
	RpTranslateEnumYes   RpTranslateEnum = "yes"
	RpTranslateEnumEmpty RpTranslateEnum = ""
)

type RpWritingsuggestionsEnum string

const (
	RpWritingsuggestionsEnumFalse RpWritingsuggestionsEnum = "false"
	RpWritingsuggestionsEnumTrue  RpWritingsuggestionsEnum = "true"
	RpWritingsuggestionsEnumEmpty RpWritingsuggestionsEnum = ""
)

type rpAttrs map[string]any

func (e *RpElement) Autocapitalize(a RpAutocapitalizeEnum) *RpElement {
	e.attributes["autocapitalize"] = a

	return e
}

func RpAutocapitalizeCustom(s string) RpAutocapitalizeEnum {
	return RpAutocapitalizeEnum(s)
}

func (e *RpElement) Autocorrect(a RpAutocorrectEnum) *RpElement {
	e.attributes["autocorrect"] = a

	return e
}

func RpAutocorrectCustom(s string) RpAutocorrectEnum {
	return RpAutocorrectEnum(s)
}

func (e *RpElement) Autofocus(b bool) *RpElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *RpElement) Class(s ...string) *RpElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *RpElement) Contenteditable(a RpContenteditableEnum) *RpElement {
	e.attributes["contenteditable"] = a

	return e
}

func RpContenteditableCustom(s string) RpContenteditableEnum {
	return RpContenteditableEnum(s)
}

func (e *RpElement) DataUnsafe(name string, s string) *RpElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *RpElement) Data(name string, s string) *RpElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *RpElement) Dir(a RpDirEnum) *RpElement {
	e.attributes["dir"] = a

	return e
}

func RpDirCustom(s string) RpDirEnum {
	return RpDirEnum(s)
}

func (e *RpElement) Draggable(a RpDraggableEnum) *RpElement {
	e.attributes["draggable"] = a

	return e
}

func RpDraggableCustom(s string) RpDraggableEnum {
	return RpDraggableEnum(s)
}

func (e *RpElement) Enterkeyhint(a RpEnterkeyhintEnum) *RpElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func RpEnterkeyhintCustom(s string) RpEnterkeyhintEnum {
	return RpEnterkeyhintEnum(s)
}

func (e *RpElement) Hidden(a RpHiddenEnum) *RpElement {
	e.attributes["hidden"] = a

	return e
}

func RpHiddenCustom(s string) RpHiddenEnum {
	return RpHiddenEnum(s)
}

func (e *RpElement) Id(s string) *RpElement {
	e.attributes["id"] = s

	return e
}

func (e *RpElement) Inert(b bool) *RpElement {
	e.attributes["inert"] = b

	return e
}

func (e *RpElement) Inputmode(a RpInputmodeEnum) *RpElement {
	e.attributes["inputmode"] = a

	return e
}

func RpInputmodeCustom(s string) RpInputmodeEnum {
	return RpInputmodeEnum(s)
}

func (e *RpElement) Itemid(s string) *RpElement {
	e.attributes["itemid"] = s

	return e
}

func (e *RpElement) Itemprop(s ...string) *RpElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *RpElement) Itemref(s ...string) *RpElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *RpElement) Itemscope(b bool) *RpElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *RpElement) Itemtype(s ...string) *RpElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *RpElement) Lang(s string) *RpElement {
	e.attributes["lang"] = s

	return e
}

func (e *RpElement) Nonce(s string) *RpElement {
	e.attributes["nonce"] = s

	return e
}

func (e *RpElement) Popover(s string) *RpElement {
	e.attributes["popover"] = s

	return e
}

func (e *RpElement) Slot(s string) *RpElement {
	e.attributes["slot"] = s

	return e
}

func (e *RpElement) Spellcheck(a RpSpellcheckEnum) *RpElement {
	e.attributes["spellcheck"] = a

	return e
}

func RpSpellcheckCustom(s string) RpSpellcheckEnum {
	return RpSpellcheckEnum(s)
}

func (e *RpElement) Style(s string) *RpElement {
	e.attributes["style"] = s

	return e
}

func (e *RpElement) Tabindex(i int) *RpElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *RpElement) Title(s string) *RpElement {
	e.attributes["title"] = s

	return e
}

func (e *RpElement) Translate(a RpTranslateEnum) *RpElement {
	e.attributes["translate"] = a

	return e
}

func RpTranslateCustom(s string) RpTranslateEnum {
	return RpTranslateEnum(s)
}

func (e *RpElement) Writingsuggestions(a RpWritingsuggestionsEnum) *RpElement {
	e.attributes["writingsuggestions"] = a

	return e
}

func RpWritingsuggestionsCustom(s string) RpWritingsuggestionsEnum {
	return RpWritingsuggestionsEnum(s)
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *RpElement) Render(w io.Writer) error {
	indent := htemel.SetIndent(e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<rp")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}
	for _, child := range e.children {
		child.AddIndent(e.Indent())
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(indent + "</rp>\n")); err != nil {
		return err
	}

	return nil
}
