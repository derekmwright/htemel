// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type PreElement struct {
	attributes preAttrs
	children []htemel.Node
	skipRender bool
}

// Pre creates a tag <pre> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The pre element represents a block of preformatted text, in which structure is represented by typographic conventions rather than by elements.
func Pre(children ...htemel.Node) *PreElement {
	node := &PreElement{
		children: children,
		attributes: make(preAttrs),
	}

	return node
}

func PreIf(condition bool, children ...htemel.Node) *PreElement {
	if condition {
		return Pre(children...)
	}

	return &PreElement{
		skipRender: true,
	}
}

type PreAutocapitalizeEnum string

const (
	PreAutocapitalizeEnumCharacters PreAutocapitalizeEnum = "characters"
	PreAutocapitalizeEnumNone PreAutocapitalizeEnum = "none"
	PreAutocapitalizeEnumOff PreAutocapitalizeEnum = "off"
	PreAutocapitalizeEnumOn PreAutocapitalizeEnum = "on"
	PreAutocapitalizeEnumSentences PreAutocapitalizeEnum = "sentences"
	PreAutocapitalizeEnumWords PreAutocapitalizeEnum = "words"
)

type PreAutocorrectEnum string

const (
	PreAutocorrectEnumOff PreAutocorrectEnum = "off"
	PreAutocorrectEnumOn PreAutocorrectEnum = "on"
)

type PreContenteditableEnum string

const (
	PreContenteditableEnumFalse PreContenteditableEnum = "false"
	PreContenteditableEnumPlaintextOnly PreContenteditableEnum = "plaintext-only"
	PreContenteditableEnumTrue PreContenteditableEnum = "true"
)

type PreDirEnum string

const (
	PreDirEnumAuto PreDirEnum = "auto"
	PreDirEnumLtr PreDirEnum = "ltr"
	PreDirEnumRtl PreDirEnum = "rtl"
)

type PreDraggableEnum string

const (
	PreDraggableEnumFalse PreDraggableEnum = "false"
	PreDraggableEnumTrue PreDraggableEnum = "true"
)

type PreEnterkeyhintEnum string

const (
	PreEnterkeyhintEnumEnter PreEnterkeyhintEnum = "enter"
	PreEnterkeyhintEnumGo PreEnterkeyhintEnum = "go"
	PreEnterkeyhintEnumNext PreEnterkeyhintEnum = "next"
	PreEnterkeyhintEnumPrevious PreEnterkeyhintEnum = "previous"
	PreEnterkeyhintEnumSearch PreEnterkeyhintEnum = "search"
	PreEnterkeyhintEnumSend PreEnterkeyhintEnum = "send"
	PreEnterkeyhintEnumDone PreEnterkeyhintEnum = "done"
)

type PreHiddenEnum string

const (
	PreHiddenEnumHidden PreHiddenEnum = "hidden"
	PreHiddenEnumUntilFound PreHiddenEnum = "until-found"
)

type preAttrs map[string]any

func (e *PreElement) Autocapitalize(a PreAutocapitalizeEnum) *PreElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *PreElement) Autocorrect(a PreAutocorrectEnum) *PreElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *PreElement) Autofocus(b bool) *PreElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *PreElement) Class(s ...string) *PreElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *PreElement) Contenteditable(a PreContenteditableEnum) *PreElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *PreElement) Dir(a PreDirEnum) *PreElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *PreElement) Draggable(a PreDraggableEnum) *PreElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *PreElement) Enterkeyhint(a PreEnterkeyhintEnum) *PreElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *PreElement) Hidden(a PreHiddenEnum) *PreElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *PreElement) Id(s string) *PreElement {
	e.attributes["id"] = s
	
	return e
}

func (e *PreElement) Slot(s string) *PreElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *PreElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<pre")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</pre>")); err != nil {
		return err
	}

	return nil
}
