// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type PreElement struct {
	attributes preAttrs
	children   []htemel.Node
	skipRender bool
}

// Pre creates a tag <pre> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The pre element represents a block of preformatted text, in which structure is represented by typographic conventions rather than by elements.
func Pre(children ...htemel.Node) *PreElement {
	node := &PreElement{
		children:   children,
		attributes: make(preAttrs),
	}

	return node
}

func PreIf(condition bool, children ...htemel.Node) *PreElement {
	if condition {
		return Pre(children...)
	}

	return &PreElement{
		skipRender: true,
	}
}

func PreTernary(condition bool, true htemel.Node, false htemel.Node) *PreElement {
	if condition {
		return Pre(true)
	}

	return Pre(false)
}

type PreAutocapitalizeEnum string

const (
	PreAutocapitalizeEnumNone       PreAutocapitalizeEnum = "none"
	PreAutocapitalizeEnumOff        PreAutocapitalizeEnum = "off"
	PreAutocapitalizeEnumOn         PreAutocapitalizeEnum = "on"
	PreAutocapitalizeEnumSentences  PreAutocapitalizeEnum = "sentences"
	PreAutocapitalizeEnumWords      PreAutocapitalizeEnum = "words"
	PreAutocapitalizeEnumCharacters PreAutocapitalizeEnum = "characters"
)

type PreAutocorrectEnum string

const (
	PreAutocorrectEnumOff PreAutocorrectEnum = "off"
	PreAutocorrectEnumOn  PreAutocorrectEnum = "on"
)

type PreContenteditableEnum string

const (
	PreContenteditableEnumFalse         PreContenteditableEnum = "false"
	PreContenteditableEnumPlaintextOnly PreContenteditableEnum = "plaintext-only"
	PreContenteditableEnumTrue          PreContenteditableEnum = "true"
)

type PreDirEnum string

const (
	PreDirEnumLtr  PreDirEnum = "ltr"
	PreDirEnumRtl  PreDirEnum = "rtl"
	PreDirEnumAuto PreDirEnum = "auto"
)

type PreDraggableEnum string

const (
	PreDraggableEnumFalse PreDraggableEnum = "false"
	PreDraggableEnumTrue  PreDraggableEnum = "true"
)

type PreEnterkeyhintEnum string

const (
	PreEnterkeyhintEnumNext     PreEnterkeyhintEnum = "next"
	PreEnterkeyhintEnumPrevious PreEnterkeyhintEnum = "previous"
	PreEnterkeyhintEnumSearch   PreEnterkeyhintEnum = "search"
	PreEnterkeyhintEnumSend     PreEnterkeyhintEnum = "send"
	PreEnterkeyhintEnumDone     PreEnterkeyhintEnum = "done"
	PreEnterkeyhintEnumEnter    PreEnterkeyhintEnum = "enter"
	PreEnterkeyhintEnumGo       PreEnterkeyhintEnum = "go"
)

type PreHiddenEnum string

const (
	PreHiddenEnumHidden     PreHiddenEnum = "hidden"
	PreHiddenEnumUntilFound PreHiddenEnum = "until-found"
	PreHiddenEnumEmpty      PreHiddenEnum = ""
)

type PreInputmodeEnum string

const (
	PreInputmodeEnumDecimal PreInputmodeEnum = "decimal"
	PreInputmodeEnumEmail   PreInputmodeEnum = "email"
	PreInputmodeEnumNone    PreInputmodeEnum = "none"
	PreInputmodeEnumNumeric PreInputmodeEnum = "numeric"
	PreInputmodeEnumSearch  PreInputmodeEnum = "search"
	PreInputmodeEnumTel     PreInputmodeEnum = "tel"
	PreInputmodeEnumText    PreInputmodeEnum = "text"
	PreInputmodeEnumUrl     PreInputmodeEnum = "url"
)

type PreSpellcheckEnum string

const (
	PreSpellcheckEnumFalse PreSpellcheckEnum = "false"
	PreSpellcheckEnumTrue  PreSpellcheckEnum = "true"
)

type PreTranslateEnum string

const (
	PreTranslateEnumNo  PreTranslateEnum = "no"
	PreTranslateEnumYes PreTranslateEnum = "yes"
)

type PreWritingsuggestionsEnum string

const (
	PreWritingsuggestionsEnumTrue  PreWritingsuggestionsEnum = "true"
	PreWritingsuggestionsEnumFalse PreWritingsuggestionsEnum = "false"
)

type preAttrs map[string]any

func (e *PreElement) Autocapitalize(a PreAutocapitalizeEnum) *PreElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *PreElement) Autocorrect(a PreAutocorrectEnum) *PreElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *PreElement) Autofocus(b bool) *PreElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *PreElement) Class(s ...string) *PreElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *PreElement) Contenteditable(a PreContenteditableEnum) *PreElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *PreElement) Dir(a PreDirEnum) *PreElement {
	e.attributes["dir"] = a

	return e
}

func (e *PreElement) Draggable(a PreDraggableEnum) *PreElement {
	e.attributes["draggable"] = a

	return e
}

func (e *PreElement) Enterkeyhint(a PreEnterkeyhintEnum) *PreElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *PreElement) Hidden(a PreHiddenEnum) *PreElement {
	e.attributes["hidden"] = a

	return e
}

func (e *PreElement) Id(s string) *PreElement {
	e.attributes["id"] = s

	return e
}

func (e *PreElement) Inert(b bool) *PreElement {
	e.attributes["inert"] = b

	return e
}

func (e *PreElement) Inputmode(a PreInputmodeEnum) *PreElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *PreElement) Itemid(s string) *PreElement {
	e.attributes["itemid"] = s

	return e
}

func (e *PreElement) Itemprop(s ...string) *PreElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *PreElement) Itemref(s ...string) *PreElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *PreElement) Itemscope(b bool) *PreElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *PreElement) Itemtype(s ...string) *PreElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *PreElement) Lang(s string) *PreElement {
	e.attributes["lang"] = s

	return e
}

func (e *PreElement) Nonce(s string) *PreElement {
	e.attributes["nonce"] = s

	return e
}

func (e *PreElement) Popover(s string) *PreElement {
	e.attributes["popover"] = s

	return e
}

func (e *PreElement) Slot(s string) *PreElement {
	e.attributes["slot"] = s

	return e
}

func (e *PreElement) Spellcheck(a PreSpellcheckEnum) *PreElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *PreElement) Style(s string) *PreElement {
	e.attributes["style"] = s

	return e
}

func (e *PreElement) Tabindex(i int) *PreElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *PreElement) Title(s string) *PreElement {
	e.attributes["title"] = s

	return e
}

func (e *PreElement) Translate(a PreTranslateEnum) *PreElement {
	e.attributes["translate"] = a

	return e
}

func (e *PreElement) Writingsuggestions(a PreWritingsuggestionsEnum) *PreElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *PreElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<pre")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</pre>")); err != nil {
		return err
	}

	return nil
}
