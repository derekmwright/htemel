// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type PreElement struct {
	attributes preAttrs
	children   []htemel.Node
	skipRender bool
}

// Pre creates a tag <pre> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The pre element represents a block of preformatted text, in which structure is represented by typographic conventions rather than by elements.
func Pre(children ...htemel.Node) *PreElement {
	node := &PreElement{
		children:   children,
		attributes: make(preAttrs),
	}

	return node
}

func PreIf(condition bool, children ...htemel.Node) *PreElement {
	if condition {
		return Pre(children...)
	}

	return &PreElement{
		skipRender: true,
	}
}

type PreAutocapitalizeAttrEnum string

const (
	PreAutocapitalizeAttrEnumWords      PreAutocapitalizeAttrEnum = "words"
	PreAutocapitalizeAttrEnumCharacters PreAutocapitalizeAttrEnum = "characters"
	PreAutocapitalizeAttrEnumNone       PreAutocapitalizeAttrEnum = "none"
	PreAutocapitalizeAttrEnumOff        PreAutocapitalizeAttrEnum = "off"
	PreAutocapitalizeAttrEnumOn         PreAutocapitalizeAttrEnum = "on"
	PreAutocapitalizeAttrEnumSentences  PreAutocapitalizeAttrEnum = "sentences"
)

type PreAutocorrectAttrEnum string

const (
	PreAutocorrectAttrEnumOn  PreAutocorrectAttrEnum = "on"
	PreAutocorrectAttrEnumOff PreAutocorrectAttrEnum = "off"
)

type PreContenteditableAttrEnum string

const (
	PreContenteditableAttrEnumFalse         PreContenteditableAttrEnum = "false"
	PreContenteditableAttrEnumPlaintextOnly PreContenteditableAttrEnum = "plaintext-only"
	PreContenteditableAttrEnumTrue          PreContenteditableAttrEnum = "true"
)

type preAttrs map[string]any

func (e *PreElement) Autocapitalize(a PreAutocapitalizeAttrEnum) *PreElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *PreElement) Autocorrect(a PreAutocorrectAttrEnum) *PreElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *PreElement) Autofocus(b bool) *PreElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *PreElement) Class(s ...string) *PreElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *PreElement) Contenteditable(a PreContenteditableAttrEnum) *PreElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *PreElement) Id(s string) *PreElement {
	e.attributes["id"] = s

	return e
}

func (e *PreElement) Slot(s string) *PreElement {
	e.attributes["slot"] = s

	return e
}

func (e *PreElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<pre")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</pre>")); err != nil {
		return err
	}

	return nil
}
