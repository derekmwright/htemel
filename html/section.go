// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type SectionElement struct {
	attributes sectionAttrs
	children   []htemel.Node
	skipRender bool
}

// Section creates a tag <section> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The section element represents a generic section of a document or application. A section, in this context, is a thematic grouping of content, typically with a heading.
func Section(children ...htemel.Node) *SectionElement {
	node := &SectionElement{
		children:   children,
		attributes: make(sectionAttrs),
	}

	return node
}

func SectionIf(condition bool, children ...htemel.Node) *SectionElement {
	if condition {
		return Section(children...)
	}

	return &SectionElement{
		skipRender: true,
	}
}

type SectionAutocapitalizeAttrEnum string

const (
	SectionAutocapitalizeAttrEnumOn         SectionAutocapitalizeAttrEnum = "on"
	SectionAutocapitalizeAttrEnumSentences  SectionAutocapitalizeAttrEnum = "sentences"
	SectionAutocapitalizeAttrEnumWords      SectionAutocapitalizeAttrEnum = "words"
	SectionAutocapitalizeAttrEnumCharacters SectionAutocapitalizeAttrEnum = "characters"
	SectionAutocapitalizeAttrEnumNone       SectionAutocapitalizeAttrEnum = "none"
	SectionAutocapitalizeAttrEnumOff        SectionAutocapitalizeAttrEnum = "off"
)

type SectionAutocorrectAttrEnum string

const (
	SectionAutocorrectAttrEnumOff SectionAutocorrectAttrEnum = "off"
	SectionAutocorrectAttrEnumOn  SectionAutocorrectAttrEnum = "on"
)

type SectionContenteditableAttrEnum string

const (
	SectionContenteditableAttrEnumFalse         SectionContenteditableAttrEnum = "false"
	SectionContenteditableAttrEnumPlaintextOnly SectionContenteditableAttrEnum = "plaintext-only"
	SectionContenteditableAttrEnumTrue          SectionContenteditableAttrEnum = "true"
)

type sectionAttrs map[string]any

func (e *SectionElement) Autocapitalize(a SectionAutocapitalizeAttrEnum) *SectionElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *SectionElement) Autocorrect(a SectionAutocorrectAttrEnum) *SectionElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *SectionElement) Autofocus(b bool) *SectionElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *SectionElement) Class(s ...string) *SectionElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *SectionElement) Contenteditable(a SectionContenteditableAttrEnum) *SectionElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *SectionElement) Id(s string) *SectionElement {
	e.attributes["id"] = s

	return e
}

func (e *SectionElement) Slot(s string) *SectionElement {
	e.attributes["slot"] = s

	return e
}

func (e *SectionElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<section")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</section>")); err != nil {
		return err
	}

	return nil
}
