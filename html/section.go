// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type SectionElement struct {
	attributes sectionAttrs
	children []htemel.Node
	skipRender bool
}

// Section creates a tag <section> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The section element represents a generic section of a document or application. A section, in this context, is a thematic grouping of content, typically with a heading.
func Section(children ...htemel.Node) *SectionElement {
	node := &SectionElement{
		children: children,
		attributes: make(sectionAttrs),
	}

	return node
}

func SectionIf(condition bool, children ...htemel.Node) *SectionElement {
	if condition {
		return Section(children...)
	}

	return &SectionElement{
		skipRender: true,
	}
}

type SectionAutocapitalizeEnum string

const (
	SectionAutocapitalizeEnumCharacters SectionAutocapitalizeEnum = "characters"
	SectionAutocapitalizeEnumNone SectionAutocapitalizeEnum = "none"
	SectionAutocapitalizeEnumOff SectionAutocapitalizeEnum = "off"
	SectionAutocapitalizeEnumOn SectionAutocapitalizeEnum = "on"
	SectionAutocapitalizeEnumSentences SectionAutocapitalizeEnum = "sentences"
	SectionAutocapitalizeEnumWords SectionAutocapitalizeEnum = "words"
)

type SectionAutocorrectEnum string

const (
	SectionAutocorrectEnumOff SectionAutocorrectEnum = "off"
	SectionAutocorrectEnumOn SectionAutocorrectEnum = "on"
)

type SectionContenteditableEnum string

const (
	SectionContenteditableEnumFalse SectionContenteditableEnum = "false"
	SectionContenteditableEnumPlaintextOnly SectionContenteditableEnum = "plaintext-only"
	SectionContenteditableEnumTrue SectionContenteditableEnum = "true"
)

type SectionDirEnum string

const (
	SectionDirEnumAuto SectionDirEnum = "auto"
	SectionDirEnumLtr SectionDirEnum = "ltr"
	SectionDirEnumRtl SectionDirEnum = "rtl"
)

type SectionDraggableEnum string

const (
	SectionDraggableEnumTrue SectionDraggableEnum = "true"
	SectionDraggableEnumFalse SectionDraggableEnum = "false"
)

type SectionEnterkeyhintEnum string

const (
	SectionEnterkeyhintEnumPrevious SectionEnterkeyhintEnum = "previous"
	SectionEnterkeyhintEnumSearch SectionEnterkeyhintEnum = "search"
	SectionEnterkeyhintEnumSend SectionEnterkeyhintEnum = "send"
	SectionEnterkeyhintEnumDone SectionEnterkeyhintEnum = "done"
	SectionEnterkeyhintEnumEnter SectionEnterkeyhintEnum = "enter"
	SectionEnterkeyhintEnumGo SectionEnterkeyhintEnum = "go"
	SectionEnterkeyhintEnumNext SectionEnterkeyhintEnum = "next"
)

type SectionHiddenEnum string

const (
	SectionHiddenEnumHidden SectionHiddenEnum = "hidden"
	SectionHiddenEnumUntilFound SectionHiddenEnum = "until-found"
)

type sectionAttrs map[string]any

func (e *SectionElement) Autocapitalize(a SectionAutocapitalizeEnum) *SectionElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *SectionElement) Autocorrect(a SectionAutocorrectEnum) *SectionElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *SectionElement) Autofocus(b bool) *SectionElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *SectionElement) Class(s ...string) *SectionElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *SectionElement) Contenteditable(a SectionContenteditableEnum) *SectionElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *SectionElement) Dir(a SectionDirEnum) *SectionElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *SectionElement) Draggable(a SectionDraggableEnum) *SectionElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *SectionElement) Enterkeyhint(a SectionEnterkeyhintEnum) *SectionElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *SectionElement) Hidden(a SectionHiddenEnum) *SectionElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *SectionElement) Id(s string) *SectionElement {
	e.attributes["id"] = s
	
	return e
}

func (e *SectionElement) Slot(s string) *SectionElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *SectionElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<section")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</section>")); err != nil {
		return err
	}

	return nil
}
