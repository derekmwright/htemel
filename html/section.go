// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type SectionElement struct {
	attributes sectionAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// Section creates a tag <section> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The section element represents a generic section of a document or application. A section, in this context, is a thematic grouping of content, typically with a heading.
func Section(children ...htemel.Node) *SectionElement {
	node := &SectionElement{
		children: children, attributes: make(sectionAttrs),
	}

	return node
}

func SectionIf(condition bool, children ...htemel.Node) *SectionElement {
	if condition {
		return Section(children...)
	}

	return &SectionElement{
		skipRender: true,
	}
}

func SectionTernary(condition bool, true htemel.Node, false htemel.Node) *SectionElement {
	if condition {
		return Section(true)
	}

	return Section(false)
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *SectionElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *SectionElement) AddIndent(i int) {
	e.indent = i + 1
}

type SectionAutocapitalizeEnum string

const (
	SectionAutocapitalizeEnumOn         SectionAutocapitalizeEnum = "on"
	SectionAutocapitalizeEnumSentences  SectionAutocapitalizeEnum = "sentences"
	SectionAutocapitalizeEnumWords      SectionAutocapitalizeEnum = "words"
	SectionAutocapitalizeEnumCharacters SectionAutocapitalizeEnum = "characters"
	SectionAutocapitalizeEnumNone       SectionAutocapitalizeEnum = "none"
	SectionAutocapitalizeEnumOff        SectionAutocapitalizeEnum = "off"
)

type SectionAutocorrectEnum string

const (
	SectionAutocorrectEnumOff   SectionAutocorrectEnum = "off"
	SectionAutocorrectEnumOn    SectionAutocorrectEnum = "on"
	SectionAutocorrectEnumEmpty SectionAutocorrectEnum = ""
)

type SectionContenteditableEnum string

const (
	SectionContenteditableEnumTrue          SectionContenteditableEnum = "true"
	SectionContenteditableEnumFalse         SectionContenteditableEnum = "false"
	SectionContenteditableEnumPlaintextOnly SectionContenteditableEnum = "plaintext-only"
	SectionContenteditableEnumEmpty         SectionContenteditableEnum = ""
)

type SectionDirEnum string

const (
	SectionDirEnumAuto SectionDirEnum = "auto"
	SectionDirEnumLtr  SectionDirEnum = "ltr"
	SectionDirEnumRtl  SectionDirEnum = "rtl"
)

type SectionDraggableEnum string

const (
	SectionDraggableEnumFalse SectionDraggableEnum = "false"
	SectionDraggableEnumTrue  SectionDraggableEnum = "true"
)

type SectionEnterkeyhintEnum string

const (
	SectionEnterkeyhintEnumEnter    SectionEnterkeyhintEnum = "enter"
	SectionEnterkeyhintEnumGo       SectionEnterkeyhintEnum = "go"
	SectionEnterkeyhintEnumNext     SectionEnterkeyhintEnum = "next"
	SectionEnterkeyhintEnumPrevious SectionEnterkeyhintEnum = "previous"
	SectionEnterkeyhintEnumSearch   SectionEnterkeyhintEnum = "search"
	SectionEnterkeyhintEnumSend     SectionEnterkeyhintEnum = "send"
	SectionEnterkeyhintEnumDone     SectionEnterkeyhintEnum = "done"
)

type SectionHiddenEnum string

const (
	SectionHiddenEnumUntilFound SectionHiddenEnum = "until-found"
	SectionHiddenEnumHidden     SectionHiddenEnum = "hidden"
	SectionHiddenEnumEmpty      SectionHiddenEnum = ""
)

type SectionInputmodeEnum string

const (
	SectionInputmodeEnumTel     SectionInputmodeEnum = "tel"
	SectionInputmodeEnumText    SectionInputmodeEnum = "text"
	SectionInputmodeEnumUrl     SectionInputmodeEnum = "url"
	SectionInputmodeEnumDecimal SectionInputmodeEnum = "decimal"
	SectionInputmodeEnumEmail   SectionInputmodeEnum = "email"
	SectionInputmodeEnumNone    SectionInputmodeEnum = "none"
	SectionInputmodeEnumNumeric SectionInputmodeEnum = "numeric"
	SectionInputmodeEnumSearch  SectionInputmodeEnum = "search"
)

type SectionSpellcheckEnum string

const (
	SectionSpellcheckEnumFalse SectionSpellcheckEnum = "false"
	SectionSpellcheckEnumTrue  SectionSpellcheckEnum = "true"
	SectionSpellcheckEnumEmpty SectionSpellcheckEnum = ""
)

type SectionTranslateEnum string

const (
	SectionTranslateEnumNo    SectionTranslateEnum = "no"
	SectionTranslateEnumYes   SectionTranslateEnum = "yes"
	SectionTranslateEnumEmpty SectionTranslateEnum = ""
)

type SectionWritingsuggestionsEnum string

const (
	SectionWritingsuggestionsEnumFalse SectionWritingsuggestionsEnum = "false"
	SectionWritingsuggestionsEnumTrue  SectionWritingsuggestionsEnum = "true"
	SectionWritingsuggestionsEnumEmpty SectionWritingsuggestionsEnum = ""
)

type sectionAttrs map[string]any

func (e *SectionElement) Autocapitalize(a SectionAutocapitalizeEnum) *SectionElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *SectionElement) Autocorrect(a SectionAutocorrectEnum) *SectionElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *SectionElement) Autofocus(b bool) *SectionElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *SectionElement) Class(s ...string) *SectionElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *SectionElement) Contenteditable(a SectionContenteditableEnum) *SectionElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *SectionElement) DataUnsafe(name string, s string) *SectionElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *SectionElement) Data(name string, s string) *SectionElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *SectionElement) Dir(a SectionDirEnum) *SectionElement {
	e.attributes["dir"] = a

	return e
}

func (e *SectionElement) Draggable(a SectionDraggableEnum) *SectionElement {
	e.attributes["draggable"] = a

	return e
}

func (e *SectionElement) Enterkeyhint(a SectionEnterkeyhintEnum) *SectionElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *SectionElement) Hidden(a SectionHiddenEnum) *SectionElement {
	e.attributes["hidden"] = a

	return e
}

func (e *SectionElement) Id(s string) *SectionElement {
	e.attributes["id"] = s

	return e
}

func (e *SectionElement) Inert(b bool) *SectionElement {
	e.attributes["inert"] = b

	return e
}

func (e *SectionElement) Inputmode(a SectionInputmodeEnum) *SectionElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *SectionElement) Itemid(s string) *SectionElement {
	e.attributes["itemid"] = s

	return e
}

func (e *SectionElement) Itemprop(s ...string) *SectionElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *SectionElement) Itemref(s ...string) *SectionElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *SectionElement) Itemscope(b bool) *SectionElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *SectionElement) Itemtype(s ...string) *SectionElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *SectionElement) Lang(s string) *SectionElement {
	e.attributes["lang"] = s

	return e
}

func (e *SectionElement) Nonce(s string) *SectionElement {
	e.attributes["nonce"] = s

	return e
}

func (e *SectionElement) Popover(s string) *SectionElement {
	e.attributes["popover"] = s

	return e
}

func (e *SectionElement) Slot(s string) *SectionElement {
	e.attributes["slot"] = s

	return e
}

func (e *SectionElement) Spellcheck(a SectionSpellcheckEnum) *SectionElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *SectionElement) Style(s string) *SectionElement {
	e.attributes["style"] = s

	return e
}

func (e *SectionElement) Tabindex(i int) *SectionElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *SectionElement) Title(s string) *SectionElement {
	e.attributes["title"] = s

	return e
}

func (e *SectionElement) Translate(a SectionTranslateEnum) *SectionElement {
	e.attributes["translate"] = a

	return e
}

func (e *SectionElement) Writingsuggestions(a SectionWritingsuggestionsEnum) *SectionElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *SectionElement) Render(w io.Writer) error {
	indent := htemel.SetIndent(e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<section")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}
	for _, child := range e.children {
		child.AddIndent(e.Indent())
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(indent + "</section>\n")); err != nil {
		return err
	}

	return nil
}
