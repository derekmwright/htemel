// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
)

type MainElement struct {
	attributes mainAttrs
	children []htemel.Node
	skipRender bool
}

// Main creates a tag <main> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The main element represents the dominant contents of the document.
func Main(children ...htemel.Node) *MainElement {
	node := &MainElement{
		children: children,
	}

	return node
}

func MainIf(condition bool, children ...htemel.Node) *MainElement {
	if condition {
		return Main(children...)
	}

	return &MainElement{
		skipRender: true,
	}
}

type MainAutocapitalizeAttrEnum string

const (
	MainAutocapitalizeAttrEnumCharacters MainAutocapitalizeAttrEnum = "characters"
	MainAutocapitalizeAttrEnumNone MainAutocapitalizeAttrEnum = "none"
	MainAutocapitalizeAttrEnumOff MainAutocapitalizeAttrEnum = "off"
	MainAutocapitalizeAttrEnumOn MainAutocapitalizeAttrEnum = "on"
	MainAutocapitalizeAttrEnumSentences MainAutocapitalizeAttrEnum = "sentences"
	MainAutocapitalizeAttrEnumWords MainAutocapitalizeAttrEnum = "words"
)

type MainAutocorrectAttrEnum string

const (
	MainAutocorrectAttrEnumOff MainAutocorrectAttrEnum = "off"
	MainAutocorrectAttrEnumOn MainAutocorrectAttrEnum = "on"
)

type MainContenteditableAttrEnum string

const (
	MainContenteditableAttrEnumPlaintextOnly MainContenteditableAttrEnum = "plaintext-only"
	MainContenteditableAttrEnumTrue MainContenteditableAttrEnum = "true"
	MainContenteditableAttrEnumFalse MainContenteditableAttrEnum = "false"
)

type mainAttrs map[string]any

func (e *MainElement) Autocapitalize(a MainAutocapitalizeAttrEnum) *MainElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *MainElement) Autocorrect(a MainAutocorrectAttrEnum) *MainElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *MainElement) Class(s ...string) *MainElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *MainElement) Contenteditable(a MainContenteditableAttrEnum) *MainElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *MainElement) Id(s string) *MainElement {
	e.attributes["id"] = s
	
	return e
}

func (e *MainElement) Slot(s string) *MainElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *MainElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<main")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 0
	for key, v := range e.attributes {
		w.Write([]byte(key + "="))
		w.Write([]byte(html.EscapeString(fmt.Sprintf("'%v'", v))))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</main>")); err != nil {
		return err
	}

	return nil
}
