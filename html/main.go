// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type MainElement struct {
	attributes mainAttrs
	children []htemel.Node
	skipRender bool
}

// Main creates a tag <main> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The main element represents the dominant contents of the document.
func Main(children ...htemel.Node) *MainElement {
	node := &MainElement{
		children: children,
		attributes: make(mainAttrs),
	}

	return node
}

func MainIf(condition bool, children ...htemel.Node) *MainElement {
	if condition {
		return Main(children...)
	}

	return &MainElement{
		skipRender: true,
	}
}

type MainAutocapitalizeEnum string

const (
	MainAutocapitalizeEnumOn MainAutocapitalizeEnum = "on"
	MainAutocapitalizeEnumSentences MainAutocapitalizeEnum = "sentences"
	MainAutocapitalizeEnumWords MainAutocapitalizeEnum = "words"
	MainAutocapitalizeEnumCharacters MainAutocapitalizeEnum = "characters"
	MainAutocapitalizeEnumNone MainAutocapitalizeEnum = "none"
	MainAutocapitalizeEnumOff MainAutocapitalizeEnum = "off"
)

type MainAutocorrectEnum string

const (
	MainAutocorrectEnumOff MainAutocorrectEnum = "off"
	MainAutocorrectEnumOn MainAutocorrectEnum = "on"
)

type MainContenteditableEnum string

const (
	MainContenteditableEnumFalse MainContenteditableEnum = "false"
	MainContenteditableEnumPlaintextOnly MainContenteditableEnum = "plaintext-only"
	MainContenteditableEnumTrue MainContenteditableEnum = "true"
)

type MainDirEnum string

const (
	MainDirEnumLtr MainDirEnum = "ltr"
	MainDirEnumRtl MainDirEnum = "rtl"
	MainDirEnumAuto MainDirEnum = "auto"
)

type MainDraggableEnum string

const (
	MainDraggableEnumFalse MainDraggableEnum = "false"
	MainDraggableEnumTrue MainDraggableEnum = "true"
)

type MainEnterkeyhintEnum string

const (
	MainEnterkeyhintEnumGo MainEnterkeyhintEnum = "go"
	MainEnterkeyhintEnumNext MainEnterkeyhintEnum = "next"
	MainEnterkeyhintEnumPrevious MainEnterkeyhintEnum = "previous"
	MainEnterkeyhintEnumSearch MainEnterkeyhintEnum = "search"
	MainEnterkeyhintEnumSend MainEnterkeyhintEnum = "send"
	MainEnterkeyhintEnumDone MainEnterkeyhintEnum = "done"
	MainEnterkeyhintEnumEnter MainEnterkeyhintEnum = "enter"
)

type MainHiddenEnum string

const (
	MainHiddenEnumHidden MainHiddenEnum = "hidden"
	MainHiddenEnumUntilFound MainHiddenEnum = "until-found"
)

type mainAttrs map[string]any

func (e *MainElement) Autocapitalize(a MainAutocapitalizeEnum) *MainElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *MainElement) Autocorrect(a MainAutocorrectEnum) *MainElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *MainElement) Autofocus(b bool) *MainElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *MainElement) Class(s ...string) *MainElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *MainElement) Contenteditable(a MainContenteditableEnum) *MainElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *MainElement) Dir(a MainDirEnum) *MainElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *MainElement) Draggable(a MainDraggableEnum) *MainElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *MainElement) Enterkeyhint(a MainEnterkeyhintEnum) *MainElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *MainElement) Hidden(a MainHiddenEnum) *MainElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *MainElement) Id(s string) *MainElement {
	e.attributes["id"] = s
	
	return e
}

func (e *MainElement) Slot(s string) *MainElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *MainElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<main")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</main>")); err != nil {
		return err
	}

	return nil
}
