// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type ImgElement struct {
	attributes imgAttrs
	children []htemel.Node
	skipRender bool
}

// Img creates a tag <img> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: An img element represents an image.
func Img(children ...htemel.Node) *ImgElement {
	node := &ImgElement{
		children: children,
		attributes: make(imgAttrs),
	}

	return node
}

func ImgIf(condition bool, children ...htemel.Node) *ImgElement {
	if condition {
		return Img(children...)
	}

	return &ImgElement{
		skipRender: true,
	}
}

type ImgAutocapitalizeEnum string

const (
	ImgAutocapitalizeEnumCharacters ImgAutocapitalizeEnum = "characters"
	ImgAutocapitalizeEnumNone ImgAutocapitalizeEnum = "none"
	ImgAutocapitalizeEnumOff ImgAutocapitalizeEnum = "off"
	ImgAutocapitalizeEnumOn ImgAutocapitalizeEnum = "on"
	ImgAutocapitalizeEnumSentences ImgAutocapitalizeEnum = "sentences"
	ImgAutocapitalizeEnumWords ImgAutocapitalizeEnum = "words"
)

type ImgAutocorrectEnum string

const (
	ImgAutocorrectEnumOff ImgAutocorrectEnum = "off"
	ImgAutocorrectEnumOn ImgAutocorrectEnum = "on"
)

type ImgContenteditableEnum string

const (
	ImgContenteditableEnumFalse ImgContenteditableEnum = "false"
	ImgContenteditableEnumPlaintextOnly ImgContenteditableEnum = "plaintext-only"
	ImgContenteditableEnumTrue ImgContenteditableEnum = "true"
)

type ImgDirEnum string

const (
	ImgDirEnumAuto ImgDirEnum = "auto"
	ImgDirEnumLtr ImgDirEnum = "ltr"
	ImgDirEnumRtl ImgDirEnum = "rtl"
)

type ImgDraggableEnum string

const (
	ImgDraggableEnumFalse ImgDraggableEnum = "false"
	ImgDraggableEnumTrue ImgDraggableEnum = "true"
)

type ImgEnterkeyhintEnum string

const (
	ImgEnterkeyhintEnumGo ImgEnterkeyhintEnum = "go"
	ImgEnterkeyhintEnumNext ImgEnterkeyhintEnum = "next"
	ImgEnterkeyhintEnumPrevious ImgEnterkeyhintEnum = "previous"
	ImgEnterkeyhintEnumSearch ImgEnterkeyhintEnum = "search"
	ImgEnterkeyhintEnumSend ImgEnterkeyhintEnum = "send"
	ImgEnterkeyhintEnumDone ImgEnterkeyhintEnum = "done"
	ImgEnterkeyhintEnumEnter ImgEnterkeyhintEnum = "enter"
)

type ImgHiddenEnum string

const (
	ImgHiddenEnumHidden ImgHiddenEnum = "hidden"
	ImgHiddenEnumUntilFound ImgHiddenEnum = "until-found"
)

type imgAttrs map[string]any

func (e *ImgElement) Autocapitalize(a ImgAutocapitalizeEnum) *ImgElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *ImgElement) Autocorrect(a ImgAutocorrectEnum) *ImgElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *ImgElement) Autofocus(b bool) *ImgElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *ImgElement) Class(s ...string) *ImgElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *ImgElement) Contenteditable(a ImgContenteditableEnum) *ImgElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *ImgElement) Dir(a ImgDirEnum) *ImgElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *ImgElement) Draggable(a ImgDraggableEnum) *ImgElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *ImgElement) Enterkeyhint(a ImgEnterkeyhintEnum) *ImgElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *ImgElement) Hidden(a ImgHiddenEnum) *ImgElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *ImgElement) Id(s string) *ImgElement {
	e.attributes["id"] = s
	
	return e
}

func (e *ImgElement) Slot(s string) *ImgElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *ImgElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<img")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</img>")); err != nil {
		return err
	}

	return nil
}
