// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type ImgElement struct {
	attributes imgAttrs
	children []htemel.Node
	skipRender bool
}

// Img creates a tag <img> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: An img element represents an image.
func Img(children ...htemel.Node) *ImgElement {
	node := &ImgElement{
		children: children,
		attributes: make(imgAttrs),
	}

	return node
}

func ImgIf(condition bool, children ...htemel.Node) *ImgElement {
	if condition {
		return Img(children...)
	}

	return &ImgElement{
		skipRender: true,
	}
}

type ImgAutocapitalizeAttrEnum string

const (
	ImgAutocapitalizeAttrEnumOn ImgAutocapitalizeAttrEnum = "on"
	ImgAutocapitalizeAttrEnumSentences ImgAutocapitalizeAttrEnum = "sentences"
	ImgAutocapitalizeAttrEnumWords ImgAutocapitalizeAttrEnum = "words"
	ImgAutocapitalizeAttrEnumCharacters ImgAutocapitalizeAttrEnum = "characters"
	ImgAutocapitalizeAttrEnumNone ImgAutocapitalizeAttrEnum = "none"
	ImgAutocapitalizeAttrEnumOff ImgAutocapitalizeAttrEnum = "off"
)

type ImgAutocorrectAttrEnum string

const (
	ImgAutocorrectAttrEnumOff ImgAutocorrectAttrEnum = "off"
	ImgAutocorrectAttrEnumOn ImgAutocorrectAttrEnum = "on"
)

type ImgContenteditableAttrEnum string

const (
	ImgContenteditableAttrEnumTrue ImgContenteditableAttrEnum = "true"
	ImgContenteditableAttrEnumFalse ImgContenteditableAttrEnum = "false"
	ImgContenteditableAttrEnumPlaintextOnly ImgContenteditableAttrEnum = "plaintext-only"
)

type imgAttrs map[string]any

func (e *ImgElement) Autocapitalize(a ImgAutocapitalizeAttrEnum) *ImgElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *ImgElement) Autocorrect(a ImgAutocorrectAttrEnum) *ImgElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *ImgElement) Class(s ...string) *ImgElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *ImgElement) Contenteditable(a ImgContenteditableAttrEnum) *ImgElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *ImgElement) Id(s string) *ImgElement {
	e.attributes["id"] = s
	
	return e
}

func (e *ImgElement) Slot(s string) *ImgElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *ImgElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<img")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		w.Write([]byte(" " + key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</img>")); err != nil {
		return err
	}

	return nil
}
