// Code generated by htemel. DO NOT EDIT.
package html

import (
  "github.com/derekmwright/htemel"
  "io"
)

type HgroupElement struct {
	children []htemel.Node
}

// Hgroup creates a tag <hgroup> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The hgroup element represents a heading and related content. The element may be used to group an h1â€“h6 element with one or more p elements containing content representing a subheading, alternative title, or tagline.
func Hgroup(children ...htemel.Node) *HgroupElement {
	node := &HgroupElement{
		children: children,
	}

	return node
}

func HgroupIf(condition bool, children ...htemel.Node) *HgroupElement {
	if condition {
		return Hgroup(children...)
	}

	return nil
}

func (e *HgroupElement) Render(w io.Writer) error {
	if _, err := w.Write([]byte("<hgroup")); err != nil {
		return err
	}

	// TODO: Attribute stuff here

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</hgroup>")); err != nil {
		return err
	}

	return nil
}
