// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type HgroupElement struct {
	attributes hgroupAttrs
	children []htemel.Node
	skipRender bool
}

// Hgroup creates a tag <hgroup> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The hgroup element represents a heading and related content. The element may be used to group an h1â€“h6 element with one or more p elements containing content representing a subheading, alternative title, or tagline.
func Hgroup(children ...htemel.Node) *HgroupElement {
	node := &HgroupElement{
		children: children,
		attributes: make(hgroupAttrs),
	}

	return node
}

func HgroupIf(condition bool, children ...htemel.Node) *HgroupElement {
	if condition {
		return Hgroup(children...)
	}

	return &HgroupElement{
		skipRender: true,
	}
}

type HgroupAutocapitalizeEnum string

const (
	HgroupAutocapitalizeEnumCharacters HgroupAutocapitalizeEnum = "characters"
	HgroupAutocapitalizeEnumNone HgroupAutocapitalizeEnum = "none"
	HgroupAutocapitalizeEnumOff HgroupAutocapitalizeEnum = "off"
	HgroupAutocapitalizeEnumOn HgroupAutocapitalizeEnum = "on"
	HgroupAutocapitalizeEnumSentences HgroupAutocapitalizeEnum = "sentences"
	HgroupAutocapitalizeEnumWords HgroupAutocapitalizeEnum = "words"
)

type HgroupAutocorrectEnum string

const (
	HgroupAutocorrectEnumOff HgroupAutocorrectEnum = "off"
	HgroupAutocorrectEnumOn HgroupAutocorrectEnum = "on"
)

type HgroupContenteditableEnum string

const (
	HgroupContenteditableEnumFalse HgroupContenteditableEnum = "false"
	HgroupContenteditableEnumPlaintextOnly HgroupContenteditableEnum = "plaintext-only"
	HgroupContenteditableEnumTrue HgroupContenteditableEnum = "true"
)

type HgroupDirEnum string

const (
	HgroupDirEnumAuto HgroupDirEnum = "auto"
	HgroupDirEnumLtr HgroupDirEnum = "ltr"
	HgroupDirEnumRtl HgroupDirEnum = "rtl"
)

type HgroupDraggableEnum string

const (
	HgroupDraggableEnumTrue HgroupDraggableEnum = "true"
	HgroupDraggableEnumFalse HgroupDraggableEnum = "false"
)

type HgroupEnterkeyhintEnum string

const (
	HgroupEnterkeyhintEnumNext HgroupEnterkeyhintEnum = "next"
	HgroupEnterkeyhintEnumPrevious HgroupEnterkeyhintEnum = "previous"
	HgroupEnterkeyhintEnumSearch HgroupEnterkeyhintEnum = "search"
	HgroupEnterkeyhintEnumSend HgroupEnterkeyhintEnum = "send"
	HgroupEnterkeyhintEnumDone HgroupEnterkeyhintEnum = "done"
	HgroupEnterkeyhintEnumEnter HgroupEnterkeyhintEnum = "enter"
	HgroupEnterkeyhintEnumGo HgroupEnterkeyhintEnum = "go"
)

type HgroupHiddenEnum string

const (
	HgroupHiddenEnumHidden HgroupHiddenEnum = "hidden"
	HgroupHiddenEnumUntilFound HgroupHiddenEnum = "until-found"
)

type hgroupAttrs map[string]any

func (e *HgroupElement) Autocapitalize(a HgroupAutocapitalizeEnum) *HgroupElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *HgroupElement) Autocorrect(a HgroupAutocorrectEnum) *HgroupElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *HgroupElement) Autofocus(b bool) *HgroupElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *HgroupElement) Class(s ...string) *HgroupElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *HgroupElement) Contenteditable(a HgroupContenteditableEnum) *HgroupElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *HgroupElement) Dir(a HgroupDirEnum) *HgroupElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *HgroupElement) Draggable(a HgroupDraggableEnum) *HgroupElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *HgroupElement) Enterkeyhint(a HgroupEnterkeyhintEnum) *HgroupElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *HgroupElement) Hidden(a HgroupHiddenEnum) *HgroupElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *HgroupElement) Id(s string) *HgroupElement {
	e.attributes["id"] = s
	
	return e
}

func (e *HgroupElement) Slot(s string) *HgroupElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *HgroupElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<hgroup")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</hgroup>")); err != nil {
		return err
	}

	return nil
}
