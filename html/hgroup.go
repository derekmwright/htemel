// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type HgroupElement struct {
	attributes hgroupAttrs
	children   []htemel.Node
	skipRender bool
}

// Hgroup creates a tag <hgroup> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The hgroup element represents a heading and related content. The element may be used to group an h1â€“h6 element with one or more p elements containing content representing a subheading, alternative title, or tagline.
func Hgroup(children ...htemel.Node) *HgroupElement {
	node := &HgroupElement{
		children:   children,
		attributes: make(hgroupAttrs),
	}

	return node
}

func HgroupIf(condition bool, children ...htemel.Node) *HgroupElement {
	if condition {
		return Hgroup(children...)
	}

	return &HgroupElement{
		skipRender: true,
	}
}

func HgroupTernary(condition bool, true htemel.Node, false htemel.Node) *HgroupElement {
	if condition {
		return Hgroup(true)
	}

	return Hgroup(false)
}

type HgroupAutocapitalizeEnum string

const (
	HgroupAutocapitalizeEnumCharacters HgroupAutocapitalizeEnum = "characters"
	HgroupAutocapitalizeEnumNone       HgroupAutocapitalizeEnum = "none"
	HgroupAutocapitalizeEnumOff        HgroupAutocapitalizeEnum = "off"
	HgroupAutocapitalizeEnumOn         HgroupAutocapitalizeEnum = "on"
	HgroupAutocapitalizeEnumSentences  HgroupAutocapitalizeEnum = "sentences"
	HgroupAutocapitalizeEnumWords      HgroupAutocapitalizeEnum = "words"
)

type HgroupAutocorrectEnum string

const (
	HgroupAutocorrectEnumOff   HgroupAutocorrectEnum = "off"
	HgroupAutocorrectEnumOn    HgroupAutocorrectEnum = "on"
	HgroupAutocorrectEnumEmpty HgroupAutocorrectEnum = ""
)

type HgroupContenteditableEnum string

const (
	HgroupContenteditableEnumTrue          HgroupContenteditableEnum = "true"
	HgroupContenteditableEnumFalse         HgroupContenteditableEnum = "false"
	HgroupContenteditableEnumPlaintextOnly HgroupContenteditableEnum = "plaintext-only"
	HgroupContenteditableEnumEmpty         HgroupContenteditableEnum = ""
)

type HgroupDirEnum string

const (
	HgroupDirEnumAuto HgroupDirEnum = "auto"
	HgroupDirEnumLtr  HgroupDirEnum = "ltr"
	HgroupDirEnumRtl  HgroupDirEnum = "rtl"
)

type HgroupDraggableEnum string

const (
	HgroupDraggableEnumFalse HgroupDraggableEnum = "false"
	HgroupDraggableEnumTrue  HgroupDraggableEnum = "true"
)

type HgroupEnterkeyhintEnum string

const (
	HgroupEnterkeyhintEnumSearch   HgroupEnterkeyhintEnum = "search"
	HgroupEnterkeyhintEnumSend     HgroupEnterkeyhintEnum = "send"
	HgroupEnterkeyhintEnumDone     HgroupEnterkeyhintEnum = "done"
	HgroupEnterkeyhintEnumEnter    HgroupEnterkeyhintEnum = "enter"
	HgroupEnterkeyhintEnumGo       HgroupEnterkeyhintEnum = "go"
	HgroupEnterkeyhintEnumNext     HgroupEnterkeyhintEnum = "next"
	HgroupEnterkeyhintEnumPrevious HgroupEnterkeyhintEnum = "previous"
)

type HgroupHiddenEnum string

const (
	HgroupHiddenEnumHidden     HgroupHiddenEnum = "hidden"
	HgroupHiddenEnumUntilFound HgroupHiddenEnum = "until-found"
	HgroupHiddenEnumEmpty      HgroupHiddenEnum = ""
)

type HgroupInputmodeEnum string

const (
	HgroupInputmodeEnumNumeric HgroupInputmodeEnum = "numeric"
	HgroupInputmodeEnumSearch  HgroupInputmodeEnum = "search"
	HgroupInputmodeEnumTel     HgroupInputmodeEnum = "tel"
	HgroupInputmodeEnumText    HgroupInputmodeEnum = "text"
	HgroupInputmodeEnumUrl     HgroupInputmodeEnum = "url"
	HgroupInputmodeEnumDecimal HgroupInputmodeEnum = "decimal"
	HgroupInputmodeEnumEmail   HgroupInputmodeEnum = "email"
	HgroupInputmodeEnumNone    HgroupInputmodeEnum = "none"
)

type HgroupSpellcheckEnum string

const (
	HgroupSpellcheckEnumTrue  HgroupSpellcheckEnum = "true"
	HgroupSpellcheckEnumFalse HgroupSpellcheckEnum = "false"
	HgroupSpellcheckEnumEmpty HgroupSpellcheckEnum = ""
)

type HgroupTranslateEnum string

const (
	HgroupTranslateEnumNo    HgroupTranslateEnum = "no"
	HgroupTranslateEnumYes   HgroupTranslateEnum = "yes"
	HgroupTranslateEnumEmpty HgroupTranslateEnum = ""
)

type HgroupWritingsuggestionsEnum string

const (
	HgroupWritingsuggestionsEnumFalse HgroupWritingsuggestionsEnum = "false"
	HgroupWritingsuggestionsEnumTrue  HgroupWritingsuggestionsEnum = "true"
	HgroupWritingsuggestionsEnumEmpty HgroupWritingsuggestionsEnum = ""
)

type hgroupAttrs map[string]any

func (e *HgroupElement) Autocapitalize(a HgroupAutocapitalizeEnum) *HgroupElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *HgroupElement) Autocorrect(a HgroupAutocorrectEnum) *HgroupElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *HgroupElement) Autofocus(b bool) *HgroupElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *HgroupElement) Class(s ...string) *HgroupElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *HgroupElement) Contenteditable(a HgroupContenteditableEnum) *HgroupElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *HgroupElement) DataUnsafe(name string, s string) *HgroupElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *HgroupElement) Data(name string, s string) *HgroupElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *HgroupElement) Dir(a HgroupDirEnum) *HgroupElement {
	e.attributes["dir"] = a

	return e
}

func (e *HgroupElement) Draggable(a HgroupDraggableEnum) *HgroupElement {
	e.attributes["draggable"] = a

	return e
}

func (e *HgroupElement) Enterkeyhint(a HgroupEnterkeyhintEnum) *HgroupElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *HgroupElement) Hidden(a HgroupHiddenEnum) *HgroupElement {
	e.attributes["hidden"] = a

	return e
}

func (e *HgroupElement) Id(s string) *HgroupElement {
	e.attributes["id"] = s

	return e
}

func (e *HgroupElement) Inert(b bool) *HgroupElement {
	e.attributes["inert"] = b

	return e
}

func (e *HgroupElement) Inputmode(a HgroupInputmodeEnum) *HgroupElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *HgroupElement) Itemid(s string) *HgroupElement {
	e.attributes["itemid"] = s

	return e
}

func (e *HgroupElement) Itemprop(s ...string) *HgroupElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *HgroupElement) Itemref(s ...string) *HgroupElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *HgroupElement) Itemscope(b bool) *HgroupElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *HgroupElement) Itemtype(s ...string) *HgroupElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *HgroupElement) Lang(s string) *HgroupElement {
	e.attributes["lang"] = s

	return e
}

func (e *HgroupElement) Nonce(s string) *HgroupElement {
	e.attributes["nonce"] = s

	return e
}

func (e *HgroupElement) Popover(s string) *HgroupElement {
	e.attributes["popover"] = s

	return e
}

func (e *HgroupElement) Slot(s string) *HgroupElement {
	e.attributes["slot"] = s

	return e
}

func (e *HgroupElement) Spellcheck(a HgroupSpellcheckEnum) *HgroupElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *HgroupElement) Style(s string) *HgroupElement {
	e.attributes["style"] = s

	return e
}

func (e *HgroupElement) Tabindex(i int) *HgroupElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *HgroupElement) Title(s string) *HgroupElement {
	e.attributes["title"] = s

	return e
}

func (e *HgroupElement) Translate(a HgroupTranslateEnum) *HgroupElement {
	e.attributes["translate"] = a

	return e
}

func (e *HgroupElement) Writingsuggestions(a HgroupWritingsuggestionsEnum) *HgroupElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *HgroupElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<hgroup")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</hgroup>")); err != nil {
		return err
	}

	return nil
}
