// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type CiteElement struct {
	attributes citeAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// Cite creates a tag <cite> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The cite element represents the title of a work (e.g. a book, a paper, an essay, a poem, a score, a song, a script, a film, a TV show, a game, a sculpture, a painting, a theatre production, a play, an opera, a musical, an exhibition, a legal case report, a computer program,  etc.). This can be a work that is being quoted or referenced in detail (i.e., a citation), or it can just be a work that is mentioned in passing.
func Cite(children ...htemel.Node) *CiteElement {
	node := &CiteElement{
		children: children, attributes: make(citeAttrs),
	}

	return node
}

func CiteIf(condition bool, children ...htemel.Node) *CiteElement {
	if condition {
		return Cite(children...)
	}

	return &CiteElement{
		skipRender: true,
	}
}

func CiteTernary(condition bool, true htemel.Node, false htemel.Node) *CiteElement {
	if condition {
		return Cite(true)
	}

	return Cite(false)
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *CiteElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *CiteElement) AddIndent(i int) {
	e.indent = i + 1
}

type CiteAutocapitalizeEnum string

const (
	CiteAutocapitalizeEnumOff        CiteAutocapitalizeEnum = "off"
	CiteAutocapitalizeEnumOn         CiteAutocapitalizeEnum = "on"
	CiteAutocapitalizeEnumSentences  CiteAutocapitalizeEnum = "sentences"
	CiteAutocapitalizeEnumWords      CiteAutocapitalizeEnum = "words"
	CiteAutocapitalizeEnumCharacters CiteAutocapitalizeEnum = "characters"
	CiteAutocapitalizeEnumNone       CiteAutocapitalizeEnum = "none"
)

type CiteAutocorrectEnum string

const (
	CiteAutocorrectEnumOff   CiteAutocorrectEnum = "off"
	CiteAutocorrectEnumOn    CiteAutocorrectEnum = "on"
	CiteAutocorrectEnumEmpty CiteAutocorrectEnum = ""
)

type CiteContenteditableEnum string

const (
	CiteContenteditableEnumFalse         CiteContenteditableEnum = "false"
	CiteContenteditableEnumPlaintextOnly CiteContenteditableEnum = "plaintext-only"
	CiteContenteditableEnumTrue          CiteContenteditableEnum = "true"
	CiteContenteditableEnumEmpty         CiteContenteditableEnum = ""
)

type CiteDirEnum string

const (
	CiteDirEnumAuto CiteDirEnum = "auto"
	CiteDirEnumLtr  CiteDirEnum = "ltr"
	CiteDirEnumRtl  CiteDirEnum = "rtl"
)

type CiteDraggableEnum string

const (
	CiteDraggableEnumFalse CiteDraggableEnum = "false"
	CiteDraggableEnumTrue  CiteDraggableEnum = "true"
)

type CiteEnterkeyhintEnum string

const (
	CiteEnterkeyhintEnumDone     CiteEnterkeyhintEnum = "done"
	CiteEnterkeyhintEnumEnter    CiteEnterkeyhintEnum = "enter"
	CiteEnterkeyhintEnumGo       CiteEnterkeyhintEnum = "go"
	CiteEnterkeyhintEnumNext     CiteEnterkeyhintEnum = "next"
	CiteEnterkeyhintEnumPrevious CiteEnterkeyhintEnum = "previous"
	CiteEnterkeyhintEnumSearch   CiteEnterkeyhintEnum = "search"
	CiteEnterkeyhintEnumSend     CiteEnterkeyhintEnum = "send"
)

type CiteHiddenEnum string

const (
	CiteHiddenEnumHidden     CiteHiddenEnum = "hidden"
	CiteHiddenEnumUntilFound CiteHiddenEnum = "until-found"
	CiteHiddenEnumEmpty      CiteHiddenEnum = ""
)

type CiteInputmodeEnum string

const (
	CiteInputmodeEnumNumeric CiteInputmodeEnum = "numeric"
	CiteInputmodeEnumSearch  CiteInputmodeEnum = "search"
	CiteInputmodeEnumTel     CiteInputmodeEnum = "tel"
	CiteInputmodeEnumText    CiteInputmodeEnum = "text"
	CiteInputmodeEnumUrl     CiteInputmodeEnum = "url"
	CiteInputmodeEnumDecimal CiteInputmodeEnum = "decimal"
	CiteInputmodeEnumEmail   CiteInputmodeEnum = "email"
	CiteInputmodeEnumNone    CiteInputmodeEnum = "none"
)

type CiteSpellcheckEnum string

const (
	CiteSpellcheckEnumTrue  CiteSpellcheckEnum = "true"
	CiteSpellcheckEnumFalse CiteSpellcheckEnum = "false"
	CiteSpellcheckEnumEmpty CiteSpellcheckEnum = ""
)

type CiteTranslateEnum string

const (
	CiteTranslateEnumNo    CiteTranslateEnum = "no"
	CiteTranslateEnumYes   CiteTranslateEnum = "yes"
	CiteTranslateEnumEmpty CiteTranslateEnum = ""
)

type CiteWritingsuggestionsEnum string

const (
	CiteWritingsuggestionsEnumFalse CiteWritingsuggestionsEnum = "false"
	CiteWritingsuggestionsEnumTrue  CiteWritingsuggestionsEnum = "true"
	CiteWritingsuggestionsEnumEmpty CiteWritingsuggestionsEnum = ""
)

type citeAttrs map[string]any

func (e *CiteElement) Autocapitalize(a CiteAutocapitalizeEnum) *CiteElement {
	e.attributes["autocapitalize"] = a

	return e
}

func CiteAutocapitalizeCustom(s string) CiteAutocapitalizeEnum {
	return CiteAutocapitalizeEnum(s)
}

func (e *CiteElement) Autocorrect(a CiteAutocorrectEnum) *CiteElement {
	e.attributes["autocorrect"] = a

	return e
}

func CiteAutocorrectCustom(s string) CiteAutocorrectEnum {
	return CiteAutocorrectEnum(s)
}

func (e *CiteElement) Autofocus(b bool) *CiteElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *CiteElement) Class(s ...string) *CiteElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *CiteElement) Contenteditable(a CiteContenteditableEnum) *CiteElement {
	e.attributes["contenteditable"] = a

	return e
}

func CiteContenteditableCustom(s string) CiteContenteditableEnum {
	return CiteContenteditableEnum(s)
}

func (e *CiteElement) DataUnsafe(name string, s string) *CiteElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *CiteElement) Data(name string, s string) *CiteElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *CiteElement) Dir(a CiteDirEnum) *CiteElement {
	e.attributes["dir"] = a

	return e
}

func CiteDirCustom(s string) CiteDirEnum {
	return CiteDirEnum(s)
}

func (e *CiteElement) Draggable(a CiteDraggableEnum) *CiteElement {
	e.attributes["draggable"] = a

	return e
}

func CiteDraggableCustom(s string) CiteDraggableEnum {
	return CiteDraggableEnum(s)
}

func (e *CiteElement) Enterkeyhint(a CiteEnterkeyhintEnum) *CiteElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func CiteEnterkeyhintCustom(s string) CiteEnterkeyhintEnum {
	return CiteEnterkeyhintEnum(s)
}

func (e *CiteElement) Hidden(a CiteHiddenEnum) *CiteElement {
	e.attributes["hidden"] = a

	return e
}

func CiteHiddenCustom(s string) CiteHiddenEnum {
	return CiteHiddenEnum(s)
}

func (e *CiteElement) Id(s string) *CiteElement {
	e.attributes["id"] = s

	return e
}

func (e *CiteElement) Inert(b bool) *CiteElement {
	e.attributes["inert"] = b

	return e
}

func (e *CiteElement) Inputmode(a CiteInputmodeEnum) *CiteElement {
	e.attributes["inputmode"] = a

	return e
}

func CiteInputmodeCustom(s string) CiteInputmodeEnum {
	return CiteInputmodeEnum(s)
}

func (e *CiteElement) Itemid(s string) *CiteElement {
	e.attributes["itemid"] = s

	return e
}

func (e *CiteElement) Itemprop(s ...string) *CiteElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *CiteElement) Itemref(s ...string) *CiteElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *CiteElement) Itemscope(b bool) *CiteElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *CiteElement) Itemtype(s ...string) *CiteElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *CiteElement) Lang(s string) *CiteElement {
	e.attributes["lang"] = s

	return e
}

func (e *CiteElement) Nonce(s string) *CiteElement {
	e.attributes["nonce"] = s

	return e
}

func (e *CiteElement) Popover(s string) *CiteElement {
	e.attributes["popover"] = s

	return e
}

func (e *CiteElement) Slot(s string) *CiteElement {
	e.attributes["slot"] = s

	return e
}

func (e *CiteElement) Spellcheck(a CiteSpellcheckEnum) *CiteElement {
	e.attributes["spellcheck"] = a

	return e
}

func CiteSpellcheckCustom(s string) CiteSpellcheckEnum {
	return CiteSpellcheckEnum(s)
}

func (e *CiteElement) Style(s string) *CiteElement {
	e.attributes["style"] = s

	return e
}

func (e *CiteElement) Tabindex(i int) *CiteElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *CiteElement) Title(s string) *CiteElement {
	e.attributes["title"] = s

	return e
}

func (e *CiteElement) Translate(a CiteTranslateEnum) *CiteElement {
	e.attributes["translate"] = a

	return e
}

func CiteTranslateCustom(s string) CiteTranslateEnum {
	return CiteTranslateEnum(s)
}

func (e *CiteElement) Writingsuggestions(a CiteWritingsuggestionsEnum) *CiteElement {
	e.attributes["writingsuggestions"] = a

	return e
}

func CiteWritingsuggestionsCustom(s string) CiteWritingsuggestionsEnum {
	return CiteWritingsuggestionsEnum(s)
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *CiteElement) Render(w io.Writer) error {
	indent := htemel.SetIndent(e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<cite")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}
	for _, child := range e.children {
		child.AddIndent(e.Indent())
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(indent + "</cite>\n")); err != nil {
		return err
	}

	return nil
}
