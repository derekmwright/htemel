// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type TrElement struct {
	attributes trAttrs
	children   []htemel.Node
	skipRender bool
}

// Tr creates a tag <tr> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The tr element represents a row of cells in a table.
func Tr(children ...htemel.Node) *TrElement {
	node := &TrElement{
		children:   children,
		attributes: make(trAttrs),
	}

	return node
}

func TrIf(condition bool, children ...htemel.Node) *TrElement {
	if condition {
		return Tr(children...)
	}

	return &TrElement{
		skipRender: true,
	}
}

func TrTernary(condition bool, true htemel.Node, false htemel.Node) *TrElement {
	if condition {
		return Tr(true)
	}

	return Tr(false)
}

type TrAutocapitalizeEnum string

const (
	TrAutocapitalizeEnumCharacters TrAutocapitalizeEnum = "characters"
	TrAutocapitalizeEnumNone       TrAutocapitalizeEnum = "none"
	TrAutocapitalizeEnumOff        TrAutocapitalizeEnum = "off"
	TrAutocapitalizeEnumOn         TrAutocapitalizeEnum = "on"
	TrAutocapitalizeEnumSentences  TrAutocapitalizeEnum = "sentences"
	TrAutocapitalizeEnumWords      TrAutocapitalizeEnum = "words"
)

type TrAutocorrectEnum string

const (
	TrAutocorrectEnumOff   TrAutocorrectEnum = "off"
	TrAutocorrectEnumOn    TrAutocorrectEnum = "on"
	TrAutocorrectEnumEmpty TrAutocorrectEnum = ""
)

type TrContenteditableEnum string

const (
	TrContenteditableEnumFalse         TrContenteditableEnum = "false"
	TrContenteditableEnumPlaintextOnly TrContenteditableEnum = "plaintext-only"
	TrContenteditableEnumTrue          TrContenteditableEnum = "true"
	TrContenteditableEnumEmpty         TrContenteditableEnum = ""
)

type TrDirEnum string

const (
	TrDirEnumAuto TrDirEnum = "auto"
	TrDirEnumLtr  TrDirEnum = "ltr"
	TrDirEnumRtl  TrDirEnum = "rtl"
)

type TrDraggableEnum string

const (
	TrDraggableEnumFalse TrDraggableEnum = "false"
	TrDraggableEnumTrue  TrDraggableEnum = "true"
)

type TrEnterkeyhintEnum string

const (
	TrEnterkeyhintEnumDone     TrEnterkeyhintEnum = "done"
	TrEnterkeyhintEnumEnter    TrEnterkeyhintEnum = "enter"
	TrEnterkeyhintEnumGo       TrEnterkeyhintEnum = "go"
	TrEnterkeyhintEnumNext     TrEnterkeyhintEnum = "next"
	TrEnterkeyhintEnumPrevious TrEnterkeyhintEnum = "previous"
	TrEnterkeyhintEnumSearch   TrEnterkeyhintEnum = "search"
	TrEnterkeyhintEnumSend     TrEnterkeyhintEnum = "send"
)

type TrHiddenEnum string

const (
	TrHiddenEnumHidden     TrHiddenEnum = "hidden"
	TrHiddenEnumUntilFound TrHiddenEnum = "until-found"
	TrHiddenEnumEmpty      TrHiddenEnum = ""
)

type TrInputmodeEnum string

const (
	TrInputmodeEnumText    TrInputmodeEnum = "text"
	TrInputmodeEnumUrl     TrInputmodeEnum = "url"
	TrInputmodeEnumDecimal TrInputmodeEnum = "decimal"
	TrInputmodeEnumEmail   TrInputmodeEnum = "email"
	TrInputmodeEnumNone    TrInputmodeEnum = "none"
	TrInputmodeEnumNumeric TrInputmodeEnum = "numeric"
	TrInputmodeEnumSearch  TrInputmodeEnum = "search"
	TrInputmodeEnumTel     TrInputmodeEnum = "tel"
)

type TrSpellcheckEnum string

const (
	TrSpellcheckEnumFalse TrSpellcheckEnum = "false"
	TrSpellcheckEnumTrue  TrSpellcheckEnum = "true"
	TrSpellcheckEnumEmpty TrSpellcheckEnum = ""
)

type TrTranslateEnum string

const (
	TrTranslateEnumNo    TrTranslateEnum = "no"
	TrTranslateEnumYes   TrTranslateEnum = "yes"
	TrTranslateEnumEmpty TrTranslateEnum = ""
)

type TrWritingsuggestionsEnum string

const (
	TrWritingsuggestionsEnumFalse TrWritingsuggestionsEnum = "false"
	TrWritingsuggestionsEnumTrue  TrWritingsuggestionsEnum = "true"
	TrWritingsuggestionsEnumEmpty TrWritingsuggestionsEnum = ""
)

type trAttrs map[string]any

func (e *TrElement) Autocapitalize(a TrAutocapitalizeEnum) *TrElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *TrElement) Autocorrect(a TrAutocorrectEnum) *TrElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *TrElement) Autofocus(b bool) *TrElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *TrElement) Class(s ...string) *TrElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *TrElement) Contenteditable(a TrContenteditableEnum) *TrElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *TrElement) DataUnsafe(name string, s string) *TrElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *TrElement) Data(name string, s string) *TrElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *TrElement) Dir(a TrDirEnum) *TrElement {
	e.attributes["dir"] = a

	return e
}

func (e *TrElement) Draggable(a TrDraggableEnum) *TrElement {
	e.attributes["draggable"] = a

	return e
}

func (e *TrElement) Enterkeyhint(a TrEnterkeyhintEnum) *TrElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *TrElement) Hidden(a TrHiddenEnum) *TrElement {
	e.attributes["hidden"] = a

	return e
}

func (e *TrElement) Id(s string) *TrElement {
	e.attributes["id"] = s

	return e
}

func (e *TrElement) Inert(b bool) *TrElement {
	e.attributes["inert"] = b

	return e
}

func (e *TrElement) Inputmode(a TrInputmodeEnum) *TrElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *TrElement) Itemid(s string) *TrElement {
	e.attributes["itemid"] = s

	return e
}

func (e *TrElement) Itemprop(s ...string) *TrElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *TrElement) Itemref(s ...string) *TrElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *TrElement) Itemscope(b bool) *TrElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *TrElement) Itemtype(s ...string) *TrElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *TrElement) Lang(s string) *TrElement {
	e.attributes["lang"] = s

	return e
}

func (e *TrElement) Nonce(s string) *TrElement {
	e.attributes["nonce"] = s

	return e
}

func (e *TrElement) Popover(s string) *TrElement {
	e.attributes["popover"] = s

	return e
}

func (e *TrElement) Slot(s string) *TrElement {
	e.attributes["slot"] = s

	return e
}

func (e *TrElement) Spellcheck(a TrSpellcheckEnum) *TrElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *TrElement) Style(s string) *TrElement {
	e.attributes["style"] = s

	return e
}

func (e *TrElement) Tabindex(i int) *TrElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *TrElement) Title(s string) *TrElement {
	e.attributes["title"] = s

	return e
}

func (e *TrElement) Translate(a TrTranslateEnum) *TrElement {
	e.attributes["translate"] = a

	return e
}

func (e *TrElement) Writingsuggestions(a TrWritingsuggestionsEnum) *TrElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *TrElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<tr")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</tr>")); err != nil {
		return err
	}

	return nil
}
