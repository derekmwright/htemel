// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type TrElement struct {
	attributes trAttrs
	children []htemel.Node
	skipRender bool
}

// Tr creates a tag <tr> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The tr element represents a row of cells in a table.
func Tr(children ...htemel.Node) *TrElement {
	node := &TrElement{
		children: children,
		attributes: make(trAttrs),
	}

	return node
}

func TrIf(condition bool, children ...htemel.Node) *TrElement {
	if condition {
		return Tr(children...)
	}

	return &TrElement{
		skipRender: true,
	}
}

type TrAutocapitalizeEnum string

const (
	TrAutocapitalizeEnumCharacters TrAutocapitalizeEnum = "characters"
	TrAutocapitalizeEnumNone TrAutocapitalizeEnum = "none"
	TrAutocapitalizeEnumOff TrAutocapitalizeEnum = "off"
	TrAutocapitalizeEnumOn TrAutocapitalizeEnum = "on"
	TrAutocapitalizeEnumSentences TrAutocapitalizeEnum = "sentences"
	TrAutocapitalizeEnumWords TrAutocapitalizeEnum = "words"
)

type TrAutocorrectEnum string

const (
	TrAutocorrectEnumOff TrAutocorrectEnum = "off"
	TrAutocorrectEnumOn TrAutocorrectEnum = "on"
)

type TrContenteditableEnum string

const (
	TrContenteditableEnumPlaintextOnly TrContenteditableEnum = "plaintext-only"
	TrContenteditableEnumTrue TrContenteditableEnum = "true"
	TrContenteditableEnumFalse TrContenteditableEnum = "false"
)

type TrDirEnum string

const (
	TrDirEnumAuto TrDirEnum = "auto"
	TrDirEnumLtr TrDirEnum = "ltr"
	TrDirEnumRtl TrDirEnum = "rtl"
)

type TrDraggableEnum string

const (
	TrDraggableEnumFalse TrDraggableEnum = "false"
	TrDraggableEnumTrue TrDraggableEnum = "true"
)

type TrEnterkeyhintEnum string

const (
	TrEnterkeyhintEnumEnter TrEnterkeyhintEnum = "enter"
	TrEnterkeyhintEnumGo TrEnterkeyhintEnum = "go"
	TrEnterkeyhintEnumNext TrEnterkeyhintEnum = "next"
	TrEnterkeyhintEnumPrevious TrEnterkeyhintEnum = "previous"
	TrEnterkeyhintEnumSearch TrEnterkeyhintEnum = "search"
	TrEnterkeyhintEnumSend TrEnterkeyhintEnum = "send"
	TrEnterkeyhintEnumDone TrEnterkeyhintEnum = "done"
)

type TrHiddenEnum string

const (
	TrHiddenEnumUntilFound TrHiddenEnum = "until-found"
	TrHiddenEnumHidden TrHiddenEnum = "hidden"
)

type trAttrs map[string]any

func (e *TrElement) Autocapitalize(a TrAutocapitalizeEnum) *TrElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *TrElement) Autocorrect(a TrAutocorrectEnum) *TrElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *TrElement) Autofocus(b bool) *TrElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *TrElement) Class(s ...string) *TrElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *TrElement) Contenteditable(a TrContenteditableEnum) *TrElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *TrElement) Dir(a TrDirEnum) *TrElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *TrElement) Draggable(a TrDraggableEnum) *TrElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *TrElement) Enterkeyhint(a TrEnterkeyhintEnum) *TrElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *TrElement) Hidden(a TrHiddenEnum) *TrElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *TrElement) Id(s string) *TrElement {
	e.attributes["id"] = s
	
	return e
}

func (e *TrElement) Slot(s string) *TrElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *TrElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<tr")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</tr>")); err != nil {
		return err
	}

	return nil
}
