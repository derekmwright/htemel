// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type TrElement struct {
	attributes trAttrs
	children   []htemel.Node
	skipRender bool
}

// Tr creates a tag <tr> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The tr element represents a row of cells in a table.
func Tr(children ...htemel.Node) *TrElement {
	node := &TrElement{
		children:   children,
		attributes: make(trAttrs),
	}

	return node
}

func TrIf(condition bool, children ...htemel.Node) *TrElement {
	if condition {
		return Tr(children...)
	}

	return &TrElement{
		skipRender: true,
	}
}

type TrAutocapitalizeAttrEnum string

const (
	TrAutocapitalizeAttrEnumOff        TrAutocapitalizeAttrEnum = "off"
	TrAutocapitalizeAttrEnumOn         TrAutocapitalizeAttrEnum = "on"
	TrAutocapitalizeAttrEnumSentences  TrAutocapitalizeAttrEnum = "sentences"
	TrAutocapitalizeAttrEnumWords      TrAutocapitalizeAttrEnum = "words"
	TrAutocapitalizeAttrEnumCharacters TrAutocapitalizeAttrEnum = "characters"
	TrAutocapitalizeAttrEnumNone       TrAutocapitalizeAttrEnum = "none"
)

type TrAutocorrectAttrEnum string

const (
	TrAutocorrectAttrEnumOff TrAutocorrectAttrEnum = "off"
	TrAutocorrectAttrEnumOn  TrAutocorrectAttrEnum = "on"
)

type TrContenteditableAttrEnum string

const (
	TrContenteditableAttrEnumFalse         TrContenteditableAttrEnum = "false"
	TrContenteditableAttrEnumPlaintextOnly TrContenteditableAttrEnum = "plaintext-only"
	TrContenteditableAttrEnumTrue          TrContenteditableAttrEnum = "true"
)

type trAttrs map[string]any

func (e *TrElement) Autocapitalize(a TrAutocapitalizeAttrEnum) *TrElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *TrElement) Autocorrect(a TrAutocorrectAttrEnum) *TrElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *TrElement) Autofocus(b bool) *TrElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *TrElement) Class(s ...string) *TrElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *TrElement) Contenteditable(a TrContenteditableAttrEnum) *TrElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *TrElement) Id(s string) *TrElement {
	e.attributes["id"] = s

	return e
}

func (e *TrElement) Slot(s string) *TrElement {
	e.attributes["slot"] = s

	return e
}

func (e *TrElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<tr")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</tr>")); err != nil {
		return err
	}

	return nil
}
