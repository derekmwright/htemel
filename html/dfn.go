// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
)

type DfnElement struct {
	attributes dfnAttrs
	children []htemel.Node
	skipRender bool
}

// Dfn creates a tag <dfn> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The dfn element represents the defining instance of a term. The paragraph, description list group, or section that is the nearest ancestor of the dfn element must also contain the definition(s) for the term given by the dfn element.
func Dfn(children ...htemel.Node) *DfnElement {
	node := &DfnElement{
		children: children,
	}

	return node
}

func DfnIf(condition bool, children ...htemel.Node) *DfnElement {
	if condition {
		return Dfn(children...)
	}

	return &DfnElement{
		skipRender: true,
	}
}

type DfnAutocapitalizeAttrEnum string

const (
	DfnAutocapitalizeAttrEnumWords DfnAutocapitalizeAttrEnum = "words"
	DfnAutocapitalizeAttrEnumCharacters DfnAutocapitalizeAttrEnum = "characters"
	DfnAutocapitalizeAttrEnumNone DfnAutocapitalizeAttrEnum = "none"
	DfnAutocapitalizeAttrEnumOff DfnAutocapitalizeAttrEnum = "off"
	DfnAutocapitalizeAttrEnumOn DfnAutocapitalizeAttrEnum = "on"
	DfnAutocapitalizeAttrEnumSentences DfnAutocapitalizeAttrEnum = "sentences"
)

type DfnAutocorrectAttrEnum string

const (
	DfnAutocorrectAttrEnumOff DfnAutocorrectAttrEnum = "off"
	DfnAutocorrectAttrEnumOn DfnAutocorrectAttrEnum = "on"
)

type DfnContenteditableAttrEnum string

const (
	DfnContenteditableAttrEnumFalse DfnContenteditableAttrEnum = "false"
	DfnContenteditableAttrEnumPlaintextOnly DfnContenteditableAttrEnum = "plaintext-only"
	DfnContenteditableAttrEnumTrue DfnContenteditableAttrEnum = "true"
)

type dfnAttrs map[string]any

func (e *DfnElement) Autocapitalize(a DfnAutocapitalizeAttrEnum) *DfnElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *DfnElement) Autocorrect(a DfnAutocorrectAttrEnum) *DfnElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *DfnElement) Class(s ...string) *DfnElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *DfnElement) Contenteditable(a DfnContenteditableAttrEnum) *DfnElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *DfnElement) Id(s string) *DfnElement {
	e.attributes["id"] = s
	
	return e
}

func (e *DfnElement) Slot(s string) *DfnElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *DfnElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<dfn")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 0
	for key, v := range e.attributes {
		w.Write([]byte(key + "="))
		w.Write([]byte(html.EscapeString(fmt.Sprintf("'%v'", v))))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</dfn>")); err != nil {
		return err
	}

	return nil
}
