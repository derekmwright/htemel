// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type DfnElement struct {
	attributes dfnAttrs
	children   []htemel.Node
	skipRender bool
}

// Dfn creates a tag <dfn> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The dfn element represents the defining instance of a term. The paragraph, description list group, or section that is the nearest ancestor of the dfn element must also contain the definition(s) for the term given by the dfn element.
func Dfn(children ...htemel.Node) *DfnElement {
	node := &DfnElement{
		children: children, attributes: make(dfnAttrs),
	}

	return node
}

func DfnIf(condition bool, children ...htemel.Node) *DfnElement {
	if condition {
		return Dfn(children...)
	}

	return &DfnElement{
		skipRender: true,
	}
}

func DfnTernary(condition bool, true htemel.Node, false htemel.Node) *DfnElement {
	if condition {
		return Dfn(true)
	}

	return Dfn(false)
}

type DfnAutocapitalizeEnum string

const (
	DfnAutocapitalizeEnumNone       DfnAutocapitalizeEnum = "none"
	DfnAutocapitalizeEnumOff        DfnAutocapitalizeEnum = "off"
	DfnAutocapitalizeEnumOn         DfnAutocapitalizeEnum = "on"
	DfnAutocapitalizeEnumSentences  DfnAutocapitalizeEnum = "sentences"
	DfnAutocapitalizeEnumWords      DfnAutocapitalizeEnum = "words"
	DfnAutocapitalizeEnumCharacters DfnAutocapitalizeEnum = "characters"
)

type DfnAutocorrectEnum string

const (
	DfnAutocorrectEnumOff   DfnAutocorrectEnum = "off"
	DfnAutocorrectEnumOn    DfnAutocorrectEnum = "on"
	DfnAutocorrectEnumEmpty DfnAutocorrectEnum = ""
)

type DfnContenteditableEnum string

const (
	DfnContenteditableEnumFalse         DfnContenteditableEnum = "false"
	DfnContenteditableEnumPlaintextOnly DfnContenteditableEnum = "plaintext-only"
	DfnContenteditableEnumTrue          DfnContenteditableEnum = "true"
	DfnContenteditableEnumEmpty         DfnContenteditableEnum = ""
)

type DfnDirEnum string

const (
	DfnDirEnumLtr  DfnDirEnum = "ltr"
	DfnDirEnumRtl  DfnDirEnum = "rtl"
	DfnDirEnumAuto DfnDirEnum = "auto"
)

type DfnDraggableEnum string

const (
	DfnDraggableEnumFalse DfnDraggableEnum = "false"
	DfnDraggableEnumTrue  DfnDraggableEnum = "true"
)

type DfnEnterkeyhintEnum string

const (
	DfnEnterkeyhintEnumEnter    DfnEnterkeyhintEnum = "enter"
	DfnEnterkeyhintEnumGo       DfnEnterkeyhintEnum = "go"
	DfnEnterkeyhintEnumNext     DfnEnterkeyhintEnum = "next"
	DfnEnterkeyhintEnumPrevious DfnEnterkeyhintEnum = "previous"
	DfnEnterkeyhintEnumSearch   DfnEnterkeyhintEnum = "search"
	DfnEnterkeyhintEnumSend     DfnEnterkeyhintEnum = "send"
	DfnEnterkeyhintEnumDone     DfnEnterkeyhintEnum = "done"
)

type DfnHiddenEnum string

const (
	DfnHiddenEnumHidden     DfnHiddenEnum = "hidden"
	DfnHiddenEnumUntilFound DfnHiddenEnum = "until-found"
	DfnHiddenEnumEmpty      DfnHiddenEnum = ""
)

type DfnInputmodeEnum string

const (
	DfnInputmodeEnumDecimal DfnInputmodeEnum = "decimal"
	DfnInputmodeEnumEmail   DfnInputmodeEnum = "email"
	DfnInputmodeEnumNone    DfnInputmodeEnum = "none"
	DfnInputmodeEnumNumeric DfnInputmodeEnum = "numeric"
	DfnInputmodeEnumSearch  DfnInputmodeEnum = "search"
	DfnInputmodeEnumTel     DfnInputmodeEnum = "tel"
	DfnInputmodeEnumText    DfnInputmodeEnum = "text"
	DfnInputmodeEnumUrl     DfnInputmodeEnum = "url"
)

type DfnSpellcheckEnum string

const (
	DfnSpellcheckEnumFalse DfnSpellcheckEnum = "false"
	DfnSpellcheckEnumTrue  DfnSpellcheckEnum = "true"
	DfnSpellcheckEnumEmpty DfnSpellcheckEnum = ""
)

type DfnTranslateEnum string

const (
	DfnTranslateEnumNo    DfnTranslateEnum = "no"
	DfnTranslateEnumYes   DfnTranslateEnum = "yes"
	DfnTranslateEnumEmpty DfnTranslateEnum = ""
)

type DfnWritingsuggestionsEnum string

const (
	DfnWritingsuggestionsEnumFalse DfnWritingsuggestionsEnum = "false"
	DfnWritingsuggestionsEnumTrue  DfnWritingsuggestionsEnum = "true"
	DfnWritingsuggestionsEnumEmpty DfnWritingsuggestionsEnum = ""
)

type dfnAttrs map[string]any

func (e *DfnElement) Autocapitalize(a DfnAutocapitalizeEnum) *DfnElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *DfnElement) Autocorrect(a DfnAutocorrectEnum) *DfnElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *DfnElement) Autofocus(b bool) *DfnElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *DfnElement) Class(s ...string) *DfnElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *DfnElement) Contenteditable(a DfnContenteditableEnum) *DfnElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *DfnElement) DataUnsafe(name string, s string) *DfnElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *DfnElement) Data(name string, s string) *DfnElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *DfnElement) Dir(a DfnDirEnum) *DfnElement {
	e.attributes["dir"] = a

	return e
}

func (e *DfnElement) Draggable(a DfnDraggableEnum) *DfnElement {
	e.attributes["draggable"] = a

	return e
}

func (e *DfnElement) Enterkeyhint(a DfnEnterkeyhintEnum) *DfnElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *DfnElement) Hidden(a DfnHiddenEnum) *DfnElement {
	e.attributes["hidden"] = a

	return e
}

func (e *DfnElement) Id(s string) *DfnElement {
	e.attributes["id"] = s

	return e
}

func (e *DfnElement) Inert(b bool) *DfnElement {
	e.attributes["inert"] = b

	return e
}

func (e *DfnElement) Inputmode(a DfnInputmodeEnum) *DfnElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *DfnElement) Itemid(s string) *DfnElement {
	e.attributes["itemid"] = s

	return e
}

func (e *DfnElement) Itemprop(s ...string) *DfnElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *DfnElement) Itemref(s ...string) *DfnElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *DfnElement) Itemscope(b bool) *DfnElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *DfnElement) Itemtype(s ...string) *DfnElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *DfnElement) Lang(s string) *DfnElement {
	e.attributes["lang"] = s

	return e
}

func (e *DfnElement) Nonce(s string) *DfnElement {
	e.attributes["nonce"] = s

	return e
}

func (e *DfnElement) Popover(s string) *DfnElement {
	e.attributes["popover"] = s

	return e
}

func (e *DfnElement) Slot(s string) *DfnElement {
	e.attributes["slot"] = s

	return e
}

func (e *DfnElement) Spellcheck(a DfnSpellcheckEnum) *DfnElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *DfnElement) Style(s string) *DfnElement {
	e.attributes["style"] = s

	return e
}

func (e *DfnElement) Tabindex(i int) *DfnElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *DfnElement) Title(s string) *DfnElement {
	e.attributes["title"] = s

	return e
}

func (e *DfnElement) Translate(a DfnTranslateEnum) *DfnElement {
	e.attributes["translate"] = a

	return e
}

func (e *DfnElement) Writingsuggestions(a DfnWritingsuggestionsEnum) *DfnElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *DfnElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<dfn")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}
	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</dfn>")); err != nil {
		return err
	}

	return nil
}
