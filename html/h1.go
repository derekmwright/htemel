// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
)

type H1Element struct {
	attributes h1Attrs
	children []htemel.Node
	skipRender bool
}

// H1 creates a tag <h1> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: These elements represent headings for their sections.
func H1(children ...htemel.Node) *H1Element {
	node := &H1Element{
		children: children,
	}

	return node
}

func H1If(condition bool, children ...htemel.Node) *H1Element {
	if condition {
		return H1(children...)
	}

	return &H1Element{
		skipRender: true,
	}
}

type H1AutocapitalizeAttrEnum string

const (
	H1AutocapitalizeAttrEnumWords H1AutocapitalizeAttrEnum = "words"
	H1AutocapitalizeAttrEnumCharacters H1AutocapitalizeAttrEnum = "characters"
	H1AutocapitalizeAttrEnumNone H1AutocapitalizeAttrEnum = "none"
	H1AutocapitalizeAttrEnumOff H1AutocapitalizeAttrEnum = "off"
	H1AutocapitalizeAttrEnumOn H1AutocapitalizeAttrEnum = "on"
	H1AutocapitalizeAttrEnumSentences H1AutocapitalizeAttrEnum = "sentences"
)

type H1AutocorrectAttrEnum string

const (
	H1AutocorrectAttrEnumOff H1AutocorrectAttrEnum = "off"
	H1AutocorrectAttrEnumOn H1AutocorrectAttrEnum = "on"
)

type H1ContenteditableAttrEnum string

const (
	H1ContenteditableAttrEnumFalse H1ContenteditableAttrEnum = "false"
	H1ContenteditableAttrEnumPlaintextOnly H1ContenteditableAttrEnum = "plaintext-only"
	H1ContenteditableAttrEnumTrue H1ContenteditableAttrEnum = "true"
)

type h1Attrs map[string]any

func (e *H1Element) Autocapitalize(a H1AutocapitalizeAttrEnum) *H1Element {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *H1Element) Autocorrect(a H1AutocorrectAttrEnum) *H1Element {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *H1Element) Class(s ...string) *H1Element {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *H1Element) Contenteditable(a H1ContenteditableAttrEnum) *H1Element {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *H1Element) Id(s string) *H1Element {
	e.attributes["id"] = s
	
	return e
}

func (e *H1Element) Slot(s string) *H1Element {
	e.attributes["slot"] = s
	
	return e
}

func (e *H1Element) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<h1")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 0
	for key, v := range e.attributes {
		w.Write([]byte(key + "="))
		w.Write([]byte(html.EscapeString(fmt.Sprintf("'%v'", v))))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</h1>")); err != nil {
		return err
	}

	return nil
}
