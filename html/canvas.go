// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type CanvasElement struct {
	attributes canvasAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// Canvas creates a tag <canvas> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The canvas element provides scripts with a resolution-dependent bitmap canvas, which can be used for rendering graphs, game graphics, art, or other visual images on the fly.
func Canvas(children ...htemel.Node) *CanvasElement {
	node := &CanvasElement{
		children: children, attributes: make(canvasAttrs),
	}

	return node
}

func CanvasIf(condition bool, children ...htemel.Node) *CanvasElement {
	if condition {
		return Canvas(children...)
	}

	return &CanvasElement{
		skipRender: true,
	}
}

func CanvasTernary(condition bool, true htemel.Node, false htemel.Node) *CanvasElement {
	if condition {
		return Canvas(true)
	}

	return Canvas(false)
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *CanvasElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *CanvasElement) AddIndent(i int) {
	e.indent = i + 1
}

type CanvasAutocapitalizeEnum string

const (
	CanvasAutocapitalizeEnumWords      CanvasAutocapitalizeEnum = "words"
	CanvasAutocapitalizeEnumCharacters CanvasAutocapitalizeEnum = "characters"
	CanvasAutocapitalizeEnumNone       CanvasAutocapitalizeEnum = "none"
	CanvasAutocapitalizeEnumOff        CanvasAutocapitalizeEnum = "off"
	CanvasAutocapitalizeEnumOn         CanvasAutocapitalizeEnum = "on"
	CanvasAutocapitalizeEnumSentences  CanvasAutocapitalizeEnum = "sentences"
)

type CanvasAutocorrectEnum string

const (
	CanvasAutocorrectEnumOff   CanvasAutocorrectEnum = "off"
	CanvasAutocorrectEnumOn    CanvasAutocorrectEnum = "on"
	CanvasAutocorrectEnumEmpty CanvasAutocorrectEnum = ""
)

type CanvasContenteditableEnum string

const (
	CanvasContenteditableEnumFalse         CanvasContenteditableEnum = "false"
	CanvasContenteditableEnumPlaintextOnly CanvasContenteditableEnum = "plaintext-only"
	CanvasContenteditableEnumTrue          CanvasContenteditableEnum = "true"
	CanvasContenteditableEnumEmpty         CanvasContenteditableEnum = ""
)

type CanvasDirEnum string

const (
	CanvasDirEnumLtr  CanvasDirEnum = "ltr"
	CanvasDirEnumRtl  CanvasDirEnum = "rtl"
	CanvasDirEnumAuto CanvasDirEnum = "auto"
)

type CanvasDraggableEnum string

const (
	CanvasDraggableEnumFalse CanvasDraggableEnum = "false"
	CanvasDraggableEnumTrue  CanvasDraggableEnum = "true"
)

type CanvasEnterkeyhintEnum string

const (
	CanvasEnterkeyhintEnumDone     CanvasEnterkeyhintEnum = "done"
	CanvasEnterkeyhintEnumEnter    CanvasEnterkeyhintEnum = "enter"
	CanvasEnterkeyhintEnumGo       CanvasEnterkeyhintEnum = "go"
	CanvasEnterkeyhintEnumNext     CanvasEnterkeyhintEnum = "next"
	CanvasEnterkeyhintEnumPrevious CanvasEnterkeyhintEnum = "previous"
	CanvasEnterkeyhintEnumSearch   CanvasEnterkeyhintEnum = "search"
	CanvasEnterkeyhintEnumSend     CanvasEnterkeyhintEnum = "send"
)

type CanvasHiddenEnum string

const (
	CanvasHiddenEnumHidden     CanvasHiddenEnum = "hidden"
	CanvasHiddenEnumUntilFound CanvasHiddenEnum = "until-found"
	CanvasHiddenEnumEmpty      CanvasHiddenEnum = ""
)

type CanvasInputmodeEnum string

const (
	CanvasInputmodeEnumTel     CanvasInputmodeEnum = "tel"
	CanvasInputmodeEnumText    CanvasInputmodeEnum = "text"
	CanvasInputmodeEnumUrl     CanvasInputmodeEnum = "url"
	CanvasInputmodeEnumDecimal CanvasInputmodeEnum = "decimal"
	CanvasInputmodeEnumEmail   CanvasInputmodeEnum = "email"
	CanvasInputmodeEnumNone    CanvasInputmodeEnum = "none"
	CanvasInputmodeEnumNumeric CanvasInputmodeEnum = "numeric"
	CanvasInputmodeEnumSearch  CanvasInputmodeEnum = "search"
)

type CanvasSpellcheckEnum string

const (
	CanvasSpellcheckEnumFalse CanvasSpellcheckEnum = "false"
	CanvasSpellcheckEnumTrue  CanvasSpellcheckEnum = "true"
	CanvasSpellcheckEnumEmpty CanvasSpellcheckEnum = ""
)

type CanvasTranslateEnum string

const (
	CanvasTranslateEnumNo    CanvasTranslateEnum = "no"
	CanvasTranslateEnumYes   CanvasTranslateEnum = "yes"
	CanvasTranslateEnumEmpty CanvasTranslateEnum = ""
)

type CanvasWritingsuggestionsEnum string

const (
	CanvasWritingsuggestionsEnumTrue  CanvasWritingsuggestionsEnum = "true"
	CanvasWritingsuggestionsEnumFalse CanvasWritingsuggestionsEnum = "false"
	CanvasWritingsuggestionsEnumEmpty CanvasWritingsuggestionsEnum = ""
)

type canvasAttrs map[string]any

func (e *CanvasElement) Autocapitalize(a CanvasAutocapitalizeEnum) *CanvasElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *CanvasElement) Autocorrect(a CanvasAutocorrectEnum) *CanvasElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *CanvasElement) Autofocus(b bool) *CanvasElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *CanvasElement) Class(s ...string) *CanvasElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *CanvasElement) Contenteditable(a CanvasContenteditableEnum) *CanvasElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *CanvasElement) DataUnsafe(name string, s string) *CanvasElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *CanvasElement) Data(name string, s string) *CanvasElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *CanvasElement) Dir(a CanvasDirEnum) *CanvasElement {
	e.attributes["dir"] = a

	return e
}

func (e *CanvasElement) Draggable(a CanvasDraggableEnum) *CanvasElement {
	e.attributes["draggable"] = a

	return e
}

func (e *CanvasElement) Enterkeyhint(a CanvasEnterkeyhintEnum) *CanvasElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *CanvasElement) Hidden(a CanvasHiddenEnum) *CanvasElement {
	e.attributes["hidden"] = a

	return e
}

func (e *CanvasElement) Id(s string) *CanvasElement {
	e.attributes["id"] = s

	return e
}

func (e *CanvasElement) Inert(b bool) *CanvasElement {
	e.attributes["inert"] = b

	return e
}

func (e *CanvasElement) Inputmode(a CanvasInputmodeEnum) *CanvasElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *CanvasElement) Itemid(s string) *CanvasElement {
	e.attributes["itemid"] = s

	return e
}

func (e *CanvasElement) Itemprop(s ...string) *CanvasElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *CanvasElement) Itemref(s ...string) *CanvasElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *CanvasElement) Itemscope(b bool) *CanvasElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *CanvasElement) Itemtype(s ...string) *CanvasElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *CanvasElement) Lang(s string) *CanvasElement {
	e.attributes["lang"] = s

	return e
}

func (e *CanvasElement) Nonce(s string) *CanvasElement {
	e.attributes["nonce"] = s

	return e
}

func (e *CanvasElement) Popover(s string) *CanvasElement {
	e.attributes["popover"] = s

	return e
}

func (e *CanvasElement) Slot(s string) *CanvasElement {
	e.attributes["slot"] = s

	return e
}

func (e *CanvasElement) Spellcheck(a CanvasSpellcheckEnum) *CanvasElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *CanvasElement) Style(s string) *CanvasElement {
	e.attributes["style"] = s

	return e
}

func (e *CanvasElement) Tabindex(i int) *CanvasElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *CanvasElement) Title(s string) *CanvasElement {
	e.attributes["title"] = s

	return e
}

func (e *CanvasElement) Translate(a CanvasTranslateEnum) *CanvasElement {
	e.attributes["translate"] = a

	return e
}

func (e *CanvasElement) Writingsuggestions(a CanvasWritingsuggestionsEnum) *CanvasElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *CanvasElement) Render(w io.Writer) error {
	indent := htemel.SetIndent(e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<canvas")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}
	for _, child := range e.children {
		child.AddIndent(e.Indent())
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(indent + "</canvas>\n")); err != nil {
		return err
	}

	return nil
}
