// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type CanvasElement struct {
	attributes canvasAttrs
	children []htemel.Node
	skipRender bool
}

// Canvas creates a tag <canvas> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The canvas element provides scripts with a resolution-dependent bitmap canvas, which can be used for rendering graphs, game graphics, art, or other visual images on the fly.
func Canvas(children ...htemel.Node) *CanvasElement {
	node := &CanvasElement{
		children: children,
		attributes: make(canvasAttrs),
	}

	return node
}

func CanvasIf(condition bool, children ...htemel.Node) *CanvasElement {
	if condition {
		return Canvas(children...)
	}

	return &CanvasElement{
		skipRender: true,
	}
}

type CanvasAutocapitalizeEnum string

const (
	CanvasAutocapitalizeEnumNone CanvasAutocapitalizeEnum = "none"
	CanvasAutocapitalizeEnumOff CanvasAutocapitalizeEnum = "off"
	CanvasAutocapitalizeEnumOn CanvasAutocapitalizeEnum = "on"
	CanvasAutocapitalizeEnumSentences CanvasAutocapitalizeEnum = "sentences"
	CanvasAutocapitalizeEnumWords CanvasAutocapitalizeEnum = "words"
	CanvasAutocapitalizeEnumCharacters CanvasAutocapitalizeEnum = "characters"
)

type CanvasAutocorrectEnum string

const (
	CanvasAutocorrectEnumOff CanvasAutocorrectEnum = "off"
	CanvasAutocorrectEnumOn CanvasAutocorrectEnum = "on"
)

type CanvasContenteditableEnum string

const (
	CanvasContenteditableEnumFalse CanvasContenteditableEnum = "false"
	CanvasContenteditableEnumPlaintextOnly CanvasContenteditableEnum = "plaintext-only"
	CanvasContenteditableEnumTrue CanvasContenteditableEnum = "true"
)

type CanvasDirEnum string

const (
	CanvasDirEnumAuto CanvasDirEnum = "auto"
	CanvasDirEnumLtr CanvasDirEnum = "ltr"
	CanvasDirEnumRtl CanvasDirEnum = "rtl"
)

type CanvasDraggableEnum string

const (
	CanvasDraggableEnumTrue CanvasDraggableEnum = "true"
	CanvasDraggableEnumFalse CanvasDraggableEnum = "false"
)

type CanvasEnterkeyhintEnum string

const (
	CanvasEnterkeyhintEnumGo CanvasEnterkeyhintEnum = "go"
	CanvasEnterkeyhintEnumNext CanvasEnterkeyhintEnum = "next"
	CanvasEnterkeyhintEnumPrevious CanvasEnterkeyhintEnum = "previous"
	CanvasEnterkeyhintEnumSearch CanvasEnterkeyhintEnum = "search"
	CanvasEnterkeyhintEnumSend CanvasEnterkeyhintEnum = "send"
	CanvasEnterkeyhintEnumDone CanvasEnterkeyhintEnum = "done"
	CanvasEnterkeyhintEnumEnter CanvasEnterkeyhintEnum = "enter"
)

type CanvasHiddenEnum string

const (
	CanvasHiddenEnumHidden CanvasHiddenEnum = "hidden"
	CanvasHiddenEnumUntilFound CanvasHiddenEnum = "until-found"
)

type canvasAttrs map[string]any

func (e *CanvasElement) Autocapitalize(a CanvasAutocapitalizeEnum) *CanvasElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *CanvasElement) Autocorrect(a CanvasAutocorrectEnum) *CanvasElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *CanvasElement) Autofocus(b bool) *CanvasElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *CanvasElement) Class(s ...string) *CanvasElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *CanvasElement) Contenteditable(a CanvasContenteditableEnum) *CanvasElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *CanvasElement) Dir(a CanvasDirEnum) *CanvasElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *CanvasElement) Draggable(a CanvasDraggableEnum) *CanvasElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *CanvasElement) Enterkeyhint(a CanvasEnterkeyhintEnum) *CanvasElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *CanvasElement) Hidden(a CanvasHiddenEnum) *CanvasElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *CanvasElement) Id(s string) *CanvasElement {
	e.attributes["id"] = s
	
	return e
}

func (e *CanvasElement) Slot(s string) *CanvasElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *CanvasElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<canvas")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</canvas>")); err != nil {
		return err
	}

	return nil
}
