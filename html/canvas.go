// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type CanvasElement struct {
	attributes canvasAttrs
	children []htemel.Node
	skipRender bool
}

// Canvas creates a tag <canvas> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The canvas element provides scripts with a resolution-dependent bitmap canvas, which can be used for rendering graphs, game graphics, art, or other visual images on the fly.
func Canvas(children ...htemel.Node) *CanvasElement {
	node := &CanvasElement{
		children: children,
		attributes: make(canvasAttrs),
	}

	return node
}

func CanvasIf(condition bool, children ...htemel.Node) *CanvasElement {
	if condition {
		return Canvas(children...)
	}

	return &CanvasElement{
		skipRender: true,
	}
}

type CanvasAutocapitalizeAttrEnum string

const (
	CanvasAutocapitalizeAttrEnumSentences CanvasAutocapitalizeAttrEnum = "sentences"
	CanvasAutocapitalizeAttrEnumWords CanvasAutocapitalizeAttrEnum = "words"
	CanvasAutocapitalizeAttrEnumCharacters CanvasAutocapitalizeAttrEnum = "characters"
	CanvasAutocapitalizeAttrEnumNone CanvasAutocapitalizeAttrEnum = "none"
	CanvasAutocapitalizeAttrEnumOff CanvasAutocapitalizeAttrEnum = "off"
	CanvasAutocapitalizeAttrEnumOn CanvasAutocapitalizeAttrEnum = "on"
)

type CanvasAutocorrectAttrEnum string

const (
	CanvasAutocorrectAttrEnumOff CanvasAutocorrectAttrEnum = "off"
	CanvasAutocorrectAttrEnumOn CanvasAutocorrectAttrEnum = "on"
)

type CanvasContenteditableAttrEnum string

const (
	CanvasContenteditableAttrEnumFalse CanvasContenteditableAttrEnum = "false"
	CanvasContenteditableAttrEnumPlaintextOnly CanvasContenteditableAttrEnum = "plaintext-only"
	CanvasContenteditableAttrEnumTrue CanvasContenteditableAttrEnum = "true"
)

type canvasAttrs map[string]any

func (e *CanvasElement) Autocapitalize(a CanvasAutocapitalizeAttrEnum) *CanvasElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *CanvasElement) Autocorrect(a CanvasAutocorrectAttrEnum) *CanvasElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *CanvasElement) Class(s ...string) *CanvasElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *CanvasElement) Contenteditable(a CanvasContenteditableAttrEnum) *CanvasElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *CanvasElement) Id(s string) *CanvasElement {
	e.attributes["id"] = s
	
	return e
}

func (e *CanvasElement) Slot(s string) *CanvasElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *CanvasElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<canvas")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		w.Write([]byte(" " + key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</canvas>")); err != nil {
		return err
	}

	return nil
}
