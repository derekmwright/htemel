// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type DdElement struct {
	attributes ddAttrs
	children []htemel.Node
	skipRender bool
}

// Dd creates a tag <dd> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The dd element represents the description, definition, or value, part of a term-description group in a description list (dl element).
func Dd(children ...htemel.Node) *DdElement {
	node := &DdElement{
		children: children,
		attributes: make(ddAttrs),
	}

	return node
}

func DdIf(condition bool, children ...htemel.Node) *DdElement {
	if condition {
		return Dd(children...)
	}

	return &DdElement{
		skipRender: true,
	}
}

type DdAutocapitalizeAttrEnum string

const (
	DdAutocapitalizeAttrEnumCharacters DdAutocapitalizeAttrEnum = "characters"
	DdAutocapitalizeAttrEnumNone DdAutocapitalizeAttrEnum = "none"
	DdAutocapitalizeAttrEnumOff DdAutocapitalizeAttrEnum = "off"
	DdAutocapitalizeAttrEnumOn DdAutocapitalizeAttrEnum = "on"
	DdAutocapitalizeAttrEnumSentences DdAutocapitalizeAttrEnum = "sentences"
	DdAutocapitalizeAttrEnumWords DdAutocapitalizeAttrEnum = "words"
)

type DdAutocorrectAttrEnum string

const (
	DdAutocorrectAttrEnumOff DdAutocorrectAttrEnum = "off"
	DdAutocorrectAttrEnumOn DdAutocorrectAttrEnum = "on"
)

type DdContenteditableAttrEnum string

const (
	DdContenteditableAttrEnumTrue DdContenteditableAttrEnum = "true"
	DdContenteditableAttrEnumFalse DdContenteditableAttrEnum = "false"
	DdContenteditableAttrEnumPlaintextOnly DdContenteditableAttrEnum = "plaintext-only"
)

type ddAttrs map[string]any

func (e *DdElement) Autocapitalize(a DdAutocapitalizeAttrEnum) *DdElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *DdElement) Autocorrect(a DdAutocorrectAttrEnum) *DdElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *DdElement) Class(s ...string) *DdElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *DdElement) Contenteditable(a DdContenteditableAttrEnum) *DdElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *DdElement) Id(s string) *DdElement {
	e.attributes["id"] = s
	
	return e
}

func (e *DdElement) Slot(s string) *DdElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *DdElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<dd")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		w.Write([]byte(" " + key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</dd>")); err != nil {
		return err
	}

	return nil
}
