// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type DdElement struct {
	attributes ddAttrs
	children []htemel.Node
	skipRender bool
}

// Dd creates a tag <dd> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The dd element represents the description, definition, or value, part of a term-description group in a description list (dl element).
func Dd(children ...htemel.Node) *DdElement {
	node := &DdElement{
		children: children,
		attributes: make(ddAttrs),
	}

	return node
}

func DdIf(condition bool, children ...htemel.Node) *DdElement {
	if condition {
		return Dd(children...)
	}

	return &DdElement{
		skipRender: true,
	}
}

type DdAutocapitalizeEnum string

const (
	DdAutocapitalizeEnumCharacters DdAutocapitalizeEnum = "characters"
	DdAutocapitalizeEnumNone DdAutocapitalizeEnum = "none"
	DdAutocapitalizeEnumOff DdAutocapitalizeEnum = "off"
	DdAutocapitalizeEnumOn DdAutocapitalizeEnum = "on"
	DdAutocapitalizeEnumSentences DdAutocapitalizeEnum = "sentences"
	DdAutocapitalizeEnumWords DdAutocapitalizeEnum = "words"
)

type DdAutocorrectEnum string

const (
	DdAutocorrectEnumOff DdAutocorrectEnum = "off"
	DdAutocorrectEnumOn DdAutocorrectEnum = "on"
)

type DdContenteditableEnum string

const (
	DdContenteditableEnumFalse DdContenteditableEnum = "false"
	DdContenteditableEnumPlaintextOnly DdContenteditableEnum = "plaintext-only"
	DdContenteditableEnumTrue DdContenteditableEnum = "true"
)

type DdDirEnum string

const (
	DdDirEnumAuto DdDirEnum = "auto"
	DdDirEnumLtr DdDirEnum = "ltr"
	DdDirEnumRtl DdDirEnum = "rtl"
)

type DdDraggableEnum string

const (
	DdDraggableEnumFalse DdDraggableEnum = "false"
	DdDraggableEnumTrue DdDraggableEnum = "true"
)

type DdEnterkeyhintEnum string

const (
	DdEnterkeyhintEnumEnter DdEnterkeyhintEnum = "enter"
	DdEnterkeyhintEnumGo DdEnterkeyhintEnum = "go"
	DdEnterkeyhintEnumNext DdEnterkeyhintEnum = "next"
	DdEnterkeyhintEnumPrevious DdEnterkeyhintEnum = "previous"
	DdEnterkeyhintEnumSearch DdEnterkeyhintEnum = "search"
	DdEnterkeyhintEnumSend DdEnterkeyhintEnum = "send"
	DdEnterkeyhintEnumDone DdEnterkeyhintEnum = "done"
)

type DdHiddenEnum string

const (
	DdHiddenEnumHidden DdHiddenEnum = "hidden"
	DdHiddenEnumUntilFound DdHiddenEnum = "until-found"
)

type ddAttrs map[string]any

func (e *DdElement) Autocapitalize(a DdAutocapitalizeEnum) *DdElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *DdElement) Autocorrect(a DdAutocorrectEnum) *DdElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *DdElement) Autofocus(b bool) *DdElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *DdElement) Class(s ...string) *DdElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *DdElement) Contenteditable(a DdContenteditableEnum) *DdElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *DdElement) Dir(a DdDirEnum) *DdElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *DdElement) Draggable(a DdDraggableEnum) *DdElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *DdElement) Enterkeyhint(a DdEnterkeyhintEnum) *DdElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *DdElement) Hidden(a DdHiddenEnum) *DdElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *DdElement) Id(s string) *DdElement {
	e.attributes["id"] = s
	
	return e
}

func (e *DdElement) Slot(s string) *DdElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *DdElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<dd")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</dd>")); err != nil {
		return err
	}

	return nil
}
