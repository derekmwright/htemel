// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type AbbrElement struct {
	attributes abbrAttrs
	children []htemel.Node
	skipRender bool
}

// Abbr creates a tag <abbr> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The abbr element represents an abbreviation or acronym, optionally with its expansion. The title attribute may be used to provide an expansion of the abbreviation. The attribute, if specified, must contain an expansion of the abbreviation, and nothing else.
func Abbr(children ...htemel.Node) *AbbrElement {
	node := &AbbrElement{
		children: children,
		attributes: make(abbrAttrs),
	}

	return node
}

func AbbrIf(condition bool, children ...htemel.Node) *AbbrElement {
	if condition {
		return Abbr(children...)
	}

	return &AbbrElement{
		skipRender: true,
	}
}

type AbbrAutocapitalizeAttrEnum string

const (
	AbbrAutocapitalizeAttrEnumCharacters AbbrAutocapitalizeAttrEnum = "characters"
	AbbrAutocapitalizeAttrEnumNone AbbrAutocapitalizeAttrEnum = "none"
	AbbrAutocapitalizeAttrEnumOff AbbrAutocapitalizeAttrEnum = "off"
	AbbrAutocapitalizeAttrEnumOn AbbrAutocapitalizeAttrEnum = "on"
	AbbrAutocapitalizeAttrEnumSentences AbbrAutocapitalizeAttrEnum = "sentences"
	AbbrAutocapitalizeAttrEnumWords AbbrAutocapitalizeAttrEnum = "words"
)

type AbbrAutocorrectAttrEnum string

const (
	AbbrAutocorrectAttrEnumOff AbbrAutocorrectAttrEnum = "off"
	AbbrAutocorrectAttrEnumOn AbbrAutocorrectAttrEnum = "on"
)

type AbbrContenteditableAttrEnum string

const (
	AbbrContenteditableAttrEnumFalse AbbrContenteditableAttrEnum = "false"
	AbbrContenteditableAttrEnumPlaintextOnly AbbrContenteditableAttrEnum = "plaintext-only"
	AbbrContenteditableAttrEnumTrue AbbrContenteditableAttrEnum = "true"
)

type abbrAttrs map[string]any

func (e *AbbrElement) Autocapitalize(a AbbrAutocapitalizeAttrEnum) *AbbrElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *AbbrElement) Autocorrect(a AbbrAutocorrectAttrEnum) *AbbrElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *AbbrElement) Class(s ...string) *AbbrElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *AbbrElement) Contenteditable(a AbbrContenteditableAttrEnum) *AbbrElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *AbbrElement) Id(s string) *AbbrElement {
	e.attributes["id"] = s
	
	return e
}

func (e *AbbrElement) Slot(s string) *AbbrElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *AbbrElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<abbr")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		w.Write([]byte(" " + key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</abbr>")); err != nil {
		return err
	}

	return nil
}
