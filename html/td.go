// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type TdElement struct {
	attributes tdAttrs
	children []htemel.Node
	skipRender bool
}

// Td creates a tag <td> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The td element represents a data cell in a table.
func Td(children ...htemel.Node) *TdElement {
	node := &TdElement{
		children: children,
		attributes: make(tdAttrs),
	}

	return node
}

func TdIf(condition bool, children ...htemel.Node) *TdElement {
	if condition {
		return Td(children...)
	}

	return &TdElement{
		skipRender: true,
	}
}

type TdAutocapitalizeEnum string

const (
	TdAutocapitalizeEnumWords TdAutocapitalizeEnum = "words"
	TdAutocapitalizeEnumCharacters TdAutocapitalizeEnum = "characters"
	TdAutocapitalizeEnumNone TdAutocapitalizeEnum = "none"
	TdAutocapitalizeEnumOff TdAutocapitalizeEnum = "off"
	TdAutocapitalizeEnumOn TdAutocapitalizeEnum = "on"
	TdAutocapitalizeEnumSentences TdAutocapitalizeEnum = "sentences"
)

type TdAutocorrectEnum string

const (
	TdAutocorrectEnumOff TdAutocorrectEnum = "off"
	TdAutocorrectEnumOn TdAutocorrectEnum = "on"
)

type TdContenteditableEnum string

const (
	TdContenteditableEnumFalse TdContenteditableEnum = "false"
	TdContenteditableEnumPlaintextOnly TdContenteditableEnum = "plaintext-only"
	TdContenteditableEnumTrue TdContenteditableEnum = "true"
)

type TdDirEnum string

const (
	TdDirEnumLtr TdDirEnum = "ltr"
	TdDirEnumRtl TdDirEnum = "rtl"
	TdDirEnumAuto TdDirEnum = "auto"
)

type TdDraggableEnum string

const (
	TdDraggableEnumFalse TdDraggableEnum = "false"
	TdDraggableEnumTrue TdDraggableEnum = "true"
)

type TdEnterkeyhintEnum string

const (
	TdEnterkeyhintEnumPrevious TdEnterkeyhintEnum = "previous"
	TdEnterkeyhintEnumSearch TdEnterkeyhintEnum = "search"
	TdEnterkeyhintEnumSend TdEnterkeyhintEnum = "send"
	TdEnterkeyhintEnumDone TdEnterkeyhintEnum = "done"
	TdEnterkeyhintEnumEnter TdEnterkeyhintEnum = "enter"
	TdEnterkeyhintEnumGo TdEnterkeyhintEnum = "go"
	TdEnterkeyhintEnumNext TdEnterkeyhintEnum = "next"
)

type TdHiddenEnum string

const (
	TdHiddenEnumHidden TdHiddenEnum = "hidden"
	TdHiddenEnumUntilFound TdHiddenEnum = "until-found"
)

type tdAttrs map[string]any

func (e *TdElement) Autocapitalize(a TdAutocapitalizeEnum) *TdElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *TdElement) Autocorrect(a TdAutocorrectEnum) *TdElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *TdElement) Autofocus(b bool) *TdElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *TdElement) Class(s ...string) *TdElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *TdElement) Contenteditable(a TdContenteditableEnum) *TdElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *TdElement) Dir(a TdDirEnum) *TdElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *TdElement) Draggable(a TdDraggableEnum) *TdElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *TdElement) Enterkeyhint(a TdEnterkeyhintEnum) *TdElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *TdElement) Hidden(a TdHiddenEnum) *TdElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *TdElement) Id(s string) *TdElement {
	e.attributes["id"] = s
	
	return e
}

func (e *TdElement) Slot(s string) *TdElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *TdElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<td")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</td>")); err != nil {
		return err
	}

	return nil
}
