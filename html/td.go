// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
)

type TdElement struct {
	attributes tdAttrs
	children []htemel.Node
	skipRender bool
}

// Td creates a tag <td> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The td element represents a data cell in a table.
func Td(children ...htemel.Node) *TdElement {
	node := &TdElement{
		children: children,
	}

	return node
}

func TdIf(condition bool, children ...htemel.Node) *TdElement {
	if condition {
		return Td(children...)
	}

	return &TdElement{
		skipRender: true,
	}
}

type TdAutocapitalizeAttrEnum string

const (
	TdAutocapitalizeAttrEnumWords TdAutocapitalizeAttrEnum = "words"
	TdAutocapitalizeAttrEnumCharacters TdAutocapitalizeAttrEnum = "characters"
	TdAutocapitalizeAttrEnumNone TdAutocapitalizeAttrEnum = "none"
	TdAutocapitalizeAttrEnumOff TdAutocapitalizeAttrEnum = "off"
	TdAutocapitalizeAttrEnumOn TdAutocapitalizeAttrEnum = "on"
	TdAutocapitalizeAttrEnumSentences TdAutocapitalizeAttrEnum = "sentences"
)

type TdAutocorrectAttrEnum string

const (
	TdAutocorrectAttrEnumOff TdAutocorrectAttrEnum = "off"
	TdAutocorrectAttrEnumOn TdAutocorrectAttrEnum = "on"
)

type TdContenteditableAttrEnum string

const (
	TdContenteditableAttrEnumPlaintextOnly TdContenteditableAttrEnum = "plaintext-only"
	TdContenteditableAttrEnumTrue TdContenteditableAttrEnum = "true"
	TdContenteditableAttrEnumFalse TdContenteditableAttrEnum = "false"
)

type tdAttrs map[string]any

func (e *TdElement) Autocapitalize(a TdAutocapitalizeAttrEnum) *TdElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *TdElement) Autocorrect(a TdAutocorrectAttrEnum) *TdElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *TdElement) Class(s ...string) *TdElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *TdElement) Contenteditable(a TdContenteditableAttrEnum) *TdElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *TdElement) Id(s string) *TdElement {
	e.attributes["id"] = s
	
	return e
}

func (e *TdElement) Slot(s string) *TdElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *TdElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<td")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 0
	for key, v := range e.attributes {
		w.Write([]byte(key + "="))
		w.Write([]byte(html.EscapeString(fmt.Sprintf("'%v'", v))))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</td>")); err != nil {
		return err
	}

	return nil
}
