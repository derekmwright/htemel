// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type TdElement struct {
	attributes tdAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// Td creates a tag <td> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The td element represents a data cell in a table.
func Td(children ...htemel.Node) *TdElement {
	node := &TdElement{
		children: children, attributes: make(tdAttrs),
	}

	return node
}

func TdIf(condition bool, children ...htemel.Node) *TdElement {
	if condition {
		return Td(children...)
	}

	return &TdElement{
		skipRender: true,
	}
}

func TdTernary(condition bool, true htemel.Node, false htemel.Node) *TdElement {
	if condition {
		return Td(true)
	}

	return Td(false)
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *TdElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *TdElement) AddIndent(i int) {
	e.indent = i + 1
}

type TdAutocapitalizeEnum string

const (
	TdAutocapitalizeEnumNone       TdAutocapitalizeEnum = "none"
	TdAutocapitalizeEnumOff        TdAutocapitalizeEnum = "off"
	TdAutocapitalizeEnumOn         TdAutocapitalizeEnum = "on"
	TdAutocapitalizeEnumSentences  TdAutocapitalizeEnum = "sentences"
	TdAutocapitalizeEnumWords      TdAutocapitalizeEnum = "words"
	TdAutocapitalizeEnumCharacters TdAutocapitalizeEnum = "characters"
)

type TdAutocorrectEnum string

const (
	TdAutocorrectEnumOff   TdAutocorrectEnum = "off"
	TdAutocorrectEnumOn    TdAutocorrectEnum = "on"
	TdAutocorrectEnumEmpty TdAutocorrectEnum = ""
)

type TdContenteditableEnum string

const (
	TdContenteditableEnumFalse         TdContenteditableEnum = "false"
	TdContenteditableEnumPlaintextOnly TdContenteditableEnum = "plaintext-only"
	TdContenteditableEnumTrue          TdContenteditableEnum = "true"
	TdContenteditableEnumEmpty         TdContenteditableEnum = ""
)

type TdDirEnum string

const (
	TdDirEnumAuto TdDirEnum = "auto"
	TdDirEnumLtr  TdDirEnum = "ltr"
	TdDirEnumRtl  TdDirEnum = "rtl"
)

type TdDraggableEnum string

const (
	TdDraggableEnumFalse TdDraggableEnum = "false"
	TdDraggableEnumTrue  TdDraggableEnum = "true"
)

type TdEnterkeyhintEnum string

const (
	TdEnterkeyhintEnumNext     TdEnterkeyhintEnum = "next"
	TdEnterkeyhintEnumPrevious TdEnterkeyhintEnum = "previous"
	TdEnterkeyhintEnumSearch   TdEnterkeyhintEnum = "search"
	TdEnterkeyhintEnumSend     TdEnterkeyhintEnum = "send"
	TdEnterkeyhintEnumDone     TdEnterkeyhintEnum = "done"
	TdEnterkeyhintEnumEnter    TdEnterkeyhintEnum = "enter"
	TdEnterkeyhintEnumGo       TdEnterkeyhintEnum = "go"
)

type TdHiddenEnum string

const (
	TdHiddenEnumHidden     TdHiddenEnum = "hidden"
	TdHiddenEnumUntilFound TdHiddenEnum = "until-found"
	TdHiddenEnumEmpty      TdHiddenEnum = ""
)

type TdInputmodeEnum string

const (
	TdInputmodeEnumNumeric TdInputmodeEnum = "numeric"
	TdInputmodeEnumSearch  TdInputmodeEnum = "search"
	TdInputmodeEnumTel     TdInputmodeEnum = "tel"
	TdInputmodeEnumText    TdInputmodeEnum = "text"
	TdInputmodeEnumUrl     TdInputmodeEnum = "url"
	TdInputmodeEnumDecimal TdInputmodeEnum = "decimal"
	TdInputmodeEnumEmail   TdInputmodeEnum = "email"
	TdInputmodeEnumNone    TdInputmodeEnum = "none"
)

type TdSpellcheckEnum string

const (
	TdSpellcheckEnumFalse TdSpellcheckEnum = "false"
	TdSpellcheckEnumTrue  TdSpellcheckEnum = "true"
	TdSpellcheckEnumEmpty TdSpellcheckEnum = ""
)

type TdTranslateEnum string

const (
	TdTranslateEnumNo    TdTranslateEnum = "no"
	TdTranslateEnumYes   TdTranslateEnum = "yes"
	TdTranslateEnumEmpty TdTranslateEnum = ""
)

type TdWritingsuggestionsEnum string

const (
	TdWritingsuggestionsEnumFalse TdWritingsuggestionsEnum = "false"
	TdWritingsuggestionsEnumTrue  TdWritingsuggestionsEnum = "true"
	TdWritingsuggestionsEnumEmpty TdWritingsuggestionsEnum = ""
)

type tdAttrs map[string]any

func (e *TdElement) Span(i int) *TdElement {
	e.attributes["span"] = i

	return e
}

func (e *TdElement) Rowspan(i int) *TdElement {
	e.attributes["rowspan"] = i

	return e
}

func (e *TdElement) Headers(s ...string) *TdElement {
	e.attributes["headers"] = strings.Join(s, " ")

	return e
}

func (e *TdElement) Autocapitalize(a TdAutocapitalizeEnum) *TdElement {
	e.attributes["autocapitalize"] = a

	return e
}

func TdAutocapitalizeCustom(s string) TdAutocapitalizeEnum {
	return TdAutocapitalizeEnum(s)
}

func (e *TdElement) Autocorrect(a TdAutocorrectEnum) *TdElement {
	e.attributes["autocorrect"] = a

	return e
}

func TdAutocorrectCustom(s string) TdAutocorrectEnum {
	return TdAutocorrectEnum(s)
}

func (e *TdElement) Autofocus(b bool) *TdElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *TdElement) Class(s ...string) *TdElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *TdElement) Contenteditable(a TdContenteditableEnum) *TdElement {
	e.attributes["contenteditable"] = a

	return e
}

func TdContenteditableCustom(s string) TdContenteditableEnum {
	return TdContenteditableEnum(s)
}

func (e *TdElement) DataUnsafe(name string, s string) *TdElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *TdElement) Data(name string, s string) *TdElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *TdElement) Dir(a TdDirEnum) *TdElement {
	e.attributes["dir"] = a

	return e
}

func TdDirCustom(s string) TdDirEnum {
	return TdDirEnum(s)
}

func (e *TdElement) Draggable(a TdDraggableEnum) *TdElement {
	e.attributes["draggable"] = a

	return e
}

func TdDraggableCustom(s string) TdDraggableEnum {
	return TdDraggableEnum(s)
}

func (e *TdElement) Enterkeyhint(a TdEnterkeyhintEnum) *TdElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func TdEnterkeyhintCustom(s string) TdEnterkeyhintEnum {
	return TdEnterkeyhintEnum(s)
}

func (e *TdElement) Hidden(a TdHiddenEnum) *TdElement {
	e.attributes["hidden"] = a

	return e
}

func TdHiddenCustom(s string) TdHiddenEnum {
	return TdHiddenEnum(s)
}

func (e *TdElement) Id(s string) *TdElement {
	e.attributes["id"] = s

	return e
}

func (e *TdElement) Inert(b bool) *TdElement {
	e.attributes["inert"] = b

	return e
}

func (e *TdElement) Inputmode(a TdInputmodeEnum) *TdElement {
	e.attributes["inputmode"] = a

	return e
}

func TdInputmodeCustom(s string) TdInputmodeEnum {
	return TdInputmodeEnum(s)
}

func (e *TdElement) Itemid(s string) *TdElement {
	e.attributes["itemid"] = s

	return e
}

func (e *TdElement) Itemprop(s ...string) *TdElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *TdElement) Itemref(s ...string) *TdElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *TdElement) Itemscope(b bool) *TdElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *TdElement) Itemtype(s ...string) *TdElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *TdElement) Lang(s string) *TdElement {
	e.attributes["lang"] = s

	return e
}

func (e *TdElement) Nonce(s string) *TdElement {
	e.attributes["nonce"] = s

	return e
}

func (e *TdElement) Popover(s string) *TdElement {
	e.attributes["popover"] = s

	return e
}

func (e *TdElement) Slot(s string) *TdElement {
	e.attributes["slot"] = s

	return e
}

func (e *TdElement) Spellcheck(a TdSpellcheckEnum) *TdElement {
	e.attributes["spellcheck"] = a

	return e
}

func TdSpellcheckCustom(s string) TdSpellcheckEnum {
	return TdSpellcheckEnum(s)
}

func (e *TdElement) Style(s string) *TdElement {
	e.attributes["style"] = s

	return e
}

func (e *TdElement) Tabindex(i int) *TdElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *TdElement) Title(s string) *TdElement {
	e.attributes["title"] = s

	return e
}

func (e *TdElement) Translate(a TdTranslateEnum) *TdElement {
	e.attributes["translate"] = a

	return e
}

func TdTranslateCustom(s string) TdTranslateEnum {
	return TdTranslateEnum(s)
}

func (e *TdElement) Writingsuggestions(a TdWritingsuggestionsEnum) *TdElement {
	e.attributes["writingsuggestions"] = a

	return e
}

func TdWritingsuggestionsCustom(s string) TdWritingsuggestionsEnum {
	return TdWritingsuggestionsEnum(s)
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *TdElement) Render(w io.Writer) error {
	indent := htemel.SetIndent(e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<td")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}
	for _, child := range e.children {
		child.AddIndent(e.Indent())
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(indent + "</td>\n")); err != nil {
		return err
	}

	return nil
}
