// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type SmallElement struct {
	attributes smallAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// Small creates a tag <small> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The small element represents side comments such as small print.
func Small(children ...htemel.Node) *SmallElement {
	node := &SmallElement{
		children: children, attributes: make(smallAttrs),
	}

	return node
}

func SmallIf(condition bool, children ...htemel.Node) *SmallElement {
	if condition {
		return Small(children...)
	}

	return &SmallElement{
		skipRender: true,
	}
}

func SmallTernary(condition bool, true htemel.Node, false htemel.Node) *SmallElement {
	if condition {
		return Small(true)
	}

	return Small(false)
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *SmallElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *SmallElement) AddIndent(i int) {
	e.indent = i + 1
}

type SmallAutocapitalizeEnum string

const (
	SmallAutocapitalizeEnumOff        SmallAutocapitalizeEnum = "off"
	SmallAutocapitalizeEnumOn         SmallAutocapitalizeEnum = "on"
	SmallAutocapitalizeEnumSentences  SmallAutocapitalizeEnum = "sentences"
	SmallAutocapitalizeEnumWords      SmallAutocapitalizeEnum = "words"
	SmallAutocapitalizeEnumCharacters SmallAutocapitalizeEnum = "characters"
	SmallAutocapitalizeEnumNone       SmallAutocapitalizeEnum = "none"
)

type SmallAutocorrectEnum string

const (
	SmallAutocorrectEnumOff   SmallAutocorrectEnum = "off"
	SmallAutocorrectEnumOn    SmallAutocorrectEnum = "on"
	SmallAutocorrectEnumEmpty SmallAutocorrectEnum = ""
)

type SmallContenteditableEnum string

const (
	SmallContenteditableEnumFalse         SmallContenteditableEnum = "false"
	SmallContenteditableEnumPlaintextOnly SmallContenteditableEnum = "plaintext-only"
	SmallContenteditableEnumTrue          SmallContenteditableEnum = "true"
	SmallContenteditableEnumEmpty         SmallContenteditableEnum = ""
)

type SmallDirEnum string

const (
	SmallDirEnumAuto SmallDirEnum = "auto"
	SmallDirEnumLtr  SmallDirEnum = "ltr"
	SmallDirEnumRtl  SmallDirEnum = "rtl"
)

type SmallDraggableEnum string

const (
	SmallDraggableEnumFalse SmallDraggableEnum = "false"
	SmallDraggableEnumTrue  SmallDraggableEnum = "true"
)

type SmallEnterkeyhintEnum string

const (
	SmallEnterkeyhintEnumDone     SmallEnterkeyhintEnum = "done"
	SmallEnterkeyhintEnumEnter    SmallEnterkeyhintEnum = "enter"
	SmallEnterkeyhintEnumGo       SmallEnterkeyhintEnum = "go"
	SmallEnterkeyhintEnumNext     SmallEnterkeyhintEnum = "next"
	SmallEnterkeyhintEnumPrevious SmallEnterkeyhintEnum = "previous"
	SmallEnterkeyhintEnumSearch   SmallEnterkeyhintEnum = "search"
	SmallEnterkeyhintEnumSend     SmallEnterkeyhintEnum = "send"
)

type SmallHiddenEnum string

const (
	SmallHiddenEnumHidden     SmallHiddenEnum = "hidden"
	SmallHiddenEnumUntilFound SmallHiddenEnum = "until-found"
	SmallHiddenEnumEmpty      SmallHiddenEnum = ""
)

type SmallInputmodeEnum string

const (
	SmallInputmodeEnumEmail   SmallInputmodeEnum = "email"
	SmallInputmodeEnumNone    SmallInputmodeEnum = "none"
	SmallInputmodeEnumNumeric SmallInputmodeEnum = "numeric"
	SmallInputmodeEnumSearch  SmallInputmodeEnum = "search"
	SmallInputmodeEnumTel     SmallInputmodeEnum = "tel"
	SmallInputmodeEnumText    SmallInputmodeEnum = "text"
	SmallInputmodeEnumUrl     SmallInputmodeEnum = "url"
	SmallInputmodeEnumDecimal SmallInputmodeEnum = "decimal"
)

type SmallSpellcheckEnum string

const (
	SmallSpellcheckEnumFalse SmallSpellcheckEnum = "false"
	SmallSpellcheckEnumTrue  SmallSpellcheckEnum = "true"
	SmallSpellcheckEnumEmpty SmallSpellcheckEnum = ""
)

type SmallTranslateEnum string

const (
	SmallTranslateEnumNo    SmallTranslateEnum = "no"
	SmallTranslateEnumYes   SmallTranslateEnum = "yes"
	SmallTranslateEnumEmpty SmallTranslateEnum = ""
)

type SmallWritingsuggestionsEnum string

const (
	SmallWritingsuggestionsEnumFalse SmallWritingsuggestionsEnum = "false"
	SmallWritingsuggestionsEnumTrue  SmallWritingsuggestionsEnum = "true"
	SmallWritingsuggestionsEnumEmpty SmallWritingsuggestionsEnum = ""
)

type smallAttrs map[string]any

func (e *SmallElement) Autocapitalize(a SmallAutocapitalizeEnum) *SmallElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *SmallElement) Autocorrect(a SmallAutocorrectEnum) *SmallElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *SmallElement) Autofocus(b bool) *SmallElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *SmallElement) Class(s ...string) *SmallElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *SmallElement) Contenteditable(a SmallContenteditableEnum) *SmallElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *SmallElement) DataUnsafe(name string, s string) *SmallElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *SmallElement) Data(name string, s string) *SmallElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *SmallElement) Dir(a SmallDirEnum) *SmallElement {
	e.attributes["dir"] = a

	return e
}

func (e *SmallElement) Draggable(a SmallDraggableEnum) *SmallElement {
	e.attributes["draggable"] = a

	return e
}

func (e *SmallElement) Enterkeyhint(a SmallEnterkeyhintEnum) *SmallElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *SmallElement) Hidden(a SmallHiddenEnum) *SmallElement {
	e.attributes["hidden"] = a

	return e
}

func (e *SmallElement) Id(s string) *SmallElement {
	e.attributes["id"] = s

	return e
}

func (e *SmallElement) Inert(b bool) *SmallElement {
	e.attributes["inert"] = b

	return e
}

func (e *SmallElement) Inputmode(a SmallInputmodeEnum) *SmallElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *SmallElement) Itemid(s string) *SmallElement {
	e.attributes["itemid"] = s

	return e
}

func (e *SmallElement) Itemprop(s ...string) *SmallElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *SmallElement) Itemref(s ...string) *SmallElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *SmallElement) Itemscope(b bool) *SmallElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *SmallElement) Itemtype(s ...string) *SmallElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *SmallElement) Lang(s string) *SmallElement {
	e.attributes["lang"] = s

	return e
}

func (e *SmallElement) Nonce(s string) *SmallElement {
	e.attributes["nonce"] = s

	return e
}

func (e *SmallElement) Popover(s string) *SmallElement {
	e.attributes["popover"] = s

	return e
}

func (e *SmallElement) Slot(s string) *SmallElement {
	e.attributes["slot"] = s

	return e
}

func (e *SmallElement) Spellcheck(a SmallSpellcheckEnum) *SmallElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *SmallElement) Style(s string) *SmallElement {
	e.attributes["style"] = s

	return e
}

func (e *SmallElement) Tabindex(i int) *SmallElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *SmallElement) Title(s string) *SmallElement {
	e.attributes["title"] = s

	return e
}

func (e *SmallElement) Translate(a SmallTranslateEnum) *SmallElement {
	e.attributes["translate"] = a

	return e
}

func (e *SmallElement) Writingsuggestions(a SmallWritingsuggestionsEnum) *SmallElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *SmallElement) Render(w io.Writer) error {
	indent := htemel.SetIndent(e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<small")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}
	for _, child := range e.children {
		child.AddIndent(e.Indent())
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(indent + "</small>\n")); err != nil {
		return err
	}

	return nil
}
