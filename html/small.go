// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type SmallElement struct {
	attributes smallAttrs
	children []htemel.Node
	skipRender bool
}

// Small creates a tag <small> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The small element represents side comments such as small print.
func Small(children ...htemel.Node) *SmallElement {
	node := &SmallElement{
		children: children,
		attributes: make(smallAttrs),
	}

	return node
}

func SmallIf(condition bool, children ...htemel.Node) *SmallElement {
	if condition {
		return Small(children...)
	}

	return &SmallElement{
		skipRender: true,
	}
}

type SmallAutocapitalizeEnum string

const (
	SmallAutocapitalizeEnumWords SmallAutocapitalizeEnum = "words"
	SmallAutocapitalizeEnumCharacters SmallAutocapitalizeEnum = "characters"
	SmallAutocapitalizeEnumNone SmallAutocapitalizeEnum = "none"
	SmallAutocapitalizeEnumOff SmallAutocapitalizeEnum = "off"
	SmallAutocapitalizeEnumOn SmallAutocapitalizeEnum = "on"
	SmallAutocapitalizeEnumSentences SmallAutocapitalizeEnum = "sentences"
)

type SmallAutocorrectEnum string

const (
	SmallAutocorrectEnumOn SmallAutocorrectEnum = "on"
	SmallAutocorrectEnumOff SmallAutocorrectEnum = "off"
)

type SmallContenteditableEnum string

const (
	SmallContenteditableEnumFalse SmallContenteditableEnum = "false"
	SmallContenteditableEnumPlaintextOnly SmallContenteditableEnum = "plaintext-only"
	SmallContenteditableEnumTrue SmallContenteditableEnum = "true"
)

type SmallDirEnum string

const (
	SmallDirEnumRtl SmallDirEnum = "rtl"
	SmallDirEnumAuto SmallDirEnum = "auto"
	SmallDirEnumLtr SmallDirEnum = "ltr"
)

type SmallDraggableEnum string

const (
	SmallDraggableEnumFalse SmallDraggableEnum = "false"
	SmallDraggableEnumTrue SmallDraggableEnum = "true"
)

type SmallEnterkeyhintEnum string

const (
	SmallEnterkeyhintEnumDone SmallEnterkeyhintEnum = "done"
	SmallEnterkeyhintEnumEnter SmallEnterkeyhintEnum = "enter"
	SmallEnterkeyhintEnumGo SmallEnterkeyhintEnum = "go"
	SmallEnterkeyhintEnumNext SmallEnterkeyhintEnum = "next"
	SmallEnterkeyhintEnumPrevious SmallEnterkeyhintEnum = "previous"
	SmallEnterkeyhintEnumSearch SmallEnterkeyhintEnum = "search"
	SmallEnterkeyhintEnumSend SmallEnterkeyhintEnum = "send"
)

type SmallHiddenEnum string

const (
	SmallHiddenEnumHidden SmallHiddenEnum = "hidden"
	SmallHiddenEnumUntilFound SmallHiddenEnum = "until-found"
)

type smallAttrs map[string]any

func (e *SmallElement) Autocapitalize(a SmallAutocapitalizeEnum) *SmallElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *SmallElement) Autocorrect(a SmallAutocorrectEnum) *SmallElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *SmallElement) Autofocus(b bool) *SmallElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *SmallElement) Class(s ...string) *SmallElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *SmallElement) Contenteditable(a SmallContenteditableEnum) *SmallElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *SmallElement) Dir(a SmallDirEnum) *SmallElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *SmallElement) Draggable(a SmallDraggableEnum) *SmallElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *SmallElement) Enterkeyhint(a SmallEnterkeyhintEnum) *SmallElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *SmallElement) Hidden(a SmallHiddenEnum) *SmallElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *SmallElement) Id(s string) *SmallElement {
	e.attributes["id"] = s
	
	return e
}

func (e *SmallElement) Slot(s string) *SmallElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *SmallElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<small")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</small>")); err != nil {
		return err
	}

	return nil
}
