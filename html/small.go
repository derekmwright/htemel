// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type SmallElement struct {
	attributes smallAttrs
	children   []htemel.Node
	skipRender bool
}

// Small creates a tag <small> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The small element represents side comments such as small print.
func Small(children ...htemel.Node) *SmallElement {
	node := &SmallElement{
		children:   children,
		attributes: make(smallAttrs),
	}

	return node
}

func SmallIf(condition bool, children ...htemel.Node) *SmallElement {
	if condition {
		return Small(children...)
	}

	return &SmallElement{
		skipRender: true,
	}
}

type SmallAutocapitalizeAttrEnum string

const (
	SmallAutocapitalizeAttrEnumCharacters SmallAutocapitalizeAttrEnum = "characters"
	SmallAutocapitalizeAttrEnumNone       SmallAutocapitalizeAttrEnum = "none"
	SmallAutocapitalizeAttrEnumOff        SmallAutocapitalizeAttrEnum = "off"
	SmallAutocapitalizeAttrEnumOn         SmallAutocapitalizeAttrEnum = "on"
	SmallAutocapitalizeAttrEnumSentences  SmallAutocapitalizeAttrEnum = "sentences"
	SmallAutocapitalizeAttrEnumWords      SmallAutocapitalizeAttrEnum = "words"
)

type SmallAutocorrectAttrEnum string

const (
	SmallAutocorrectAttrEnumOff SmallAutocorrectAttrEnum = "off"
	SmallAutocorrectAttrEnumOn  SmallAutocorrectAttrEnum = "on"
)

type SmallContenteditableAttrEnum string

const (
	SmallContenteditableAttrEnumFalse         SmallContenteditableAttrEnum = "false"
	SmallContenteditableAttrEnumPlaintextOnly SmallContenteditableAttrEnum = "plaintext-only"
	SmallContenteditableAttrEnumTrue          SmallContenteditableAttrEnum = "true"
)

type smallAttrs map[string]any

func (e *SmallElement) Autocapitalize(a SmallAutocapitalizeAttrEnum) *SmallElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *SmallElement) Autocorrect(a SmallAutocorrectAttrEnum) *SmallElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *SmallElement) Autofocus(b bool) *SmallElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *SmallElement) Class(s ...string) *SmallElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *SmallElement) Contenteditable(a SmallContenteditableAttrEnum) *SmallElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *SmallElement) Id(s string) *SmallElement {
	e.attributes["id"] = s

	return e
}

func (e *SmallElement) Slot(s string) *SmallElement {
	e.attributes["slot"] = s

	return e
}

func (e *SmallElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<small")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		w.Write([]byte(" " + key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</small>")); err != nil {
		return err
	}

	return nil
}
