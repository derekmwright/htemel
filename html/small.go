// Code generated by htemel. DO NOT EDIT.
package html

import (
  "github.com/derekmwright/htemel"
  "io"
)

type SmallElement struct {
	children []htemel.Node
	skipRender bool
}

// Small creates a tag <small> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The small element represents side comments such as small print.
func Small(children ...htemel.Node) *SmallElement {
	node := &SmallElement{
		children: children,
	}

	return node
}

func SmallIf(condition bool, children ...htemel.Node) *SmallElement {
	if condition {
		return Small(children...)
	}

	return &SmallElement{
		skipRender: true,
	}
}

func (e *SmallElement) Autocapitalize() *SmallElement {
	return e
}

func (e *SmallElement) Autocorrect() *SmallElement {
	return e
}

func (e *SmallElement) Autofocus() *SmallElement {
	return e
}

func (e *SmallElement) Class() *SmallElement {
	return e
}

func (e *SmallElement) Contenteditable() *SmallElement {
	return e
}

func (e *SmallElement) Id() *SmallElement {
	return e
}

func (e *SmallElement) Slot() *SmallElement {
	return e
}

func (e *SmallElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<small")); err != nil {
		return err
	}

	// TODO: Attribute stuff here

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</small>")); err != nil {
		return err
	}

	return nil
}
