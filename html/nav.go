// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type NavElement struct {
	attributes navAttrs
	children []htemel.Node
	skipRender bool
}

// Nav creates a tag <nav> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The nav element represents a section of a page that links to other pages or to parts within the page: a section with navigation links.
func Nav(children ...htemel.Node) *NavElement {
	node := &NavElement{
		children: children,
		attributes: make(navAttrs),
	}

	return node
}

func NavIf(condition bool, children ...htemel.Node) *NavElement {
	if condition {
		return Nav(children...)
	}

	return &NavElement{
		skipRender: true,
	}
}

type NavAutocapitalizeEnum string

const (
	NavAutocapitalizeEnumCharacters NavAutocapitalizeEnum = "characters"
	NavAutocapitalizeEnumNone NavAutocapitalizeEnum = "none"
	NavAutocapitalizeEnumOff NavAutocapitalizeEnum = "off"
	NavAutocapitalizeEnumOn NavAutocapitalizeEnum = "on"
	NavAutocapitalizeEnumSentences NavAutocapitalizeEnum = "sentences"
	NavAutocapitalizeEnumWords NavAutocapitalizeEnum = "words"
)

type NavAutocorrectEnum string

const (
	NavAutocorrectEnumOff NavAutocorrectEnum = "off"
	NavAutocorrectEnumOn NavAutocorrectEnum = "on"
)

type NavContenteditableEnum string

const (
	NavContenteditableEnumFalse NavContenteditableEnum = "false"
	NavContenteditableEnumPlaintextOnly NavContenteditableEnum = "plaintext-only"
	NavContenteditableEnumTrue NavContenteditableEnum = "true"
)

type NavDirEnum string

const (
	NavDirEnumRtl NavDirEnum = "rtl"
	NavDirEnumAuto NavDirEnum = "auto"
	NavDirEnumLtr NavDirEnum = "ltr"
)

type NavDraggableEnum string

const (
	NavDraggableEnumFalse NavDraggableEnum = "false"
	NavDraggableEnumTrue NavDraggableEnum = "true"
)

type NavEnterkeyhintEnum string

const (
	NavEnterkeyhintEnumSend NavEnterkeyhintEnum = "send"
	NavEnterkeyhintEnumDone NavEnterkeyhintEnum = "done"
	NavEnterkeyhintEnumEnter NavEnterkeyhintEnum = "enter"
	NavEnterkeyhintEnumGo NavEnterkeyhintEnum = "go"
	NavEnterkeyhintEnumNext NavEnterkeyhintEnum = "next"
	NavEnterkeyhintEnumPrevious NavEnterkeyhintEnum = "previous"
	NavEnterkeyhintEnumSearch NavEnterkeyhintEnum = "search"
)

type NavHiddenEnum string

const (
	NavHiddenEnumHidden NavHiddenEnum = "hidden"
	NavHiddenEnumUntilFound NavHiddenEnum = "until-found"
)

type navAttrs map[string]any

func (e *NavElement) Autocapitalize(a NavAutocapitalizeEnum) *NavElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *NavElement) Autocorrect(a NavAutocorrectEnum) *NavElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *NavElement) Autofocus(b bool) *NavElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *NavElement) Class(s ...string) *NavElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *NavElement) Contenteditable(a NavContenteditableEnum) *NavElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *NavElement) Dir(a NavDirEnum) *NavElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *NavElement) Draggable(a NavDraggableEnum) *NavElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *NavElement) Enterkeyhint(a NavEnterkeyhintEnum) *NavElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *NavElement) Hidden(a NavHiddenEnum) *NavElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *NavElement) Id(s string) *NavElement {
	e.attributes["id"] = s
	
	return e
}

func (e *NavElement) Slot(s string) *NavElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *NavElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<nav")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</nav>")); err != nil {
		return err
	}

	return nil
}
