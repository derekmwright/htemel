// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type NavElement struct {
	attributes navAttrs
	children   []htemel.Node
	skipRender bool
}

// Nav creates a tag <nav> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The nav element represents a section of a page that links to other pages or to parts within the page: a section with navigation links.
func Nav(children ...htemel.Node) *NavElement {
	node := &NavElement{
		children:   children,
		attributes: make(navAttrs),
	}

	return node
}

func NavIf(condition bool, children ...htemel.Node) *NavElement {
	if condition {
		return Nav(children...)
	}

	return &NavElement{
		children:   children,
		attributes: make(navAttrs),
		skipRender: true,
	}
}

func NavTernary(condition bool, true htemel.Node, false htemel.Node) *NavElement {
	if condition {
		return Nav(true)
	}

	return Nav(false)
}

type NavAutocapitalizeEnum string

const (
	NavAutocapitalizeEnumWords      NavAutocapitalizeEnum = "words"
	NavAutocapitalizeEnumCharacters NavAutocapitalizeEnum = "characters"
	NavAutocapitalizeEnumNone       NavAutocapitalizeEnum = "none"
	NavAutocapitalizeEnumOff        NavAutocapitalizeEnum = "off"
	NavAutocapitalizeEnumOn         NavAutocapitalizeEnum = "on"
	NavAutocapitalizeEnumSentences  NavAutocapitalizeEnum = "sentences"
)

type NavAutocorrectEnum string

const (
	NavAutocorrectEnumOff   NavAutocorrectEnum = "off"
	NavAutocorrectEnumOn    NavAutocorrectEnum = "on"
	NavAutocorrectEnumEmpty NavAutocorrectEnum = ""
)

type NavContenteditableEnum string

const (
	NavContenteditableEnumFalse         NavContenteditableEnum = "false"
	NavContenteditableEnumPlaintextOnly NavContenteditableEnum = "plaintext-only"
	NavContenteditableEnumTrue          NavContenteditableEnum = "true"
	NavContenteditableEnumEmpty         NavContenteditableEnum = ""
)

type NavDirEnum string

const (
	NavDirEnumAuto NavDirEnum = "auto"
	NavDirEnumLtr  NavDirEnum = "ltr"
	NavDirEnumRtl  NavDirEnum = "rtl"
)

type NavDraggableEnum string

const (
	NavDraggableEnumTrue  NavDraggableEnum = "true"
	NavDraggableEnumFalse NavDraggableEnum = "false"
)

type NavEnterkeyhintEnum string

const (
	NavEnterkeyhintEnumGo       NavEnterkeyhintEnum = "go"
	NavEnterkeyhintEnumNext     NavEnterkeyhintEnum = "next"
	NavEnterkeyhintEnumPrevious NavEnterkeyhintEnum = "previous"
	NavEnterkeyhintEnumSearch   NavEnterkeyhintEnum = "search"
	NavEnterkeyhintEnumSend     NavEnterkeyhintEnum = "send"
	NavEnterkeyhintEnumDone     NavEnterkeyhintEnum = "done"
	NavEnterkeyhintEnumEnter    NavEnterkeyhintEnum = "enter"
)

type NavHiddenEnum string

const (
	NavHiddenEnumHidden     NavHiddenEnum = "hidden"
	NavHiddenEnumUntilFound NavHiddenEnum = "until-found"
	NavHiddenEnumEmpty      NavHiddenEnum = ""
)

type NavInputmodeEnum string

const (
	NavInputmodeEnumText    NavInputmodeEnum = "text"
	NavInputmodeEnumUrl     NavInputmodeEnum = "url"
	NavInputmodeEnumDecimal NavInputmodeEnum = "decimal"
	NavInputmodeEnumEmail   NavInputmodeEnum = "email"
	NavInputmodeEnumNone    NavInputmodeEnum = "none"
	NavInputmodeEnumNumeric NavInputmodeEnum = "numeric"
	NavInputmodeEnumSearch  NavInputmodeEnum = "search"
	NavInputmodeEnumTel     NavInputmodeEnum = "tel"
)

type NavSpellcheckEnum string

const (
	NavSpellcheckEnumFalse NavSpellcheckEnum = "false"
	NavSpellcheckEnumTrue  NavSpellcheckEnum = "true"
	NavSpellcheckEnumEmpty NavSpellcheckEnum = ""
)

type NavTranslateEnum string

const (
	NavTranslateEnumNo    NavTranslateEnum = "no"
	NavTranslateEnumYes   NavTranslateEnum = "yes"
	NavTranslateEnumEmpty NavTranslateEnum = ""
)

type NavWritingsuggestionsEnum string

const (
	NavWritingsuggestionsEnumFalse NavWritingsuggestionsEnum = "false"
	NavWritingsuggestionsEnumTrue  NavWritingsuggestionsEnum = "true"
	NavWritingsuggestionsEnumEmpty NavWritingsuggestionsEnum = ""
)

type navAttrs map[string]any

func (e *NavElement) Autocapitalize(a NavAutocapitalizeEnum) *NavElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *NavElement) Autocorrect(a NavAutocorrectEnum) *NavElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *NavElement) Autofocus(b bool) *NavElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *NavElement) Class(s ...string) *NavElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *NavElement) Contenteditable(a NavContenteditableEnum) *NavElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *NavElement) DataUnsafe(name string, s string) *NavElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *NavElement) Data(name string, s string) *NavElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *NavElement) Dir(a NavDirEnum) *NavElement {
	e.attributes["dir"] = a

	return e
}

func (e *NavElement) Draggable(a NavDraggableEnum) *NavElement {
	e.attributes["draggable"] = a

	return e
}

func (e *NavElement) Enterkeyhint(a NavEnterkeyhintEnum) *NavElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *NavElement) Hidden(a NavHiddenEnum) *NavElement {
	e.attributes["hidden"] = a

	return e
}

func (e *NavElement) Id(s string) *NavElement {
	e.attributes["id"] = s

	return e
}

func (e *NavElement) Inert(b bool) *NavElement {
	e.attributes["inert"] = b

	return e
}

func (e *NavElement) Inputmode(a NavInputmodeEnum) *NavElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *NavElement) Itemid(s string) *NavElement {
	e.attributes["itemid"] = s

	return e
}

func (e *NavElement) Itemprop(s ...string) *NavElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *NavElement) Itemref(s ...string) *NavElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *NavElement) Itemscope(b bool) *NavElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *NavElement) Itemtype(s ...string) *NavElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *NavElement) Lang(s string) *NavElement {
	e.attributes["lang"] = s

	return e
}

func (e *NavElement) Nonce(s string) *NavElement {
	e.attributes["nonce"] = s

	return e
}

func (e *NavElement) Popover(s string) *NavElement {
	e.attributes["popover"] = s

	return e
}

func (e *NavElement) Slot(s string) *NavElement {
	e.attributes["slot"] = s

	return e
}

func (e *NavElement) Spellcheck(a NavSpellcheckEnum) *NavElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *NavElement) Style(s string) *NavElement {
	e.attributes["style"] = s

	return e
}

func (e *NavElement) Tabindex(i int) *NavElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *NavElement) Title(s string) *NavElement {
	e.attributes["title"] = s

	return e
}

func (e *NavElement) Translate(a NavTranslateEnum) *NavElement {
	e.attributes["translate"] = a

	return e
}

func (e *NavElement) Writingsuggestions(a NavWritingsuggestionsEnum) *NavElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *NavElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<nav")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}
	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</nav>")); err != nil {
		return err
	}

	return nil
}
