// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type NavElement struct {
	attributes navAttrs
	children   []htemel.Node
	skipRender bool
}

// Nav creates a tag <nav> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The nav element represents a section of a page that links to other pages or to parts within the page: a section with navigation links.
func Nav(children ...htemel.Node) *NavElement {
	node := &NavElement{
		children:   children,
		attributes: make(navAttrs),
	}

	return node
}

func NavIf(condition bool, children ...htemel.Node) *NavElement {
	if condition {
		return Nav(children...)
	}

	return &NavElement{
		skipRender: true,
	}
}

type NavAutocapitalizeAttrEnum string

const (
	NavAutocapitalizeAttrEnumOn         NavAutocapitalizeAttrEnum = "on"
	NavAutocapitalizeAttrEnumSentences  NavAutocapitalizeAttrEnum = "sentences"
	NavAutocapitalizeAttrEnumWords      NavAutocapitalizeAttrEnum = "words"
	NavAutocapitalizeAttrEnumCharacters NavAutocapitalizeAttrEnum = "characters"
	NavAutocapitalizeAttrEnumNone       NavAutocapitalizeAttrEnum = "none"
	NavAutocapitalizeAttrEnumOff        NavAutocapitalizeAttrEnum = "off"
)

type NavAutocorrectAttrEnum string

const (
	NavAutocorrectAttrEnumOff NavAutocorrectAttrEnum = "off"
	NavAutocorrectAttrEnumOn  NavAutocorrectAttrEnum = "on"
)

type NavContenteditableAttrEnum string

const (
	NavContenteditableAttrEnumFalse         NavContenteditableAttrEnum = "false"
	NavContenteditableAttrEnumPlaintextOnly NavContenteditableAttrEnum = "plaintext-only"
	NavContenteditableAttrEnumTrue          NavContenteditableAttrEnum = "true"
)

type navAttrs map[string]any

func (e *NavElement) Autocapitalize(a NavAutocapitalizeAttrEnum) *NavElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *NavElement) Autocorrect(a NavAutocorrectAttrEnum) *NavElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *NavElement) Autofocus(b bool) *NavElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *NavElement) Class(s ...string) *NavElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *NavElement) Contenteditable(a NavContenteditableAttrEnum) *NavElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *NavElement) Id(s string) *NavElement {
	e.attributes["id"] = s

	return e
}

func (e *NavElement) Slot(s string) *NavElement {
	e.attributes["slot"] = s

	return e
}

func (e *NavElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<nav")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</nav>")); err != nil {
		return err
	}

	return nil
}
