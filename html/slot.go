// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type SlotElement struct {
	attributes slotAttrs
	children []htemel.Node
	skipRender bool
}

// Slot creates a tag <slot> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The slot element defines a slot. It is typically used in a shadow tree. A slot element represents its assigned nodes, if any, and its contents otherwise.
func Slot(children ...htemel.Node) *SlotElement {
	node := &SlotElement{
		children: children,
		attributes: make(slotAttrs),
	}

	return node
}

func SlotIf(condition bool, children ...htemel.Node) *SlotElement {
	if condition {
		return Slot(children...)
	}

	return &SlotElement{
		skipRender: true,
	}
}

type SlotAutocapitalizeAttrEnum string

const (
	SlotAutocapitalizeAttrEnumSentences SlotAutocapitalizeAttrEnum = "sentences"
	SlotAutocapitalizeAttrEnumWords SlotAutocapitalizeAttrEnum = "words"
	SlotAutocapitalizeAttrEnumCharacters SlotAutocapitalizeAttrEnum = "characters"
	SlotAutocapitalizeAttrEnumNone SlotAutocapitalizeAttrEnum = "none"
	SlotAutocapitalizeAttrEnumOff SlotAutocapitalizeAttrEnum = "off"
	SlotAutocapitalizeAttrEnumOn SlotAutocapitalizeAttrEnum = "on"
)

type SlotAutocorrectAttrEnum string

const (
	SlotAutocorrectAttrEnumOff SlotAutocorrectAttrEnum = "off"
	SlotAutocorrectAttrEnumOn SlotAutocorrectAttrEnum = "on"
)

type SlotContenteditableAttrEnum string

const (
	SlotContenteditableAttrEnumFalse SlotContenteditableAttrEnum = "false"
	SlotContenteditableAttrEnumPlaintextOnly SlotContenteditableAttrEnum = "plaintext-only"
	SlotContenteditableAttrEnumTrue SlotContenteditableAttrEnum = "true"
)

type slotAttrs map[string]any

func (e *SlotElement) Autocapitalize(a SlotAutocapitalizeAttrEnum) *SlotElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *SlotElement) Autocorrect(a SlotAutocorrectAttrEnum) *SlotElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *SlotElement) Class(s ...string) *SlotElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *SlotElement) Contenteditable(a SlotContenteditableAttrEnum) *SlotElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *SlotElement) Id(s string) *SlotElement {
	e.attributes["id"] = s
	
	return e
}

func (e *SlotElement) Slot(s string) *SlotElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *SlotElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<slot")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		w.Write([]byte(" " + key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</slot>")); err != nil {
		return err
	}

	return nil
}
