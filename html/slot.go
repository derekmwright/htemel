// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type SlotElement struct {
	attributes slotAttrs
	children []htemel.Node
	skipRender bool
}

// Slot creates a tag <slot> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The slot element defines a slot. It is typically used in a shadow tree. A slot element represents its assigned nodes, if any, and its contents otherwise.
func Slot(children ...htemel.Node) *SlotElement {
	node := &SlotElement{
		children: children,
		attributes: make(slotAttrs),
	}

	return node
}

func SlotIf(condition bool, children ...htemel.Node) *SlotElement {
	if condition {
		return Slot(children...)
	}

	return &SlotElement{
		skipRender: true,
	}
}

type SlotAutocapitalizeEnum string

const (
	SlotAutocapitalizeEnumWords SlotAutocapitalizeEnum = "words"
	SlotAutocapitalizeEnumCharacters SlotAutocapitalizeEnum = "characters"
	SlotAutocapitalizeEnumNone SlotAutocapitalizeEnum = "none"
	SlotAutocapitalizeEnumOff SlotAutocapitalizeEnum = "off"
	SlotAutocapitalizeEnumOn SlotAutocapitalizeEnum = "on"
	SlotAutocapitalizeEnumSentences SlotAutocapitalizeEnum = "sentences"
)

type SlotAutocorrectEnum string

const (
	SlotAutocorrectEnumOn SlotAutocorrectEnum = "on"
	SlotAutocorrectEnumOff SlotAutocorrectEnum = "off"
)

type SlotContenteditableEnum string

const (
	SlotContenteditableEnumPlaintextOnly SlotContenteditableEnum = "plaintext-only"
	SlotContenteditableEnumTrue SlotContenteditableEnum = "true"
	SlotContenteditableEnumFalse SlotContenteditableEnum = "false"
)

type SlotDirEnum string

const (
	SlotDirEnumAuto SlotDirEnum = "auto"
	SlotDirEnumLtr SlotDirEnum = "ltr"
	SlotDirEnumRtl SlotDirEnum = "rtl"
)

type SlotDraggableEnum string

const (
	SlotDraggableEnumFalse SlotDraggableEnum = "false"
	SlotDraggableEnumTrue SlotDraggableEnum = "true"
)

type SlotEnterkeyhintEnum string

const (
	SlotEnterkeyhintEnumSend SlotEnterkeyhintEnum = "send"
	SlotEnterkeyhintEnumDone SlotEnterkeyhintEnum = "done"
	SlotEnterkeyhintEnumEnter SlotEnterkeyhintEnum = "enter"
	SlotEnterkeyhintEnumGo SlotEnterkeyhintEnum = "go"
	SlotEnterkeyhintEnumNext SlotEnterkeyhintEnum = "next"
	SlotEnterkeyhintEnumPrevious SlotEnterkeyhintEnum = "previous"
	SlotEnterkeyhintEnumSearch SlotEnterkeyhintEnum = "search"
)

type SlotHiddenEnum string

const (
	SlotHiddenEnumHidden SlotHiddenEnum = "hidden"
	SlotHiddenEnumUntilFound SlotHiddenEnum = "until-found"
)

type slotAttrs map[string]any

func (e *SlotElement) Autocapitalize(a SlotAutocapitalizeEnum) *SlotElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *SlotElement) Autocorrect(a SlotAutocorrectEnum) *SlotElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *SlotElement) Autofocus(b bool) *SlotElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *SlotElement) Class(s ...string) *SlotElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *SlotElement) Contenteditable(a SlotContenteditableEnum) *SlotElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *SlotElement) Dir(a SlotDirEnum) *SlotElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *SlotElement) Draggable(a SlotDraggableEnum) *SlotElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *SlotElement) Enterkeyhint(a SlotEnterkeyhintEnum) *SlotElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *SlotElement) Hidden(a SlotHiddenEnum) *SlotElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *SlotElement) Id(s string) *SlotElement {
	e.attributes["id"] = s
	
	return e
}

func (e *SlotElement) Slot(s string) *SlotElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *SlotElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<slot")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</slot>")); err != nil {
		return err
	}

	return nil
}
