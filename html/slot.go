// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type SlotElement struct {
	attributes slotAttrs
	children   []htemel.Node
	skipRender bool
}

// Slot creates a tag <slot> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The slot element defines a slot. It is typically used in a shadow tree. A slot element represents its assigned nodes, if any, and its contents otherwise.
func Slot(children ...htemel.Node) *SlotElement {
	node := &SlotElement{
		children: children, attributes: make(slotAttrs),
	}

	return node
}

func SlotIf(condition bool, children ...htemel.Node) *SlotElement {
	if condition {
		return Slot(children...)
	}

	return &SlotElement{
		skipRender: true,
	}
}

func SlotTernary(condition bool, true htemel.Node, false htemel.Node) *SlotElement {
	if condition {
		return Slot(true)
	}

	return Slot(false)
}

type SlotAutocapitalizeEnum string

const (
	SlotAutocapitalizeEnumCharacters SlotAutocapitalizeEnum = "characters"
	SlotAutocapitalizeEnumNone       SlotAutocapitalizeEnum = "none"
	SlotAutocapitalizeEnumOff        SlotAutocapitalizeEnum = "off"
	SlotAutocapitalizeEnumOn         SlotAutocapitalizeEnum = "on"
	SlotAutocapitalizeEnumSentences  SlotAutocapitalizeEnum = "sentences"
	SlotAutocapitalizeEnumWords      SlotAutocapitalizeEnum = "words"
)

type SlotAutocorrectEnum string

const (
	SlotAutocorrectEnumOff   SlotAutocorrectEnum = "off"
	SlotAutocorrectEnumOn    SlotAutocorrectEnum = "on"
	SlotAutocorrectEnumEmpty SlotAutocorrectEnum = ""
)

type SlotContenteditableEnum string

const (
	SlotContenteditableEnumFalse         SlotContenteditableEnum = "false"
	SlotContenteditableEnumPlaintextOnly SlotContenteditableEnum = "plaintext-only"
	SlotContenteditableEnumTrue          SlotContenteditableEnum = "true"
	SlotContenteditableEnumEmpty         SlotContenteditableEnum = ""
)

type SlotDirEnum string

const (
	SlotDirEnumAuto SlotDirEnum = "auto"
	SlotDirEnumLtr  SlotDirEnum = "ltr"
	SlotDirEnumRtl  SlotDirEnum = "rtl"
)

type SlotDraggableEnum string

const (
	SlotDraggableEnumFalse SlotDraggableEnum = "false"
	SlotDraggableEnumTrue  SlotDraggableEnum = "true"
)

type SlotEnterkeyhintEnum string

const (
	SlotEnterkeyhintEnumEnter    SlotEnterkeyhintEnum = "enter"
	SlotEnterkeyhintEnumGo       SlotEnterkeyhintEnum = "go"
	SlotEnterkeyhintEnumNext     SlotEnterkeyhintEnum = "next"
	SlotEnterkeyhintEnumPrevious SlotEnterkeyhintEnum = "previous"
	SlotEnterkeyhintEnumSearch   SlotEnterkeyhintEnum = "search"
	SlotEnterkeyhintEnumSend     SlotEnterkeyhintEnum = "send"
	SlotEnterkeyhintEnumDone     SlotEnterkeyhintEnum = "done"
)

type SlotHiddenEnum string

const (
	SlotHiddenEnumHidden     SlotHiddenEnum = "hidden"
	SlotHiddenEnumUntilFound SlotHiddenEnum = "until-found"
	SlotHiddenEnumEmpty      SlotHiddenEnum = ""
)

type SlotInputmodeEnum string

const (
	SlotInputmodeEnumEmail   SlotInputmodeEnum = "email"
	SlotInputmodeEnumNone    SlotInputmodeEnum = "none"
	SlotInputmodeEnumNumeric SlotInputmodeEnum = "numeric"
	SlotInputmodeEnumSearch  SlotInputmodeEnum = "search"
	SlotInputmodeEnumTel     SlotInputmodeEnum = "tel"
	SlotInputmodeEnumText    SlotInputmodeEnum = "text"
	SlotInputmodeEnumUrl     SlotInputmodeEnum = "url"
	SlotInputmodeEnumDecimal SlotInputmodeEnum = "decimal"
)

type SlotSpellcheckEnum string

const (
	SlotSpellcheckEnumFalse SlotSpellcheckEnum = "false"
	SlotSpellcheckEnumTrue  SlotSpellcheckEnum = "true"
	SlotSpellcheckEnumEmpty SlotSpellcheckEnum = ""
)

type SlotTranslateEnum string

const (
	SlotTranslateEnumNo    SlotTranslateEnum = "no"
	SlotTranslateEnumYes   SlotTranslateEnum = "yes"
	SlotTranslateEnumEmpty SlotTranslateEnum = ""
)

type SlotWritingsuggestionsEnum string

const (
	SlotWritingsuggestionsEnumTrue  SlotWritingsuggestionsEnum = "true"
	SlotWritingsuggestionsEnumFalse SlotWritingsuggestionsEnum = "false"
	SlotWritingsuggestionsEnumEmpty SlotWritingsuggestionsEnum = ""
)

type slotAttrs map[string]any

func (e *SlotElement) Autocapitalize(a SlotAutocapitalizeEnum) *SlotElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *SlotElement) Autocorrect(a SlotAutocorrectEnum) *SlotElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *SlotElement) Autofocus(b bool) *SlotElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *SlotElement) Class(s ...string) *SlotElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *SlotElement) Contenteditable(a SlotContenteditableEnum) *SlotElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *SlotElement) DataUnsafe(name string, s string) *SlotElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *SlotElement) Data(name string, s string) *SlotElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *SlotElement) Dir(a SlotDirEnum) *SlotElement {
	e.attributes["dir"] = a

	return e
}

func (e *SlotElement) Draggable(a SlotDraggableEnum) *SlotElement {
	e.attributes["draggable"] = a

	return e
}

func (e *SlotElement) Enterkeyhint(a SlotEnterkeyhintEnum) *SlotElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *SlotElement) Hidden(a SlotHiddenEnum) *SlotElement {
	e.attributes["hidden"] = a

	return e
}

func (e *SlotElement) Id(s string) *SlotElement {
	e.attributes["id"] = s

	return e
}

func (e *SlotElement) Inert(b bool) *SlotElement {
	e.attributes["inert"] = b

	return e
}

func (e *SlotElement) Inputmode(a SlotInputmodeEnum) *SlotElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *SlotElement) Itemid(s string) *SlotElement {
	e.attributes["itemid"] = s

	return e
}

func (e *SlotElement) Itemprop(s ...string) *SlotElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *SlotElement) Itemref(s ...string) *SlotElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *SlotElement) Itemscope(b bool) *SlotElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *SlotElement) Itemtype(s ...string) *SlotElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *SlotElement) Lang(s string) *SlotElement {
	e.attributes["lang"] = s

	return e
}

func (e *SlotElement) Nonce(s string) *SlotElement {
	e.attributes["nonce"] = s

	return e
}

func (e *SlotElement) Popover(s string) *SlotElement {
	e.attributes["popover"] = s

	return e
}

func (e *SlotElement) Slot(s string) *SlotElement {
	e.attributes["slot"] = s

	return e
}

func (e *SlotElement) Spellcheck(a SlotSpellcheckEnum) *SlotElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *SlotElement) Style(s string) *SlotElement {
	e.attributes["style"] = s

	return e
}

func (e *SlotElement) Tabindex(i int) *SlotElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *SlotElement) Title(s string) *SlotElement {
	e.attributes["title"] = s

	return e
}

func (e *SlotElement) Translate(a SlotTranslateEnum) *SlotElement {
	e.attributes["translate"] = a

	return e
}

func (e *SlotElement) Writingsuggestions(a SlotWritingsuggestionsEnum) *SlotElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *SlotElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<slot")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}
	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</slot>")); err != nil {
		return err
	}

	return nil
}
