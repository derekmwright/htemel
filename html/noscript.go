// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type NoscriptElement struct {
	attributes noscriptAttrs
	children []htemel.Node
	skipRender bool
}

// Noscript creates a tag <noscript> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The noscript element represents nothing if scripting is enabled, and represents its children if scripting is disabled. It is used to present different markup to user agents that support scripting and those that don't support scripting, by affecting how the document is parsed.
func Noscript(children ...htemel.Node) *NoscriptElement {
	node := &NoscriptElement{
		children: children,
		attributes: make(noscriptAttrs),
	}

	return node
}

func NoscriptIf(condition bool, children ...htemel.Node) *NoscriptElement {
	if condition {
		return Noscript(children...)
	}

	return &NoscriptElement{
		skipRender: true,
	}
}

type NoscriptAutocapitalizeEnum string

const (
	NoscriptAutocapitalizeEnumOn NoscriptAutocapitalizeEnum = "on"
	NoscriptAutocapitalizeEnumSentences NoscriptAutocapitalizeEnum = "sentences"
	NoscriptAutocapitalizeEnumWords NoscriptAutocapitalizeEnum = "words"
	NoscriptAutocapitalizeEnumCharacters NoscriptAutocapitalizeEnum = "characters"
	NoscriptAutocapitalizeEnumNone NoscriptAutocapitalizeEnum = "none"
	NoscriptAutocapitalizeEnumOff NoscriptAutocapitalizeEnum = "off"
)

type NoscriptAutocorrectEnum string

const (
	NoscriptAutocorrectEnumOff NoscriptAutocorrectEnum = "off"
	NoscriptAutocorrectEnumOn NoscriptAutocorrectEnum = "on"
)

type NoscriptContenteditableEnum string

const (
	NoscriptContenteditableEnumFalse NoscriptContenteditableEnum = "false"
	NoscriptContenteditableEnumPlaintextOnly NoscriptContenteditableEnum = "plaintext-only"
	NoscriptContenteditableEnumTrue NoscriptContenteditableEnum = "true"
)

type NoscriptDirEnum string

const (
	NoscriptDirEnumAuto NoscriptDirEnum = "auto"
	NoscriptDirEnumLtr NoscriptDirEnum = "ltr"
	NoscriptDirEnumRtl NoscriptDirEnum = "rtl"
)

type NoscriptDraggableEnum string

const (
	NoscriptDraggableEnumFalse NoscriptDraggableEnum = "false"
	NoscriptDraggableEnumTrue NoscriptDraggableEnum = "true"
)

type NoscriptEnterkeyhintEnum string

const (
	NoscriptEnterkeyhintEnumDone NoscriptEnterkeyhintEnum = "done"
	NoscriptEnterkeyhintEnumEnter NoscriptEnterkeyhintEnum = "enter"
	NoscriptEnterkeyhintEnumGo NoscriptEnterkeyhintEnum = "go"
	NoscriptEnterkeyhintEnumNext NoscriptEnterkeyhintEnum = "next"
	NoscriptEnterkeyhintEnumPrevious NoscriptEnterkeyhintEnum = "previous"
	NoscriptEnterkeyhintEnumSearch NoscriptEnterkeyhintEnum = "search"
	NoscriptEnterkeyhintEnumSend NoscriptEnterkeyhintEnum = "send"
)

type NoscriptHiddenEnum string

const (
	NoscriptHiddenEnumHidden NoscriptHiddenEnum = "hidden"
	NoscriptHiddenEnumUntilFound NoscriptHiddenEnum = "until-found"
)

type noscriptAttrs map[string]any

func (e *NoscriptElement) Autocapitalize(a NoscriptAutocapitalizeEnum) *NoscriptElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *NoscriptElement) Autocorrect(a NoscriptAutocorrectEnum) *NoscriptElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *NoscriptElement) Autofocus(b bool) *NoscriptElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *NoscriptElement) Class(s ...string) *NoscriptElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *NoscriptElement) Contenteditable(a NoscriptContenteditableEnum) *NoscriptElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *NoscriptElement) Dir(a NoscriptDirEnum) *NoscriptElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *NoscriptElement) Draggable(a NoscriptDraggableEnum) *NoscriptElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *NoscriptElement) Enterkeyhint(a NoscriptEnterkeyhintEnum) *NoscriptElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *NoscriptElement) Hidden(a NoscriptHiddenEnum) *NoscriptElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *NoscriptElement) Id(s string) *NoscriptElement {
	e.attributes["id"] = s
	
	return e
}

func (e *NoscriptElement) Slot(s string) *NoscriptElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *NoscriptElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<noscript")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</noscript>")); err != nil {
		return err
	}

	return nil
}
