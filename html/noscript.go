// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type NoscriptElement struct {
	attributes noscriptAttrs
	children []htemel.Node
	skipRender bool
}

// Noscript creates a tag <noscript> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The noscript element represents nothing if scripting is enabled, and represents its children if scripting is disabled. It is used to present different markup to user agents that support scripting and those that don't support scripting, by affecting how the document is parsed.
func Noscript(children ...htemel.Node) *NoscriptElement {
	node := &NoscriptElement{
		children: children,
		attributes: make(noscriptAttrs),
	}

	return node
}

func NoscriptIf(condition bool, children ...htemel.Node) *NoscriptElement {
	if condition {
		return Noscript(children...)
	}

	return &NoscriptElement{
		skipRender: true,
	}
}

type NoscriptAutocapitalizeAttrEnum string

const (
	NoscriptAutocapitalizeAttrEnumCharacters NoscriptAutocapitalizeAttrEnum = "characters"
	NoscriptAutocapitalizeAttrEnumNone NoscriptAutocapitalizeAttrEnum = "none"
	NoscriptAutocapitalizeAttrEnumOff NoscriptAutocapitalizeAttrEnum = "off"
	NoscriptAutocapitalizeAttrEnumOn NoscriptAutocapitalizeAttrEnum = "on"
	NoscriptAutocapitalizeAttrEnumSentences NoscriptAutocapitalizeAttrEnum = "sentences"
	NoscriptAutocapitalizeAttrEnumWords NoscriptAutocapitalizeAttrEnum = "words"
)

type NoscriptAutocorrectAttrEnum string

const (
	NoscriptAutocorrectAttrEnumOff NoscriptAutocorrectAttrEnum = "off"
	NoscriptAutocorrectAttrEnumOn NoscriptAutocorrectAttrEnum = "on"
)

type NoscriptContenteditableAttrEnum string

const (
	NoscriptContenteditableAttrEnumFalse NoscriptContenteditableAttrEnum = "false"
	NoscriptContenteditableAttrEnumPlaintextOnly NoscriptContenteditableAttrEnum = "plaintext-only"
	NoscriptContenteditableAttrEnumTrue NoscriptContenteditableAttrEnum = "true"
)

type noscriptAttrs map[string]any

func (e *NoscriptElement) Autocapitalize(a NoscriptAutocapitalizeAttrEnum) *NoscriptElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *NoscriptElement) Autocorrect(a NoscriptAutocorrectAttrEnum) *NoscriptElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *NoscriptElement) Class(s ...string) *NoscriptElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *NoscriptElement) Contenteditable(a NoscriptContenteditableAttrEnum) *NoscriptElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *NoscriptElement) Id(s string) *NoscriptElement {
	e.attributes["id"] = s
	
	return e
}

func (e *NoscriptElement) Slot(s string) *NoscriptElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *NoscriptElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<noscript")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		w.Write([]byte(" " + key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</noscript>")); err != nil {
		return err
	}

	return nil
}
