// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type StrongElement struct {
	attributes strongAttrs
	children   []htemel.Node
	skipRender bool
}

// Strong creates a tag <strong> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The strong element represents strong importance, seriousness, or urgency for its contents.
func Strong(children ...htemel.Node) *StrongElement {
	node := &StrongElement{
		children:   children,
		attributes: make(strongAttrs),
	}

	return node
}

func StrongIf(condition bool, children ...htemel.Node) *StrongElement {
	if condition {
		return Strong(children...)
	}

	return &StrongElement{
		skipRender: true,
	}
}

type StrongAutocapitalizeAttrEnum string

const (
	StrongAutocapitalizeAttrEnumOn         StrongAutocapitalizeAttrEnum = "on"
	StrongAutocapitalizeAttrEnumSentences  StrongAutocapitalizeAttrEnum = "sentences"
	StrongAutocapitalizeAttrEnumWords      StrongAutocapitalizeAttrEnum = "words"
	StrongAutocapitalizeAttrEnumCharacters StrongAutocapitalizeAttrEnum = "characters"
	StrongAutocapitalizeAttrEnumNone       StrongAutocapitalizeAttrEnum = "none"
	StrongAutocapitalizeAttrEnumOff        StrongAutocapitalizeAttrEnum = "off"
)

type StrongAutocorrectAttrEnum string

const (
	StrongAutocorrectAttrEnumOff StrongAutocorrectAttrEnum = "off"
	StrongAutocorrectAttrEnumOn  StrongAutocorrectAttrEnum = "on"
)

type StrongContenteditableAttrEnum string

const (
	StrongContenteditableAttrEnumFalse         StrongContenteditableAttrEnum = "false"
	StrongContenteditableAttrEnumPlaintextOnly StrongContenteditableAttrEnum = "plaintext-only"
	StrongContenteditableAttrEnumTrue          StrongContenteditableAttrEnum = "true"
)

type strongAttrs map[string]any

func (e *StrongElement) Autocapitalize(a StrongAutocapitalizeAttrEnum) *StrongElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *StrongElement) Autocorrect(a StrongAutocorrectAttrEnum) *StrongElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *StrongElement) Autofocus(b bool) *StrongElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *StrongElement) Class(s ...string) *StrongElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *StrongElement) Contenteditable(a StrongContenteditableAttrEnum) *StrongElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *StrongElement) Id(s string) *StrongElement {
	e.attributes["id"] = s

	return e
}

func (e *StrongElement) Slot(s string) *StrongElement {
	e.attributes["slot"] = s

	return e
}

func (e *StrongElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<strong")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</strong>")); err != nil {
		return err
	}

	return nil
}
