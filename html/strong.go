// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type StrongElement struct {
	attributes strongAttrs
	children []htemel.Node
	skipRender bool
}

// Strong creates a tag <strong> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The strong element represents strong importance, seriousness, or urgency for its contents.
func Strong(children ...htemel.Node) *StrongElement {
	node := &StrongElement{
		children: children,
		attributes: make(strongAttrs),
	}

	return node
}

func StrongIf(condition bool, children ...htemel.Node) *StrongElement {
	if condition {
		return Strong(children...)
	}

	return &StrongElement{
		skipRender: true,
	}
}

type StrongAutocapitalizeEnum string

const (
	StrongAutocapitalizeEnumCharacters StrongAutocapitalizeEnum = "characters"
	StrongAutocapitalizeEnumNone StrongAutocapitalizeEnum = "none"
	StrongAutocapitalizeEnumOff StrongAutocapitalizeEnum = "off"
	StrongAutocapitalizeEnumOn StrongAutocapitalizeEnum = "on"
	StrongAutocapitalizeEnumSentences StrongAutocapitalizeEnum = "sentences"
	StrongAutocapitalizeEnumWords StrongAutocapitalizeEnum = "words"
)

type StrongAutocorrectEnum string

const (
	StrongAutocorrectEnumOff StrongAutocorrectEnum = "off"
	StrongAutocorrectEnumOn StrongAutocorrectEnum = "on"
)

type StrongContenteditableEnum string

const (
	StrongContenteditableEnumTrue StrongContenteditableEnum = "true"
	StrongContenteditableEnumFalse StrongContenteditableEnum = "false"
	StrongContenteditableEnumPlaintextOnly StrongContenteditableEnum = "plaintext-only"
)

type StrongDirEnum string

const (
	StrongDirEnumLtr StrongDirEnum = "ltr"
	StrongDirEnumRtl StrongDirEnum = "rtl"
	StrongDirEnumAuto StrongDirEnum = "auto"
)

type StrongDraggableEnum string

const (
	StrongDraggableEnumFalse StrongDraggableEnum = "false"
	StrongDraggableEnumTrue StrongDraggableEnum = "true"
)

type StrongEnterkeyhintEnum string

const (
	StrongEnterkeyhintEnumDone StrongEnterkeyhintEnum = "done"
	StrongEnterkeyhintEnumEnter StrongEnterkeyhintEnum = "enter"
	StrongEnterkeyhintEnumGo StrongEnterkeyhintEnum = "go"
	StrongEnterkeyhintEnumNext StrongEnterkeyhintEnum = "next"
	StrongEnterkeyhintEnumPrevious StrongEnterkeyhintEnum = "previous"
	StrongEnterkeyhintEnumSearch StrongEnterkeyhintEnum = "search"
	StrongEnterkeyhintEnumSend StrongEnterkeyhintEnum = "send"
)

type StrongHiddenEnum string

const (
	StrongHiddenEnumHidden StrongHiddenEnum = "hidden"
	StrongHiddenEnumUntilFound StrongHiddenEnum = "until-found"
)

type strongAttrs map[string]any

func (e *StrongElement) Autocapitalize(a StrongAutocapitalizeEnum) *StrongElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *StrongElement) Autocorrect(a StrongAutocorrectEnum) *StrongElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *StrongElement) Autofocus(b bool) *StrongElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *StrongElement) Class(s ...string) *StrongElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *StrongElement) Contenteditable(a StrongContenteditableEnum) *StrongElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *StrongElement) Dir(a StrongDirEnum) *StrongElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *StrongElement) Draggable(a StrongDraggableEnum) *StrongElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *StrongElement) Enterkeyhint(a StrongEnterkeyhintEnum) *StrongElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *StrongElement) Hidden(a StrongHiddenEnum) *StrongElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *StrongElement) Id(s string) *StrongElement {
	e.attributes["id"] = s
	
	return e
}

func (e *StrongElement) Slot(s string) *StrongElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *StrongElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<strong")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</strong>")); err != nil {
		return err
	}

	return nil
}
