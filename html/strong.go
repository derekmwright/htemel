// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type StrongElement struct {
	attributes strongAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// Strong creates a tag <strong> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The strong element represents strong importance, seriousness, or urgency for its contents.
func Strong(children ...htemel.Node) *StrongElement {
	node := &StrongElement{
		children: children, attributes: make(strongAttrs),
	}

	return node
}

func StrongIf(condition bool, children ...htemel.Node) *StrongElement {
	if condition {
		return Strong(children...)
	}

	return &StrongElement{
		skipRender: true,
	}
}

func StrongTernary(condition bool, true htemel.Node, false htemel.Node) *StrongElement {
	if condition {
		return Strong(true)
	}

	return Strong(false)
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *StrongElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *StrongElement) AddIndent(i int) {
	e.indent = i + 1
}

type StrongAutocapitalizeEnum string

const (
	StrongAutocapitalizeEnumWords      StrongAutocapitalizeEnum = "words"
	StrongAutocapitalizeEnumCharacters StrongAutocapitalizeEnum = "characters"
	StrongAutocapitalizeEnumNone       StrongAutocapitalizeEnum = "none"
	StrongAutocapitalizeEnumOff        StrongAutocapitalizeEnum = "off"
	StrongAutocapitalizeEnumOn         StrongAutocapitalizeEnum = "on"
	StrongAutocapitalizeEnumSentences  StrongAutocapitalizeEnum = "sentences"
)

type StrongAutocorrectEnum string

const (
	StrongAutocorrectEnumOff   StrongAutocorrectEnum = "off"
	StrongAutocorrectEnumOn    StrongAutocorrectEnum = "on"
	StrongAutocorrectEnumEmpty StrongAutocorrectEnum = ""
)

type StrongContenteditableEnum string

const (
	StrongContenteditableEnumFalse         StrongContenteditableEnum = "false"
	StrongContenteditableEnumPlaintextOnly StrongContenteditableEnum = "plaintext-only"
	StrongContenteditableEnumTrue          StrongContenteditableEnum = "true"
	StrongContenteditableEnumEmpty         StrongContenteditableEnum = ""
)

type StrongDirEnum string

const (
	StrongDirEnumAuto StrongDirEnum = "auto"
	StrongDirEnumLtr  StrongDirEnum = "ltr"
	StrongDirEnumRtl  StrongDirEnum = "rtl"
)

type StrongDraggableEnum string

const (
	StrongDraggableEnumFalse StrongDraggableEnum = "false"
	StrongDraggableEnumTrue  StrongDraggableEnum = "true"
)

type StrongEnterkeyhintEnum string

const (
	StrongEnterkeyhintEnumGo       StrongEnterkeyhintEnum = "go"
	StrongEnterkeyhintEnumNext     StrongEnterkeyhintEnum = "next"
	StrongEnterkeyhintEnumPrevious StrongEnterkeyhintEnum = "previous"
	StrongEnterkeyhintEnumSearch   StrongEnterkeyhintEnum = "search"
	StrongEnterkeyhintEnumSend     StrongEnterkeyhintEnum = "send"
	StrongEnterkeyhintEnumDone     StrongEnterkeyhintEnum = "done"
	StrongEnterkeyhintEnumEnter    StrongEnterkeyhintEnum = "enter"
)

type StrongHiddenEnum string

const (
	StrongHiddenEnumHidden     StrongHiddenEnum = "hidden"
	StrongHiddenEnumUntilFound StrongHiddenEnum = "until-found"
	StrongHiddenEnumEmpty      StrongHiddenEnum = ""
)

type StrongInputmodeEnum string

const (
	StrongInputmodeEnumNumeric StrongInputmodeEnum = "numeric"
	StrongInputmodeEnumSearch  StrongInputmodeEnum = "search"
	StrongInputmodeEnumTel     StrongInputmodeEnum = "tel"
	StrongInputmodeEnumText    StrongInputmodeEnum = "text"
	StrongInputmodeEnumUrl     StrongInputmodeEnum = "url"
	StrongInputmodeEnumDecimal StrongInputmodeEnum = "decimal"
	StrongInputmodeEnumEmail   StrongInputmodeEnum = "email"
	StrongInputmodeEnumNone    StrongInputmodeEnum = "none"
)

type StrongSpellcheckEnum string

const (
	StrongSpellcheckEnumTrue  StrongSpellcheckEnum = "true"
	StrongSpellcheckEnumFalse StrongSpellcheckEnum = "false"
	StrongSpellcheckEnumEmpty StrongSpellcheckEnum = ""
)

type StrongTranslateEnum string

const (
	StrongTranslateEnumYes   StrongTranslateEnum = "yes"
	StrongTranslateEnumNo    StrongTranslateEnum = "no"
	StrongTranslateEnumEmpty StrongTranslateEnum = ""
)

type StrongWritingsuggestionsEnum string

const (
	StrongWritingsuggestionsEnumFalse StrongWritingsuggestionsEnum = "false"
	StrongWritingsuggestionsEnumTrue  StrongWritingsuggestionsEnum = "true"
	StrongWritingsuggestionsEnumEmpty StrongWritingsuggestionsEnum = ""
)

type strongAttrs map[string]any

func (e *StrongElement) Autocapitalize(a StrongAutocapitalizeEnum) *StrongElement {
	e.attributes["autocapitalize"] = a

	return e
}

func StrongAutocapitalizeCustom(s string) StrongAutocapitalizeEnum {
	return StrongAutocapitalizeEnum(s)
}

func (e *StrongElement) Autocorrect(a StrongAutocorrectEnum) *StrongElement {
	e.attributes["autocorrect"] = a

	return e
}

func StrongAutocorrectCustom(s string) StrongAutocorrectEnum {
	return StrongAutocorrectEnum(s)
}

func (e *StrongElement) Autofocus(b bool) *StrongElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *StrongElement) Class(s ...string) *StrongElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *StrongElement) Contenteditable(a StrongContenteditableEnum) *StrongElement {
	e.attributes["contenteditable"] = a

	return e
}

func StrongContenteditableCustom(s string) StrongContenteditableEnum {
	return StrongContenteditableEnum(s)
}

func (e *StrongElement) DataUnsafe(name string, s string) *StrongElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *StrongElement) Data(name string, s string) *StrongElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *StrongElement) Dir(a StrongDirEnum) *StrongElement {
	e.attributes["dir"] = a

	return e
}

func StrongDirCustom(s string) StrongDirEnum {
	return StrongDirEnum(s)
}

func (e *StrongElement) Draggable(a StrongDraggableEnum) *StrongElement {
	e.attributes["draggable"] = a

	return e
}

func StrongDraggableCustom(s string) StrongDraggableEnum {
	return StrongDraggableEnum(s)
}

func (e *StrongElement) Enterkeyhint(a StrongEnterkeyhintEnum) *StrongElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func StrongEnterkeyhintCustom(s string) StrongEnterkeyhintEnum {
	return StrongEnterkeyhintEnum(s)
}

func (e *StrongElement) Hidden(a StrongHiddenEnum) *StrongElement {
	e.attributes["hidden"] = a

	return e
}

func StrongHiddenCustom(s string) StrongHiddenEnum {
	return StrongHiddenEnum(s)
}

func (e *StrongElement) Id(s string) *StrongElement {
	e.attributes["id"] = s

	return e
}

func (e *StrongElement) Inert(b bool) *StrongElement {
	e.attributes["inert"] = b

	return e
}

func (e *StrongElement) Inputmode(a StrongInputmodeEnum) *StrongElement {
	e.attributes["inputmode"] = a

	return e
}

func StrongInputmodeCustom(s string) StrongInputmodeEnum {
	return StrongInputmodeEnum(s)
}

func (e *StrongElement) Itemid(s string) *StrongElement {
	e.attributes["itemid"] = s

	return e
}

func (e *StrongElement) Itemprop(s ...string) *StrongElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *StrongElement) Itemref(s ...string) *StrongElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *StrongElement) Itemscope(b bool) *StrongElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *StrongElement) Itemtype(s ...string) *StrongElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *StrongElement) Lang(s string) *StrongElement {
	e.attributes["lang"] = s

	return e
}

func (e *StrongElement) Nonce(s string) *StrongElement {
	e.attributes["nonce"] = s

	return e
}

func (e *StrongElement) Popover(s string) *StrongElement {
	e.attributes["popover"] = s

	return e
}

func (e *StrongElement) Slot(s string) *StrongElement {
	e.attributes["slot"] = s

	return e
}

func (e *StrongElement) Spellcheck(a StrongSpellcheckEnum) *StrongElement {
	e.attributes["spellcheck"] = a

	return e
}

func StrongSpellcheckCustom(s string) StrongSpellcheckEnum {
	return StrongSpellcheckEnum(s)
}

func (e *StrongElement) Style(s string) *StrongElement {
	e.attributes["style"] = s

	return e
}

func (e *StrongElement) Tabindex(i int) *StrongElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *StrongElement) Title(s string) *StrongElement {
	e.attributes["title"] = s

	return e
}

func (e *StrongElement) Translate(a StrongTranslateEnum) *StrongElement {
	e.attributes["translate"] = a

	return e
}

func StrongTranslateCustom(s string) StrongTranslateEnum {
	return StrongTranslateEnum(s)
}

func (e *StrongElement) Writingsuggestions(a StrongWritingsuggestionsEnum) *StrongElement {
	e.attributes["writingsuggestions"] = a

	return e
}

func StrongWritingsuggestionsCustom(s string) StrongWritingsuggestionsEnum {
	return StrongWritingsuggestionsEnum(s)
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *StrongElement) Render(w io.Writer) error {
	indent := htemel.SetIndent(e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<strong")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}
	for _, child := range e.children {
		child.AddIndent(e.Indent())
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(indent + "</strong>\n")); err != nil {
		return err
	}

	return nil
}
