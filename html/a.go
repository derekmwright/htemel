// Code generated by htemel. DO NOT EDIT.
package html

import (
  "github.com/derekmwright/htemel"
  "io"
)

type AElement struct {
	children []htemel.Node
	skipRender bool
}

// A creates a tag <a> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: If the a element has an href attribute, then it represents a hyperlink (a hypertext anchor) labeled by its contents.
func A(children ...htemel.Node) *AElement {
	node := &AElement{
		children: children,
	}

	return node
}

func AIf(condition bool, children ...htemel.Node) *AElement {
	if condition {
		return A(children...)
	}

	return &AElement{
		skipRender: true,
	}
}

func (e *AElement) Autocapitalize() *AElement {
	return e
}

func (e *AElement) Autocorrect() *AElement {
	return e
}

func (e *AElement) Autofocus() *AElement {
	return e
}

func (e *AElement) Class() *AElement {
	return e
}

func (e *AElement) Contenteditable() *AElement {
	return e
}

func (e *AElement) Id() *AElement {
	return e
}

func (e *AElement) Slot() *AElement {
	return e
}

func (e *AElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<a")); err != nil {
		return err
	}

	// TODO: Attribute stuff here

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</a>")); err != nil {
		return err
	}

	return nil
}
