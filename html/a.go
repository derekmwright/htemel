// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
	"strings"
)

type AElement struct {
	attributes aAttrs
	children []htemel.Node
	skipRender bool
}

// A creates a tag <a> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: If the a element has an href attribute, then it represents a hyperlink (a hypertext anchor) labeled by its contents.
func A(children ...htemel.Node) *AElement {
	node := &AElement{
		children: children,
	}

	return node
}

func AIf(condition bool, children ...htemel.Node) *AElement {
	if condition {
		return A(children...)
	}

	return &AElement{
		skipRender: true,
	}
}

type AAutocapitalizeAttrEnum string

const (
	AAutocapitalizeAttrEnumOff AAutocapitalizeAttrEnum = "off"
	AAutocapitalizeAttrEnumOn AAutocapitalizeAttrEnum = "on"
	AAutocapitalizeAttrEnumSentences AAutocapitalizeAttrEnum = "sentences"
	AAutocapitalizeAttrEnumWords AAutocapitalizeAttrEnum = "words"
	AAutocapitalizeAttrEnumCharacters AAutocapitalizeAttrEnum = "characters"
	AAutocapitalizeAttrEnumNone AAutocapitalizeAttrEnum = "none"
)

type AAutocorrectAttrEnum string

const (
	AAutocorrectAttrEnumOff AAutocorrectAttrEnum = "off"
	AAutocorrectAttrEnumOn AAutocorrectAttrEnum = "on"
)

type AContenteditableAttrEnum string

const (
	AContenteditableAttrEnumFalse AContenteditableAttrEnum = "false"
	AContenteditableAttrEnumPlaintextOnly AContenteditableAttrEnum = "plaintext-only"
	AContenteditableAttrEnumTrue AContenteditableAttrEnum = "true"
)

type aAttrs map[string]any

func (e *AElement) Autocapitalize(a AAutocapitalizeAttrEnum) *AElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *AElement) Autocorrect(a AAutocorrectAttrEnum) *AElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *AElement) Class(s ...string) *AElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *AElement) Contenteditable(a AContenteditableAttrEnum) *AElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *AElement) Id(s string) *AElement {
	e.attributes["id"] = s

	return e
}

func (e *AElement) Slot(s string) *AElement {
	e.attributes["slot"] = s

	return e
}

func (e *AElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<a")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 0
	for key, v := range e.attributes {
		w.Write([]byte(key + "="))
		w.Write([]byte(html.EscapeString(fmt.Sprintf("'%v'", v))))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</a>")); err != nil {
		return err
	}

	return nil
}
