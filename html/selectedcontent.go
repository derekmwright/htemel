// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type SelectedcontentElement struct {
	attributes selectedcontentAttrs
	children []htemel.Node
	skipRender bool
}

// Selectedcontent creates a tag <selectedcontent> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The selectedcontent element reflects the contents of a select element's currently selected option element. selectedcontent elements can be used to declaratively show the selected option element's contents within the select element's first child button element.
func Selectedcontent(children ...htemel.Node) *SelectedcontentElement {
	node := &SelectedcontentElement{
		children: children,
		attributes: make(selectedcontentAttrs),
	}

	return node
}

func SelectedcontentIf(condition bool, children ...htemel.Node) *SelectedcontentElement {
	if condition {
		return Selectedcontent(children...)
	}

	return &SelectedcontentElement{
		skipRender: true,
	}
}

type SelectedcontentAutocapitalizeEnum string

const (
	SelectedcontentAutocapitalizeEnumCharacters SelectedcontentAutocapitalizeEnum = "characters"
	SelectedcontentAutocapitalizeEnumNone SelectedcontentAutocapitalizeEnum = "none"
	SelectedcontentAutocapitalizeEnumOff SelectedcontentAutocapitalizeEnum = "off"
	SelectedcontentAutocapitalizeEnumOn SelectedcontentAutocapitalizeEnum = "on"
	SelectedcontentAutocapitalizeEnumSentences SelectedcontentAutocapitalizeEnum = "sentences"
	SelectedcontentAutocapitalizeEnumWords SelectedcontentAutocapitalizeEnum = "words"
)

type SelectedcontentAutocorrectEnum string

const (
	SelectedcontentAutocorrectEnumOff SelectedcontentAutocorrectEnum = "off"
	SelectedcontentAutocorrectEnumOn SelectedcontentAutocorrectEnum = "on"
)

type SelectedcontentContenteditableEnum string

const (
	SelectedcontentContenteditableEnumFalse SelectedcontentContenteditableEnum = "false"
	SelectedcontentContenteditableEnumPlaintextOnly SelectedcontentContenteditableEnum = "plaintext-only"
	SelectedcontentContenteditableEnumTrue SelectedcontentContenteditableEnum = "true"
)

type SelectedcontentDirEnum string

const (
	SelectedcontentDirEnumAuto SelectedcontentDirEnum = "auto"
	SelectedcontentDirEnumLtr SelectedcontentDirEnum = "ltr"
	SelectedcontentDirEnumRtl SelectedcontentDirEnum = "rtl"
)

type SelectedcontentDraggableEnum string

const (
	SelectedcontentDraggableEnumFalse SelectedcontentDraggableEnum = "false"
	SelectedcontentDraggableEnumTrue SelectedcontentDraggableEnum = "true"
)

type SelectedcontentEnterkeyhintEnum string

const (
	SelectedcontentEnterkeyhintEnumSearch SelectedcontentEnterkeyhintEnum = "search"
	SelectedcontentEnterkeyhintEnumSend SelectedcontentEnterkeyhintEnum = "send"
	SelectedcontentEnterkeyhintEnumDone SelectedcontentEnterkeyhintEnum = "done"
	SelectedcontentEnterkeyhintEnumEnter SelectedcontentEnterkeyhintEnum = "enter"
	SelectedcontentEnterkeyhintEnumGo SelectedcontentEnterkeyhintEnum = "go"
	SelectedcontentEnterkeyhintEnumNext SelectedcontentEnterkeyhintEnum = "next"
	SelectedcontentEnterkeyhintEnumPrevious SelectedcontentEnterkeyhintEnum = "previous"
)

type SelectedcontentHiddenEnum string

const (
	SelectedcontentHiddenEnumHidden SelectedcontentHiddenEnum = "hidden"
	SelectedcontentHiddenEnumUntilFound SelectedcontentHiddenEnum = "until-found"
)

type selectedcontentAttrs map[string]any

func (e *SelectedcontentElement) Autocapitalize(a SelectedcontentAutocapitalizeEnum) *SelectedcontentElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *SelectedcontentElement) Autocorrect(a SelectedcontentAutocorrectEnum) *SelectedcontentElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *SelectedcontentElement) Autofocus(b bool) *SelectedcontentElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *SelectedcontentElement) Class(s ...string) *SelectedcontentElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *SelectedcontentElement) Contenteditable(a SelectedcontentContenteditableEnum) *SelectedcontentElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *SelectedcontentElement) Dir(a SelectedcontentDirEnum) *SelectedcontentElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *SelectedcontentElement) Draggable(a SelectedcontentDraggableEnum) *SelectedcontentElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *SelectedcontentElement) Enterkeyhint(a SelectedcontentEnterkeyhintEnum) *SelectedcontentElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *SelectedcontentElement) Hidden(a SelectedcontentHiddenEnum) *SelectedcontentElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *SelectedcontentElement) Id(s string) *SelectedcontentElement {
	e.attributes["id"] = s
	
	return e
}

func (e *SelectedcontentElement) Slot(s string) *SelectedcontentElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *SelectedcontentElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<selectedcontent")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</selectedcontent>")); err != nil {
		return err
	}

	return nil
}
