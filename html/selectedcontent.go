// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type SelectedcontentElement struct {
	attributes selectedcontentAttrs
	children   []htemel.Node
	skipRender bool
}

// Selectedcontent creates a tag <selectedcontent> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The selectedcontent element reflects the contents of a select element's currently selected option element. selectedcontent elements can be used to declaratively show the selected option element's contents within the select element's first child button element.
func Selectedcontent(children ...htemel.Node) *SelectedcontentElement {
	node := &SelectedcontentElement{
		children:   children,
		attributes: make(selectedcontentAttrs),
	}

	return node
}

func SelectedcontentIf(condition bool, children ...htemel.Node) *SelectedcontentElement {
	if condition {
		return Selectedcontent(children...)
	}

	return &SelectedcontentElement{
		skipRender: true,
	}
}

func SelectedcontentTernary(condition bool, true htemel.Node, false htemel.Node) *SelectedcontentElement {
	if condition {
		return Selectedcontent(true)
	}

	return Selectedcontent(false)
}

type SelectedcontentAutocapitalizeEnum string

const (
	SelectedcontentAutocapitalizeEnumCharacters SelectedcontentAutocapitalizeEnum = "characters"
	SelectedcontentAutocapitalizeEnumNone       SelectedcontentAutocapitalizeEnum = "none"
	SelectedcontentAutocapitalizeEnumOff        SelectedcontentAutocapitalizeEnum = "off"
	SelectedcontentAutocapitalizeEnumOn         SelectedcontentAutocapitalizeEnum = "on"
	SelectedcontentAutocapitalizeEnumSentences  SelectedcontentAutocapitalizeEnum = "sentences"
	SelectedcontentAutocapitalizeEnumWords      SelectedcontentAutocapitalizeEnum = "words"
)

type SelectedcontentAutocorrectEnum string

const (
	SelectedcontentAutocorrectEnumOff SelectedcontentAutocorrectEnum = "off"
	SelectedcontentAutocorrectEnumOn  SelectedcontentAutocorrectEnum = "on"
)

type SelectedcontentContenteditableEnum string

const (
	SelectedcontentContenteditableEnumFalse         SelectedcontentContenteditableEnum = "false"
	SelectedcontentContenteditableEnumPlaintextOnly SelectedcontentContenteditableEnum = "plaintext-only"
	SelectedcontentContenteditableEnumTrue          SelectedcontentContenteditableEnum = "true"
)

type SelectedcontentDirEnum string

const (
	SelectedcontentDirEnumAuto SelectedcontentDirEnum = "auto"
	SelectedcontentDirEnumLtr  SelectedcontentDirEnum = "ltr"
	SelectedcontentDirEnumRtl  SelectedcontentDirEnum = "rtl"
)

type SelectedcontentDraggableEnum string

const (
	SelectedcontentDraggableEnumFalse SelectedcontentDraggableEnum = "false"
	SelectedcontentDraggableEnumTrue  SelectedcontentDraggableEnum = "true"
)

type SelectedcontentEnterkeyhintEnum string

const (
	SelectedcontentEnterkeyhintEnumSearch   SelectedcontentEnterkeyhintEnum = "search"
	SelectedcontentEnterkeyhintEnumSend     SelectedcontentEnterkeyhintEnum = "send"
	SelectedcontentEnterkeyhintEnumDone     SelectedcontentEnterkeyhintEnum = "done"
	SelectedcontentEnterkeyhintEnumEnter    SelectedcontentEnterkeyhintEnum = "enter"
	SelectedcontentEnterkeyhintEnumGo       SelectedcontentEnterkeyhintEnum = "go"
	SelectedcontentEnterkeyhintEnumNext     SelectedcontentEnterkeyhintEnum = "next"
	SelectedcontentEnterkeyhintEnumPrevious SelectedcontentEnterkeyhintEnum = "previous"
)

type SelectedcontentHiddenEnum string

const (
	SelectedcontentHiddenEnumHidden     SelectedcontentHiddenEnum = "hidden"
	SelectedcontentHiddenEnumUntilFound SelectedcontentHiddenEnum = "until-found"
	SelectedcontentHiddenEnumEmpty      SelectedcontentHiddenEnum = ""
)

type SelectedcontentInputmodeEnum string

const (
	SelectedcontentInputmodeEnumEmail   SelectedcontentInputmodeEnum = "email"
	SelectedcontentInputmodeEnumNone    SelectedcontentInputmodeEnum = "none"
	SelectedcontentInputmodeEnumNumeric SelectedcontentInputmodeEnum = "numeric"
	SelectedcontentInputmodeEnumSearch  SelectedcontentInputmodeEnum = "search"
	SelectedcontentInputmodeEnumTel     SelectedcontentInputmodeEnum = "tel"
	SelectedcontentInputmodeEnumText    SelectedcontentInputmodeEnum = "text"
	SelectedcontentInputmodeEnumUrl     SelectedcontentInputmodeEnum = "url"
	SelectedcontentInputmodeEnumDecimal SelectedcontentInputmodeEnum = "decimal"
)

type SelectedcontentSpellcheckEnum string

const (
	SelectedcontentSpellcheckEnumFalse SelectedcontentSpellcheckEnum = "false"
	SelectedcontentSpellcheckEnumTrue  SelectedcontentSpellcheckEnum = "true"
)

type SelectedcontentTranslateEnum string

const (
	SelectedcontentTranslateEnumNo  SelectedcontentTranslateEnum = "no"
	SelectedcontentTranslateEnumYes SelectedcontentTranslateEnum = "yes"
)

type SelectedcontentWritingsuggestionsEnum string

const (
	SelectedcontentWritingsuggestionsEnumFalse SelectedcontentWritingsuggestionsEnum = "false"
	SelectedcontentWritingsuggestionsEnumTrue  SelectedcontentWritingsuggestionsEnum = "true"
)

type selectedcontentAttrs map[string]any

func (e *SelectedcontentElement) Autocapitalize(a SelectedcontentAutocapitalizeEnum) *SelectedcontentElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *SelectedcontentElement) Autocorrect(a SelectedcontentAutocorrectEnum) *SelectedcontentElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *SelectedcontentElement) Autofocus(b bool) *SelectedcontentElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *SelectedcontentElement) Class(s ...string) *SelectedcontentElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *SelectedcontentElement) Contenteditable(a SelectedcontentContenteditableEnum) *SelectedcontentElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *SelectedcontentElement) Dir(a SelectedcontentDirEnum) *SelectedcontentElement {
	e.attributes["dir"] = a

	return e
}

func (e *SelectedcontentElement) Draggable(a SelectedcontentDraggableEnum) *SelectedcontentElement {
	e.attributes["draggable"] = a

	return e
}

func (e *SelectedcontentElement) Enterkeyhint(a SelectedcontentEnterkeyhintEnum) *SelectedcontentElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *SelectedcontentElement) Hidden(a SelectedcontentHiddenEnum) *SelectedcontentElement {
	e.attributes["hidden"] = a

	return e
}

func (e *SelectedcontentElement) Id(s string) *SelectedcontentElement {
	e.attributes["id"] = s

	return e
}

func (e *SelectedcontentElement) Inert(b bool) *SelectedcontentElement {
	e.attributes["inert"] = b

	return e
}

func (e *SelectedcontentElement) Inputmode(a SelectedcontentInputmodeEnum) *SelectedcontentElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *SelectedcontentElement) Itemid(s string) *SelectedcontentElement {
	e.attributes["itemid"] = s

	return e
}

func (e *SelectedcontentElement) Itemprop(s ...string) *SelectedcontentElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *SelectedcontentElement) Itemref(s ...string) *SelectedcontentElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *SelectedcontentElement) Itemscope(b bool) *SelectedcontentElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *SelectedcontentElement) Itemtype(s ...string) *SelectedcontentElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *SelectedcontentElement) Lang(s string) *SelectedcontentElement {
	e.attributes["lang"] = s

	return e
}

func (e *SelectedcontentElement) Nonce(s string) *SelectedcontentElement {
	e.attributes["nonce"] = s

	return e
}

func (e *SelectedcontentElement) Popover(s string) *SelectedcontentElement {
	e.attributes["popover"] = s

	return e
}

func (e *SelectedcontentElement) Slot(s string) *SelectedcontentElement {
	e.attributes["slot"] = s

	return e
}

func (e *SelectedcontentElement) Spellcheck(a SelectedcontentSpellcheckEnum) *SelectedcontentElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *SelectedcontentElement) Style(s string) *SelectedcontentElement {
	e.attributes["style"] = s

	return e
}

func (e *SelectedcontentElement) Tabindex(i int) *SelectedcontentElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *SelectedcontentElement) Title(s string) *SelectedcontentElement {
	e.attributes["title"] = s

	return e
}

func (e *SelectedcontentElement) Translate(a SelectedcontentTranslateEnum) *SelectedcontentElement {
	e.attributes["translate"] = a

	return e
}

func (e *SelectedcontentElement) Writingsuggestions(a SelectedcontentWritingsuggestionsEnum) *SelectedcontentElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *SelectedcontentElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<selectedcontent")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</selectedcontent>")); err != nil {
		return err
	}

	return nil
}
