// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type MetaElement struct {
	attributes metaAttrs
	children []htemel.Node
	skipRender bool
}

// Meta creates a tag <meta> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The meta element represents various kinds of metadata that cannot be expressed using the title, base, link, style, and script elements.
func Meta(children ...htemel.Node) *MetaElement {
	node := &MetaElement{
		children: children,
		attributes: make(metaAttrs),
	}

	return node
}

func MetaIf(condition bool, children ...htemel.Node) *MetaElement {
	if condition {
		return Meta(children...)
	}

	return &MetaElement{
		skipRender: true,
	}
}

type MetaAutocapitalizeAttrEnum string

const (
	MetaAutocapitalizeAttrEnumCharacters MetaAutocapitalizeAttrEnum = "characters"
	MetaAutocapitalizeAttrEnumNone MetaAutocapitalizeAttrEnum = "none"
	MetaAutocapitalizeAttrEnumOff MetaAutocapitalizeAttrEnum = "off"
	MetaAutocapitalizeAttrEnumOn MetaAutocapitalizeAttrEnum = "on"
	MetaAutocapitalizeAttrEnumSentences MetaAutocapitalizeAttrEnum = "sentences"
	MetaAutocapitalizeAttrEnumWords MetaAutocapitalizeAttrEnum = "words"
)

type MetaAutocorrectAttrEnum string

const (
	MetaAutocorrectAttrEnumOff MetaAutocorrectAttrEnum = "off"
	MetaAutocorrectAttrEnumOn MetaAutocorrectAttrEnum = "on"
)

type MetaContenteditableAttrEnum string

const (
	MetaContenteditableAttrEnumFalse MetaContenteditableAttrEnum = "false"
	MetaContenteditableAttrEnumPlaintextOnly MetaContenteditableAttrEnum = "plaintext-only"
	MetaContenteditableAttrEnumTrue MetaContenteditableAttrEnum = "true"
)

type metaAttrs map[string]any

func (e *MetaElement) Autocapitalize(a MetaAutocapitalizeAttrEnum) *MetaElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *MetaElement) Autocorrect(a MetaAutocorrectAttrEnum) *MetaElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *MetaElement) Class(s ...string) *MetaElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *MetaElement) Contenteditable(a MetaContenteditableAttrEnum) *MetaElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *MetaElement) Id(s string) *MetaElement {
	e.attributes["id"] = s
	
	return e
}

func (e *MetaElement) Slot(s string) *MetaElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *MetaElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<meta")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		w.Write([]byte(" " + key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</meta>")); err != nil {
		return err
	}

	return nil
}
