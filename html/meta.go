// Code generated by htemel. DO NOT EDIT.
package html

import (
  "github.com/derekmwright/htemel"
  "io"
)

type MetaElement struct {
	children []htemel.Node
	skipRender bool
}

// Meta creates a tag <meta> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The meta element represents various kinds of metadata that cannot be expressed using the title, base, link, style, and script elements.
func Meta(children ...htemel.Node) *MetaElement {
	node := &MetaElement{
		children: children,
	}

	return node
}

func MetaIf(condition bool, children ...htemel.Node) *MetaElement {
	if condition {
		return Meta(children...)
	}

	return &MetaElement{
		skipRender: true,
	}
}

func (e *MetaElement) Autocapitalize() *MetaElement {
	return e
}

func (e *MetaElement) Autocorrect() *MetaElement {
	return e
}

func (e *MetaElement) Autofocus() *MetaElement {
	return e
}

func (e *MetaElement) Class() *MetaElement {
	return e
}

func (e *MetaElement) Contenteditable() *MetaElement {
	return e
}

func (e *MetaElement) Id() *MetaElement {
	return e
}

func (e *MetaElement) Slot() *MetaElement {
	return e
}

func (e *MetaElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<meta")); err != nil {
		return err
	}

	// TODO: Attribute stuff here

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</meta>")); err != nil {
		return err
	}

	return nil
}
