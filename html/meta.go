// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type MetaElement struct {
	attributes metaAttrs

	skipRender bool
	indent     int
}

// Meta creates a tag <meta> instance and returns it for further modification.
//
// Spec Description: The meta element represents various kinds of metadata that cannot be expressed using the title, base, link, style, and script elements.
func Meta() *MetaElement {
	node := &MetaElement{
		attributes: make(metaAttrs),
	}

	return node
}

func MetaIf(condition bool) *MetaElement {
	if condition {
		return Meta()
	}

	return &MetaElement{
		skipRender: true,
	}
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *MetaElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *MetaElement) AddIndent(i int) {
	e.indent = i + 1
}

type MetaHttpEquivEnum string

const (
	MetaHttpEquivEnumRefresh               MetaHttpEquivEnum = "refresh"
	MetaHttpEquivEnumSetCookie             MetaHttpEquivEnum = "set-cookie"
	MetaHttpEquivEnumXUaCompatible         MetaHttpEquivEnum = "x-ua-compatible"
	MetaHttpEquivEnumContentLanguage       MetaHttpEquivEnum = "content-language"
	MetaHttpEquivEnumContentSecurityPolicy MetaHttpEquivEnum = "content-security-policy"
	MetaHttpEquivEnumContentType           MetaHttpEquivEnum = "content-type"
	MetaHttpEquivEnumDefaultStyle          MetaHttpEquivEnum = "default-style"
)

type MetaAutocapitalizeEnum string

const (
	MetaAutocapitalizeEnumSentences  MetaAutocapitalizeEnum = "sentences"
	MetaAutocapitalizeEnumWords      MetaAutocapitalizeEnum = "words"
	MetaAutocapitalizeEnumCharacters MetaAutocapitalizeEnum = "characters"
	MetaAutocapitalizeEnumNone       MetaAutocapitalizeEnum = "none"
	MetaAutocapitalizeEnumOff        MetaAutocapitalizeEnum = "off"
	MetaAutocapitalizeEnumOn         MetaAutocapitalizeEnum = "on"
)

type MetaAutocorrectEnum string

const (
	MetaAutocorrectEnumOff   MetaAutocorrectEnum = "off"
	MetaAutocorrectEnumOn    MetaAutocorrectEnum = "on"
	MetaAutocorrectEnumEmpty MetaAutocorrectEnum = ""
)

type MetaContenteditableEnum string

const (
	MetaContenteditableEnumFalse         MetaContenteditableEnum = "false"
	MetaContenteditableEnumPlaintextOnly MetaContenteditableEnum = "plaintext-only"
	MetaContenteditableEnumTrue          MetaContenteditableEnum = "true"
	MetaContenteditableEnumEmpty         MetaContenteditableEnum = ""
)

type MetaDirEnum string

const (
	MetaDirEnumLtr  MetaDirEnum = "ltr"
	MetaDirEnumRtl  MetaDirEnum = "rtl"
	MetaDirEnumAuto MetaDirEnum = "auto"
)

type MetaDraggableEnum string

const (
	MetaDraggableEnumFalse MetaDraggableEnum = "false"
	MetaDraggableEnumTrue  MetaDraggableEnum = "true"
)

type MetaEnterkeyhintEnum string

const (
	MetaEnterkeyhintEnumSearch   MetaEnterkeyhintEnum = "search"
	MetaEnterkeyhintEnumSend     MetaEnterkeyhintEnum = "send"
	MetaEnterkeyhintEnumDone     MetaEnterkeyhintEnum = "done"
	MetaEnterkeyhintEnumEnter    MetaEnterkeyhintEnum = "enter"
	MetaEnterkeyhintEnumGo       MetaEnterkeyhintEnum = "go"
	MetaEnterkeyhintEnumNext     MetaEnterkeyhintEnum = "next"
	MetaEnterkeyhintEnumPrevious MetaEnterkeyhintEnum = "previous"
)

type MetaHiddenEnum string

const (
	MetaHiddenEnumHidden     MetaHiddenEnum = "hidden"
	MetaHiddenEnumUntilFound MetaHiddenEnum = "until-found"
	MetaHiddenEnumEmpty      MetaHiddenEnum = ""
)

type MetaInputmodeEnum string

const (
	MetaInputmodeEnumDecimal MetaInputmodeEnum = "decimal"
	MetaInputmodeEnumEmail   MetaInputmodeEnum = "email"
	MetaInputmodeEnumNone    MetaInputmodeEnum = "none"
	MetaInputmodeEnumNumeric MetaInputmodeEnum = "numeric"
	MetaInputmodeEnumSearch  MetaInputmodeEnum = "search"
	MetaInputmodeEnumTel     MetaInputmodeEnum = "tel"
	MetaInputmodeEnumText    MetaInputmodeEnum = "text"
	MetaInputmodeEnumUrl     MetaInputmodeEnum = "url"
)

type MetaSpellcheckEnum string

const (
	MetaSpellcheckEnumFalse MetaSpellcheckEnum = "false"
	MetaSpellcheckEnumTrue  MetaSpellcheckEnum = "true"
	MetaSpellcheckEnumEmpty MetaSpellcheckEnum = ""
)

type MetaTranslateEnum string

const (
	MetaTranslateEnumYes   MetaTranslateEnum = "yes"
	MetaTranslateEnumNo    MetaTranslateEnum = "no"
	MetaTranslateEnumEmpty MetaTranslateEnum = ""
)

type MetaWritingsuggestionsEnum string

const (
	MetaWritingsuggestionsEnumFalse MetaWritingsuggestionsEnum = "false"
	MetaWritingsuggestionsEnumTrue  MetaWritingsuggestionsEnum = "true"
	MetaWritingsuggestionsEnumEmpty MetaWritingsuggestionsEnum = ""
)

type metaAttrs map[string]any

func (e *MetaElement) Name(s string) *MetaElement {
	e.attributes["name"] = s

	return e
}

func (e *MetaElement) HttpEquiv(a MetaHttpEquivEnum) *MetaElement {
	e.attributes["http-equiv"] = a

	return e
}

func MetaHttpEquivCustom(s string) MetaHttpEquivEnum {
	return MetaHttpEquivEnum(s)
}

func (e *MetaElement) Content(s string) *MetaElement {
	e.attributes["content"] = s

	return e
}

func (e *MetaElement) Charset(s string) *MetaElement {
	e.attributes["charset"] = s

	return e
}

func (e *MetaElement) Media(s string) *MetaElement {
	e.attributes["media"] = s

	return e
}

func (e *MetaElement) Autocapitalize(a MetaAutocapitalizeEnum) *MetaElement {
	e.attributes["autocapitalize"] = a

	return e
}

func MetaAutocapitalizeCustom(s string) MetaAutocapitalizeEnum {
	return MetaAutocapitalizeEnum(s)
}

func (e *MetaElement) Autocorrect(a MetaAutocorrectEnum) *MetaElement {
	e.attributes["autocorrect"] = a

	return e
}

func MetaAutocorrectCustom(s string) MetaAutocorrectEnum {
	return MetaAutocorrectEnum(s)
}

func (e *MetaElement) Autofocus(b bool) *MetaElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *MetaElement) Class(s ...string) *MetaElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *MetaElement) Contenteditable(a MetaContenteditableEnum) *MetaElement {
	e.attributes["contenteditable"] = a

	return e
}

func MetaContenteditableCustom(s string) MetaContenteditableEnum {
	return MetaContenteditableEnum(s)
}

func (e *MetaElement) DataUnsafe(name string, s string) *MetaElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *MetaElement) Data(name string, s string) *MetaElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *MetaElement) Dir(a MetaDirEnum) *MetaElement {
	e.attributes["dir"] = a

	return e
}

func MetaDirCustom(s string) MetaDirEnum {
	return MetaDirEnum(s)
}

func (e *MetaElement) Draggable(a MetaDraggableEnum) *MetaElement {
	e.attributes["draggable"] = a

	return e
}

func MetaDraggableCustom(s string) MetaDraggableEnum {
	return MetaDraggableEnum(s)
}

func (e *MetaElement) Enterkeyhint(a MetaEnterkeyhintEnum) *MetaElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func MetaEnterkeyhintCustom(s string) MetaEnterkeyhintEnum {
	return MetaEnterkeyhintEnum(s)
}

func (e *MetaElement) Hidden(a MetaHiddenEnum) *MetaElement {
	e.attributes["hidden"] = a

	return e
}

func MetaHiddenCustom(s string) MetaHiddenEnum {
	return MetaHiddenEnum(s)
}

func (e *MetaElement) Id(s string) *MetaElement {
	e.attributes["id"] = s

	return e
}

func (e *MetaElement) Inert(b bool) *MetaElement {
	e.attributes["inert"] = b

	return e
}

func (e *MetaElement) Inputmode(a MetaInputmodeEnum) *MetaElement {
	e.attributes["inputmode"] = a

	return e
}

func MetaInputmodeCustom(s string) MetaInputmodeEnum {
	return MetaInputmodeEnum(s)
}

func (e *MetaElement) Itemid(s string) *MetaElement {
	e.attributes["itemid"] = s

	return e
}

func (e *MetaElement) Itemprop(s ...string) *MetaElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *MetaElement) Itemref(s ...string) *MetaElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *MetaElement) Itemscope(b bool) *MetaElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *MetaElement) Itemtype(s ...string) *MetaElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *MetaElement) Lang(s string) *MetaElement {
	e.attributes["lang"] = s

	return e
}

func (e *MetaElement) Nonce(s string) *MetaElement {
	e.attributes["nonce"] = s

	return e
}

func (e *MetaElement) Popover(s string) *MetaElement {
	e.attributes["popover"] = s

	return e
}

func (e *MetaElement) Slot(s string) *MetaElement {
	e.attributes["slot"] = s

	return e
}

func (e *MetaElement) Spellcheck(a MetaSpellcheckEnum) *MetaElement {
	e.attributes["spellcheck"] = a

	return e
}

func MetaSpellcheckCustom(s string) MetaSpellcheckEnum {
	return MetaSpellcheckEnum(s)
}

func (e *MetaElement) Style(s string) *MetaElement {
	e.attributes["style"] = s

	return e
}

func (e *MetaElement) Tabindex(i int) *MetaElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *MetaElement) Title(s string) *MetaElement {
	e.attributes["title"] = s

	return e
}

func (e *MetaElement) Translate(a MetaTranslateEnum) *MetaElement {
	e.attributes["translate"] = a

	return e
}

func MetaTranslateCustom(s string) MetaTranslateEnum {
	return MetaTranslateEnum(s)
}

func (e *MetaElement) Writingsuggestions(a MetaWritingsuggestionsEnum) *MetaElement {
	e.attributes["writingsuggestions"] = a

	return e
}

func MetaWritingsuggestionsCustom(s string) MetaWritingsuggestionsEnum {
	return MetaWritingsuggestionsEnum(s)
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *MetaElement) Render(w io.Writer) error {
	indent := htemel.SetIndent(e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<meta")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}

	return nil
}
