// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type BdiElement struct {
	attributes bdiAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// Bdi creates a tag <bdi> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The bdi element represents a span of text that is to be isolated from its surroundings for the purposes of bidirectional text formatting. [BIDI]
func Bdi(children ...htemel.Node) *BdiElement {
	node := &BdiElement{
		children: children, attributes: make(bdiAttrs),
	}

	return node
}

func BdiIf(condition bool, children ...htemel.Node) *BdiElement {
	if condition {
		return Bdi(children...)
	}

	return &BdiElement{
		skipRender: true,
	}
}

func BdiTernary(condition bool, true htemel.Node, false htemel.Node) *BdiElement {
	if condition {
		return Bdi(true)
	}

	return Bdi(false)
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *BdiElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *BdiElement) AddIndent(i int) {
	e.indent = i + 1
}

type BdiAutocapitalizeEnum string

const (
	BdiAutocapitalizeEnumCharacters BdiAutocapitalizeEnum = "characters"
	BdiAutocapitalizeEnumNone       BdiAutocapitalizeEnum = "none"
	BdiAutocapitalizeEnumOff        BdiAutocapitalizeEnum = "off"
	BdiAutocapitalizeEnumOn         BdiAutocapitalizeEnum = "on"
	BdiAutocapitalizeEnumSentences  BdiAutocapitalizeEnum = "sentences"
	BdiAutocapitalizeEnumWords      BdiAutocapitalizeEnum = "words"
)

type BdiAutocorrectEnum string

const (
	BdiAutocorrectEnumOff   BdiAutocorrectEnum = "off"
	BdiAutocorrectEnumOn    BdiAutocorrectEnum = "on"
	BdiAutocorrectEnumEmpty BdiAutocorrectEnum = ""
)

type BdiContenteditableEnum string

const (
	BdiContenteditableEnumFalse         BdiContenteditableEnum = "false"
	BdiContenteditableEnumPlaintextOnly BdiContenteditableEnum = "plaintext-only"
	BdiContenteditableEnumTrue          BdiContenteditableEnum = "true"
	BdiContenteditableEnumEmpty         BdiContenteditableEnum = ""
)

type BdiDirEnum string

const (
	BdiDirEnumAuto BdiDirEnum = "auto"
	BdiDirEnumLtr  BdiDirEnum = "ltr"
	BdiDirEnumRtl  BdiDirEnum = "rtl"
)

type BdiDraggableEnum string

const (
	BdiDraggableEnumFalse BdiDraggableEnum = "false"
	BdiDraggableEnumTrue  BdiDraggableEnum = "true"
)

type BdiEnterkeyhintEnum string

const (
	BdiEnterkeyhintEnumDone     BdiEnterkeyhintEnum = "done"
	BdiEnterkeyhintEnumEnter    BdiEnterkeyhintEnum = "enter"
	BdiEnterkeyhintEnumGo       BdiEnterkeyhintEnum = "go"
	BdiEnterkeyhintEnumNext     BdiEnterkeyhintEnum = "next"
	BdiEnterkeyhintEnumPrevious BdiEnterkeyhintEnum = "previous"
	BdiEnterkeyhintEnumSearch   BdiEnterkeyhintEnum = "search"
	BdiEnterkeyhintEnumSend     BdiEnterkeyhintEnum = "send"
)

type BdiHiddenEnum string

const (
	BdiHiddenEnumHidden     BdiHiddenEnum = "hidden"
	BdiHiddenEnumUntilFound BdiHiddenEnum = "until-found"
	BdiHiddenEnumEmpty      BdiHiddenEnum = ""
)

type BdiInputmodeEnum string

const (
	BdiInputmodeEnumNumeric BdiInputmodeEnum = "numeric"
	BdiInputmodeEnumSearch  BdiInputmodeEnum = "search"
	BdiInputmodeEnumTel     BdiInputmodeEnum = "tel"
	BdiInputmodeEnumText    BdiInputmodeEnum = "text"
	BdiInputmodeEnumUrl     BdiInputmodeEnum = "url"
	BdiInputmodeEnumDecimal BdiInputmodeEnum = "decimal"
	BdiInputmodeEnumEmail   BdiInputmodeEnum = "email"
	BdiInputmodeEnumNone    BdiInputmodeEnum = "none"
)

type BdiSpellcheckEnum string

const (
	BdiSpellcheckEnumFalse BdiSpellcheckEnum = "false"
	BdiSpellcheckEnumTrue  BdiSpellcheckEnum = "true"
	BdiSpellcheckEnumEmpty BdiSpellcheckEnum = ""
)

type BdiTranslateEnum string

const (
	BdiTranslateEnumNo    BdiTranslateEnum = "no"
	BdiTranslateEnumYes   BdiTranslateEnum = "yes"
	BdiTranslateEnumEmpty BdiTranslateEnum = ""
)

type BdiWritingsuggestionsEnum string

const (
	BdiWritingsuggestionsEnumFalse BdiWritingsuggestionsEnum = "false"
	BdiWritingsuggestionsEnumTrue  BdiWritingsuggestionsEnum = "true"
	BdiWritingsuggestionsEnumEmpty BdiWritingsuggestionsEnum = ""
)

type bdiAttrs map[string]any

func (e *BdiElement) Autocapitalize(a BdiAutocapitalizeEnum) *BdiElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *BdiElement) Autocorrect(a BdiAutocorrectEnum) *BdiElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *BdiElement) Autofocus(b bool) *BdiElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *BdiElement) Class(s ...string) *BdiElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *BdiElement) Contenteditable(a BdiContenteditableEnum) *BdiElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *BdiElement) DataUnsafe(name string, s string) *BdiElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *BdiElement) Data(name string, s string) *BdiElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *BdiElement) Dir(a BdiDirEnum) *BdiElement {
	e.attributes["dir"] = a

	return e
}

func (e *BdiElement) Draggable(a BdiDraggableEnum) *BdiElement {
	e.attributes["draggable"] = a

	return e
}

func (e *BdiElement) Enterkeyhint(a BdiEnterkeyhintEnum) *BdiElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *BdiElement) Hidden(a BdiHiddenEnum) *BdiElement {
	e.attributes["hidden"] = a

	return e
}

func (e *BdiElement) Id(s string) *BdiElement {
	e.attributes["id"] = s

	return e
}

func (e *BdiElement) Inert(b bool) *BdiElement {
	e.attributes["inert"] = b

	return e
}

func (e *BdiElement) Inputmode(a BdiInputmodeEnum) *BdiElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *BdiElement) Itemid(s string) *BdiElement {
	e.attributes["itemid"] = s

	return e
}

func (e *BdiElement) Itemprop(s ...string) *BdiElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *BdiElement) Itemref(s ...string) *BdiElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *BdiElement) Itemscope(b bool) *BdiElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *BdiElement) Itemtype(s ...string) *BdiElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *BdiElement) Lang(s string) *BdiElement {
	e.attributes["lang"] = s

	return e
}

func (e *BdiElement) Nonce(s string) *BdiElement {
	e.attributes["nonce"] = s

	return e
}

func (e *BdiElement) Popover(s string) *BdiElement {
	e.attributes["popover"] = s

	return e
}

func (e *BdiElement) Slot(s string) *BdiElement {
	e.attributes["slot"] = s

	return e
}

func (e *BdiElement) Spellcheck(a BdiSpellcheckEnum) *BdiElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *BdiElement) Style(s string) *BdiElement {
	e.attributes["style"] = s

	return e
}

func (e *BdiElement) Tabindex(i int) *BdiElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *BdiElement) Title(s string) *BdiElement {
	e.attributes["title"] = s

	return e
}

func (e *BdiElement) Translate(a BdiTranslateEnum) *BdiElement {
	e.attributes["translate"] = a

	return e
}

func (e *BdiElement) Writingsuggestions(a BdiWritingsuggestionsEnum) *BdiElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *BdiElement) Render(w io.Writer) error {
	indent := htemel.SetIndent(e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<bdi")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}
	for _, child := range e.children {
		child.AddIndent(e.Indent())
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(indent + "</bdi>\n")); err != nil {
		return err
	}

	return nil
}
