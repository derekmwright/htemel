// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type BdiElement struct {
	attributes bdiAttrs
	children   []htemel.Node
	skipRender bool
}

// Bdi creates a tag <bdi> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The bdi element represents a span of text that is to be isolated from its surroundings for the purposes of bidirectional text formatting. [BIDI]
func Bdi(children ...htemel.Node) *BdiElement {
	node := &BdiElement{
		children:   children,
		attributes: make(bdiAttrs),
	}

	return node
}

func BdiIf(condition bool, children ...htemel.Node) *BdiElement {
	if condition {
		return Bdi(children...)
	}

	return &BdiElement{
		skipRender: true,
	}
}

type BdiAutocapitalizeAttrEnum string

const (
	BdiAutocapitalizeAttrEnumWords      BdiAutocapitalizeAttrEnum = "words"
	BdiAutocapitalizeAttrEnumCharacters BdiAutocapitalizeAttrEnum = "characters"
	BdiAutocapitalizeAttrEnumNone       BdiAutocapitalizeAttrEnum = "none"
	BdiAutocapitalizeAttrEnumOff        BdiAutocapitalizeAttrEnum = "off"
	BdiAutocapitalizeAttrEnumOn         BdiAutocapitalizeAttrEnum = "on"
	BdiAutocapitalizeAttrEnumSentences  BdiAutocapitalizeAttrEnum = "sentences"
)

type BdiAutocorrectAttrEnum string

const (
	BdiAutocorrectAttrEnumOff BdiAutocorrectAttrEnum = "off"
	BdiAutocorrectAttrEnumOn  BdiAutocorrectAttrEnum = "on"
)

type BdiContenteditableAttrEnum string

const (
	BdiContenteditableAttrEnumFalse         BdiContenteditableAttrEnum = "false"
	BdiContenteditableAttrEnumPlaintextOnly BdiContenteditableAttrEnum = "plaintext-only"
	BdiContenteditableAttrEnumTrue          BdiContenteditableAttrEnum = "true"
)

type bdiAttrs map[string]any

func (e *BdiElement) Autocapitalize(a BdiAutocapitalizeAttrEnum) *BdiElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *BdiElement) Autocorrect(a BdiAutocorrectAttrEnum) *BdiElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *BdiElement) Autofocus(b bool) *BdiElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *BdiElement) Class(s ...string) *BdiElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *BdiElement) Contenteditable(a BdiContenteditableAttrEnum) *BdiElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *BdiElement) Id(s string) *BdiElement {
	e.attributes["id"] = s

	return e
}

func (e *BdiElement) Slot(s string) *BdiElement {
	e.attributes["slot"] = s

	return e
}

func (e *BdiElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<bdi")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		w.Write([]byte(" " + key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</bdi>")); err != nil {
		return err
	}

	return nil
}
