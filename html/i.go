// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type IElement struct {
	attributes iAttrs
	children   []htemel.Node
	skipRender bool
}

// I creates a tag <i> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The i element represents a span of text in an alternate voice or mood, or otherwise offset from the normal prose in a manner indicating a different quality of text, such as a taxonomic designation, a technical term, an idiomatic phrase from another language, transliteration, a thought, or a ship name in Western texts.
func I(children ...htemel.Node) *IElement {
	node := &IElement{
		children:   children,
		attributes: make(iAttrs),
	}

	return node
}

func IIf(condition bool, children ...htemel.Node) *IElement {
	if condition {
		return I(children...)
	}

	return &IElement{
		skipRender: true,
	}
}

type IAutocapitalizeAttrEnum string

const (
	IAutocapitalizeAttrEnumCharacters IAutocapitalizeAttrEnum = "characters"
	IAutocapitalizeAttrEnumNone       IAutocapitalizeAttrEnum = "none"
	IAutocapitalizeAttrEnumOff        IAutocapitalizeAttrEnum = "off"
	IAutocapitalizeAttrEnumOn         IAutocapitalizeAttrEnum = "on"
	IAutocapitalizeAttrEnumSentences  IAutocapitalizeAttrEnum = "sentences"
	IAutocapitalizeAttrEnumWords      IAutocapitalizeAttrEnum = "words"
)

type IAutocorrectAttrEnum string

const (
	IAutocorrectAttrEnumOff IAutocorrectAttrEnum = "off"
	IAutocorrectAttrEnumOn  IAutocorrectAttrEnum = "on"
)

type IContenteditableAttrEnum string

const (
	IContenteditableAttrEnumFalse         IContenteditableAttrEnum = "false"
	IContenteditableAttrEnumPlaintextOnly IContenteditableAttrEnum = "plaintext-only"
	IContenteditableAttrEnumTrue          IContenteditableAttrEnum = "true"
)

type iAttrs map[string]any

func (e *IElement) Autocapitalize(a IAutocapitalizeAttrEnum) *IElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *IElement) Autocorrect(a IAutocorrectAttrEnum) *IElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *IElement) Autofocus(b bool) *IElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *IElement) Class(s ...string) *IElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *IElement) Contenteditable(a IContenteditableAttrEnum) *IElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *IElement) Id(s string) *IElement {
	e.attributes["id"] = s

	return e
}

func (e *IElement) Slot(s string) *IElement {
	e.attributes["slot"] = s

	return e
}

func (e *IElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<i")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		w.Write([]byte(" " + key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</i>")); err != nil {
		return err
	}

	return nil
}
