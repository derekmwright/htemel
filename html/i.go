// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type IElement struct {
	attributes iAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// I creates a tag <i> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The i element represents a span of text in an alternate voice or mood, or otherwise offset from the normal prose in a manner indicating a different quality of text, such as a taxonomic designation, a technical term, an idiomatic phrase from another language, transliteration, a thought, or a ship name in Western texts.
func I(children ...htemel.Node) *IElement {
	node := &IElement{
		children: children, attributes: make(iAttrs),
	}

	return node
}

func IIf(condition bool, children ...htemel.Node) *IElement {
	if condition {
		return I(children...)
	}

	return &IElement{
		skipRender: true,
	}
}

func ITernary(condition bool, true htemel.Node, false htemel.Node) *IElement {
	if condition {
		return I(true)
	}

	return I(false)
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *IElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *IElement) AddIndent(i int) {
	e.indent = i + 1
}

type IAutocapitalizeEnum string

const (
	IAutocapitalizeEnumCharacters IAutocapitalizeEnum = "characters"
	IAutocapitalizeEnumNone       IAutocapitalizeEnum = "none"
	IAutocapitalizeEnumOff        IAutocapitalizeEnum = "off"
	IAutocapitalizeEnumOn         IAutocapitalizeEnum = "on"
	IAutocapitalizeEnumSentences  IAutocapitalizeEnum = "sentences"
	IAutocapitalizeEnumWords      IAutocapitalizeEnum = "words"
)

type IAutocorrectEnum string

const (
	IAutocorrectEnumOff   IAutocorrectEnum = "off"
	IAutocorrectEnumOn    IAutocorrectEnum = "on"
	IAutocorrectEnumEmpty IAutocorrectEnum = ""
)

type IContenteditableEnum string

const (
	IContenteditableEnumFalse         IContenteditableEnum = "false"
	IContenteditableEnumPlaintextOnly IContenteditableEnum = "plaintext-only"
	IContenteditableEnumTrue          IContenteditableEnum = "true"
	IContenteditableEnumEmpty         IContenteditableEnum = ""
)

type IDirEnum string

const (
	IDirEnumAuto IDirEnum = "auto"
	IDirEnumLtr  IDirEnum = "ltr"
	IDirEnumRtl  IDirEnum = "rtl"
)

type IDraggableEnum string

const (
	IDraggableEnumFalse IDraggableEnum = "false"
	IDraggableEnumTrue  IDraggableEnum = "true"
)

type IEnterkeyhintEnum string

const (
	IEnterkeyhintEnumSearch   IEnterkeyhintEnum = "search"
	IEnterkeyhintEnumSend     IEnterkeyhintEnum = "send"
	IEnterkeyhintEnumDone     IEnterkeyhintEnum = "done"
	IEnterkeyhintEnumEnter    IEnterkeyhintEnum = "enter"
	IEnterkeyhintEnumGo       IEnterkeyhintEnum = "go"
	IEnterkeyhintEnumNext     IEnterkeyhintEnum = "next"
	IEnterkeyhintEnumPrevious IEnterkeyhintEnum = "previous"
)

type IHiddenEnum string

const (
	IHiddenEnumHidden     IHiddenEnum = "hidden"
	IHiddenEnumUntilFound IHiddenEnum = "until-found"
	IHiddenEnumEmpty      IHiddenEnum = ""
)

type IInputmodeEnum string

const (
	IInputmodeEnumText    IInputmodeEnum = "text"
	IInputmodeEnumUrl     IInputmodeEnum = "url"
	IInputmodeEnumDecimal IInputmodeEnum = "decimal"
	IInputmodeEnumEmail   IInputmodeEnum = "email"
	IInputmodeEnumNone    IInputmodeEnum = "none"
	IInputmodeEnumNumeric IInputmodeEnum = "numeric"
	IInputmodeEnumSearch  IInputmodeEnum = "search"
	IInputmodeEnumTel     IInputmodeEnum = "tel"
)

type ISpellcheckEnum string

const (
	ISpellcheckEnumFalse ISpellcheckEnum = "false"
	ISpellcheckEnumTrue  ISpellcheckEnum = "true"
	ISpellcheckEnumEmpty ISpellcheckEnum = ""
)

type ITranslateEnum string

const (
	ITranslateEnumNo    ITranslateEnum = "no"
	ITranslateEnumYes   ITranslateEnum = "yes"
	ITranslateEnumEmpty ITranslateEnum = ""
)

type IWritingsuggestionsEnum string

const (
	IWritingsuggestionsEnumFalse IWritingsuggestionsEnum = "false"
	IWritingsuggestionsEnumTrue  IWritingsuggestionsEnum = "true"
	IWritingsuggestionsEnumEmpty IWritingsuggestionsEnum = ""
)

type iAttrs map[string]any

func (e *IElement) Autocapitalize(a IAutocapitalizeEnum) *IElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *IElement) Autocorrect(a IAutocorrectEnum) *IElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *IElement) Autofocus(b bool) *IElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *IElement) Class(s ...string) *IElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *IElement) Contenteditable(a IContenteditableEnum) *IElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *IElement) DataUnsafe(name string, s string) *IElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *IElement) Data(name string, s string) *IElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *IElement) Dir(a IDirEnum) *IElement {
	e.attributes["dir"] = a

	return e
}

func (e *IElement) Draggable(a IDraggableEnum) *IElement {
	e.attributes["draggable"] = a

	return e
}

func (e *IElement) Enterkeyhint(a IEnterkeyhintEnum) *IElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *IElement) Hidden(a IHiddenEnum) *IElement {
	e.attributes["hidden"] = a

	return e
}

func (e *IElement) Id(s string) *IElement {
	e.attributes["id"] = s

	return e
}

func (e *IElement) Inert(b bool) *IElement {
	e.attributes["inert"] = b

	return e
}

func (e *IElement) Inputmode(a IInputmodeEnum) *IElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *IElement) Itemid(s string) *IElement {
	e.attributes["itemid"] = s

	return e
}

func (e *IElement) Itemprop(s ...string) *IElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *IElement) Itemref(s ...string) *IElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *IElement) Itemscope(b bool) *IElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *IElement) Itemtype(s ...string) *IElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *IElement) Lang(s string) *IElement {
	e.attributes["lang"] = s

	return e
}

func (e *IElement) Nonce(s string) *IElement {
	e.attributes["nonce"] = s

	return e
}

func (e *IElement) Popover(s string) *IElement {
	e.attributes["popover"] = s

	return e
}

func (e *IElement) Slot(s string) *IElement {
	e.attributes["slot"] = s

	return e
}

func (e *IElement) Spellcheck(a ISpellcheckEnum) *IElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *IElement) Style(s string) *IElement {
	e.attributes["style"] = s

	return e
}

func (e *IElement) Tabindex(i int) *IElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *IElement) Title(s string) *IElement {
	e.attributes["title"] = s

	return e
}

func (e *IElement) Translate(a ITranslateEnum) *IElement {
	e.attributes["translate"] = a

	return e
}

func (e *IElement) Writingsuggestions(a IWritingsuggestionsEnum) *IElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *IElement) Render(w io.Writer) error {
	indent := htemel.SetIndent(e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<i")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}
	for _, child := range e.children {
		child.AddIndent(e.Indent())
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(indent + "</i>\n")); err != nil {
		return err
	}

	return nil
}
