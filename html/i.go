// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type IElement struct {
	attributes iAttrs
	children []htemel.Node
	skipRender bool
}

// I creates a tag <i> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The i element represents a span of text in an alternate voice or mood, or otherwise offset from the normal prose in a manner indicating a different quality of text, such as a taxonomic designation, a technical term, an idiomatic phrase from another language, transliteration, a thought, or a ship name in Western texts.
func I(children ...htemel.Node) *IElement {
	node := &IElement{
		children: children,
		attributes: make(iAttrs),
	}

	return node
}

func IIf(condition bool, children ...htemel.Node) *IElement {
	if condition {
		return I(children...)
	}

	return &IElement{
		skipRender: true,
	}
}

type IAutocapitalizeEnum string

const (
	IAutocapitalizeEnumCharacters IAutocapitalizeEnum = "characters"
	IAutocapitalizeEnumNone IAutocapitalizeEnum = "none"
	IAutocapitalizeEnumOff IAutocapitalizeEnum = "off"
	IAutocapitalizeEnumOn IAutocapitalizeEnum = "on"
	IAutocapitalizeEnumSentences IAutocapitalizeEnum = "sentences"
	IAutocapitalizeEnumWords IAutocapitalizeEnum = "words"
)

type IAutocorrectEnum string

const (
	IAutocorrectEnumOff IAutocorrectEnum = "off"
	IAutocorrectEnumOn IAutocorrectEnum = "on"
)

type IContenteditableEnum string

const (
	IContenteditableEnumFalse IContenteditableEnum = "false"
	IContenteditableEnumPlaintextOnly IContenteditableEnum = "plaintext-only"
	IContenteditableEnumTrue IContenteditableEnum = "true"
)

type IDirEnum string

const (
	IDirEnumAuto IDirEnum = "auto"
	IDirEnumLtr IDirEnum = "ltr"
	IDirEnumRtl IDirEnum = "rtl"
)

type IDraggableEnum string

const (
	IDraggableEnumTrue IDraggableEnum = "true"
	IDraggableEnumFalse IDraggableEnum = "false"
)

type IEnterkeyhintEnum string

const (
	IEnterkeyhintEnumEnter IEnterkeyhintEnum = "enter"
	IEnterkeyhintEnumGo IEnterkeyhintEnum = "go"
	IEnterkeyhintEnumNext IEnterkeyhintEnum = "next"
	IEnterkeyhintEnumPrevious IEnterkeyhintEnum = "previous"
	IEnterkeyhintEnumSearch IEnterkeyhintEnum = "search"
	IEnterkeyhintEnumSend IEnterkeyhintEnum = "send"
	IEnterkeyhintEnumDone IEnterkeyhintEnum = "done"
)

type IHiddenEnum string

const (
	IHiddenEnumHidden IHiddenEnum = "hidden"
	IHiddenEnumUntilFound IHiddenEnum = "until-found"
)

type iAttrs map[string]any

func (e *IElement) Autocapitalize(a IAutocapitalizeEnum) *IElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *IElement) Autocorrect(a IAutocorrectEnum) *IElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *IElement) Autofocus(b bool) *IElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *IElement) Class(s ...string) *IElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *IElement) Contenteditable(a IContenteditableEnum) *IElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *IElement) Dir(a IDirEnum) *IElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *IElement) Draggable(a IDraggableEnum) *IElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *IElement) Enterkeyhint(a IEnterkeyhintEnum) *IElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *IElement) Hidden(a IHiddenEnum) *IElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *IElement) Id(s string) *IElement {
	e.attributes["id"] = s
	
	return e
}

func (e *IElement) Slot(s string) *IElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *IElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<i")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</i>")); err != nil {
		return err
	}

	return nil
}
