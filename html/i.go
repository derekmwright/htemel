// Code generated by htemel. DO NOT EDIT.
package html

import (
  "github.com/derekmwright/htemel"
  "io"
)

type IElement struct {
	children []htemel.Node
	skipRender bool
}

// I creates a tag <i> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The i element represents a span of text in an alternate voice or mood, or otherwise offset from the normal prose in a manner indicating a different quality of text, such as a taxonomic designation, a technical term, an idiomatic phrase from another language, transliteration, a thought, or a ship name in Western texts.
func I(children ...htemel.Node) *IElement {
	node := &IElement{
		children: children,
	}

	return node
}

func IIf(condition bool, children ...htemel.Node) *IElement {
	if condition {
		return I(children...)
	}

	return &IElement{
		skipRender: true,
	}
}

func (e *IElement) Autocapitalize() *IElement {
	return e
}

func (e *IElement) Autocorrect() *IElement {
	return e
}

func (e *IElement) Autofocus() *IElement {
	return e
}

func (e *IElement) Class() *IElement {
	return e
}

func (e *IElement) Contenteditable() *IElement {
	return e
}

func (e *IElement) Id() *IElement {
	return e
}

func (e *IElement) Slot() *IElement {
	return e
}

func (e *IElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<i")); err != nil {
		return err
	}

	// TODO: Attribute stuff here

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</i>")); err != nil {
		return err
	}

	return nil
}
