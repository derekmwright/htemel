// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type PictureElement struct {
	attributes pictureAttrs
	children   []htemel.Node
	skipRender bool
}

// Picture creates a tag <picture> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The picture element is a container which provides multiple sources to its contained img element to allow authors to declaratively control or give hints to the user agent about which image resource to use, based on the screen pixel density, viewport size, image format, and other factors. It represents its children.
func Picture(children ...htemel.Node) *PictureElement {
	node := &PictureElement{
		children:   children,
		attributes: make(pictureAttrs),
	}

	return node
}

func PictureIf(condition bool, children ...htemel.Node) *PictureElement {
	if condition {
		return Picture(children...)
	}

	return &PictureElement{
		skipRender: true,
	}
}

type PictureAutocapitalizeAttrEnum string

const (
	PictureAutocapitalizeAttrEnumCharacters PictureAutocapitalizeAttrEnum = "characters"
	PictureAutocapitalizeAttrEnumNone       PictureAutocapitalizeAttrEnum = "none"
	PictureAutocapitalizeAttrEnumOff        PictureAutocapitalizeAttrEnum = "off"
	PictureAutocapitalizeAttrEnumOn         PictureAutocapitalizeAttrEnum = "on"
	PictureAutocapitalizeAttrEnumSentences  PictureAutocapitalizeAttrEnum = "sentences"
	PictureAutocapitalizeAttrEnumWords      PictureAutocapitalizeAttrEnum = "words"
)

type PictureAutocorrectAttrEnum string

const (
	PictureAutocorrectAttrEnumOff PictureAutocorrectAttrEnum = "off"
	PictureAutocorrectAttrEnumOn  PictureAutocorrectAttrEnum = "on"
)

type PictureContenteditableAttrEnum string

const (
	PictureContenteditableAttrEnumFalse         PictureContenteditableAttrEnum = "false"
	PictureContenteditableAttrEnumPlaintextOnly PictureContenteditableAttrEnum = "plaintext-only"
	PictureContenteditableAttrEnumTrue          PictureContenteditableAttrEnum = "true"
)

type pictureAttrs map[string]any

func (e *PictureElement) Autocapitalize(a PictureAutocapitalizeAttrEnum) *PictureElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *PictureElement) Autocorrect(a PictureAutocorrectAttrEnum) *PictureElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *PictureElement) Autofocus(b bool) *PictureElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *PictureElement) Class(s ...string) *PictureElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *PictureElement) Contenteditable(a PictureContenteditableAttrEnum) *PictureElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *PictureElement) Id(s string) *PictureElement {
	e.attributes["id"] = s

	return e
}

func (e *PictureElement) Slot(s string) *PictureElement {
	e.attributes["slot"] = s

	return e
}

func (e *PictureElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<picture")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		w.Write([]byte(" " + key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</picture>")); err != nil {
		return err
	}

	return nil
}
