// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type PictureElement struct {
	attributes pictureAttrs
	children   []htemel.Node
	skipRender bool
}

// Picture creates a tag <picture> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The picture element is a container which provides multiple sources to its contained img element to allow authors to declaratively control or give hints to the user agent about which image resource to use, based on the screen pixel density, viewport size, image format, and other factors. It represents its children.
func Picture(children ...htemel.Node) *PictureElement {
	node := &PictureElement{
		children: children, attributes: make(pictureAttrs),
	}

	return node
}

func PictureIf(condition bool, children ...htemel.Node) *PictureElement {
	if condition {
		return Picture(children...)
	}

	return &PictureElement{
		skipRender: true,
	}
}

func PictureTernary(condition bool, true htemel.Node, false htemel.Node) *PictureElement {
	if condition {
		return Picture(true)
	}

	return Picture(false)
}

type PictureAutocapitalizeEnum string

const (
	PictureAutocapitalizeEnumCharacters PictureAutocapitalizeEnum = "characters"
	PictureAutocapitalizeEnumNone       PictureAutocapitalizeEnum = "none"
	PictureAutocapitalizeEnumOff        PictureAutocapitalizeEnum = "off"
	PictureAutocapitalizeEnumOn         PictureAutocapitalizeEnum = "on"
	PictureAutocapitalizeEnumSentences  PictureAutocapitalizeEnum = "sentences"
	PictureAutocapitalizeEnumWords      PictureAutocapitalizeEnum = "words"
)

type PictureAutocorrectEnum string

const (
	PictureAutocorrectEnumOff   PictureAutocorrectEnum = "off"
	PictureAutocorrectEnumOn    PictureAutocorrectEnum = "on"
	PictureAutocorrectEnumEmpty PictureAutocorrectEnum = ""
)

type PictureContenteditableEnum string

const (
	PictureContenteditableEnumFalse         PictureContenteditableEnum = "false"
	PictureContenteditableEnumPlaintextOnly PictureContenteditableEnum = "plaintext-only"
	PictureContenteditableEnumTrue          PictureContenteditableEnum = "true"
	PictureContenteditableEnumEmpty         PictureContenteditableEnum = ""
)

type PictureDirEnum string

const (
	PictureDirEnumAuto PictureDirEnum = "auto"
	PictureDirEnumLtr  PictureDirEnum = "ltr"
	PictureDirEnumRtl  PictureDirEnum = "rtl"
)

type PictureDraggableEnum string

const (
	PictureDraggableEnumFalse PictureDraggableEnum = "false"
	PictureDraggableEnumTrue  PictureDraggableEnum = "true"
)

type PictureEnterkeyhintEnum string

const (
	PictureEnterkeyhintEnumSend     PictureEnterkeyhintEnum = "send"
	PictureEnterkeyhintEnumDone     PictureEnterkeyhintEnum = "done"
	PictureEnterkeyhintEnumEnter    PictureEnterkeyhintEnum = "enter"
	PictureEnterkeyhintEnumGo       PictureEnterkeyhintEnum = "go"
	PictureEnterkeyhintEnumNext     PictureEnterkeyhintEnum = "next"
	PictureEnterkeyhintEnumPrevious PictureEnterkeyhintEnum = "previous"
	PictureEnterkeyhintEnumSearch   PictureEnterkeyhintEnum = "search"
)

type PictureHiddenEnum string

const (
	PictureHiddenEnumHidden     PictureHiddenEnum = "hidden"
	PictureHiddenEnumUntilFound PictureHiddenEnum = "until-found"
	PictureHiddenEnumEmpty      PictureHiddenEnum = ""
)

type PictureInputmodeEnum string

const (
	PictureInputmodeEnumNumeric PictureInputmodeEnum = "numeric"
	PictureInputmodeEnumSearch  PictureInputmodeEnum = "search"
	PictureInputmodeEnumTel     PictureInputmodeEnum = "tel"
	PictureInputmodeEnumText    PictureInputmodeEnum = "text"
	PictureInputmodeEnumUrl     PictureInputmodeEnum = "url"
	PictureInputmodeEnumDecimal PictureInputmodeEnum = "decimal"
	PictureInputmodeEnumEmail   PictureInputmodeEnum = "email"
	PictureInputmodeEnumNone    PictureInputmodeEnum = "none"
)

type PictureSpellcheckEnum string

const (
	PictureSpellcheckEnumFalse PictureSpellcheckEnum = "false"
	PictureSpellcheckEnumTrue  PictureSpellcheckEnum = "true"
	PictureSpellcheckEnumEmpty PictureSpellcheckEnum = ""
)

type PictureTranslateEnum string

const (
	PictureTranslateEnumNo    PictureTranslateEnum = "no"
	PictureTranslateEnumYes   PictureTranslateEnum = "yes"
	PictureTranslateEnumEmpty PictureTranslateEnum = ""
)

type PictureWritingsuggestionsEnum string

const (
	PictureWritingsuggestionsEnumFalse PictureWritingsuggestionsEnum = "false"
	PictureWritingsuggestionsEnumTrue  PictureWritingsuggestionsEnum = "true"
	PictureWritingsuggestionsEnumEmpty PictureWritingsuggestionsEnum = ""
)

type pictureAttrs map[string]any

func (e *PictureElement) Autocapitalize(a PictureAutocapitalizeEnum) *PictureElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *PictureElement) Autocorrect(a PictureAutocorrectEnum) *PictureElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *PictureElement) Autofocus(b bool) *PictureElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *PictureElement) Class(s ...string) *PictureElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *PictureElement) Contenteditable(a PictureContenteditableEnum) *PictureElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *PictureElement) DataUnsafe(name string, s string) *PictureElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *PictureElement) Data(name string, s string) *PictureElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *PictureElement) Dir(a PictureDirEnum) *PictureElement {
	e.attributes["dir"] = a

	return e
}

func (e *PictureElement) Draggable(a PictureDraggableEnum) *PictureElement {
	e.attributes["draggable"] = a

	return e
}

func (e *PictureElement) Enterkeyhint(a PictureEnterkeyhintEnum) *PictureElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *PictureElement) Hidden(a PictureHiddenEnum) *PictureElement {
	e.attributes["hidden"] = a

	return e
}

func (e *PictureElement) Id(s string) *PictureElement {
	e.attributes["id"] = s

	return e
}

func (e *PictureElement) Inert(b bool) *PictureElement {
	e.attributes["inert"] = b

	return e
}

func (e *PictureElement) Inputmode(a PictureInputmodeEnum) *PictureElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *PictureElement) Itemid(s string) *PictureElement {
	e.attributes["itemid"] = s

	return e
}

func (e *PictureElement) Itemprop(s ...string) *PictureElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *PictureElement) Itemref(s ...string) *PictureElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *PictureElement) Itemscope(b bool) *PictureElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *PictureElement) Itemtype(s ...string) *PictureElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *PictureElement) Lang(s string) *PictureElement {
	e.attributes["lang"] = s

	return e
}

func (e *PictureElement) Nonce(s string) *PictureElement {
	e.attributes["nonce"] = s

	return e
}

func (e *PictureElement) Popover(s string) *PictureElement {
	e.attributes["popover"] = s

	return e
}

func (e *PictureElement) Slot(s string) *PictureElement {
	e.attributes["slot"] = s

	return e
}

func (e *PictureElement) Spellcheck(a PictureSpellcheckEnum) *PictureElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *PictureElement) Style(s string) *PictureElement {
	e.attributes["style"] = s

	return e
}

func (e *PictureElement) Tabindex(i int) *PictureElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *PictureElement) Title(s string) *PictureElement {
	e.attributes["title"] = s

	return e
}

func (e *PictureElement) Translate(a PictureTranslateEnum) *PictureElement {
	e.attributes["translate"] = a

	return e
}

func (e *PictureElement) Writingsuggestions(a PictureWritingsuggestionsEnum) *PictureElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *PictureElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<picture")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}
	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</picture>")); err != nil {
		return err
	}

	return nil
}
