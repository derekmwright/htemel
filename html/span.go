// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type SpanElement struct {
	attributes spanAttrs
	children []htemel.Node
	skipRender bool
}

// Span creates a tag <span> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The span element doesn't mean anything on its own, but can be useful when used together with the global attributes, e.g. class, lang, or dir. It represents its children.
func Span(children ...htemel.Node) *SpanElement {
	node := &SpanElement{
		children: children,
		attributes: make(spanAttrs),
	}

	return node
}

func SpanIf(condition bool, children ...htemel.Node) *SpanElement {
	if condition {
		return Span(children...)
	}

	return &SpanElement{
		skipRender: true,
	}
}

type SpanAutocapitalizeAttrEnum string

const (
	SpanAutocapitalizeAttrEnumSentences SpanAutocapitalizeAttrEnum = "sentences"
	SpanAutocapitalizeAttrEnumWords SpanAutocapitalizeAttrEnum = "words"
	SpanAutocapitalizeAttrEnumCharacters SpanAutocapitalizeAttrEnum = "characters"
	SpanAutocapitalizeAttrEnumNone SpanAutocapitalizeAttrEnum = "none"
	SpanAutocapitalizeAttrEnumOff SpanAutocapitalizeAttrEnum = "off"
	SpanAutocapitalizeAttrEnumOn SpanAutocapitalizeAttrEnum = "on"
)

type SpanAutocorrectAttrEnum string

const (
	SpanAutocorrectAttrEnumOff SpanAutocorrectAttrEnum = "off"
	SpanAutocorrectAttrEnumOn SpanAutocorrectAttrEnum = "on"
)

type SpanContenteditableAttrEnum string

const (
	SpanContenteditableAttrEnumFalse SpanContenteditableAttrEnum = "false"
	SpanContenteditableAttrEnumPlaintextOnly SpanContenteditableAttrEnum = "plaintext-only"
	SpanContenteditableAttrEnumTrue SpanContenteditableAttrEnum = "true"
)

type spanAttrs map[string]any

func (e *SpanElement) Autocapitalize(a SpanAutocapitalizeAttrEnum) *SpanElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *SpanElement) Autocorrect(a SpanAutocorrectAttrEnum) *SpanElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *SpanElement) Class(s ...string) *SpanElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *SpanElement) Contenteditable(a SpanContenteditableAttrEnum) *SpanElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *SpanElement) Id(s string) *SpanElement {
	e.attributes["id"] = s
	
	return e
}

func (e *SpanElement) Slot(s string) *SpanElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *SpanElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<span")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		w.Write([]byte(" " + key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</span>")); err != nil {
		return err
	}

	return nil
}
