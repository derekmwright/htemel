// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type SpanElement struct {
	attributes spanAttrs
	children []htemel.Node
	skipRender bool
}

// Span creates a tag <span> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The span element doesn't mean anything on its own, but can be useful when used together with the global attributes, e.g. class, lang, or dir. It represents its children.
func Span(children ...htemel.Node) *SpanElement {
	node := &SpanElement{
		children: children,
		attributes: make(spanAttrs),
	}

	return node
}

func SpanIf(condition bool, children ...htemel.Node) *SpanElement {
	if condition {
		return Span(children...)
	}

	return &SpanElement{
		skipRender: true,
	}
}

type SpanAutocapitalizeEnum string

const (
	SpanAutocapitalizeEnumCharacters SpanAutocapitalizeEnum = "characters"
	SpanAutocapitalizeEnumNone SpanAutocapitalizeEnum = "none"
	SpanAutocapitalizeEnumOff SpanAutocapitalizeEnum = "off"
	SpanAutocapitalizeEnumOn SpanAutocapitalizeEnum = "on"
	SpanAutocapitalizeEnumSentences SpanAutocapitalizeEnum = "sentences"
	SpanAutocapitalizeEnumWords SpanAutocapitalizeEnum = "words"
)

type SpanAutocorrectEnum string

const (
	SpanAutocorrectEnumOff SpanAutocorrectEnum = "off"
	SpanAutocorrectEnumOn SpanAutocorrectEnum = "on"
)

type SpanContenteditableEnum string

const (
	SpanContenteditableEnumPlaintextOnly SpanContenteditableEnum = "plaintext-only"
	SpanContenteditableEnumTrue SpanContenteditableEnum = "true"
	SpanContenteditableEnumFalse SpanContenteditableEnum = "false"
)

type SpanDirEnum string

const (
	SpanDirEnumAuto SpanDirEnum = "auto"
	SpanDirEnumLtr SpanDirEnum = "ltr"
	SpanDirEnumRtl SpanDirEnum = "rtl"
)

type SpanDraggableEnum string

const (
	SpanDraggableEnumFalse SpanDraggableEnum = "false"
	SpanDraggableEnumTrue SpanDraggableEnum = "true"
)

type SpanEnterkeyhintEnum string

const (
	SpanEnterkeyhintEnumSend SpanEnterkeyhintEnum = "send"
	SpanEnterkeyhintEnumDone SpanEnterkeyhintEnum = "done"
	SpanEnterkeyhintEnumEnter SpanEnterkeyhintEnum = "enter"
	SpanEnterkeyhintEnumGo SpanEnterkeyhintEnum = "go"
	SpanEnterkeyhintEnumNext SpanEnterkeyhintEnum = "next"
	SpanEnterkeyhintEnumPrevious SpanEnterkeyhintEnum = "previous"
	SpanEnterkeyhintEnumSearch SpanEnterkeyhintEnum = "search"
)

type SpanHiddenEnum string

const (
	SpanHiddenEnumHidden SpanHiddenEnum = "hidden"
	SpanHiddenEnumUntilFound SpanHiddenEnum = "until-found"
)

type spanAttrs map[string]any

func (e *SpanElement) Autocapitalize(a SpanAutocapitalizeEnum) *SpanElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *SpanElement) Autocorrect(a SpanAutocorrectEnum) *SpanElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *SpanElement) Autofocus(b bool) *SpanElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *SpanElement) Class(s ...string) *SpanElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *SpanElement) Contenteditable(a SpanContenteditableEnum) *SpanElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *SpanElement) Dir(a SpanDirEnum) *SpanElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *SpanElement) Draggable(a SpanDraggableEnum) *SpanElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *SpanElement) Enterkeyhint(a SpanEnterkeyhintEnum) *SpanElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *SpanElement) Hidden(a SpanHiddenEnum) *SpanElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *SpanElement) Id(s string) *SpanElement {
	e.attributes["id"] = s
	
	return e
}

func (e *SpanElement) Slot(s string) *SpanElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *SpanElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<span")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</span>")); err != nil {
		return err
	}

	return nil
}
