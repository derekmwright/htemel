// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type TemplateElement struct {
	attributes templateAttrs
	children []htemel.Node
	skipRender bool
}

// Template creates a tag <template> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The template element is used to declare fragments of HTML that can be cloned and inserted in the document by script.
func Template(children ...htemel.Node) *TemplateElement {
	node := &TemplateElement{
		children: children,
		attributes: make(templateAttrs),
	}

	return node
}

func TemplateIf(condition bool, children ...htemel.Node) *TemplateElement {
	if condition {
		return Template(children...)
	}

	return &TemplateElement{
		skipRender: true,
	}
}

type TemplateAutocapitalizeEnum string

const (
	TemplateAutocapitalizeEnumCharacters TemplateAutocapitalizeEnum = "characters"
	TemplateAutocapitalizeEnumNone TemplateAutocapitalizeEnum = "none"
	TemplateAutocapitalizeEnumOff TemplateAutocapitalizeEnum = "off"
	TemplateAutocapitalizeEnumOn TemplateAutocapitalizeEnum = "on"
	TemplateAutocapitalizeEnumSentences TemplateAutocapitalizeEnum = "sentences"
	TemplateAutocapitalizeEnumWords TemplateAutocapitalizeEnum = "words"
)

type TemplateAutocorrectEnum string

const (
	TemplateAutocorrectEnumOff TemplateAutocorrectEnum = "off"
	TemplateAutocorrectEnumOn TemplateAutocorrectEnum = "on"
)

type TemplateContenteditableEnum string

const (
	TemplateContenteditableEnumFalse TemplateContenteditableEnum = "false"
	TemplateContenteditableEnumPlaintextOnly TemplateContenteditableEnum = "plaintext-only"
	TemplateContenteditableEnumTrue TemplateContenteditableEnum = "true"
)

type TemplateDirEnum string

const (
	TemplateDirEnumAuto TemplateDirEnum = "auto"
	TemplateDirEnumLtr TemplateDirEnum = "ltr"
	TemplateDirEnumRtl TemplateDirEnum = "rtl"
)

type TemplateDraggableEnum string

const (
	TemplateDraggableEnumFalse TemplateDraggableEnum = "false"
	TemplateDraggableEnumTrue TemplateDraggableEnum = "true"
)

type TemplateEnterkeyhintEnum string

const (
	TemplateEnterkeyhintEnumEnter TemplateEnterkeyhintEnum = "enter"
	TemplateEnterkeyhintEnumGo TemplateEnterkeyhintEnum = "go"
	TemplateEnterkeyhintEnumNext TemplateEnterkeyhintEnum = "next"
	TemplateEnterkeyhintEnumPrevious TemplateEnterkeyhintEnum = "previous"
	TemplateEnterkeyhintEnumSearch TemplateEnterkeyhintEnum = "search"
	TemplateEnterkeyhintEnumSend TemplateEnterkeyhintEnum = "send"
	TemplateEnterkeyhintEnumDone TemplateEnterkeyhintEnum = "done"
)

type TemplateHiddenEnum string

const (
	TemplateHiddenEnumHidden TemplateHiddenEnum = "hidden"
	TemplateHiddenEnumUntilFound TemplateHiddenEnum = "until-found"
)

type templateAttrs map[string]any

func (e *TemplateElement) Autocapitalize(a TemplateAutocapitalizeEnum) *TemplateElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *TemplateElement) Autocorrect(a TemplateAutocorrectEnum) *TemplateElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *TemplateElement) Autofocus(b bool) *TemplateElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *TemplateElement) Class(s ...string) *TemplateElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *TemplateElement) Contenteditable(a TemplateContenteditableEnum) *TemplateElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *TemplateElement) Dir(a TemplateDirEnum) *TemplateElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *TemplateElement) Draggable(a TemplateDraggableEnum) *TemplateElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *TemplateElement) Enterkeyhint(a TemplateEnterkeyhintEnum) *TemplateElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *TemplateElement) Hidden(a TemplateHiddenEnum) *TemplateElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *TemplateElement) Id(s string) *TemplateElement {
	e.attributes["id"] = s
	
	return e
}

func (e *TemplateElement) Slot(s string) *TemplateElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *TemplateElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<template")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</template>")); err != nil {
		return err
	}

	return nil
}
