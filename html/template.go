// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type TemplateElement struct {
	attributes templateAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// Template creates a tag <template> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The template element is used to declare fragments of HTML that can be cloned and inserted in the document by script.
func Template(children ...htemel.Node) *TemplateElement {
	node := &TemplateElement{
		children: children, attributes: make(templateAttrs),
	}

	return node
}

func TemplateIf(condition bool, children ...htemel.Node) *TemplateElement {
	if condition {
		return Template(children...)
	}

	return &TemplateElement{
		skipRender: true,
	}
}

func TemplateTernary(condition bool, true htemel.Node, false htemel.Node) *TemplateElement {
	if condition {
		return Template(true)
	}

	return Template(false)
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *TemplateElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *TemplateElement) AddIndent(i int) {
	e.indent = i + 1
}

type TemplateAutocapitalizeEnum string

const (
	TemplateAutocapitalizeEnumOff        TemplateAutocapitalizeEnum = "off"
	TemplateAutocapitalizeEnumOn         TemplateAutocapitalizeEnum = "on"
	TemplateAutocapitalizeEnumSentences  TemplateAutocapitalizeEnum = "sentences"
	TemplateAutocapitalizeEnumWords      TemplateAutocapitalizeEnum = "words"
	TemplateAutocapitalizeEnumCharacters TemplateAutocapitalizeEnum = "characters"
	TemplateAutocapitalizeEnumNone       TemplateAutocapitalizeEnum = "none"
)

type TemplateAutocorrectEnum string

const (
	TemplateAutocorrectEnumOff   TemplateAutocorrectEnum = "off"
	TemplateAutocorrectEnumOn    TemplateAutocorrectEnum = "on"
	TemplateAutocorrectEnumEmpty TemplateAutocorrectEnum = ""
)

type TemplateContenteditableEnum string

const (
	TemplateContenteditableEnumFalse         TemplateContenteditableEnum = "false"
	TemplateContenteditableEnumPlaintextOnly TemplateContenteditableEnum = "plaintext-only"
	TemplateContenteditableEnumTrue          TemplateContenteditableEnum = "true"
	TemplateContenteditableEnumEmpty         TemplateContenteditableEnum = ""
)

type TemplateDirEnum string

const (
	TemplateDirEnumAuto TemplateDirEnum = "auto"
	TemplateDirEnumLtr  TemplateDirEnum = "ltr"
	TemplateDirEnumRtl  TemplateDirEnum = "rtl"
)

type TemplateDraggableEnum string

const (
	TemplateDraggableEnumTrue  TemplateDraggableEnum = "true"
	TemplateDraggableEnumFalse TemplateDraggableEnum = "false"
)

type TemplateEnterkeyhintEnum string

const (
	TemplateEnterkeyhintEnumDone     TemplateEnterkeyhintEnum = "done"
	TemplateEnterkeyhintEnumEnter    TemplateEnterkeyhintEnum = "enter"
	TemplateEnterkeyhintEnumGo       TemplateEnterkeyhintEnum = "go"
	TemplateEnterkeyhintEnumNext     TemplateEnterkeyhintEnum = "next"
	TemplateEnterkeyhintEnumPrevious TemplateEnterkeyhintEnum = "previous"
	TemplateEnterkeyhintEnumSearch   TemplateEnterkeyhintEnum = "search"
	TemplateEnterkeyhintEnumSend     TemplateEnterkeyhintEnum = "send"
)

type TemplateHiddenEnum string

const (
	TemplateHiddenEnumHidden     TemplateHiddenEnum = "hidden"
	TemplateHiddenEnumUntilFound TemplateHiddenEnum = "until-found"
	TemplateHiddenEnumEmpty      TemplateHiddenEnum = ""
)

type TemplateInputmodeEnum string

const (
	TemplateInputmodeEnumEmail   TemplateInputmodeEnum = "email"
	TemplateInputmodeEnumNone    TemplateInputmodeEnum = "none"
	TemplateInputmodeEnumNumeric TemplateInputmodeEnum = "numeric"
	TemplateInputmodeEnumSearch  TemplateInputmodeEnum = "search"
	TemplateInputmodeEnumTel     TemplateInputmodeEnum = "tel"
	TemplateInputmodeEnumText    TemplateInputmodeEnum = "text"
	TemplateInputmodeEnumUrl     TemplateInputmodeEnum = "url"
	TemplateInputmodeEnumDecimal TemplateInputmodeEnum = "decimal"
)

type TemplateSpellcheckEnum string

const (
	TemplateSpellcheckEnumTrue  TemplateSpellcheckEnum = "true"
	TemplateSpellcheckEnumFalse TemplateSpellcheckEnum = "false"
	TemplateSpellcheckEnumEmpty TemplateSpellcheckEnum = ""
)

type TemplateTranslateEnum string

const (
	TemplateTranslateEnumYes   TemplateTranslateEnum = "yes"
	TemplateTranslateEnumNo    TemplateTranslateEnum = "no"
	TemplateTranslateEnumEmpty TemplateTranslateEnum = ""
)

type TemplateWritingsuggestionsEnum string

const (
	TemplateWritingsuggestionsEnumFalse TemplateWritingsuggestionsEnum = "false"
	TemplateWritingsuggestionsEnumTrue  TemplateWritingsuggestionsEnum = "true"
	TemplateWritingsuggestionsEnumEmpty TemplateWritingsuggestionsEnum = ""
)

type templateAttrs map[string]any

func (e *TemplateElement) Autocapitalize(a TemplateAutocapitalizeEnum) *TemplateElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *TemplateElement) Autocorrect(a TemplateAutocorrectEnum) *TemplateElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *TemplateElement) Autofocus(b bool) *TemplateElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *TemplateElement) Class(s ...string) *TemplateElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *TemplateElement) Contenteditable(a TemplateContenteditableEnum) *TemplateElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *TemplateElement) DataUnsafe(name string, s string) *TemplateElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *TemplateElement) Data(name string, s string) *TemplateElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *TemplateElement) Dir(a TemplateDirEnum) *TemplateElement {
	e.attributes["dir"] = a

	return e
}

func (e *TemplateElement) Draggable(a TemplateDraggableEnum) *TemplateElement {
	e.attributes["draggable"] = a

	return e
}

func (e *TemplateElement) Enterkeyhint(a TemplateEnterkeyhintEnum) *TemplateElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *TemplateElement) Hidden(a TemplateHiddenEnum) *TemplateElement {
	e.attributes["hidden"] = a

	return e
}

func (e *TemplateElement) Id(s string) *TemplateElement {
	e.attributes["id"] = s

	return e
}

func (e *TemplateElement) Inert(b bool) *TemplateElement {
	e.attributes["inert"] = b

	return e
}

func (e *TemplateElement) Inputmode(a TemplateInputmodeEnum) *TemplateElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *TemplateElement) Itemid(s string) *TemplateElement {
	e.attributes["itemid"] = s

	return e
}

func (e *TemplateElement) Itemprop(s ...string) *TemplateElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *TemplateElement) Itemref(s ...string) *TemplateElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *TemplateElement) Itemscope(b bool) *TemplateElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *TemplateElement) Itemtype(s ...string) *TemplateElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *TemplateElement) Lang(s string) *TemplateElement {
	e.attributes["lang"] = s

	return e
}

func (e *TemplateElement) Nonce(s string) *TemplateElement {
	e.attributes["nonce"] = s

	return e
}

func (e *TemplateElement) Popover(s string) *TemplateElement {
	e.attributes["popover"] = s

	return e
}

func (e *TemplateElement) Slot(s string) *TemplateElement {
	e.attributes["slot"] = s

	return e
}

func (e *TemplateElement) Spellcheck(a TemplateSpellcheckEnum) *TemplateElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *TemplateElement) Style(s string) *TemplateElement {
	e.attributes["style"] = s

	return e
}

func (e *TemplateElement) Tabindex(i int) *TemplateElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *TemplateElement) Title(s string) *TemplateElement {
	e.attributes["title"] = s

	return e
}

func (e *TemplateElement) Translate(a TemplateTranslateEnum) *TemplateElement {
	e.attributes["translate"] = a

	return e
}

func (e *TemplateElement) Writingsuggestions(a TemplateWritingsuggestionsEnum) *TemplateElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *TemplateElement) Render(w io.Writer) error {
	indent := htemel.SetIndent(e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<template")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}
	for _, child := range e.children {
		child.AddIndent(e.Indent())
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(indent + "</template>\n")); err != nil {
		return err
	}

	return nil
}
