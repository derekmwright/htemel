// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
)

type TemplateElement struct {
	attributes templateAttrs
	children []htemel.Node
	skipRender bool
}

// Template creates a tag <template> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The template element is used to declare fragments of HTML that can be cloned and inserted in the document by script.
func Template(children ...htemel.Node) *TemplateElement {
	node := &TemplateElement{
		children: children,
	}

	return node
}

func TemplateIf(condition bool, children ...htemel.Node) *TemplateElement {
	if condition {
		return Template(children...)
	}

	return &TemplateElement{
		skipRender: true,
	}
}

type TemplateAutocapitalizeAttrEnum string

const (
	TemplateAutocapitalizeAttrEnumCharacters TemplateAutocapitalizeAttrEnum = "characters"
	TemplateAutocapitalizeAttrEnumNone TemplateAutocapitalizeAttrEnum = "none"
	TemplateAutocapitalizeAttrEnumOff TemplateAutocapitalizeAttrEnum = "off"
	TemplateAutocapitalizeAttrEnumOn TemplateAutocapitalizeAttrEnum = "on"
	TemplateAutocapitalizeAttrEnumSentences TemplateAutocapitalizeAttrEnum = "sentences"
	TemplateAutocapitalizeAttrEnumWords TemplateAutocapitalizeAttrEnum = "words"
)

type TemplateAutocorrectAttrEnum string

const (
	TemplateAutocorrectAttrEnumOff TemplateAutocorrectAttrEnum = "off"
	TemplateAutocorrectAttrEnumOn TemplateAutocorrectAttrEnum = "on"
)

type TemplateContenteditableAttrEnum string

const (
	TemplateContenteditableAttrEnumFalse TemplateContenteditableAttrEnum = "false"
	TemplateContenteditableAttrEnumPlaintextOnly TemplateContenteditableAttrEnum = "plaintext-only"
	TemplateContenteditableAttrEnumTrue TemplateContenteditableAttrEnum = "true"
)

type templateAttrs map[string]any

func (e *TemplateElement) Autocapitalize(a TemplateAutocapitalizeAttrEnum) *TemplateElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *TemplateElement) Autocorrect(a TemplateAutocorrectAttrEnum) *TemplateElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *TemplateElement) Class(s ...string) *TemplateElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *TemplateElement) Contenteditable(a TemplateContenteditableAttrEnum) *TemplateElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *TemplateElement) Id(s string) *TemplateElement {
	e.attributes["id"] = s
	
	return e
}

func (e *TemplateElement) Slot(s string) *TemplateElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *TemplateElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<template")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 0
	for key, v := range e.attributes {
		w.Write([]byte(key + "="))
		w.Write([]byte(html.EscapeString(fmt.Sprintf("'%v'", v))))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</template>")); err != nil {
		return err
	}

	return nil
}
