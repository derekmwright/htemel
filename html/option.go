// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type OptionElement struct {
	attributes optionAttrs
	children []htemel.Node
	skipRender bool
}

// Option creates a tag <option> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The option element represents an option in a select element or as part of a list of suggestions in a datalist element.
func Option(children ...htemel.Node) *OptionElement {
	node := &OptionElement{
		children: children,
		attributes: make(optionAttrs),
	}

	return node
}

func OptionIf(condition bool, children ...htemel.Node) *OptionElement {
	if condition {
		return Option(children...)
	}

	return &OptionElement{
		skipRender: true,
	}
}

type OptionAutocapitalizeEnum string

const (
	OptionAutocapitalizeEnumNone OptionAutocapitalizeEnum = "none"
	OptionAutocapitalizeEnumOff OptionAutocapitalizeEnum = "off"
	OptionAutocapitalizeEnumOn OptionAutocapitalizeEnum = "on"
	OptionAutocapitalizeEnumSentences OptionAutocapitalizeEnum = "sentences"
	OptionAutocapitalizeEnumWords OptionAutocapitalizeEnum = "words"
	OptionAutocapitalizeEnumCharacters OptionAutocapitalizeEnum = "characters"
)

type OptionAutocorrectEnum string

const (
	OptionAutocorrectEnumOn OptionAutocorrectEnum = "on"
	OptionAutocorrectEnumOff OptionAutocorrectEnum = "off"
)

type OptionContenteditableEnum string

const (
	OptionContenteditableEnumPlaintextOnly OptionContenteditableEnum = "plaintext-only"
	OptionContenteditableEnumTrue OptionContenteditableEnum = "true"
	OptionContenteditableEnumFalse OptionContenteditableEnum = "false"
)

type OptionDirEnum string

const (
	OptionDirEnumAuto OptionDirEnum = "auto"
	OptionDirEnumLtr OptionDirEnum = "ltr"
	OptionDirEnumRtl OptionDirEnum = "rtl"
)

type OptionDraggableEnum string

const (
	OptionDraggableEnumFalse OptionDraggableEnum = "false"
	OptionDraggableEnumTrue OptionDraggableEnum = "true"
)

type OptionEnterkeyhintEnum string

const (
	OptionEnterkeyhintEnumSearch OptionEnterkeyhintEnum = "search"
	OptionEnterkeyhintEnumSend OptionEnterkeyhintEnum = "send"
	OptionEnterkeyhintEnumDone OptionEnterkeyhintEnum = "done"
	OptionEnterkeyhintEnumEnter OptionEnterkeyhintEnum = "enter"
	OptionEnterkeyhintEnumGo OptionEnterkeyhintEnum = "go"
	OptionEnterkeyhintEnumNext OptionEnterkeyhintEnum = "next"
	OptionEnterkeyhintEnumPrevious OptionEnterkeyhintEnum = "previous"
)

type OptionHiddenEnum string

const (
	OptionHiddenEnumHidden OptionHiddenEnum = "hidden"
	OptionHiddenEnumUntilFound OptionHiddenEnum = "until-found"
)

type optionAttrs map[string]any

func (e *OptionElement) Autocapitalize(a OptionAutocapitalizeEnum) *OptionElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *OptionElement) Autocorrect(a OptionAutocorrectEnum) *OptionElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *OptionElement) Autofocus(b bool) *OptionElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *OptionElement) Class(s ...string) *OptionElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *OptionElement) Contenteditable(a OptionContenteditableEnum) *OptionElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *OptionElement) Dir(a OptionDirEnum) *OptionElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *OptionElement) Draggable(a OptionDraggableEnum) *OptionElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *OptionElement) Enterkeyhint(a OptionEnterkeyhintEnum) *OptionElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *OptionElement) Hidden(a OptionHiddenEnum) *OptionElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *OptionElement) Id(s string) *OptionElement {
	e.attributes["id"] = s
	
	return e
}

func (e *OptionElement) Slot(s string) *OptionElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *OptionElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<option")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</option>")); err != nil {
		return err
	}

	return nil
}
