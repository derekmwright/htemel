// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type OptionElement struct {
	attributes optionAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// Option creates a tag <option> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The option element represents an option in a select element or as part of a list of suggestions in a datalist element.
func Option(children ...htemel.Node) *OptionElement {
	node := &OptionElement{
		children: children, attributes: make(optionAttrs),
	}

	return node
}

func OptionIf(condition bool, children ...htemel.Node) *OptionElement {
	if condition {
		return Option(children...)
	}

	return &OptionElement{
		skipRender: true,
	}
}

func OptionTernary(condition bool, true htemel.Node, false htemel.Node) *OptionElement {
	if condition {
		return Option(true)
	}

	return Option(false)
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *OptionElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *OptionElement) AddIndent(i int) {
	e.indent = i + 1
}

type OptionAutocapitalizeEnum string

const (
	OptionAutocapitalizeEnumWords      OptionAutocapitalizeEnum = "words"
	OptionAutocapitalizeEnumCharacters OptionAutocapitalizeEnum = "characters"
	OptionAutocapitalizeEnumNone       OptionAutocapitalizeEnum = "none"
	OptionAutocapitalizeEnumOff        OptionAutocapitalizeEnum = "off"
	OptionAutocapitalizeEnumOn         OptionAutocapitalizeEnum = "on"
	OptionAutocapitalizeEnumSentences  OptionAutocapitalizeEnum = "sentences"
)

type OptionAutocorrectEnum string

const (
	OptionAutocorrectEnumOn    OptionAutocorrectEnum = "on"
	OptionAutocorrectEnumOff   OptionAutocorrectEnum = "off"
	OptionAutocorrectEnumEmpty OptionAutocorrectEnum = ""
)

type OptionContenteditableEnum string

const (
	OptionContenteditableEnumPlaintextOnly OptionContenteditableEnum = "plaintext-only"
	OptionContenteditableEnumTrue          OptionContenteditableEnum = "true"
	OptionContenteditableEnumFalse         OptionContenteditableEnum = "false"
	OptionContenteditableEnumEmpty         OptionContenteditableEnum = ""
)

type OptionDirEnum string

const (
	OptionDirEnumAuto OptionDirEnum = "auto"
	OptionDirEnumLtr  OptionDirEnum = "ltr"
	OptionDirEnumRtl  OptionDirEnum = "rtl"
)

type OptionDraggableEnum string

const (
	OptionDraggableEnumTrue  OptionDraggableEnum = "true"
	OptionDraggableEnumFalse OptionDraggableEnum = "false"
)

type OptionEnterkeyhintEnum string

const (
	OptionEnterkeyhintEnumSearch   OptionEnterkeyhintEnum = "search"
	OptionEnterkeyhintEnumSend     OptionEnterkeyhintEnum = "send"
	OptionEnterkeyhintEnumDone     OptionEnterkeyhintEnum = "done"
	OptionEnterkeyhintEnumEnter    OptionEnterkeyhintEnum = "enter"
	OptionEnterkeyhintEnumGo       OptionEnterkeyhintEnum = "go"
	OptionEnterkeyhintEnumNext     OptionEnterkeyhintEnum = "next"
	OptionEnterkeyhintEnumPrevious OptionEnterkeyhintEnum = "previous"
)

type OptionHiddenEnum string

const (
	OptionHiddenEnumHidden     OptionHiddenEnum = "hidden"
	OptionHiddenEnumUntilFound OptionHiddenEnum = "until-found"
	OptionHiddenEnumEmpty      OptionHiddenEnum = ""
)

type OptionInputmodeEnum string

const (
	OptionInputmodeEnumDecimal OptionInputmodeEnum = "decimal"
	OptionInputmodeEnumEmail   OptionInputmodeEnum = "email"
	OptionInputmodeEnumNone    OptionInputmodeEnum = "none"
	OptionInputmodeEnumNumeric OptionInputmodeEnum = "numeric"
	OptionInputmodeEnumSearch  OptionInputmodeEnum = "search"
	OptionInputmodeEnumTel     OptionInputmodeEnum = "tel"
	OptionInputmodeEnumText    OptionInputmodeEnum = "text"
	OptionInputmodeEnumUrl     OptionInputmodeEnum = "url"
)

type OptionSpellcheckEnum string

const (
	OptionSpellcheckEnumFalse OptionSpellcheckEnum = "false"
	OptionSpellcheckEnumTrue  OptionSpellcheckEnum = "true"
	OptionSpellcheckEnumEmpty OptionSpellcheckEnum = ""
)

type OptionTranslateEnum string

const (
	OptionTranslateEnumNo    OptionTranslateEnum = "no"
	OptionTranslateEnumYes   OptionTranslateEnum = "yes"
	OptionTranslateEnumEmpty OptionTranslateEnum = ""
)

type OptionWritingsuggestionsEnum string

const (
	OptionWritingsuggestionsEnumFalse OptionWritingsuggestionsEnum = "false"
	OptionWritingsuggestionsEnumTrue  OptionWritingsuggestionsEnum = "true"
	OptionWritingsuggestionsEnumEmpty OptionWritingsuggestionsEnum = ""
)

type optionAttrs map[string]any

func (e *OptionElement) Autocapitalize(a OptionAutocapitalizeEnum) *OptionElement {
	e.attributes["autocapitalize"] = a

	return e
}

func OptionAutocapitalizeCustom(s string) OptionAutocapitalizeEnum {
	return OptionAutocapitalizeEnum(s)
}

func (e *OptionElement) Autocorrect(a OptionAutocorrectEnum) *OptionElement {
	e.attributes["autocorrect"] = a

	return e
}

func OptionAutocorrectCustom(s string) OptionAutocorrectEnum {
	return OptionAutocorrectEnum(s)
}

func (e *OptionElement) Autofocus(b bool) *OptionElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *OptionElement) Class(s ...string) *OptionElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *OptionElement) Contenteditable(a OptionContenteditableEnum) *OptionElement {
	e.attributes["contenteditable"] = a

	return e
}

func OptionContenteditableCustom(s string) OptionContenteditableEnum {
	return OptionContenteditableEnum(s)
}

func (e *OptionElement) DataUnsafe(name string, s string) *OptionElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *OptionElement) Data(name string, s string) *OptionElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *OptionElement) Dir(a OptionDirEnum) *OptionElement {
	e.attributes["dir"] = a

	return e
}

func OptionDirCustom(s string) OptionDirEnum {
	return OptionDirEnum(s)
}

func (e *OptionElement) Draggable(a OptionDraggableEnum) *OptionElement {
	e.attributes["draggable"] = a

	return e
}

func OptionDraggableCustom(s string) OptionDraggableEnum {
	return OptionDraggableEnum(s)
}

func (e *OptionElement) Enterkeyhint(a OptionEnterkeyhintEnum) *OptionElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func OptionEnterkeyhintCustom(s string) OptionEnterkeyhintEnum {
	return OptionEnterkeyhintEnum(s)
}

func (e *OptionElement) Hidden(a OptionHiddenEnum) *OptionElement {
	e.attributes["hidden"] = a

	return e
}

func OptionHiddenCustom(s string) OptionHiddenEnum {
	return OptionHiddenEnum(s)
}

func (e *OptionElement) Id(s string) *OptionElement {
	e.attributes["id"] = s

	return e
}

func (e *OptionElement) Inert(b bool) *OptionElement {
	e.attributes["inert"] = b

	return e
}

func (e *OptionElement) Inputmode(a OptionInputmodeEnum) *OptionElement {
	e.attributes["inputmode"] = a

	return e
}

func OptionInputmodeCustom(s string) OptionInputmodeEnum {
	return OptionInputmodeEnum(s)
}

func (e *OptionElement) Itemid(s string) *OptionElement {
	e.attributes["itemid"] = s

	return e
}

func (e *OptionElement) Itemprop(s ...string) *OptionElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *OptionElement) Itemref(s ...string) *OptionElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *OptionElement) Itemscope(b bool) *OptionElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *OptionElement) Itemtype(s ...string) *OptionElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *OptionElement) Lang(s string) *OptionElement {
	e.attributes["lang"] = s

	return e
}

func (e *OptionElement) Nonce(s string) *OptionElement {
	e.attributes["nonce"] = s

	return e
}

func (e *OptionElement) Popover(s string) *OptionElement {
	e.attributes["popover"] = s

	return e
}

func (e *OptionElement) Slot(s string) *OptionElement {
	e.attributes["slot"] = s

	return e
}

func (e *OptionElement) Spellcheck(a OptionSpellcheckEnum) *OptionElement {
	e.attributes["spellcheck"] = a

	return e
}

func OptionSpellcheckCustom(s string) OptionSpellcheckEnum {
	return OptionSpellcheckEnum(s)
}

func (e *OptionElement) Style(s string) *OptionElement {
	e.attributes["style"] = s

	return e
}

func (e *OptionElement) Tabindex(i int) *OptionElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *OptionElement) Title(s string) *OptionElement {
	e.attributes["title"] = s

	return e
}

func (e *OptionElement) Translate(a OptionTranslateEnum) *OptionElement {
	e.attributes["translate"] = a

	return e
}

func OptionTranslateCustom(s string) OptionTranslateEnum {
	return OptionTranslateEnum(s)
}

func (e *OptionElement) Writingsuggestions(a OptionWritingsuggestionsEnum) *OptionElement {
	e.attributes["writingsuggestions"] = a

	return e
}

func OptionWritingsuggestionsCustom(s string) OptionWritingsuggestionsEnum {
	return OptionWritingsuggestionsEnum(s)
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *OptionElement) Render(w io.Writer) error {
	indent := htemel.SetIndent(e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<option")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}
	for _, child := range e.children {
		child.AddIndent(e.Indent())
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(indent + "</option>\n")); err != nil {
		return err
	}

	return nil
}
