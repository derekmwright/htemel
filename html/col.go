// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"golang.org/x/net/html"
)

type ColElement struct {
	attributes colAttrs

	skipRender bool
	indent     int
}

// Col creates a tag <col> instance and returns it for further modification.
//
// Spec Description: If a col element has a parent and that is a colgroup element that itself has a parent that is a table element, then the col element represents one or more columns in the column group represented by that colgroup.
func Col() *ColElement {
	node := &ColElement{
		attributes: make(colAttrs),
	}

	return node
}

func ColIf(condition bool) *ColElement {
	if condition {
		return Col()
	}

	return &ColElement{
		skipRender: true,
	}
}

type ColAutocapitalizeEnum string

const (
	ColAutocapitalizeEnumSentences  ColAutocapitalizeEnum = "sentences"
	ColAutocapitalizeEnumWords      ColAutocapitalizeEnum = "words"
	ColAutocapitalizeEnumCharacters ColAutocapitalizeEnum = "characters"
	ColAutocapitalizeEnumNone       ColAutocapitalizeEnum = "none"
	ColAutocapitalizeEnumOff        ColAutocapitalizeEnum = "off"
	ColAutocapitalizeEnumOn         ColAutocapitalizeEnum = "on"
)

type ColAutocorrectEnum string

const (
	ColAutocorrectEnumOff   ColAutocorrectEnum = "off"
	ColAutocorrectEnumOn    ColAutocorrectEnum = "on"
	ColAutocorrectEnumEmpty ColAutocorrectEnum = ""
)

type ColContenteditableEnum string

const (
	ColContenteditableEnumFalse         ColContenteditableEnum = "false"
	ColContenteditableEnumPlaintextOnly ColContenteditableEnum = "plaintext-only"
	ColContenteditableEnumTrue          ColContenteditableEnum = "true"
	ColContenteditableEnumEmpty         ColContenteditableEnum = ""
)

type ColDirEnum string

const (
	ColDirEnumLtr  ColDirEnum = "ltr"
	ColDirEnumRtl  ColDirEnum = "rtl"
	ColDirEnumAuto ColDirEnum = "auto"
)

type ColDraggableEnum string

const (
	ColDraggableEnumFalse ColDraggableEnum = "false"
	ColDraggableEnumTrue  ColDraggableEnum = "true"
)

type ColEnterkeyhintEnum string

const (
	ColEnterkeyhintEnumEnter    ColEnterkeyhintEnum = "enter"
	ColEnterkeyhintEnumGo       ColEnterkeyhintEnum = "go"
	ColEnterkeyhintEnumNext     ColEnterkeyhintEnum = "next"
	ColEnterkeyhintEnumPrevious ColEnterkeyhintEnum = "previous"
	ColEnterkeyhintEnumSearch   ColEnterkeyhintEnum = "search"
	ColEnterkeyhintEnumSend     ColEnterkeyhintEnum = "send"
	ColEnterkeyhintEnumDone     ColEnterkeyhintEnum = "done"
)

type ColHiddenEnum string

const (
	ColHiddenEnumHidden     ColHiddenEnum = "hidden"
	ColHiddenEnumUntilFound ColHiddenEnum = "until-found"
	ColHiddenEnumEmpty      ColHiddenEnum = ""
)

type ColInputmodeEnum string

const (
	ColInputmodeEnumTel     ColInputmodeEnum = "tel"
	ColInputmodeEnumText    ColInputmodeEnum = "text"
	ColInputmodeEnumUrl     ColInputmodeEnum = "url"
	ColInputmodeEnumDecimal ColInputmodeEnum = "decimal"
	ColInputmodeEnumEmail   ColInputmodeEnum = "email"
	ColInputmodeEnumNone    ColInputmodeEnum = "none"
	ColInputmodeEnumNumeric ColInputmodeEnum = "numeric"
	ColInputmodeEnumSearch  ColInputmodeEnum = "search"
)

type ColSpellcheckEnum string

const (
	ColSpellcheckEnumFalse ColSpellcheckEnum = "false"
	ColSpellcheckEnumTrue  ColSpellcheckEnum = "true"
	ColSpellcheckEnumEmpty ColSpellcheckEnum = ""
)

type ColTranslateEnum string

const (
	ColTranslateEnumNo    ColTranslateEnum = "no"
	ColTranslateEnumYes   ColTranslateEnum = "yes"
	ColTranslateEnumEmpty ColTranslateEnum = ""
)

type ColWritingsuggestionsEnum string

const (
	ColWritingsuggestionsEnumFalse ColWritingsuggestionsEnum = "false"
	ColWritingsuggestionsEnumTrue  ColWritingsuggestionsEnum = "true"
	ColWritingsuggestionsEnumEmpty ColWritingsuggestionsEnum = ""
)

type colAttrs map[string]any

func (e *ColElement) Span(i int) *ColElement {
	e.attributes["span"] = i

	return e
}

func (e *ColElement) Autocapitalize(a ColAutocapitalizeEnum) *ColElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *ColElement) Autocorrect(a ColAutocorrectEnum) *ColElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *ColElement) Autofocus(b bool) *ColElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *ColElement) Class(s ...string) *ColElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *ColElement) Contenteditable(a ColContenteditableEnum) *ColElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *ColElement) DataUnsafe(name string, s string) *ColElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *ColElement) Data(name string, s string) *ColElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *ColElement) Dir(a ColDirEnum) *ColElement {
	e.attributes["dir"] = a

	return e
}

func (e *ColElement) Draggable(a ColDraggableEnum) *ColElement {
	e.attributes["draggable"] = a

	return e
}

func (e *ColElement) Enterkeyhint(a ColEnterkeyhintEnum) *ColElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *ColElement) Hidden(a ColHiddenEnum) *ColElement {
	e.attributes["hidden"] = a

	return e
}

func (e *ColElement) Id(s string) *ColElement {
	e.attributes["id"] = s

	return e
}

func (e *ColElement) Inert(b bool) *ColElement {
	e.attributes["inert"] = b

	return e
}

func (e *ColElement) Inputmode(a ColInputmodeEnum) *ColElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *ColElement) Itemid(s string) *ColElement {
	e.attributes["itemid"] = s

	return e
}

func (e *ColElement) Itemprop(s ...string) *ColElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *ColElement) Itemref(s ...string) *ColElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *ColElement) Itemscope(b bool) *ColElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *ColElement) Itemtype(s ...string) *ColElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *ColElement) Lang(s string) *ColElement {
	e.attributes["lang"] = s

	return e
}

func (e *ColElement) Nonce(s string) *ColElement {
	e.attributes["nonce"] = s

	return e
}

func (e *ColElement) Popover(s string) *ColElement {
	e.attributes["popover"] = s

	return e
}

func (e *ColElement) Slot(s string) *ColElement {
	e.attributes["slot"] = s

	return e
}

func (e *ColElement) Spellcheck(a ColSpellcheckEnum) *ColElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *ColElement) Style(s string) *ColElement {
	e.attributes["style"] = s

	return e
}

func (e *ColElement) Tabindex(i int) *ColElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *ColElement) Title(s string) *ColElement {
	e.attributes["title"] = s

	return e
}

func (e *ColElement) Translate(a ColTranslateEnum) *ColElement {
	e.attributes["translate"] = a

	return e
}

func (e *ColElement) Writingsuggestions(a ColWritingsuggestionsEnum) *ColElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *ColElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<col")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	return nil
}
