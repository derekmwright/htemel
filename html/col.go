// Code generated by htemel. DO NOT EDIT.
package html

import (
  "github.com/derekmwright/htemel"
  "io"
)

type ColElement struct {
	children []htemel.Node
	skipRender bool
}

// Col creates a tag <col> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: If a col element has a parent and that is a colgroup element that itself has a parent that is a table element, then the col element represents one or more columns in the column group represented by that colgroup.
func Col(children ...htemel.Node) *ColElement {
	node := &ColElement{
		children: children,
	}

	return node
}

func ColIf(condition bool, children ...htemel.Node) *ColElement {
	if condition {
		return Col(children...)
	}

	return &ColElement{
		skipRender: true,
	}
}

func (e *ColElement) Autocapitalize() *ColElement {
	return e
}

func (e *ColElement) Autocorrect() *ColElement {
	return e
}

func (e *ColElement) Autofocus() *ColElement {
	return e
}

func (e *ColElement) Class() *ColElement {
	return e
}

func (e *ColElement) Contenteditable() *ColElement {
	return e
}

func (e *ColElement) Id() *ColElement {
	return e
}

func (e *ColElement) Slot() *ColElement {
	return e
}

func (e *ColElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<col")); err != nil {
		return err
	}

	// TODO: Attribute stuff here

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</col>")); err != nil {
		return err
	}

	return nil
}
