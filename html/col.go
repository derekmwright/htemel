// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
)

type ColElement struct {
	attributes colAttrs
	children []htemel.Node
	skipRender bool
}

// Col creates a tag <col> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: If a col element has a parent and that is a colgroup element that itself has a parent that is a table element, then the col element represents one or more columns in the column group represented by that colgroup.
func Col(children ...htemel.Node) *ColElement {
	node := &ColElement{
		children: children,
	}

	return node
}

func ColIf(condition bool, children ...htemel.Node) *ColElement {
	if condition {
		return Col(children...)
	}

	return &ColElement{
		skipRender: true,
	}
}

type ColAutocapitalizeAttrEnum string

const (
	ColAutocapitalizeAttrEnumNone ColAutocapitalizeAttrEnum = "none"
	ColAutocapitalizeAttrEnumOff ColAutocapitalizeAttrEnum = "off"
	ColAutocapitalizeAttrEnumOn ColAutocapitalizeAttrEnum = "on"
	ColAutocapitalizeAttrEnumSentences ColAutocapitalizeAttrEnum = "sentences"
	ColAutocapitalizeAttrEnumWords ColAutocapitalizeAttrEnum = "words"
	ColAutocapitalizeAttrEnumCharacters ColAutocapitalizeAttrEnum = "characters"
)

type ColAutocorrectAttrEnum string

const (
	ColAutocorrectAttrEnumOff ColAutocorrectAttrEnum = "off"
	ColAutocorrectAttrEnumOn ColAutocorrectAttrEnum = "on"
)

type ColContenteditableAttrEnum string

const (
	ColContenteditableAttrEnumFalse ColContenteditableAttrEnum = "false"
	ColContenteditableAttrEnumPlaintextOnly ColContenteditableAttrEnum = "plaintext-only"
	ColContenteditableAttrEnumTrue ColContenteditableAttrEnum = "true"
)

type colAttrs map[string]any

func (e *ColElement) Autocapitalize(a ColAutocapitalizeAttrEnum) *ColElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *ColElement) Autocorrect(a ColAutocorrectAttrEnum) *ColElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *ColElement) Class(s ...string) *ColElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *ColElement) Contenteditable(a ColContenteditableAttrEnum) *ColElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *ColElement) Id(s string) *ColElement {
	e.attributes["id"] = s
	
	return e
}

func (e *ColElement) Slot(s string) *ColElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *ColElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<col")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 0
	for key, v := range e.attributes {
		w.Write([]byte(key + "="))
		w.Write([]byte(html.EscapeString(fmt.Sprintf("'%v'", v))))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</col>")); err != nil {
		return err
	}

	return nil
}
