// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
)

type TextareaElement struct {
	attributes textareaAttrs
	children []htemel.Node
	skipRender bool
}

// Textarea creates a tag <textarea> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The textarea element represents a multiline plain text edit control for the element's raw value. The contents of the control represent the control's default value.
func Textarea(children ...htemel.Node) *TextareaElement {
	node := &TextareaElement{
		children: children,
	}

	return node
}

func TextareaIf(condition bool, children ...htemel.Node) *TextareaElement {
	if condition {
		return Textarea(children...)
	}

	return &TextareaElement{
		skipRender: true,
	}
}

type TextareaAutocapitalizeAttrEnum string

const (
	TextareaAutocapitalizeAttrEnumCharacters TextareaAutocapitalizeAttrEnum = "characters"
	TextareaAutocapitalizeAttrEnumNone TextareaAutocapitalizeAttrEnum = "none"
	TextareaAutocapitalizeAttrEnumOff TextareaAutocapitalizeAttrEnum = "off"
	TextareaAutocapitalizeAttrEnumOn TextareaAutocapitalizeAttrEnum = "on"
	TextareaAutocapitalizeAttrEnumSentences TextareaAutocapitalizeAttrEnum = "sentences"
	TextareaAutocapitalizeAttrEnumWords TextareaAutocapitalizeAttrEnum = "words"
)

type TextareaAutocorrectAttrEnum string

const (
	TextareaAutocorrectAttrEnumOff TextareaAutocorrectAttrEnum = "off"
	TextareaAutocorrectAttrEnumOn TextareaAutocorrectAttrEnum = "on"
)

type TextareaContenteditableAttrEnum string

const (
	TextareaContenteditableAttrEnumFalse TextareaContenteditableAttrEnum = "false"
	TextareaContenteditableAttrEnumPlaintextOnly TextareaContenteditableAttrEnum = "plaintext-only"
	TextareaContenteditableAttrEnumTrue TextareaContenteditableAttrEnum = "true"
)

type textareaAttrs map[string]any

func (e *TextareaElement) Autocapitalize(a TextareaAutocapitalizeAttrEnum) *TextareaElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *TextareaElement) Autocorrect(a TextareaAutocorrectAttrEnum) *TextareaElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *TextareaElement) Class(s ...string) *TextareaElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *TextareaElement) Contenteditable(a TextareaContenteditableAttrEnum) *TextareaElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *TextareaElement) Id(s string) *TextareaElement {
	e.attributes["id"] = s
	
	return e
}

func (e *TextareaElement) Slot(s string) *TextareaElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *TextareaElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<textarea")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 0
	for key, v := range e.attributes {
		w.Write([]byte(key + "="))
		w.Write([]byte(html.EscapeString(fmt.Sprintf("'%v'", v))))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</textarea>")); err != nil {
		return err
	}

	return nil
}
