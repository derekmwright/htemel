// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type TextareaElement struct {
	attributes textareaAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// Textarea creates a tag <textarea> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The textarea element represents a multiline plain text edit control for the element's raw value. The contents of the control represent the control's default value.
func Textarea(children ...htemel.Node) *TextareaElement {
	node := &TextareaElement{
		children: children, attributes: make(textareaAttrs),
	}

	return node
}

func TextareaIf(condition bool, children ...htemel.Node) *TextareaElement {
	if condition {
		return Textarea(children...)
	}

	return &TextareaElement{
		skipRender: true,
	}
}

func TextareaTernary(condition bool, true htemel.Node, false htemel.Node) *TextareaElement {
	if condition {
		return Textarea(true)
	}

	return Textarea(false)
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *TextareaElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *TextareaElement) AddIndent(i int) {
	e.indent = i + 1
}

type TextareaAutocapitalizeEnum string

const (
	TextareaAutocapitalizeEnumWords      TextareaAutocapitalizeEnum = "words"
	TextareaAutocapitalizeEnumCharacters TextareaAutocapitalizeEnum = "characters"
	TextareaAutocapitalizeEnumNone       TextareaAutocapitalizeEnum = "none"
	TextareaAutocapitalizeEnumOff        TextareaAutocapitalizeEnum = "off"
	TextareaAutocapitalizeEnumOn         TextareaAutocapitalizeEnum = "on"
	TextareaAutocapitalizeEnumSentences  TextareaAutocapitalizeEnum = "sentences"
)

type TextareaAutocorrectEnum string

const (
	TextareaAutocorrectEnumOff   TextareaAutocorrectEnum = "off"
	TextareaAutocorrectEnumOn    TextareaAutocorrectEnum = "on"
	TextareaAutocorrectEnumEmpty TextareaAutocorrectEnum = ""
)

type TextareaContenteditableEnum string

const (
	TextareaContenteditableEnumFalse         TextareaContenteditableEnum = "false"
	TextareaContenteditableEnumPlaintextOnly TextareaContenteditableEnum = "plaintext-only"
	TextareaContenteditableEnumTrue          TextareaContenteditableEnum = "true"
	TextareaContenteditableEnumEmpty         TextareaContenteditableEnum = ""
)

type TextareaDirEnum string

const (
	TextareaDirEnumRtl  TextareaDirEnum = "rtl"
	TextareaDirEnumAuto TextareaDirEnum = "auto"
	TextareaDirEnumLtr  TextareaDirEnum = "ltr"
)

type TextareaDraggableEnum string

const (
	TextareaDraggableEnumFalse TextareaDraggableEnum = "false"
	TextareaDraggableEnumTrue  TextareaDraggableEnum = "true"
)

type TextareaEnterkeyhintEnum string

const (
	TextareaEnterkeyhintEnumSearch   TextareaEnterkeyhintEnum = "search"
	TextareaEnterkeyhintEnumSend     TextareaEnterkeyhintEnum = "send"
	TextareaEnterkeyhintEnumDone     TextareaEnterkeyhintEnum = "done"
	TextareaEnterkeyhintEnumEnter    TextareaEnterkeyhintEnum = "enter"
	TextareaEnterkeyhintEnumGo       TextareaEnterkeyhintEnum = "go"
	TextareaEnterkeyhintEnumNext     TextareaEnterkeyhintEnum = "next"
	TextareaEnterkeyhintEnumPrevious TextareaEnterkeyhintEnum = "previous"
)

type TextareaHiddenEnum string

const (
	TextareaHiddenEnumUntilFound TextareaHiddenEnum = "until-found"
	TextareaHiddenEnumHidden     TextareaHiddenEnum = "hidden"
	TextareaHiddenEnumEmpty      TextareaHiddenEnum = ""
)

type TextareaInputmodeEnum string

const (
	TextareaInputmodeEnumSearch  TextareaInputmodeEnum = "search"
	TextareaInputmodeEnumTel     TextareaInputmodeEnum = "tel"
	TextareaInputmodeEnumText    TextareaInputmodeEnum = "text"
	TextareaInputmodeEnumUrl     TextareaInputmodeEnum = "url"
	TextareaInputmodeEnumDecimal TextareaInputmodeEnum = "decimal"
	TextareaInputmodeEnumEmail   TextareaInputmodeEnum = "email"
	TextareaInputmodeEnumNone    TextareaInputmodeEnum = "none"
	TextareaInputmodeEnumNumeric TextareaInputmodeEnum = "numeric"
)

type TextareaSpellcheckEnum string

const (
	TextareaSpellcheckEnumTrue  TextareaSpellcheckEnum = "true"
	TextareaSpellcheckEnumFalse TextareaSpellcheckEnum = "false"
	TextareaSpellcheckEnumEmpty TextareaSpellcheckEnum = ""
)

type TextareaTranslateEnum string

const (
	TextareaTranslateEnumNo    TextareaTranslateEnum = "no"
	TextareaTranslateEnumYes   TextareaTranslateEnum = "yes"
	TextareaTranslateEnumEmpty TextareaTranslateEnum = ""
)

type TextareaWritingsuggestionsEnum string

const (
	TextareaWritingsuggestionsEnumTrue  TextareaWritingsuggestionsEnum = "true"
	TextareaWritingsuggestionsEnumFalse TextareaWritingsuggestionsEnum = "false"
	TextareaWritingsuggestionsEnumEmpty TextareaWritingsuggestionsEnum = ""
)

type textareaAttrs map[string]any

func (e *TextareaElement) Autocapitalize(a TextareaAutocapitalizeEnum) *TextareaElement {
	e.attributes["autocapitalize"] = a

	return e
}

func TextareaAutocapitalizeCustom(s string) TextareaAutocapitalizeEnum {
	return TextareaAutocapitalizeEnum(s)
}

func (e *TextareaElement) Autocorrect(a TextareaAutocorrectEnum) *TextareaElement {
	e.attributes["autocorrect"] = a

	return e
}

func TextareaAutocorrectCustom(s string) TextareaAutocorrectEnum {
	return TextareaAutocorrectEnum(s)
}

func (e *TextareaElement) Autofocus(b bool) *TextareaElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *TextareaElement) Class(s ...string) *TextareaElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *TextareaElement) Contenteditable(a TextareaContenteditableEnum) *TextareaElement {
	e.attributes["contenteditable"] = a

	return e
}

func TextareaContenteditableCustom(s string) TextareaContenteditableEnum {
	return TextareaContenteditableEnum(s)
}

func (e *TextareaElement) DataUnsafe(name string, s string) *TextareaElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *TextareaElement) Data(name string, s string) *TextareaElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *TextareaElement) Dir(a TextareaDirEnum) *TextareaElement {
	e.attributes["dir"] = a

	return e
}

func TextareaDirCustom(s string) TextareaDirEnum {
	return TextareaDirEnum(s)
}

func (e *TextareaElement) Draggable(a TextareaDraggableEnum) *TextareaElement {
	e.attributes["draggable"] = a

	return e
}

func TextareaDraggableCustom(s string) TextareaDraggableEnum {
	return TextareaDraggableEnum(s)
}

func (e *TextareaElement) Enterkeyhint(a TextareaEnterkeyhintEnum) *TextareaElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func TextareaEnterkeyhintCustom(s string) TextareaEnterkeyhintEnum {
	return TextareaEnterkeyhintEnum(s)
}

func (e *TextareaElement) Hidden(a TextareaHiddenEnum) *TextareaElement {
	e.attributes["hidden"] = a

	return e
}

func TextareaHiddenCustom(s string) TextareaHiddenEnum {
	return TextareaHiddenEnum(s)
}

func (e *TextareaElement) Id(s string) *TextareaElement {
	e.attributes["id"] = s

	return e
}

func (e *TextareaElement) Inert(b bool) *TextareaElement {
	e.attributes["inert"] = b

	return e
}

func (e *TextareaElement) Inputmode(a TextareaInputmodeEnum) *TextareaElement {
	e.attributes["inputmode"] = a

	return e
}

func TextareaInputmodeCustom(s string) TextareaInputmodeEnum {
	return TextareaInputmodeEnum(s)
}

func (e *TextareaElement) Itemid(s string) *TextareaElement {
	e.attributes["itemid"] = s

	return e
}

func (e *TextareaElement) Itemprop(s ...string) *TextareaElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *TextareaElement) Itemref(s ...string) *TextareaElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *TextareaElement) Itemscope(b bool) *TextareaElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *TextareaElement) Itemtype(s ...string) *TextareaElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *TextareaElement) Lang(s string) *TextareaElement {
	e.attributes["lang"] = s

	return e
}

func (e *TextareaElement) Nonce(s string) *TextareaElement {
	e.attributes["nonce"] = s

	return e
}

func (e *TextareaElement) Popover(s string) *TextareaElement {
	e.attributes["popover"] = s

	return e
}

func (e *TextareaElement) Slot(s string) *TextareaElement {
	e.attributes["slot"] = s

	return e
}

func (e *TextareaElement) Spellcheck(a TextareaSpellcheckEnum) *TextareaElement {
	e.attributes["spellcheck"] = a

	return e
}

func TextareaSpellcheckCustom(s string) TextareaSpellcheckEnum {
	return TextareaSpellcheckEnum(s)
}

func (e *TextareaElement) Style(s string) *TextareaElement {
	e.attributes["style"] = s

	return e
}

func (e *TextareaElement) Tabindex(i int) *TextareaElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *TextareaElement) Title(s string) *TextareaElement {
	e.attributes["title"] = s

	return e
}

func (e *TextareaElement) Translate(a TextareaTranslateEnum) *TextareaElement {
	e.attributes["translate"] = a

	return e
}

func TextareaTranslateCustom(s string) TextareaTranslateEnum {
	return TextareaTranslateEnum(s)
}

func (e *TextareaElement) Writingsuggestions(a TextareaWritingsuggestionsEnum) *TextareaElement {
	e.attributes["writingsuggestions"] = a

	return e
}

func TextareaWritingsuggestionsCustom(s string) TextareaWritingsuggestionsEnum {
	return TextareaWritingsuggestionsEnum(s)
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *TextareaElement) Render(w io.Writer) error {
	indent := htemel.SetIndent(e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<textarea")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}
	for _, child := range e.children {
		child.AddIndent(e.Indent())
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(indent + "</textarea>\n")); err != nil {
		return err
	}

	return nil
}
