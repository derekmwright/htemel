// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type VarElement struct {
	attributes varAttrs
	children   []htemel.Node
	skipRender bool
}

// Var creates a tag <var> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The var element represents a variable. This could be an actual variable in a mathematical expression or programming context, an identifier representing a constant, a symbol identifying a physical quantity, a function parameter, or just be a term used as a placeholder in prose.
func Var(children ...htemel.Node) *VarElement {
	node := &VarElement{
		children:   children,
		attributes: make(varAttrs),
	}

	return node
}

func VarIf(condition bool, children ...htemel.Node) *VarElement {
	if condition {
		return Var(children...)
	}

	return &VarElement{
		skipRender: true,
	}
}

type VarAutocapitalizeAttrEnum string

const (
	VarAutocapitalizeAttrEnumWords      VarAutocapitalizeAttrEnum = "words"
	VarAutocapitalizeAttrEnumCharacters VarAutocapitalizeAttrEnum = "characters"
	VarAutocapitalizeAttrEnumNone       VarAutocapitalizeAttrEnum = "none"
	VarAutocapitalizeAttrEnumOff        VarAutocapitalizeAttrEnum = "off"
	VarAutocapitalizeAttrEnumOn         VarAutocapitalizeAttrEnum = "on"
	VarAutocapitalizeAttrEnumSentences  VarAutocapitalizeAttrEnum = "sentences"
)

type VarAutocorrectAttrEnum string

const (
	VarAutocorrectAttrEnumOff VarAutocorrectAttrEnum = "off"
	VarAutocorrectAttrEnumOn  VarAutocorrectAttrEnum = "on"
)

type VarContenteditableAttrEnum string

const (
	VarContenteditableAttrEnumFalse         VarContenteditableAttrEnum = "false"
	VarContenteditableAttrEnumPlaintextOnly VarContenteditableAttrEnum = "plaintext-only"
	VarContenteditableAttrEnumTrue          VarContenteditableAttrEnum = "true"
)

type varAttrs map[string]any

func (e *VarElement) Autocapitalize(a VarAutocapitalizeAttrEnum) *VarElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *VarElement) Autocorrect(a VarAutocorrectAttrEnum) *VarElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *VarElement) Autofocus(b bool) *VarElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *VarElement) Class(s ...string) *VarElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *VarElement) Contenteditable(a VarContenteditableAttrEnum) *VarElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *VarElement) Id(s string) *VarElement {
	e.attributes["id"] = s

	return e
}

func (e *VarElement) Slot(s string) *VarElement {
	e.attributes["slot"] = s

	return e
}

func (e *VarElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<var")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</var>")); err != nil {
		return err
	}

	return nil
}
