// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type VarElement struct {
	attributes varAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// Var creates a tag <var> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The var element represents a variable. This could be an actual variable in a mathematical expression or programming context, an identifier representing a constant, a symbol identifying a physical quantity, a function parameter, or just be a term used as a placeholder in prose.
func Var(children ...htemel.Node) *VarElement {
	node := &VarElement{
		children:   children,
		attributes: make(varAttrs),
	}

	return node
}

func VarIf(condition bool, children ...htemel.Node) *VarElement {
	if condition {
		return Var(children...)
	}

	return &VarElement{
		children:   children,
		attributes: make(varAttrs),
		skipRender: true,
	}
}

func VarTernary(condition bool, true htemel.Node, false htemel.Node) *VarElement {
	if condition {
		return Var(true)
	}

	return Var(false)
}

type VarAutocapitalizeEnum string

const (
	VarAutocapitalizeEnumOff        VarAutocapitalizeEnum = "off"
	VarAutocapitalizeEnumOn         VarAutocapitalizeEnum = "on"
	VarAutocapitalizeEnumSentences  VarAutocapitalizeEnum = "sentences"
	VarAutocapitalizeEnumWords      VarAutocapitalizeEnum = "words"
	VarAutocapitalizeEnumCharacters VarAutocapitalizeEnum = "characters"
	VarAutocapitalizeEnumNone       VarAutocapitalizeEnum = "none"
)

type VarAutocorrectEnum string

const (
	VarAutocorrectEnumOn    VarAutocorrectEnum = "on"
	VarAutocorrectEnumOff   VarAutocorrectEnum = "off"
	VarAutocorrectEnumEmpty VarAutocorrectEnum = ""
)

type VarContenteditableEnum string

const (
	VarContenteditableEnumPlaintextOnly VarContenteditableEnum = "plaintext-only"
	VarContenteditableEnumTrue          VarContenteditableEnum = "true"
	VarContenteditableEnumFalse         VarContenteditableEnum = "false"
	VarContenteditableEnumEmpty         VarContenteditableEnum = ""
)

type VarDirEnum string

const (
	VarDirEnumAuto VarDirEnum = "auto"
	VarDirEnumLtr  VarDirEnum = "ltr"
	VarDirEnumRtl  VarDirEnum = "rtl"
)

type VarDraggableEnum string

const (
	VarDraggableEnumFalse VarDraggableEnum = "false"
	VarDraggableEnumTrue  VarDraggableEnum = "true"
)

type VarEnterkeyhintEnum string

const (
	VarEnterkeyhintEnumDone     VarEnterkeyhintEnum = "done"
	VarEnterkeyhintEnumEnter    VarEnterkeyhintEnum = "enter"
	VarEnterkeyhintEnumGo       VarEnterkeyhintEnum = "go"
	VarEnterkeyhintEnumNext     VarEnterkeyhintEnum = "next"
	VarEnterkeyhintEnumPrevious VarEnterkeyhintEnum = "previous"
	VarEnterkeyhintEnumSearch   VarEnterkeyhintEnum = "search"
	VarEnterkeyhintEnumSend     VarEnterkeyhintEnum = "send"
)

type VarHiddenEnum string

const (
	VarHiddenEnumHidden     VarHiddenEnum = "hidden"
	VarHiddenEnumUntilFound VarHiddenEnum = "until-found"
	VarHiddenEnumEmpty      VarHiddenEnum = ""
)

type VarInputmodeEnum string

const (
	VarInputmodeEnumTel     VarInputmodeEnum = "tel"
	VarInputmodeEnumText    VarInputmodeEnum = "text"
	VarInputmodeEnumUrl     VarInputmodeEnum = "url"
	VarInputmodeEnumDecimal VarInputmodeEnum = "decimal"
	VarInputmodeEnumEmail   VarInputmodeEnum = "email"
	VarInputmodeEnumNone    VarInputmodeEnum = "none"
	VarInputmodeEnumNumeric VarInputmodeEnum = "numeric"
	VarInputmodeEnumSearch  VarInputmodeEnum = "search"
)

type VarSpellcheckEnum string

const (
	VarSpellcheckEnumFalse VarSpellcheckEnum = "false"
	VarSpellcheckEnumTrue  VarSpellcheckEnum = "true"
	VarSpellcheckEnumEmpty VarSpellcheckEnum = ""
)

type VarTranslateEnum string

const (
	VarTranslateEnumYes   VarTranslateEnum = "yes"
	VarTranslateEnumNo    VarTranslateEnum = "no"
	VarTranslateEnumEmpty VarTranslateEnum = ""
)

type VarWritingsuggestionsEnum string

const (
	VarWritingsuggestionsEnumFalse VarWritingsuggestionsEnum = "false"
	VarWritingsuggestionsEnumTrue  VarWritingsuggestionsEnum = "true"
	VarWritingsuggestionsEnumEmpty VarWritingsuggestionsEnum = ""
)

type varAttrs map[string]any

func (e *VarElement) Autocapitalize(a VarAutocapitalizeEnum) *VarElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *VarElement) Autocorrect(a VarAutocorrectEnum) *VarElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *VarElement) Autofocus(b bool) *VarElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *VarElement) Class(s ...string) *VarElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *VarElement) Contenteditable(a VarContenteditableEnum) *VarElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *VarElement) DataUnsafe(name string, s string) *VarElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *VarElement) Data(name string, s string) *VarElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *VarElement) Dir(a VarDirEnum) *VarElement {
	e.attributes["dir"] = a

	return e
}

func (e *VarElement) Draggable(a VarDraggableEnum) *VarElement {
	e.attributes["draggable"] = a

	return e
}

func (e *VarElement) Enterkeyhint(a VarEnterkeyhintEnum) *VarElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *VarElement) Hidden(a VarHiddenEnum) *VarElement {
	e.attributes["hidden"] = a

	return e
}

func (e *VarElement) Id(s string) *VarElement {
	e.attributes["id"] = s

	return e
}

func (e *VarElement) Inert(b bool) *VarElement {
	e.attributes["inert"] = b

	return e
}

func (e *VarElement) Inputmode(a VarInputmodeEnum) *VarElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *VarElement) Itemid(s string) *VarElement {
	e.attributes["itemid"] = s

	return e
}

func (e *VarElement) Itemprop(s ...string) *VarElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *VarElement) Itemref(s ...string) *VarElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *VarElement) Itemscope(b bool) *VarElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *VarElement) Itemtype(s ...string) *VarElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *VarElement) Lang(s string) *VarElement {
	e.attributes["lang"] = s

	return e
}

func (e *VarElement) Nonce(s string) *VarElement {
	e.attributes["nonce"] = s

	return e
}

func (e *VarElement) Popover(s string) *VarElement {
	e.attributes["popover"] = s

	return e
}

func (e *VarElement) Slot(s string) *VarElement {
	e.attributes["slot"] = s

	return e
}

func (e *VarElement) Spellcheck(a VarSpellcheckEnum) *VarElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *VarElement) Style(s string) *VarElement {
	e.attributes["style"] = s

	return e
}

func (e *VarElement) Tabindex(i int) *VarElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *VarElement) Title(s string) *VarElement {
	e.attributes["title"] = s

	return e
}

func (e *VarElement) Translate(a VarTranslateEnum) *VarElement {
	e.attributes["translate"] = a

	return e
}

func (e *VarElement) Writingsuggestions(a VarWritingsuggestionsEnum) *VarElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *VarElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<var")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}
	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</var>")); err != nil {
		return err
	}

	return nil
}
