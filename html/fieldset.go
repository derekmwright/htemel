// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type FieldsetElement struct {
	attributes fieldsetAttrs
	children []htemel.Node
	skipRender bool
}

// Fieldset creates a tag <fieldset> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The fieldset element represents a set of form controls (or other content) grouped together, optionally with a caption. The caption is given by the first legend element that is a child of the fieldset element, if any. The remainder of the descendants form the group.
func Fieldset(children ...htemel.Node) *FieldsetElement {
	node := &FieldsetElement{
		children: children,
		attributes: make(fieldsetAttrs),
	}

	return node
}

func FieldsetIf(condition bool, children ...htemel.Node) *FieldsetElement {
	if condition {
		return Fieldset(children...)
	}

	return &FieldsetElement{
		skipRender: true,
	}
}

type FieldsetAutocapitalizeEnum string

const (
	FieldsetAutocapitalizeEnumSentences FieldsetAutocapitalizeEnum = "sentences"
	FieldsetAutocapitalizeEnumWords FieldsetAutocapitalizeEnum = "words"
	FieldsetAutocapitalizeEnumCharacters FieldsetAutocapitalizeEnum = "characters"
	FieldsetAutocapitalizeEnumNone FieldsetAutocapitalizeEnum = "none"
	FieldsetAutocapitalizeEnumOff FieldsetAutocapitalizeEnum = "off"
	FieldsetAutocapitalizeEnumOn FieldsetAutocapitalizeEnum = "on"
)

type FieldsetAutocorrectEnum string

const (
	FieldsetAutocorrectEnumOff FieldsetAutocorrectEnum = "off"
	FieldsetAutocorrectEnumOn FieldsetAutocorrectEnum = "on"
)

type FieldsetContenteditableEnum string

const (
	FieldsetContenteditableEnumPlaintextOnly FieldsetContenteditableEnum = "plaintext-only"
	FieldsetContenteditableEnumTrue FieldsetContenteditableEnum = "true"
	FieldsetContenteditableEnumFalse FieldsetContenteditableEnum = "false"
)

type FieldsetDirEnum string

const (
	FieldsetDirEnumAuto FieldsetDirEnum = "auto"
	FieldsetDirEnumLtr FieldsetDirEnum = "ltr"
	FieldsetDirEnumRtl FieldsetDirEnum = "rtl"
)

type FieldsetDraggableEnum string

const (
	FieldsetDraggableEnumFalse FieldsetDraggableEnum = "false"
	FieldsetDraggableEnumTrue FieldsetDraggableEnum = "true"
)

type FieldsetEnterkeyhintEnum string

const (
	FieldsetEnterkeyhintEnumDone FieldsetEnterkeyhintEnum = "done"
	FieldsetEnterkeyhintEnumEnter FieldsetEnterkeyhintEnum = "enter"
	FieldsetEnterkeyhintEnumGo FieldsetEnterkeyhintEnum = "go"
	FieldsetEnterkeyhintEnumNext FieldsetEnterkeyhintEnum = "next"
	FieldsetEnterkeyhintEnumPrevious FieldsetEnterkeyhintEnum = "previous"
	FieldsetEnterkeyhintEnumSearch FieldsetEnterkeyhintEnum = "search"
	FieldsetEnterkeyhintEnumSend FieldsetEnterkeyhintEnum = "send"
)

type FieldsetHiddenEnum string

const (
	FieldsetHiddenEnumHidden FieldsetHiddenEnum = "hidden"
	FieldsetHiddenEnumUntilFound FieldsetHiddenEnum = "until-found"
)

type fieldsetAttrs map[string]any

func (e *FieldsetElement) Autocapitalize(a FieldsetAutocapitalizeEnum) *FieldsetElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *FieldsetElement) Autocorrect(a FieldsetAutocorrectEnum) *FieldsetElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *FieldsetElement) Autofocus(b bool) *FieldsetElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *FieldsetElement) Class(s ...string) *FieldsetElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *FieldsetElement) Contenteditable(a FieldsetContenteditableEnum) *FieldsetElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *FieldsetElement) Dir(a FieldsetDirEnum) *FieldsetElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *FieldsetElement) Draggable(a FieldsetDraggableEnum) *FieldsetElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *FieldsetElement) Enterkeyhint(a FieldsetEnterkeyhintEnum) *FieldsetElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *FieldsetElement) Hidden(a FieldsetHiddenEnum) *FieldsetElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *FieldsetElement) Id(s string) *FieldsetElement {
	e.attributes["id"] = s
	
	return e
}

func (e *FieldsetElement) Slot(s string) *FieldsetElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *FieldsetElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<fieldset")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</fieldset>")); err != nil {
		return err
	}

	return nil
}
