// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type FieldsetElement struct {
	attributes fieldsetAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// Fieldset creates a tag <fieldset> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The fieldset element represents a set of form controls (or other content) grouped together, optionally with a caption. The caption is given by the first legend element that is a child of the fieldset element, if any. The remainder of the descendants form the group.
func Fieldset(children ...htemel.Node) *FieldsetElement {
	node := &FieldsetElement{
		children:   children,
		attributes: make(fieldsetAttrs),
	}

	return node
}

func FieldsetIf(condition bool, children ...htemel.Node) *FieldsetElement {
	if condition {
		return Fieldset(children...)
	}

	return &FieldsetElement{
		children:   children,
		attributes: make(fieldsetAttrs),
		skipRender: true,
	}
}

func FieldsetTernary(condition bool, true htemel.Node, false htemel.Node) *FieldsetElement {
	if condition {
		return Fieldset(true)
	}

	return Fieldset(false)
}

type FieldsetAutocapitalizeEnum string

const (
	FieldsetAutocapitalizeEnumCharacters FieldsetAutocapitalizeEnum = "characters"
	FieldsetAutocapitalizeEnumNone       FieldsetAutocapitalizeEnum = "none"
	FieldsetAutocapitalizeEnumOff        FieldsetAutocapitalizeEnum = "off"
	FieldsetAutocapitalizeEnumOn         FieldsetAutocapitalizeEnum = "on"
	FieldsetAutocapitalizeEnumSentences  FieldsetAutocapitalizeEnum = "sentences"
	FieldsetAutocapitalizeEnumWords      FieldsetAutocapitalizeEnum = "words"
)

type FieldsetAutocorrectEnum string

const (
	FieldsetAutocorrectEnumOff   FieldsetAutocorrectEnum = "off"
	FieldsetAutocorrectEnumOn    FieldsetAutocorrectEnum = "on"
	FieldsetAutocorrectEnumEmpty FieldsetAutocorrectEnum = ""
)

type FieldsetContenteditableEnum string

const (
	FieldsetContenteditableEnumPlaintextOnly FieldsetContenteditableEnum = "plaintext-only"
	FieldsetContenteditableEnumTrue          FieldsetContenteditableEnum = "true"
	FieldsetContenteditableEnumFalse         FieldsetContenteditableEnum = "false"
	FieldsetContenteditableEnumEmpty         FieldsetContenteditableEnum = ""
)

type FieldsetDirEnum string

const (
	FieldsetDirEnumAuto FieldsetDirEnum = "auto"
	FieldsetDirEnumLtr  FieldsetDirEnum = "ltr"
	FieldsetDirEnumRtl  FieldsetDirEnum = "rtl"
)

type FieldsetDraggableEnum string

const (
	FieldsetDraggableEnumFalse FieldsetDraggableEnum = "false"
	FieldsetDraggableEnumTrue  FieldsetDraggableEnum = "true"
)

type FieldsetEnterkeyhintEnum string

const (
	FieldsetEnterkeyhintEnumDone     FieldsetEnterkeyhintEnum = "done"
	FieldsetEnterkeyhintEnumEnter    FieldsetEnterkeyhintEnum = "enter"
	FieldsetEnterkeyhintEnumGo       FieldsetEnterkeyhintEnum = "go"
	FieldsetEnterkeyhintEnumNext     FieldsetEnterkeyhintEnum = "next"
	FieldsetEnterkeyhintEnumPrevious FieldsetEnterkeyhintEnum = "previous"
	FieldsetEnterkeyhintEnumSearch   FieldsetEnterkeyhintEnum = "search"
	FieldsetEnterkeyhintEnumSend     FieldsetEnterkeyhintEnum = "send"
)

type FieldsetHiddenEnum string

const (
	FieldsetHiddenEnumUntilFound FieldsetHiddenEnum = "until-found"
	FieldsetHiddenEnumHidden     FieldsetHiddenEnum = "hidden"
	FieldsetHiddenEnumEmpty      FieldsetHiddenEnum = ""
)

type FieldsetInputmodeEnum string

const (
	FieldsetInputmodeEnumDecimal FieldsetInputmodeEnum = "decimal"
	FieldsetInputmodeEnumEmail   FieldsetInputmodeEnum = "email"
	FieldsetInputmodeEnumNone    FieldsetInputmodeEnum = "none"
	FieldsetInputmodeEnumNumeric FieldsetInputmodeEnum = "numeric"
	FieldsetInputmodeEnumSearch  FieldsetInputmodeEnum = "search"
	FieldsetInputmodeEnumTel     FieldsetInputmodeEnum = "tel"
	FieldsetInputmodeEnumText    FieldsetInputmodeEnum = "text"
	FieldsetInputmodeEnumUrl     FieldsetInputmodeEnum = "url"
)

type FieldsetSpellcheckEnum string

const (
	FieldsetSpellcheckEnumFalse FieldsetSpellcheckEnum = "false"
	FieldsetSpellcheckEnumTrue  FieldsetSpellcheckEnum = "true"
	FieldsetSpellcheckEnumEmpty FieldsetSpellcheckEnum = ""
)

type FieldsetTranslateEnum string

const (
	FieldsetTranslateEnumNo    FieldsetTranslateEnum = "no"
	FieldsetTranslateEnumYes   FieldsetTranslateEnum = "yes"
	FieldsetTranslateEnumEmpty FieldsetTranslateEnum = ""
)

type FieldsetWritingsuggestionsEnum string

const (
	FieldsetWritingsuggestionsEnumFalse FieldsetWritingsuggestionsEnum = "false"
	FieldsetWritingsuggestionsEnumTrue  FieldsetWritingsuggestionsEnum = "true"
	FieldsetWritingsuggestionsEnumEmpty FieldsetWritingsuggestionsEnum = ""
)

type fieldsetAttrs map[string]any

func (e *FieldsetElement) Disabled(b bool) *FieldsetElement {
	e.attributes["disabled"] = b

	return e
}

func (e *FieldsetElement) Form(s string) *FieldsetElement {
	e.attributes["form"] = s

	return e
}

func (e *FieldsetElement) Name(s string) *FieldsetElement {
	e.attributes["name"] = s

	return e
}

func (e *FieldsetElement) Autocapitalize(a FieldsetAutocapitalizeEnum) *FieldsetElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *FieldsetElement) Autocorrect(a FieldsetAutocorrectEnum) *FieldsetElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *FieldsetElement) Autofocus(b bool) *FieldsetElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *FieldsetElement) Class(s ...string) *FieldsetElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *FieldsetElement) Contenteditable(a FieldsetContenteditableEnum) *FieldsetElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *FieldsetElement) DataUnsafe(name string, s string) *FieldsetElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *FieldsetElement) Data(name string, s string) *FieldsetElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *FieldsetElement) Dir(a FieldsetDirEnum) *FieldsetElement {
	e.attributes["dir"] = a

	return e
}

func (e *FieldsetElement) Draggable(a FieldsetDraggableEnum) *FieldsetElement {
	e.attributes["draggable"] = a

	return e
}

func (e *FieldsetElement) Enterkeyhint(a FieldsetEnterkeyhintEnum) *FieldsetElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *FieldsetElement) Hidden(a FieldsetHiddenEnum) *FieldsetElement {
	e.attributes["hidden"] = a

	return e
}

func (e *FieldsetElement) Id(s string) *FieldsetElement {
	e.attributes["id"] = s

	return e
}

func (e *FieldsetElement) Inert(b bool) *FieldsetElement {
	e.attributes["inert"] = b

	return e
}

func (e *FieldsetElement) Inputmode(a FieldsetInputmodeEnum) *FieldsetElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *FieldsetElement) Itemid(s string) *FieldsetElement {
	e.attributes["itemid"] = s

	return e
}

func (e *FieldsetElement) Itemprop(s ...string) *FieldsetElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *FieldsetElement) Itemref(s ...string) *FieldsetElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *FieldsetElement) Itemscope(b bool) *FieldsetElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *FieldsetElement) Itemtype(s ...string) *FieldsetElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *FieldsetElement) Lang(s string) *FieldsetElement {
	e.attributes["lang"] = s

	return e
}

func (e *FieldsetElement) Nonce(s string) *FieldsetElement {
	e.attributes["nonce"] = s

	return e
}

func (e *FieldsetElement) Popover(s string) *FieldsetElement {
	e.attributes["popover"] = s

	return e
}

func (e *FieldsetElement) Slot(s string) *FieldsetElement {
	e.attributes["slot"] = s

	return e
}

func (e *FieldsetElement) Spellcheck(a FieldsetSpellcheckEnum) *FieldsetElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *FieldsetElement) Style(s string) *FieldsetElement {
	e.attributes["style"] = s

	return e
}

func (e *FieldsetElement) Tabindex(i int) *FieldsetElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *FieldsetElement) Title(s string) *FieldsetElement {
	e.attributes["title"] = s

	return e
}

func (e *FieldsetElement) Translate(a FieldsetTranslateEnum) *FieldsetElement {
	e.attributes["translate"] = a

	return e
}

func (e *FieldsetElement) Writingsuggestions(a FieldsetWritingsuggestionsEnum) *FieldsetElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *FieldsetElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<fieldset")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}
	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</fieldset>")); err != nil {
		return err
	}

	return nil
}
