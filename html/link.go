// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type LinkElement struct {
	attributes linkAttrs
	children   []htemel.Node
	skipRender bool
}

// Link creates a tag <link> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The link element allows authors to link their document to other resources.
func Link(children ...htemel.Node) *LinkElement {
	node := &LinkElement{
		children:   children,
		attributes: make(linkAttrs),
	}

	return node
}

func LinkIf(condition bool, children ...htemel.Node) *LinkElement {
	if condition {
		return Link(children...)
	}

	return &LinkElement{
		skipRender: true,
	}
}

type LinkAutocapitalizeAttrEnum string

const (
	LinkAutocapitalizeAttrEnumCharacters LinkAutocapitalizeAttrEnum = "characters"
	LinkAutocapitalizeAttrEnumNone       LinkAutocapitalizeAttrEnum = "none"
	LinkAutocapitalizeAttrEnumOff        LinkAutocapitalizeAttrEnum = "off"
	LinkAutocapitalizeAttrEnumOn         LinkAutocapitalizeAttrEnum = "on"
	LinkAutocapitalizeAttrEnumSentences  LinkAutocapitalizeAttrEnum = "sentences"
	LinkAutocapitalizeAttrEnumWords      LinkAutocapitalizeAttrEnum = "words"
)

type LinkAutocorrectAttrEnum string

const (
	LinkAutocorrectAttrEnumOff LinkAutocorrectAttrEnum = "off"
	LinkAutocorrectAttrEnumOn  LinkAutocorrectAttrEnum = "on"
)

type LinkContenteditableAttrEnum string

const (
	LinkContenteditableAttrEnumTrue          LinkContenteditableAttrEnum = "true"
	LinkContenteditableAttrEnumFalse         LinkContenteditableAttrEnum = "false"
	LinkContenteditableAttrEnumPlaintextOnly LinkContenteditableAttrEnum = "plaintext-only"
)

type linkAttrs map[string]any

func (e *LinkElement) Autocapitalize(a LinkAutocapitalizeAttrEnum) *LinkElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *LinkElement) Autocorrect(a LinkAutocorrectAttrEnum) *LinkElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *LinkElement) Autofocus(b bool) *LinkElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *LinkElement) Class(s ...string) *LinkElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *LinkElement) Contenteditable(a LinkContenteditableAttrEnum) *LinkElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *LinkElement) Id(s string) *LinkElement {
	e.attributes["id"] = s

	return e
}

func (e *LinkElement) Slot(s string) *LinkElement {
	e.attributes["slot"] = s

	return e
}

func (e *LinkElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<link")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</link>")); err != nil {
		return err
	}

	return nil
}
