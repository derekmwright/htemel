// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type LinkElement struct {
	attributes linkAttrs

	skipRender bool
	indent     int
}

// Link creates a tag <link> instance and returns it for further modification.
//
// Spec Description: The link element allows authors to link their document to other resources.
func Link() *LinkElement {
	node := &LinkElement{
		attributes: make(linkAttrs),
	}

	return node
}

func LinkIf(condition bool) *LinkElement {
	if condition {
		return Link()
	}

	return &LinkElement{
		skipRender: true,
	}
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *LinkElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *LinkElement) AddIndent(i int) {
	e.indent = i + 1
}

type LinkCrossoriginEnum string

const (
	LinkCrossoriginEnumUseCredentials LinkCrossoriginEnum = "use-credentials"
	LinkCrossoriginEnumAnonymous      LinkCrossoriginEnum = "anonymous"
	LinkCrossoriginEnumEmpty          LinkCrossoriginEnum = ""
)

type LinkBlockingEnum string

const (
	LinkBlockingEnumRender LinkBlockingEnum = "render"
)

type LinkFetchpriorityEnum string

const (
	LinkFetchpriorityEnumLow  LinkFetchpriorityEnum = "low"
	LinkFetchpriorityEnumAuto LinkFetchpriorityEnum = "auto"
	LinkFetchpriorityEnumHigh LinkFetchpriorityEnum = "high"
)

type LinkAutocapitalizeEnum string

const (
	LinkAutocapitalizeEnumNone       LinkAutocapitalizeEnum = "none"
	LinkAutocapitalizeEnumOff        LinkAutocapitalizeEnum = "off"
	LinkAutocapitalizeEnumOn         LinkAutocapitalizeEnum = "on"
	LinkAutocapitalizeEnumSentences  LinkAutocapitalizeEnum = "sentences"
	LinkAutocapitalizeEnumWords      LinkAutocapitalizeEnum = "words"
	LinkAutocapitalizeEnumCharacters LinkAutocapitalizeEnum = "characters"
)

type LinkAutocorrectEnum string

const (
	LinkAutocorrectEnumOff   LinkAutocorrectEnum = "off"
	LinkAutocorrectEnumOn    LinkAutocorrectEnum = "on"
	LinkAutocorrectEnumEmpty LinkAutocorrectEnum = ""
)

type LinkContenteditableEnum string

const (
	LinkContenteditableEnumFalse         LinkContenteditableEnum = "false"
	LinkContenteditableEnumPlaintextOnly LinkContenteditableEnum = "plaintext-only"
	LinkContenteditableEnumTrue          LinkContenteditableEnum = "true"
	LinkContenteditableEnumEmpty         LinkContenteditableEnum = ""
)

type LinkDirEnum string

const (
	LinkDirEnumAuto LinkDirEnum = "auto"
	LinkDirEnumLtr  LinkDirEnum = "ltr"
	LinkDirEnumRtl  LinkDirEnum = "rtl"
)

type LinkDraggableEnum string

const (
	LinkDraggableEnumFalse LinkDraggableEnum = "false"
	LinkDraggableEnumTrue  LinkDraggableEnum = "true"
)

type LinkEnterkeyhintEnum string

const (
	LinkEnterkeyhintEnumSearch   LinkEnterkeyhintEnum = "search"
	LinkEnterkeyhintEnumSend     LinkEnterkeyhintEnum = "send"
	LinkEnterkeyhintEnumDone     LinkEnterkeyhintEnum = "done"
	LinkEnterkeyhintEnumEnter    LinkEnterkeyhintEnum = "enter"
	LinkEnterkeyhintEnumGo       LinkEnterkeyhintEnum = "go"
	LinkEnterkeyhintEnumNext     LinkEnterkeyhintEnum = "next"
	LinkEnterkeyhintEnumPrevious LinkEnterkeyhintEnum = "previous"
)

type LinkHiddenEnum string

const (
	LinkHiddenEnumHidden     LinkHiddenEnum = "hidden"
	LinkHiddenEnumUntilFound LinkHiddenEnum = "until-found"
	LinkHiddenEnumEmpty      LinkHiddenEnum = ""
)

type LinkInputmodeEnum string

const (
	LinkInputmodeEnumNumeric LinkInputmodeEnum = "numeric"
	LinkInputmodeEnumSearch  LinkInputmodeEnum = "search"
	LinkInputmodeEnumTel     LinkInputmodeEnum = "tel"
	LinkInputmodeEnumText    LinkInputmodeEnum = "text"
	LinkInputmodeEnumUrl     LinkInputmodeEnum = "url"
	LinkInputmodeEnumDecimal LinkInputmodeEnum = "decimal"
	LinkInputmodeEnumEmail   LinkInputmodeEnum = "email"
	LinkInputmodeEnumNone    LinkInputmodeEnum = "none"
)

type LinkSpellcheckEnum string

const (
	LinkSpellcheckEnumFalse LinkSpellcheckEnum = "false"
	LinkSpellcheckEnumTrue  LinkSpellcheckEnum = "true"
	LinkSpellcheckEnumEmpty LinkSpellcheckEnum = ""
)

type LinkTranslateEnum string

const (
	LinkTranslateEnumNo    LinkTranslateEnum = "no"
	LinkTranslateEnumYes   LinkTranslateEnum = "yes"
	LinkTranslateEnumEmpty LinkTranslateEnum = ""
)

type LinkWritingsuggestionsEnum string

const (
	LinkWritingsuggestionsEnumFalse LinkWritingsuggestionsEnum = "false"
	LinkWritingsuggestionsEnumTrue  LinkWritingsuggestionsEnum = "true"
	LinkWritingsuggestionsEnumEmpty LinkWritingsuggestionsEnum = ""
)

type linkAttrs map[string]any

func (e *LinkElement) Href(s string) *LinkElement {
	e.attributes["href"] = s

	return e
}

func (e *LinkElement) Crossorigin(a LinkCrossoriginEnum) *LinkElement {
	e.attributes["crossorigin"] = a

	return e
}

func (e *LinkElement) Rel(s ...string) *LinkElement {
	e.attributes["rel"] = strings.Join(s, " ")

	return e
}

func (e *LinkElement) Media(s string) *LinkElement {
	e.attributes["media"] = s

	return e
}

func (e *LinkElement) Integrity(s string) *LinkElement {
	e.attributes["integrity"] = s

	return e
}

func (e *LinkElement) Hreflang(s string) *LinkElement {
	e.attributes["hreflang"] = s

	return e
}

func (e *LinkElement) Type(s string) *LinkElement {
	e.attributes["type"] = s

	return e
}

func (e *LinkElement) Referrerpolicy(s string) *LinkElement {
	e.attributes["referrerpolicy"] = s

	return e
}

func (e *LinkElement) Sizes(s ...string) *LinkElement {
	e.attributes["sizes"] = strings.Join(s, " ")

	return e
}

func (e *LinkElement) Imagesrcset(s string) *LinkElement {
	e.attributes["imagesrcset"] = s

	return e
}

func (e *LinkElement) Imagesizes(s string) *LinkElement {
	e.attributes["imagesizes"] = s

	return e
}

func (e *LinkElement) As(s string) *LinkElement {
	e.attributes["as"] = s

	return e
}

func (e *LinkElement) Blocking(a LinkBlockingEnum) *LinkElement {
	e.attributes["blocking"] = a

	return e
}

func (e *LinkElement) Color(s string) *LinkElement {
	e.attributes["color"] = s

	return e
}

func (e *LinkElement) Disabled(b bool) *LinkElement {
	e.attributes["disabled"] = b

	return e
}

func (e *LinkElement) Fetchpriority(a LinkFetchpriorityEnum) *LinkElement {
	e.attributes["fetchpriority"] = a

	return e
}

func (e *LinkElement) Autocapitalize(a LinkAutocapitalizeEnum) *LinkElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *LinkElement) Autocorrect(a LinkAutocorrectEnum) *LinkElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *LinkElement) Autofocus(b bool) *LinkElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *LinkElement) Class(s ...string) *LinkElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *LinkElement) Contenteditable(a LinkContenteditableEnum) *LinkElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *LinkElement) DataUnsafe(name string, s string) *LinkElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *LinkElement) Data(name string, s string) *LinkElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *LinkElement) Dir(a LinkDirEnum) *LinkElement {
	e.attributes["dir"] = a

	return e
}

func (e *LinkElement) Draggable(a LinkDraggableEnum) *LinkElement {
	e.attributes["draggable"] = a

	return e
}

func (e *LinkElement) Enterkeyhint(a LinkEnterkeyhintEnum) *LinkElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *LinkElement) Hidden(a LinkHiddenEnum) *LinkElement {
	e.attributes["hidden"] = a

	return e
}

func (e *LinkElement) Id(s string) *LinkElement {
	e.attributes["id"] = s

	return e
}

func (e *LinkElement) Inert(b bool) *LinkElement {
	e.attributes["inert"] = b

	return e
}

func (e *LinkElement) Inputmode(a LinkInputmodeEnum) *LinkElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *LinkElement) Itemid(s string) *LinkElement {
	e.attributes["itemid"] = s

	return e
}

func (e *LinkElement) Itemprop(s ...string) *LinkElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *LinkElement) Itemref(s ...string) *LinkElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *LinkElement) Itemscope(b bool) *LinkElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *LinkElement) Itemtype(s ...string) *LinkElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *LinkElement) Lang(s string) *LinkElement {
	e.attributes["lang"] = s

	return e
}

func (e *LinkElement) Nonce(s string) *LinkElement {
	e.attributes["nonce"] = s

	return e
}

func (e *LinkElement) Popover(s string) *LinkElement {
	e.attributes["popover"] = s

	return e
}

func (e *LinkElement) Slot(s string) *LinkElement {
	e.attributes["slot"] = s

	return e
}

func (e *LinkElement) Spellcheck(a LinkSpellcheckEnum) *LinkElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *LinkElement) Style(s string) *LinkElement {
	e.attributes["style"] = s

	return e
}

func (e *LinkElement) Tabindex(i int) *LinkElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *LinkElement) Title(s string) *LinkElement {
	e.attributes["title"] = s

	return e
}

func (e *LinkElement) Translate(a LinkTranslateEnum) *LinkElement {
	e.attributes["translate"] = a

	return e
}

func (e *LinkElement) Writingsuggestions(a LinkWritingsuggestionsEnum) *LinkElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *LinkElement) Render(w io.Writer) error {
	indent := htemel.SetIndent(e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<link")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}

	return nil
}
