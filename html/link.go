// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type LinkElement struct {
	attributes linkAttrs
	children []htemel.Node
	skipRender bool
}

// Link creates a tag <link> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The link element allows authors to link their document to other resources.
func Link(children ...htemel.Node) *LinkElement {
	node := &LinkElement{
		children: children,
		attributes: make(linkAttrs),
	}

	return node
}

func LinkIf(condition bool, children ...htemel.Node) *LinkElement {
	if condition {
		return Link(children...)
	}

	return &LinkElement{
		skipRender: true,
	}
}

type LinkAutocapitalizeEnum string

const (
	LinkAutocapitalizeEnumCharacters LinkAutocapitalizeEnum = "characters"
	LinkAutocapitalizeEnumNone LinkAutocapitalizeEnum = "none"
	LinkAutocapitalizeEnumOff LinkAutocapitalizeEnum = "off"
	LinkAutocapitalizeEnumOn LinkAutocapitalizeEnum = "on"
	LinkAutocapitalizeEnumSentences LinkAutocapitalizeEnum = "sentences"
	LinkAutocapitalizeEnumWords LinkAutocapitalizeEnum = "words"
)

type LinkAutocorrectEnum string

const (
	LinkAutocorrectEnumOn LinkAutocorrectEnum = "on"
	LinkAutocorrectEnumOff LinkAutocorrectEnum = "off"
)

type LinkContenteditableEnum string

const (
	LinkContenteditableEnumFalse LinkContenteditableEnum = "false"
	LinkContenteditableEnumPlaintextOnly LinkContenteditableEnum = "plaintext-only"
	LinkContenteditableEnumTrue LinkContenteditableEnum = "true"
)

type LinkDirEnum string

const (
	LinkDirEnumAuto LinkDirEnum = "auto"
	LinkDirEnumLtr LinkDirEnum = "ltr"
	LinkDirEnumRtl LinkDirEnum = "rtl"
)

type LinkDraggableEnum string

const (
	LinkDraggableEnumFalse LinkDraggableEnum = "false"
	LinkDraggableEnumTrue LinkDraggableEnum = "true"
)

type LinkEnterkeyhintEnum string

const (
	LinkEnterkeyhintEnumSearch LinkEnterkeyhintEnum = "search"
	LinkEnterkeyhintEnumSend LinkEnterkeyhintEnum = "send"
	LinkEnterkeyhintEnumDone LinkEnterkeyhintEnum = "done"
	LinkEnterkeyhintEnumEnter LinkEnterkeyhintEnum = "enter"
	LinkEnterkeyhintEnumGo LinkEnterkeyhintEnum = "go"
	LinkEnterkeyhintEnumNext LinkEnterkeyhintEnum = "next"
	LinkEnterkeyhintEnumPrevious LinkEnterkeyhintEnum = "previous"
)

type LinkHiddenEnum string

const (
	LinkHiddenEnumHidden LinkHiddenEnum = "hidden"
	LinkHiddenEnumUntilFound LinkHiddenEnum = "until-found"
)

type linkAttrs map[string]any

func (e *LinkElement) Autocapitalize(a LinkAutocapitalizeEnum) *LinkElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *LinkElement) Autocorrect(a LinkAutocorrectEnum) *LinkElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *LinkElement) Autofocus(b bool) *LinkElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *LinkElement) Class(s ...string) *LinkElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *LinkElement) Contenteditable(a LinkContenteditableEnum) *LinkElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *LinkElement) Dir(a LinkDirEnum) *LinkElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *LinkElement) Draggable(a LinkDraggableEnum) *LinkElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *LinkElement) Enterkeyhint(a LinkEnterkeyhintEnum) *LinkElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *LinkElement) Hidden(a LinkHiddenEnum) *LinkElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *LinkElement) Id(s string) *LinkElement {
	e.attributes["id"] = s
	
	return e
}

func (e *LinkElement) Slot(s string) *LinkElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *LinkElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<link")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</link>")); err != nil {
		return err
	}

	return nil
}
