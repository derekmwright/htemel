// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type MarkElement struct {
	attributes markAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// Mark creates a tag <mark> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The mark element represents a run of text in one document marked or highlighted for reference purposes, due to its relevance in another context. When used in a quotation or other block of text referred to from the prose, it indicates a highlight that was not originally present but which has been added to bring the reader's attention to a part of the text that might not have been considered important by the original author when the block was originally written, but which is now under previously unexpected scrutiny. When used in the main prose of a document, it indicates a part of the document that has been highlighted due to its likely relevance to the user's current activity.
func Mark(children ...htemel.Node) *MarkElement {
	node := &MarkElement{
		children: children, attributes: make(markAttrs),
	}

	return node
}

func MarkIf(condition bool, children ...htemel.Node) *MarkElement {
	if condition {
		return Mark(children...)
	}

	return &MarkElement{
		skipRender: true,
	}
}

func MarkTernary(condition bool, true htemel.Node, false htemel.Node) *MarkElement {
	if condition {
		return Mark(true)
	}

	return Mark(false)
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *MarkElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *MarkElement) AddIndent(i int) {
	e.indent = i + 1
}

type MarkAutocapitalizeEnum string

const (
	MarkAutocapitalizeEnumCharacters MarkAutocapitalizeEnum = "characters"
	MarkAutocapitalizeEnumNone       MarkAutocapitalizeEnum = "none"
	MarkAutocapitalizeEnumOff        MarkAutocapitalizeEnum = "off"
	MarkAutocapitalizeEnumOn         MarkAutocapitalizeEnum = "on"
	MarkAutocapitalizeEnumSentences  MarkAutocapitalizeEnum = "sentences"
	MarkAutocapitalizeEnumWords      MarkAutocapitalizeEnum = "words"
)

type MarkAutocorrectEnum string

const (
	MarkAutocorrectEnumOff   MarkAutocorrectEnum = "off"
	MarkAutocorrectEnumOn    MarkAutocorrectEnum = "on"
	MarkAutocorrectEnumEmpty MarkAutocorrectEnum = ""
)

type MarkContenteditableEnum string

const (
	MarkContenteditableEnumFalse         MarkContenteditableEnum = "false"
	MarkContenteditableEnumPlaintextOnly MarkContenteditableEnum = "plaintext-only"
	MarkContenteditableEnumTrue          MarkContenteditableEnum = "true"
	MarkContenteditableEnumEmpty         MarkContenteditableEnum = ""
)

type MarkDirEnum string

const (
	MarkDirEnumAuto MarkDirEnum = "auto"
	MarkDirEnumLtr  MarkDirEnum = "ltr"
	MarkDirEnumRtl  MarkDirEnum = "rtl"
)

type MarkDraggableEnum string

const (
	MarkDraggableEnumFalse MarkDraggableEnum = "false"
	MarkDraggableEnumTrue  MarkDraggableEnum = "true"
)

type MarkEnterkeyhintEnum string

const (
	MarkEnterkeyhintEnumDone     MarkEnterkeyhintEnum = "done"
	MarkEnterkeyhintEnumEnter    MarkEnterkeyhintEnum = "enter"
	MarkEnterkeyhintEnumGo       MarkEnterkeyhintEnum = "go"
	MarkEnterkeyhintEnumNext     MarkEnterkeyhintEnum = "next"
	MarkEnterkeyhintEnumPrevious MarkEnterkeyhintEnum = "previous"
	MarkEnterkeyhintEnumSearch   MarkEnterkeyhintEnum = "search"
	MarkEnterkeyhintEnumSend     MarkEnterkeyhintEnum = "send"
)

type MarkHiddenEnum string

const (
	MarkHiddenEnumHidden     MarkHiddenEnum = "hidden"
	MarkHiddenEnumUntilFound MarkHiddenEnum = "until-found"
	MarkHiddenEnumEmpty      MarkHiddenEnum = ""
)

type MarkInputmodeEnum string

const (
	MarkInputmodeEnumDecimal MarkInputmodeEnum = "decimal"
	MarkInputmodeEnumEmail   MarkInputmodeEnum = "email"
	MarkInputmodeEnumNone    MarkInputmodeEnum = "none"
	MarkInputmodeEnumNumeric MarkInputmodeEnum = "numeric"
	MarkInputmodeEnumSearch  MarkInputmodeEnum = "search"
	MarkInputmodeEnumTel     MarkInputmodeEnum = "tel"
	MarkInputmodeEnumText    MarkInputmodeEnum = "text"
	MarkInputmodeEnumUrl     MarkInputmodeEnum = "url"
)

type MarkSpellcheckEnum string

const (
	MarkSpellcheckEnumFalse MarkSpellcheckEnum = "false"
	MarkSpellcheckEnumTrue  MarkSpellcheckEnum = "true"
	MarkSpellcheckEnumEmpty MarkSpellcheckEnum = ""
)

type MarkTranslateEnum string

const (
	MarkTranslateEnumYes   MarkTranslateEnum = "yes"
	MarkTranslateEnumNo    MarkTranslateEnum = "no"
	MarkTranslateEnumEmpty MarkTranslateEnum = ""
)

type MarkWritingsuggestionsEnum string

const (
	MarkWritingsuggestionsEnumFalse MarkWritingsuggestionsEnum = "false"
	MarkWritingsuggestionsEnumTrue  MarkWritingsuggestionsEnum = "true"
	MarkWritingsuggestionsEnumEmpty MarkWritingsuggestionsEnum = ""
)

type markAttrs map[string]any

func (e *MarkElement) Autocapitalize(a MarkAutocapitalizeEnum) *MarkElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *MarkElement) Autocorrect(a MarkAutocorrectEnum) *MarkElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *MarkElement) Autofocus(b bool) *MarkElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *MarkElement) Class(s ...string) *MarkElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *MarkElement) Contenteditable(a MarkContenteditableEnum) *MarkElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *MarkElement) DataUnsafe(name string, s string) *MarkElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *MarkElement) Data(name string, s string) *MarkElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *MarkElement) Dir(a MarkDirEnum) *MarkElement {
	e.attributes["dir"] = a

	return e
}

func (e *MarkElement) Draggable(a MarkDraggableEnum) *MarkElement {
	e.attributes["draggable"] = a

	return e
}

func (e *MarkElement) Enterkeyhint(a MarkEnterkeyhintEnum) *MarkElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *MarkElement) Hidden(a MarkHiddenEnum) *MarkElement {
	e.attributes["hidden"] = a

	return e
}

func (e *MarkElement) Id(s string) *MarkElement {
	e.attributes["id"] = s

	return e
}

func (e *MarkElement) Inert(b bool) *MarkElement {
	e.attributes["inert"] = b

	return e
}

func (e *MarkElement) Inputmode(a MarkInputmodeEnum) *MarkElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *MarkElement) Itemid(s string) *MarkElement {
	e.attributes["itemid"] = s

	return e
}

func (e *MarkElement) Itemprop(s ...string) *MarkElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *MarkElement) Itemref(s ...string) *MarkElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *MarkElement) Itemscope(b bool) *MarkElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *MarkElement) Itemtype(s ...string) *MarkElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *MarkElement) Lang(s string) *MarkElement {
	e.attributes["lang"] = s

	return e
}

func (e *MarkElement) Nonce(s string) *MarkElement {
	e.attributes["nonce"] = s

	return e
}

func (e *MarkElement) Popover(s string) *MarkElement {
	e.attributes["popover"] = s

	return e
}

func (e *MarkElement) Slot(s string) *MarkElement {
	e.attributes["slot"] = s

	return e
}

func (e *MarkElement) Spellcheck(a MarkSpellcheckEnum) *MarkElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *MarkElement) Style(s string) *MarkElement {
	e.attributes["style"] = s

	return e
}

func (e *MarkElement) Tabindex(i int) *MarkElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *MarkElement) Title(s string) *MarkElement {
	e.attributes["title"] = s

	return e
}

func (e *MarkElement) Translate(a MarkTranslateEnum) *MarkElement {
	e.attributes["translate"] = a

	return e
}

func (e *MarkElement) Writingsuggestions(a MarkWritingsuggestionsEnum) *MarkElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *MarkElement) Render(w io.Writer) error {
	indent := strings.Repeat("  ", e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<mark")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}
	for _, child := range e.children {
		child.AddIndent(e.Indent())
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(indent + "</mark>\n")); err != nil {
		return err
	}

	return nil
}
