// Code generated by htemel. DO NOT EDIT.
package html

import (
  "github.com/derekmwright/htemel"
  "io"
)

type DelElement struct {
	children []htemel.Node
	skipRender bool
}

// Del creates a tag <del> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The del element represents a removal from the document.
func Del(children ...htemel.Node) *DelElement {
	node := &DelElement{
		children: children,
	}

	return node
}

func DelIf(condition bool, children ...htemel.Node) *DelElement {
	if condition {
		return Del(children...)
	}

	return &DelElement{
		skipRender: true,
	}
}

func (e *DelElement) Autocapitalize() *DelElement {
	return e
}

func (e *DelElement) Autocorrect() *DelElement {
	return e
}

func (e *DelElement) Autofocus() *DelElement {
	return e
}

func (e *DelElement) Class() *DelElement {
	return e
}

func (e *DelElement) Contenteditable() *DelElement {
	return e
}

func (e *DelElement) Id() *DelElement {
	return e
}

func (e *DelElement) Slot() *DelElement {
	return e
}

func (e *DelElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<del")); err != nil {
		return err
	}

	// TODO: Attribute stuff here

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</del>")); err != nil {
		return err
	}

	return nil
}
