// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type DelElement struct {
	attributes delAttrs
	children []htemel.Node
	skipRender bool
}

// Del creates a tag <del> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The del element represents a removal from the document.
func Del(children ...htemel.Node) *DelElement {
	node := &DelElement{
		children: children,
		attributes: make(delAttrs),
	}

	return node
}

func DelIf(condition bool, children ...htemel.Node) *DelElement {
	if condition {
		return Del(children...)
	}

	return &DelElement{
		skipRender: true,
	}
}

type DelAutocapitalizeAttrEnum string

const (
	DelAutocapitalizeAttrEnumCharacters DelAutocapitalizeAttrEnum = "characters"
	DelAutocapitalizeAttrEnumNone DelAutocapitalizeAttrEnum = "none"
	DelAutocapitalizeAttrEnumOff DelAutocapitalizeAttrEnum = "off"
	DelAutocapitalizeAttrEnumOn DelAutocapitalizeAttrEnum = "on"
	DelAutocapitalizeAttrEnumSentences DelAutocapitalizeAttrEnum = "sentences"
	DelAutocapitalizeAttrEnumWords DelAutocapitalizeAttrEnum = "words"
)

type DelAutocorrectAttrEnum string

const (
	DelAutocorrectAttrEnumOff DelAutocorrectAttrEnum = "off"
	DelAutocorrectAttrEnumOn DelAutocorrectAttrEnum = "on"
)

type DelContenteditableAttrEnum string

const (
	DelContenteditableAttrEnumTrue DelContenteditableAttrEnum = "true"
	DelContenteditableAttrEnumFalse DelContenteditableAttrEnum = "false"
	DelContenteditableAttrEnumPlaintextOnly DelContenteditableAttrEnum = "plaintext-only"
)

type delAttrs map[string]any

func (e *DelElement) Autocapitalize(a DelAutocapitalizeAttrEnum) *DelElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *DelElement) Autocorrect(a DelAutocorrectAttrEnum) *DelElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *DelElement) Class(s ...string) *DelElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *DelElement) Contenteditable(a DelContenteditableAttrEnum) *DelElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *DelElement) Id(s string) *DelElement {
	e.attributes["id"] = s
	
	return e
}

func (e *DelElement) Slot(s string) *DelElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *DelElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<del")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		w.Write([]byte(" " + key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</del>")); err != nil {
		return err
	}

	return nil
}
