// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type DelElement struct {
	attributes delAttrs
	children []htemel.Node
	skipRender bool
}

// Del creates a tag <del> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The del element represents a removal from the document.
func Del(children ...htemel.Node) *DelElement {
	node := &DelElement{
		children: children,
		attributes: make(delAttrs),
	}

	return node
}

func DelIf(condition bool, children ...htemel.Node) *DelElement {
	if condition {
		return Del(children...)
	}

	return &DelElement{
		skipRender: true,
	}
}

type DelAutocapitalizeEnum string

const (
	DelAutocapitalizeEnumOff DelAutocapitalizeEnum = "off"
	DelAutocapitalizeEnumOn DelAutocapitalizeEnum = "on"
	DelAutocapitalizeEnumSentences DelAutocapitalizeEnum = "sentences"
	DelAutocapitalizeEnumWords DelAutocapitalizeEnum = "words"
	DelAutocapitalizeEnumCharacters DelAutocapitalizeEnum = "characters"
	DelAutocapitalizeEnumNone DelAutocapitalizeEnum = "none"
)

type DelAutocorrectEnum string

const (
	DelAutocorrectEnumOff DelAutocorrectEnum = "off"
	DelAutocorrectEnumOn DelAutocorrectEnum = "on"
)

type DelContenteditableEnum string

const (
	DelContenteditableEnumFalse DelContenteditableEnum = "false"
	DelContenteditableEnumPlaintextOnly DelContenteditableEnum = "plaintext-only"
	DelContenteditableEnumTrue DelContenteditableEnum = "true"
)

type DelDirEnum string

const (
	DelDirEnumAuto DelDirEnum = "auto"
	DelDirEnumLtr DelDirEnum = "ltr"
	DelDirEnumRtl DelDirEnum = "rtl"
)

type DelDraggableEnum string

const (
	DelDraggableEnumTrue DelDraggableEnum = "true"
	DelDraggableEnumFalse DelDraggableEnum = "false"
)

type DelEnterkeyhintEnum string

const (
	DelEnterkeyhintEnumDone DelEnterkeyhintEnum = "done"
	DelEnterkeyhintEnumEnter DelEnterkeyhintEnum = "enter"
	DelEnterkeyhintEnumGo DelEnterkeyhintEnum = "go"
	DelEnterkeyhintEnumNext DelEnterkeyhintEnum = "next"
	DelEnterkeyhintEnumPrevious DelEnterkeyhintEnum = "previous"
	DelEnterkeyhintEnumSearch DelEnterkeyhintEnum = "search"
	DelEnterkeyhintEnumSend DelEnterkeyhintEnum = "send"
)

type DelHiddenEnum string

const (
	DelHiddenEnumHidden DelHiddenEnum = "hidden"
	DelHiddenEnumUntilFound DelHiddenEnum = "until-found"
)

type delAttrs map[string]any

func (e *DelElement) Autocapitalize(a DelAutocapitalizeEnum) *DelElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *DelElement) Autocorrect(a DelAutocorrectEnum) *DelElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *DelElement) Autofocus(b bool) *DelElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *DelElement) Class(s ...string) *DelElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *DelElement) Contenteditable(a DelContenteditableEnum) *DelElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *DelElement) Dir(a DelDirEnum) *DelElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *DelElement) Draggable(a DelDraggableEnum) *DelElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *DelElement) Enterkeyhint(a DelEnterkeyhintEnum) *DelElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *DelElement) Hidden(a DelHiddenEnum) *DelElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *DelElement) Id(s string) *DelElement {
	e.attributes["id"] = s
	
	return e
}

func (e *DelElement) Slot(s string) *DelElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *DelElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<del")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</del>")); err != nil {
		return err
	}

	return nil
}
