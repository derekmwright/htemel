// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type DelElement struct {
	attributes delAttrs
	children   []htemel.Node
	skipRender bool
}

// Del creates a tag <del> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The del element represents a removal from the document.
func Del(children ...htemel.Node) *DelElement {
	node := &DelElement{
		children: children, attributes: make(delAttrs),
	}

	return node
}

func DelIf(condition bool, children ...htemel.Node) *DelElement {
	if condition {
		return Del(children...)
	}

	return &DelElement{
		skipRender: true,
	}
}

func DelTernary(condition bool, true htemel.Node, false htemel.Node) *DelElement {
	if condition {
		return Del(true)
	}

	return Del(false)
}

type DelAutocapitalizeEnum string

const (
	DelAutocapitalizeEnumOn         DelAutocapitalizeEnum = "on"
	DelAutocapitalizeEnumSentences  DelAutocapitalizeEnum = "sentences"
	DelAutocapitalizeEnumWords      DelAutocapitalizeEnum = "words"
	DelAutocapitalizeEnumCharacters DelAutocapitalizeEnum = "characters"
	DelAutocapitalizeEnumNone       DelAutocapitalizeEnum = "none"
	DelAutocapitalizeEnumOff        DelAutocapitalizeEnum = "off"
)

type DelAutocorrectEnum string

const (
	DelAutocorrectEnumOff   DelAutocorrectEnum = "off"
	DelAutocorrectEnumOn    DelAutocorrectEnum = "on"
	DelAutocorrectEnumEmpty DelAutocorrectEnum = ""
)

type DelContenteditableEnum string

const (
	DelContenteditableEnumFalse         DelContenteditableEnum = "false"
	DelContenteditableEnumPlaintextOnly DelContenteditableEnum = "plaintext-only"
	DelContenteditableEnumTrue          DelContenteditableEnum = "true"
	DelContenteditableEnumEmpty         DelContenteditableEnum = ""
)

type DelDirEnum string

const (
	DelDirEnumAuto DelDirEnum = "auto"
	DelDirEnumLtr  DelDirEnum = "ltr"
	DelDirEnumRtl  DelDirEnum = "rtl"
)

type DelDraggableEnum string

const (
	DelDraggableEnumFalse DelDraggableEnum = "false"
	DelDraggableEnumTrue  DelDraggableEnum = "true"
)

type DelEnterkeyhintEnum string

const (
	DelEnterkeyhintEnumNext     DelEnterkeyhintEnum = "next"
	DelEnterkeyhintEnumPrevious DelEnterkeyhintEnum = "previous"
	DelEnterkeyhintEnumSearch   DelEnterkeyhintEnum = "search"
	DelEnterkeyhintEnumSend     DelEnterkeyhintEnum = "send"
	DelEnterkeyhintEnumDone     DelEnterkeyhintEnum = "done"
	DelEnterkeyhintEnumEnter    DelEnterkeyhintEnum = "enter"
	DelEnterkeyhintEnumGo       DelEnterkeyhintEnum = "go"
)

type DelHiddenEnum string

const (
	DelHiddenEnumHidden     DelHiddenEnum = "hidden"
	DelHiddenEnumUntilFound DelHiddenEnum = "until-found"
	DelHiddenEnumEmpty      DelHiddenEnum = ""
)

type DelInputmodeEnum string

const (
	DelInputmodeEnumEmail   DelInputmodeEnum = "email"
	DelInputmodeEnumNone    DelInputmodeEnum = "none"
	DelInputmodeEnumNumeric DelInputmodeEnum = "numeric"
	DelInputmodeEnumSearch  DelInputmodeEnum = "search"
	DelInputmodeEnumTel     DelInputmodeEnum = "tel"
	DelInputmodeEnumText    DelInputmodeEnum = "text"
	DelInputmodeEnumUrl     DelInputmodeEnum = "url"
	DelInputmodeEnumDecimal DelInputmodeEnum = "decimal"
)

type DelSpellcheckEnum string

const (
	DelSpellcheckEnumFalse DelSpellcheckEnum = "false"
	DelSpellcheckEnumTrue  DelSpellcheckEnum = "true"
	DelSpellcheckEnumEmpty DelSpellcheckEnum = ""
)

type DelTranslateEnum string

const (
	DelTranslateEnumNo    DelTranslateEnum = "no"
	DelTranslateEnumYes   DelTranslateEnum = "yes"
	DelTranslateEnumEmpty DelTranslateEnum = ""
)

type DelWritingsuggestionsEnum string

const (
	DelWritingsuggestionsEnumFalse DelWritingsuggestionsEnum = "false"
	DelWritingsuggestionsEnumTrue  DelWritingsuggestionsEnum = "true"
	DelWritingsuggestionsEnumEmpty DelWritingsuggestionsEnum = ""
)

type delAttrs map[string]any

func (e *DelElement) Cite(s string) *DelElement {
	e.attributes["cite"] = s

	return e
}

func (e *DelElement) Datetime(s string) *DelElement {
	e.attributes["datetime"] = s

	return e
}

func (e *DelElement) Autocapitalize(a DelAutocapitalizeEnum) *DelElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *DelElement) Autocorrect(a DelAutocorrectEnum) *DelElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *DelElement) Autofocus(b bool) *DelElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *DelElement) Class(s ...string) *DelElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *DelElement) Contenteditable(a DelContenteditableEnum) *DelElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *DelElement) DataUnsafe(name string, s string) *DelElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *DelElement) Data(name string, s string) *DelElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *DelElement) Dir(a DelDirEnum) *DelElement {
	e.attributes["dir"] = a

	return e
}

func (e *DelElement) Draggable(a DelDraggableEnum) *DelElement {
	e.attributes["draggable"] = a

	return e
}

func (e *DelElement) Enterkeyhint(a DelEnterkeyhintEnum) *DelElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *DelElement) Hidden(a DelHiddenEnum) *DelElement {
	e.attributes["hidden"] = a

	return e
}

func (e *DelElement) Id(s string) *DelElement {
	e.attributes["id"] = s

	return e
}

func (e *DelElement) Inert(b bool) *DelElement {
	e.attributes["inert"] = b

	return e
}

func (e *DelElement) Inputmode(a DelInputmodeEnum) *DelElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *DelElement) Itemid(s string) *DelElement {
	e.attributes["itemid"] = s

	return e
}

func (e *DelElement) Itemprop(s ...string) *DelElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *DelElement) Itemref(s ...string) *DelElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *DelElement) Itemscope(b bool) *DelElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *DelElement) Itemtype(s ...string) *DelElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *DelElement) Lang(s string) *DelElement {
	e.attributes["lang"] = s

	return e
}

func (e *DelElement) Nonce(s string) *DelElement {
	e.attributes["nonce"] = s

	return e
}

func (e *DelElement) Popover(s string) *DelElement {
	e.attributes["popover"] = s

	return e
}

func (e *DelElement) Slot(s string) *DelElement {
	e.attributes["slot"] = s

	return e
}

func (e *DelElement) Spellcheck(a DelSpellcheckEnum) *DelElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *DelElement) Style(s string) *DelElement {
	e.attributes["style"] = s

	return e
}

func (e *DelElement) Tabindex(i int) *DelElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *DelElement) Title(s string) *DelElement {
	e.attributes["title"] = s

	return e
}

func (e *DelElement) Translate(a DelTranslateEnum) *DelElement {
	e.attributes["translate"] = a

	return e
}

func (e *DelElement) Writingsuggestions(a DelWritingsuggestionsEnum) *DelElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *DelElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<del")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}
	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</del>")); err != nil {
		return err
	}

	return nil
}
