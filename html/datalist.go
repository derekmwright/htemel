// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type DatalistElement struct {
	attributes datalistAttrs
	children []htemel.Node
	skipRender bool
}

// Datalist creates a tag <datalist> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The datalist element represents a set of option elements that represent predefined options for other controls. In the rendering, the datalist element represents nothing and it, along with its children, should be hidden.
func Datalist(children ...htemel.Node) *DatalistElement {
	node := &DatalistElement{
		children: children,
		attributes: make(datalistAttrs),
	}

	return node
}

func DatalistIf(condition bool, children ...htemel.Node) *DatalistElement {
	if condition {
		return Datalist(children...)
	}

	return &DatalistElement{
		skipRender: true,
	}
}

type DatalistAutocapitalizeEnum string

const (
	DatalistAutocapitalizeEnumNone DatalistAutocapitalizeEnum = "none"
	DatalistAutocapitalizeEnumOff DatalistAutocapitalizeEnum = "off"
	DatalistAutocapitalizeEnumOn DatalistAutocapitalizeEnum = "on"
	DatalistAutocapitalizeEnumSentences DatalistAutocapitalizeEnum = "sentences"
	DatalistAutocapitalizeEnumWords DatalistAutocapitalizeEnum = "words"
	DatalistAutocapitalizeEnumCharacters DatalistAutocapitalizeEnum = "characters"
)

type DatalistAutocorrectEnum string

const (
	DatalistAutocorrectEnumOn DatalistAutocorrectEnum = "on"
	DatalistAutocorrectEnumOff DatalistAutocorrectEnum = "off"
)

type DatalistContenteditableEnum string

const (
	DatalistContenteditableEnumFalse DatalistContenteditableEnum = "false"
	DatalistContenteditableEnumPlaintextOnly DatalistContenteditableEnum = "plaintext-only"
	DatalistContenteditableEnumTrue DatalistContenteditableEnum = "true"
)

type DatalistDirEnum string

const (
	DatalistDirEnumAuto DatalistDirEnum = "auto"
	DatalistDirEnumLtr DatalistDirEnum = "ltr"
	DatalistDirEnumRtl DatalistDirEnum = "rtl"
)

type DatalistDraggableEnum string

const (
	DatalistDraggableEnumFalse DatalistDraggableEnum = "false"
	DatalistDraggableEnumTrue DatalistDraggableEnum = "true"
)

type DatalistEnterkeyhintEnum string

const (
	DatalistEnterkeyhintEnumDone DatalistEnterkeyhintEnum = "done"
	DatalistEnterkeyhintEnumEnter DatalistEnterkeyhintEnum = "enter"
	DatalistEnterkeyhintEnumGo DatalistEnterkeyhintEnum = "go"
	DatalistEnterkeyhintEnumNext DatalistEnterkeyhintEnum = "next"
	DatalistEnterkeyhintEnumPrevious DatalistEnterkeyhintEnum = "previous"
	DatalistEnterkeyhintEnumSearch DatalistEnterkeyhintEnum = "search"
	DatalistEnterkeyhintEnumSend DatalistEnterkeyhintEnum = "send"
)

type DatalistHiddenEnum string

const (
	DatalistHiddenEnumHidden DatalistHiddenEnum = "hidden"
	DatalistHiddenEnumUntilFound DatalistHiddenEnum = "until-found"
)

type datalistAttrs map[string]any

func (e *DatalistElement) Autocapitalize(a DatalistAutocapitalizeEnum) *DatalistElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *DatalistElement) Autocorrect(a DatalistAutocorrectEnum) *DatalistElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *DatalistElement) Autofocus(b bool) *DatalistElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *DatalistElement) Class(s ...string) *DatalistElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *DatalistElement) Contenteditable(a DatalistContenteditableEnum) *DatalistElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *DatalistElement) Dir(a DatalistDirEnum) *DatalistElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *DatalistElement) Draggable(a DatalistDraggableEnum) *DatalistElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *DatalistElement) Enterkeyhint(a DatalistEnterkeyhintEnum) *DatalistElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *DatalistElement) Hidden(a DatalistHiddenEnum) *DatalistElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *DatalistElement) Id(s string) *DatalistElement {
	e.attributes["id"] = s
	
	return e
}

func (e *DatalistElement) Slot(s string) *DatalistElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *DatalistElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<datalist")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</datalist>")); err != nil {
		return err
	}

	return nil
}
