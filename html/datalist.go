// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type DatalistElement struct {
	attributes datalistAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// Datalist creates a tag <datalist> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The datalist element represents a set of option elements that represent predefined options for other controls. In the rendering, the datalist element represents nothing and it, along with its children, should be hidden.
func Datalist(children ...htemel.Node) *DatalistElement {
	node := &DatalistElement{
		children: children, attributes: make(datalistAttrs),
	}

	return node
}

func DatalistIf(condition bool, children ...htemel.Node) *DatalistElement {
	if condition {
		return Datalist(children...)
	}

	return &DatalistElement{
		skipRender: true,
	}
}

func DatalistTernary(condition bool, true htemel.Node, false htemel.Node) *DatalistElement {
	if condition {
		return Datalist(true)
	}

	return Datalist(false)
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *DatalistElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *DatalistElement) AddIndent(i int) {
	e.indent = i + 1
}

type DatalistAutocapitalizeEnum string

const (
	DatalistAutocapitalizeEnumCharacters DatalistAutocapitalizeEnum = "characters"
	DatalistAutocapitalizeEnumNone       DatalistAutocapitalizeEnum = "none"
	DatalistAutocapitalizeEnumOff        DatalistAutocapitalizeEnum = "off"
	DatalistAutocapitalizeEnumOn         DatalistAutocapitalizeEnum = "on"
	DatalistAutocapitalizeEnumSentences  DatalistAutocapitalizeEnum = "sentences"
	DatalistAutocapitalizeEnumWords      DatalistAutocapitalizeEnum = "words"
)

type DatalistAutocorrectEnum string

const (
	DatalistAutocorrectEnumOn    DatalistAutocorrectEnum = "on"
	DatalistAutocorrectEnumOff   DatalistAutocorrectEnum = "off"
	DatalistAutocorrectEnumEmpty DatalistAutocorrectEnum = ""
)

type DatalistContenteditableEnum string

const (
	DatalistContenteditableEnumFalse         DatalistContenteditableEnum = "false"
	DatalistContenteditableEnumPlaintextOnly DatalistContenteditableEnum = "plaintext-only"
	DatalistContenteditableEnumTrue          DatalistContenteditableEnum = "true"
	DatalistContenteditableEnumEmpty         DatalistContenteditableEnum = ""
)

type DatalistDirEnum string

const (
	DatalistDirEnumAuto DatalistDirEnum = "auto"
	DatalistDirEnumLtr  DatalistDirEnum = "ltr"
	DatalistDirEnumRtl  DatalistDirEnum = "rtl"
)

type DatalistDraggableEnum string

const (
	DatalistDraggableEnumFalse DatalistDraggableEnum = "false"
	DatalistDraggableEnumTrue  DatalistDraggableEnum = "true"
)

type DatalistEnterkeyhintEnum string

const (
	DatalistEnterkeyhintEnumDone     DatalistEnterkeyhintEnum = "done"
	DatalistEnterkeyhintEnumEnter    DatalistEnterkeyhintEnum = "enter"
	DatalistEnterkeyhintEnumGo       DatalistEnterkeyhintEnum = "go"
	DatalistEnterkeyhintEnumNext     DatalistEnterkeyhintEnum = "next"
	DatalistEnterkeyhintEnumPrevious DatalistEnterkeyhintEnum = "previous"
	DatalistEnterkeyhintEnumSearch   DatalistEnterkeyhintEnum = "search"
	DatalistEnterkeyhintEnumSend     DatalistEnterkeyhintEnum = "send"
)

type DatalistHiddenEnum string

const (
	DatalistHiddenEnumHidden     DatalistHiddenEnum = "hidden"
	DatalistHiddenEnumUntilFound DatalistHiddenEnum = "until-found"
	DatalistHiddenEnumEmpty      DatalistHiddenEnum = ""
)

type DatalistInputmodeEnum string

const (
	DatalistInputmodeEnumEmail   DatalistInputmodeEnum = "email"
	DatalistInputmodeEnumNone    DatalistInputmodeEnum = "none"
	DatalistInputmodeEnumNumeric DatalistInputmodeEnum = "numeric"
	DatalistInputmodeEnumSearch  DatalistInputmodeEnum = "search"
	DatalistInputmodeEnumTel     DatalistInputmodeEnum = "tel"
	DatalistInputmodeEnumText    DatalistInputmodeEnum = "text"
	DatalistInputmodeEnumUrl     DatalistInputmodeEnum = "url"
	DatalistInputmodeEnumDecimal DatalistInputmodeEnum = "decimal"
)

type DatalistSpellcheckEnum string

const (
	DatalistSpellcheckEnumFalse DatalistSpellcheckEnum = "false"
	DatalistSpellcheckEnumTrue  DatalistSpellcheckEnum = "true"
	DatalistSpellcheckEnumEmpty DatalistSpellcheckEnum = ""
)

type DatalistTranslateEnum string

const (
	DatalistTranslateEnumNo    DatalistTranslateEnum = "no"
	DatalistTranslateEnumYes   DatalistTranslateEnum = "yes"
	DatalistTranslateEnumEmpty DatalistTranslateEnum = ""
)

type DatalistWritingsuggestionsEnum string

const (
	DatalistWritingsuggestionsEnumFalse DatalistWritingsuggestionsEnum = "false"
	DatalistWritingsuggestionsEnumTrue  DatalistWritingsuggestionsEnum = "true"
	DatalistWritingsuggestionsEnumEmpty DatalistWritingsuggestionsEnum = ""
)

type datalistAttrs map[string]any

func (e *DatalistElement) Autocapitalize(a DatalistAutocapitalizeEnum) *DatalistElement {
	e.attributes["autocapitalize"] = a

	return e
}

func DatalistAutocapitalizeCustom(s string) DatalistAutocapitalizeEnum {
	return DatalistAutocapitalizeEnum(s)
}

func (e *DatalistElement) Autocorrect(a DatalistAutocorrectEnum) *DatalistElement {
	e.attributes["autocorrect"] = a

	return e
}

func DatalistAutocorrectCustom(s string) DatalistAutocorrectEnum {
	return DatalistAutocorrectEnum(s)
}

func (e *DatalistElement) Autofocus(b bool) *DatalistElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *DatalistElement) Class(s ...string) *DatalistElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *DatalistElement) Contenteditable(a DatalistContenteditableEnum) *DatalistElement {
	e.attributes["contenteditable"] = a

	return e
}

func DatalistContenteditableCustom(s string) DatalistContenteditableEnum {
	return DatalistContenteditableEnum(s)
}

func (e *DatalistElement) DataUnsafe(name string, s string) *DatalistElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *DatalistElement) Data(name string, s string) *DatalistElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *DatalistElement) Dir(a DatalistDirEnum) *DatalistElement {
	e.attributes["dir"] = a

	return e
}

func DatalistDirCustom(s string) DatalistDirEnum {
	return DatalistDirEnum(s)
}

func (e *DatalistElement) Draggable(a DatalistDraggableEnum) *DatalistElement {
	e.attributes["draggable"] = a

	return e
}

func DatalistDraggableCustom(s string) DatalistDraggableEnum {
	return DatalistDraggableEnum(s)
}

func (e *DatalistElement) Enterkeyhint(a DatalistEnterkeyhintEnum) *DatalistElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func DatalistEnterkeyhintCustom(s string) DatalistEnterkeyhintEnum {
	return DatalistEnterkeyhintEnum(s)
}

func (e *DatalistElement) Hidden(a DatalistHiddenEnum) *DatalistElement {
	e.attributes["hidden"] = a

	return e
}

func DatalistHiddenCustom(s string) DatalistHiddenEnum {
	return DatalistHiddenEnum(s)
}

func (e *DatalistElement) Id(s string) *DatalistElement {
	e.attributes["id"] = s

	return e
}

func (e *DatalistElement) Inert(b bool) *DatalistElement {
	e.attributes["inert"] = b

	return e
}

func (e *DatalistElement) Inputmode(a DatalistInputmodeEnum) *DatalistElement {
	e.attributes["inputmode"] = a

	return e
}

func DatalistInputmodeCustom(s string) DatalistInputmodeEnum {
	return DatalistInputmodeEnum(s)
}

func (e *DatalistElement) Itemid(s string) *DatalistElement {
	e.attributes["itemid"] = s

	return e
}

func (e *DatalistElement) Itemprop(s ...string) *DatalistElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *DatalistElement) Itemref(s ...string) *DatalistElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *DatalistElement) Itemscope(b bool) *DatalistElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *DatalistElement) Itemtype(s ...string) *DatalistElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *DatalistElement) Lang(s string) *DatalistElement {
	e.attributes["lang"] = s

	return e
}

func (e *DatalistElement) Nonce(s string) *DatalistElement {
	e.attributes["nonce"] = s

	return e
}

func (e *DatalistElement) Popover(s string) *DatalistElement {
	e.attributes["popover"] = s

	return e
}

func (e *DatalistElement) Slot(s string) *DatalistElement {
	e.attributes["slot"] = s

	return e
}

func (e *DatalistElement) Spellcheck(a DatalistSpellcheckEnum) *DatalistElement {
	e.attributes["spellcheck"] = a

	return e
}

func DatalistSpellcheckCustom(s string) DatalistSpellcheckEnum {
	return DatalistSpellcheckEnum(s)
}

func (e *DatalistElement) Style(s string) *DatalistElement {
	e.attributes["style"] = s

	return e
}

func (e *DatalistElement) Tabindex(i int) *DatalistElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *DatalistElement) Title(s string) *DatalistElement {
	e.attributes["title"] = s

	return e
}

func (e *DatalistElement) Translate(a DatalistTranslateEnum) *DatalistElement {
	e.attributes["translate"] = a

	return e
}

func DatalistTranslateCustom(s string) DatalistTranslateEnum {
	return DatalistTranslateEnum(s)
}

func (e *DatalistElement) Writingsuggestions(a DatalistWritingsuggestionsEnum) *DatalistElement {
	e.attributes["writingsuggestions"] = a

	return e
}

func DatalistWritingsuggestionsCustom(s string) DatalistWritingsuggestionsEnum {
	return DatalistWritingsuggestionsEnum(s)
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *DatalistElement) Render(w io.Writer) error {
	indent := htemel.SetIndent(e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<datalist")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}
	for _, child := range e.children {
		child.AddIndent(e.Indent())
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(indent + "</datalist>\n")); err != nil {
		return err
	}

	return nil
}
