// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type OlElement struct {
	attributes olAttrs
	children   []htemel.Node
	skipRender bool
}

// Ol creates a tag <ol> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The ol element represents a list of items, where the items have been intentionally ordered, such that changing the order would change the meaning of the document.
func Ol(children ...htemel.Node) *OlElement {
	node := &OlElement{
		children:   children,
		attributes: make(olAttrs),
	}

	return node
}

func OlIf(condition bool, children ...htemel.Node) *OlElement {
	if condition {
		return Ol(children...)
	}

	return &OlElement{
		skipRender: true,
	}
}

type OlAutocapitalizeAttrEnum string

const (
	OlAutocapitalizeAttrEnumCharacters OlAutocapitalizeAttrEnum = "characters"
	OlAutocapitalizeAttrEnumNone       OlAutocapitalizeAttrEnum = "none"
	OlAutocapitalizeAttrEnumOff        OlAutocapitalizeAttrEnum = "off"
	OlAutocapitalizeAttrEnumOn         OlAutocapitalizeAttrEnum = "on"
	OlAutocapitalizeAttrEnumSentences  OlAutocapitalizeAttrEnum = "sentences"
	OlAutocapitalizeAttrEnumWords      OlAutocapitalizeAttrEnum = "words"
)

type OlAutocorrectAttrEnum string

const (
	OlAutocorrectAttrEnumOn  OlAutocorrectAttrEnum = "on"
	OlAutocorrectAttrEnumOff OlAutocorrectAttrEnum = "off"
)

type OlContenteditableAttrEnum string

const (
	OlContenteditableAttrEnumFalse         OlContenteditableAttrEnum = "false"
	OlContenteditableAttrEnumPlaintextOnly OlContenteditableAttrEnum = "plaintext-only"
	OlContenteditableAttrEnumTrue          OlContenteditableAttrEnum = "true"
)

type olAttrs map[string]any

func (e *OlElement) Autocapitalize(a OlAutocapitalizeAttrEnum) *OlElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *OlElement) Autocorrect(a OlAutocorrectAttrEnum) *OlElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *OlElement) Autofocus(b bool) *OlElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *OlElement) Class(s ...string) *OlElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *OlElement) Contenteditable(a OlContenteditableAttrEnum) *OlElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *OlElement) Id(s string) *OlElement {
	e.attributes["id"] = s

	return e
}

func (e *OlElement) Slot(s string) *OlElement {
	e.attributes["slot"] = s

	return e
}

func (e *OlElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<ol")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		w.Write([]byte(" " + key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</ol>")); err != nil {
		return err
	}

	return nil
}
