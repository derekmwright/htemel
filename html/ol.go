// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type OlElement struct {
	attributes olAttrs
	children []htemel.Node
	skipRender bool
}

// Ol creates a tag <ol> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The ol element represents a list of items, where the items have been intentionally ordered, such that changing the order would change the meaning of the document.
func Ol(children ...htemel.Node) *OlElement {
	node := &OlElement{
		children: children,
		attributes: make(olAttrs),
	}

	return node
}

func OlIf(condition bool, children ...htemel.Node) *OlElement {
	if condition {
		return Ol(children...)
	}

	return &OlElement{
		skipRender: true,
	}
}

type OlAutocapitalizeEnum string

const (
	OlAutocapitalizeEnumSentences OlAutocapitalizeEnum = "sentences"
	OlAutocapitalizeEnumWords OlAutocapitalizeEnum = "words"
	OlAutocapitalizeEnumCharacters OlAutocapitalizeEnum = "characters"
	OlAutocapitalizeEnumNone OlAutocapitalizeEnum = "none"
	OlAutocapitalizeEnumOff OlAutocapitalizeEnum = "off"
	OlAutocapitalizeEnumOn OlAutocapitalizeEnum = "on"
)

type OlAutocorrectEnum string

const (
	OlAutocorrectEnumOff OlAutocorrectEnum = "off"
	OlAutocorrectEnumOn OlAutocorrectEnum = "on"
)

type OlContenteditableEnum string

const (
	OlContenteditableEnumFalse OlContenteditableEnum = "false"
	OlContenteditableEnumPlaintextOnly OlContenteditableEnum = "plaintext-only"
	OlContenteditableEnumTrue OlContenteditableEnum = "true"
)

type OlDirEnum string

const (
	OlDirEnumAuto OlDirEnum = "auto"
	OlDirEnumLtr OlDirEnum = "ltr"
	OlDirEnumRtl OlDirEnum = "rtl"
)

type OlDraggableEnum string

const (
	OlDraggableEnumTrue OlDraggableEnum = "true"
	OlDraggableEnumFalse OlDraggableEnum = "false"
)

type OlEnterkeyhintEnum string

const (
	OlEnterkeyhintEnumDone OlEnterkeyhintEnum = "done"
	OlEnterkeyhintEnumEnter OlEnterkeyhintEnum = "enter"
	OlEnterkeyhintEnumGo OlEnterkeyhintEnum = "go"
	OlEnterkeyhintEnumNext OlEnterkeyhintEnum = "next"
	OlEnterkeyhintEnumPrevious OlEnterkeyhintEnum = "previous"
	OlEnterkeyhintEnumSearch OlEnterkeyhintEnum = "search"
	OlEnterkeyhintEnumSend OlEnterkeyhintEnum = "send"
)

type OlHiddenEnum string

const (
	OlHiddenEnumHidden OlHiddenEnum = "hidden"
	OlHiddenEnumUntilFound OlHiddenEnum = "until-found"
)

type olAttrs map[string]any

func (e *OlElement) Autocapitalize(a OlAutocapitalizeEnum) *OlElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *OlElement) Autocorrect(a OlAutocorrectEnum) *OlElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *OlElement) Autofocus(b bool) *OlElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *OlElement) Class(s ...string) *OlElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *OlElement) Contenteditable(a OlContenteditableEnum) *OlElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *OlElement) Dir(a OlDirEnum) *OlElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *OlElement) Draggable(a OlDraggableEnum) *OlElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *OlElement) Enterkeyhint(a OlEnterkeyhintEnum) *OlElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *OlElement) Hidden(a OlHiddenEnum) *OlElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *OlElement) Id(s string) *OlElement {
	e.attributes["id"] = s
	
	return e
}

func (e *OlElement) Slot(s string) *OlElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *OlElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<ol")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</ol>")); err != nil {
		return err
	}

	return nil
}
