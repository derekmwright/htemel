// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type HtmlElement struct {
	attributes htmlAttrs
	children []htemel.Node
	skipRender bool
}

// Html creates a tag <html> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The html element represents the root of an HTML document.
func Html(children ...htemel.Node) *HtmlElement {
	node := &HtmlElement{
		children: children,
		attributes: make(htmlAttrs),
	}

	return node
}

func HtmlIf(condition bool, children ...htemel.Node) *HtmlElement {
	if condition {
		return Html(children...)
	}

	return &HtmlElement{
		skipRender: true,
	}
}

type HtmlAutocapitalizeEnum string

const (
	HtmlAutocapitalizeEnumOff HtmlAutocapitalizeEnum = "off"
	HtmlAutocapitalizeEnumOn HtmlAutocapitalizeEnum = "on"
	HtmlAutocapitalizeEnumSentences HtmlAutocapitalizeEnum = "sentences"
	HtmlAutocapitalizeEnumWords HtmlAutocapitalizeEnum = "words"
	HtmlAutocapitalizeEnumCharacters HtmlAutocapitalizeEnum = "characters"
	HtmlAutocapitalizeEnumNone HtmlAutocapitalizeEnum = "none"
)

type HtmlAutocorrectEnum string

const (
	HtmlAutocorrectEnumOff HtmlAutocorrectEnum = "off"
	HtmlAutocorrectEnumOn HtmlAutocorrectEnum = "on"
)

type HtmlContenteditableEnum string

const (
	HtmlContenteditableEnumFalse HtmlContenteditableEnum = "false"
	HtmlContenteditableEnumPlaintextOnly HtmlContenteditableEnum = "plaintext-only"
	HtmlContenteditableEnumTrue HtmlContenteditableEnum = "true"
)

type HtmlDirEnum string

const (
	HtmlDirEnumRtl HtmlDirEnum = "rtl"
	HtmlDirEnumAuto HtmlDirEnum = "auto"
	HtmlDirEnumLtr HtmlDirEnum = "ltr"
)

type HtmlDraggableEnum string

const (
	HtmlDraggableEnumFalse HtmlDraggableEnum = "false"
	HtmlDraggableEnumTrue HtmlDraggableEnum = "true"
)

type HtmlEnterkeyhintEnum string

const (
	HtmlEnterkeyhintEnumNext HtmlEnterkeyhintEnum = "next"
	HtmlEnterkeyhintEnumPrevious HtmlEnterkeyhintEnum = "previous"
	HtmlEnterkeyhintEnumSearch HtmlEnterkeyhintEnum = "search"
	HtmlEnterkeyhintEnumSend HtmlEnterkeyhintEnum = "send"
	HtmlEnterkeyhintEnumDone HtmlEnterkeyhintEnum = "done"
	HtmlEnterkeyhintEnumEnter HtmlEnterkeyhintEnum = "enter"
	HtmlEnterkeyhintEnumGo HtmlEnterkeyhintEnum = "go"
)

type HtmlHiddenEnum string

const (
	HtmlHiddenEnumHidden HtmlHiddenEnum = "hidden"
	HtmlHiddenEnumUntilFound HtmlHiddenEnum = "until-found"
)

type htmlAttrs map[string]any

func (e *HtmlElement) Autocapitalize(a HtmlAutocapitalizeEnum) *HtmlElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *HtmlElement) Autocorrect(a HtmlAutocorrectEnum) *HtmlElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *HtmlElement) Autofocus(b bool) *HtmlElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *HtmlElement) Class(s ...string) *HtmlElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *HtmlElement) Contenteditable(a HtmlContenteditableEnum) *HtmlElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *HtmlElement) Dir(a HtmlDirEnum) *HtmlElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *HtmlElement) Draggable(a HtmlDraggableEnum) *HtmlElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *HtmlElement) Enterkeyhint(a HtmlEnterkeyhintEnum) *HtmlElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *HtmlElement) Hidden(a HtmlHiddenEnum) *HtmlElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *HtmlElement) Id(s string) *HtmlElement {
	e.attributes["id"] = s
	
	return e
}

func (e *HtmlElement) Slot(s string) *HtmlElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *HtmlElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<html")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</html>")); err != nil {
		return err
	}

	return nil
}
