// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type HtmlElement struct {
	attributes htmlAttrs
	children   []htemel.Node
	skipRender bool
}

// Html creates a tag <html> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The html element represents the root of an HTML document.
func Html(children ...htemel.Node) *HtmlElement {
	node := &HtmlElement{
		children:   children,
		attributes: make(htmlAttrs),
	}

	return node
}

func HtmlIf(condition bool, children ...htemel.Node) *HtmlElement {
	if condition {
		return Html(children...)
	}

	return &HtmlElement{
		skipRender: true,
	}
}

type HtmlAutocapitalizeAttrEnum string

const (
	HtmlAutocapitalizeAttrEnumCharacters HtmlAutocapitalizeAttrEnum = "characters"
	HtmlAutocapitalizeAttrEnumNone       HtmlAutocapitalizeAttrEnum = "none"
	HtmlAutocapitalizeAttrEnumOff        HtmlAutocapitalizeAttrEnum = "off"
	HtmlAutocapitalizeAttrEnumOn         HtmlAutocapitalizeAttrEnum = "on"
	HtmlAutocapitalizeAttrEnumSentences  HtmlAutocapitalizeAttrEnum = "sentences"
	HtmlAutocapitalizeAttrEnumWords      HtmlAutocapitalizeAttrEnum = "words"
)

type HtmlAutocorrectAttrEnum string

const (
	HtmlAutocorrectAttrEnumOff HtmlAutocorrectAttrEnum = "off"
	HtmlAutocorrectAttrEnumOn  HtmlAutocorrectAttrEnum = "on"
)

type HtmlContenteditableAttrEnum string

const (
	HtmlContenteditableAttrEnumFalse         HtmlContenteditableAttrEnum = "false"
	HtmlContenteditableAttrEnumPlaintextOnly HtmlContenteditableAttrEnum = "plaintext-only"
	HtmlContenteditableAttrEnumTrue          HtmlContenteditableAttrEnum = "true"
)

type htmlAttrs map[string]any

func (e *HtmlElement) Autocapitalize(a HtmlAutocapitalizeAttrEnum) *HtmlElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *HtmlElement) Autocorrect(a HtmlAutocorrectAttrEnum) *HtmlElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *HtmlElement) Autofocus(b bool) *HtmlElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *HtmlElement) Class(s ...string) *HtmlElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *HtmlElement) Contenteditable(a HtmlContenteditableAttrEnum) *HtmlElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *HtmlElement) Id(s string) *HtmlElement {
	e.attributes["id"] = s

	return e
}

func (e *HtmlElement) Slot(s string) *HtmlElement {
	e.attributes["slot"] = s

	return e
}

func (e *HtmlElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<html")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		w.Write([]byte(" " + key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</html>")); err != nil {
		return err
	}

	return nil
}
