// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type HtmlElement struct {
	attributes htmlAttrs
	children   []htemel.Node
	skipRender bool
}

// Html creates a tag <html> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The html element represents the root of an HTML document.
func Html(children ...htemel.Node) *HtmlElement {
	node := &HtmlElement{
		children: children, attributes: make(htmlAttrs),
	}

	return node
}

func HtmlIf(condition bool, children ...htemel.Node) *HtmlElement {
	if condition {
		return Html(children...)
	}

	return &HtmlElement{
		skipRender: true,
	}
}

func HtmlTernary(condition bool, true htemel.Node, false htemel.Node) *HtmlElement {
	if condition {
		return Html(true)
	}

	return Html(false)
}

type HtmlAutocapitalizeEnum string

const (
	HtmlAutocapitalizeEnumCharacters HtmlAutocapitalizeEnum = "characters"
	HtmlAutocapitalizeEnumNone       HtmlAutocapitalizeEnum = "none"
	HtmlAutocapitalizeEnumOff        HtmlAutocapitalizeEnum = "off"
	HtmlAutocapitalizeEnumOn         HtmlAutocapitalizeEnum = "on"
	HtmlAutocapitalizeEnumSentences  HtmlAutocapitalizeEnum = "sentences"
	HtmlAutocapitalizeEnumWords      HtmlAutocapitalizeEnum = "words"
)

type HtmlAutocorrectEnum string

const (
	HtmlAutocorrectEnumOff   HtmlAutocorrectEnum = "off"
	HtmlAutocorrectEnumOn    HtmlAutocorrectEnum = "on"
	HtmlAutocorrectEnumEmpty HtmlAutocorrectEnum = ""
)

type HtmlContenteditableEnum string

const (
	HtmlContenteditableEnumPlaintextOnly HtmlContenteditableEnum = "plaintext-only"
	HtmlContenteditableEnumTrue          HtmlContenteditableEnum = "true"
	HtmlContenteditableEnumFalse         HtmlContenteditableEnum = "false"
	HtmlContenteditableEnumEmpty         HtmlContenteditableEnum = ""
)

type HtmlDirEnum string

const (
	HtmlDirEnumAuto HtmlDirEnum = "auto"
	HtmlDirEnumLtr  HtmlDirEnum = "ltr"
	HtmlDirEnumRtl  HtmlDirEnum = "rtl"
)

type HtmlDraggableEnum string

const (
	HtmlDraggableEnumFalse HtmlDraggableEnum = "false"
	HtmlDraggableEnumTrue  HtmlDraggableEnum = "true"
)

type HtmlEnterkeyhintEnum string

const (
	HtmlEnterkeyhintEnumEnter    HtmlEnterkeyhintEnum = "enter"
	HtmlEnterkeyhintEnumGo       HtmlEnterkeyhintEnum = "go"
	HtmlEnterkeyhintEnumNext     HtmlEnterkeyhintEnum = "next"
	HtmlEnterkeyhintEnumPrevious HtmlEnterkeyhintEnum = "previous"
	HtmlEnterkeyhintEnumSearch   HtmlEnterkeyhintEnum = "search"
	HtmlEnterkeyhintEnumSend     HtmlEnterkeyhintEnum = "send"
	HtmlEnterkeyhintEnumDone     HtmlEnterkeyhintEnum = "done"
)

type HtmlHiddenEnum string

const (
	HtmlHiddenEnumHidden     HtmlHiddenEnum = "hidden"
	HtmlHiddenEnumUntilFound HtmlHiddenEnum = "until-found"
	HtmlHiddenEnumEmpty      HtmlHiddenEnum = ""
)

type HtmlInputmodeEnum string

const (
	HtmlInputmodeEnumUrl     HtmlInputmodeEnum = "url"
	HtmlInputmodeEnumDecimal HtmlInputmodeEnum = "decimal"
	HtmlInputmodeEnumEmail   HtmlInputmodeEnum = "email"
	HtmlInputmodeEnumNone    HtmlInputmodeEnum = "none"
	HtmlInputmodeEnumNumeric HtmlInputmodeEnum = "numeric"
	HtmlInputmodeEnumSearch  HtmlInputmodeEnum = "search"
	HtmlInputmodeEnumTel     HtmlInputmodeEnum = "tel"
	HtmlInputmodeEnumText    HtmlInputmodeEnum = "text"
)

type HtmlSpellcheckEnum string

const (
	HtmlSpellcheckEnumFalse HtmlSpellcheckEnum = "false"
	HtmlSpellcheckEnumTrue  HtmlSpellcheckEnum = "true"
	HtmlSpellcheckEnumEmpty HtmlSpellcheckEnum = ""
)

type HtmlTranslateEnum string

const (
	HtmlTranslateEnumNo    HtmlTranslateEnum = "no"
	HtmlTranslateEnumYes   HtmlTranslateEnum = "yes"
	HtmlTranslateEnumEmpty HtmlTranslateEnum = ""
)

type HtmlWritingsuggestionsEnum string

const (
	HtmlWritingsuggestionsEnumFalse HtmlWritingsuggestionsEnum = "false"
	HtmlWritingsuggestionsEnumTrue  HtmlWritingsuggestionsEnum = "true"
	HtmlWritingsuggestionsEnumEmpty HtmlWritingsuggestionsEnum = ""
)

type htmlAttrs map[string]any

func (e *HtmlElement) Autocapitalize(a HtmlAutocapitalizeEnum) *HtmlElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *HtmlElement) Autocorrect(a HtmlAutocorrectEnum) *HtmlElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *HtmlElement) Autofocus(b bool) *HtmlElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *HtmlElement) Class(s ...string) *HtmlElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *HtmlElement) Contenteditable(a HtmlContenteditableEnum) *HtmlElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *HtmlElement) DataUnsafe(name string, s string) *HtmlElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *HtmlElement) Data(name string, s string) *HtmlElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *HtmlElement) Dir(a HtmlDirEnum) *HtmlElement {
	e.attributes["dir"] = a

	return e
}

func (e *HtmlElement) Draggable(a HtmlDraggableEnum) *HtmlElement {
	e.attributes["draggable"] = a

	return e
}

func (e *HtmlElement) Enterkeyhint(a HtmlEnterkeyhintEnum) *HtmlElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *HtmlElement) Hidden(a HtmlHiddenEnum) *HtmlElement {
	e.attributes["hidden"] = a

	return e
}

func (e *HtmlElement) Id(s string) *HtmlElement {
	e.attributes["id"] = s

	return e
}

func (e *HtmlElement) Inert(b bool) *HtmlElement {
	e.attributes["inert"] = b

	return e
}

func (e *HtmlElement) Inputmode(a HtmlInputmodeEnum) *HtmlElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *HtmlElement) Itemid(s string) *HtmlElement {
	e.attributes["itemid"] = s

	return e
}

func (e *HtmlElement) Itemprop(s ...string) *HtmlElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *HtmlElement) Itemref(s ...string) *HtmlElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *HtmlElement) Itemscope(b bool) *HtmlElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *HtmlElement) Itemtype(s ...string) *HtmlElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *HtmlElement) Lang(s string) *HtmlElement {
	e.attributes["lang"] = s

	return e
}

func (e *HtmlElement) Nonce(s string) *HtmlElement {
	e.attributes["nonce"] = s

	return e
}

func (e *HtmlElement) Popover(s string) *HtmlElement {
	e.attributes["popover"] = s

	return e
}

func (e *HtmlElement) Slot(s string) *HtmlElement {
	e.attributes["slot"] = s

	return e
}

func (e *HtmlElement) Spellcheck(a HtmlSpellcheckEnum) *HtmlElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *HtmlElement) Style(s string) *HtmlElement {
	e.attributes["style"] = s

	return e
}

func (e *HtmlElement) Tabindex(i int) *HtmlElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *HtmlElement) Title(s string) *HtmlElement {
	e.attributes["title"] = s

	return e
}

func (e *HtmlElement) Translate(a HtmlTranslateEnum) *HtmlElement {
	e.attributes["translate"] = a

	return e
}

func (e *HtmlElement) Writingsuggestions(a HtmlWritingsuggestionsEnum) *HtmlElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *HtmlElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<html")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}
	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</html>")); err != nil {
		return err
	}

	return nil
}
