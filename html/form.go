// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type FormElement struct {
	attributes formAttrs
	children   []htemel.Node
	skipRender bool
}

// Form creates a tag <form> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The form element represents a hyperlink that can be manipulated through a collection of form-associated elements, some of which can represent editable values that can be submitted to a server for processing.
func Form(children ...htemel.Node) *FormElement {
	node := &FormElement{
		children:   children,
		attributes: make(formAttrs),
	}

	return node
}

func FormIf(condition bool, children ...htemel.Node) *FormElement {
	if condition {
		return Form(children...)
	}

	return &FormElement{
		skipRender: true,
	}
}

type FormAutocapitalizeAttrEnum string

const (
	FormAutocapitalizeAttrEnumSentences  FormAutocapitalizeAttrEnum = "sentences"
	FormAutocapitalizeAttrEnumWords      FormAutocapitalizeAttrEnum = "words"
	FormAutocapitalizeAttrEnumCharacters FormAutocapitalizeAttrEnum = "characters"
	FormAutocapitalizeAttrEnumNone       FormAutocapitalizeAttrEnum = "none"
	FormAutocapitalizeAttrEnumOff        FormAutocapitalizeAttrEnum = "off"
	FormAutocapitalizeAttrEnumOn         FormAutocapitalizeAttrEnum = "on"
)

type FormAutocorrectAttrEnum string

const (
	FormAutocorrectAttrEnumOff FormAutocorrectAttrEnum = "off"
	FormAutocorrectAttrEnumOn  FormAutocorrectAttrEnum = "on"
)

type FormContenteditableAttrEnum string

const (
	FormContenteditableAttrEnumTrue          FormContenteditableAttrEnum = "true"
	FormContenteditableAttrEnumFalse         FormContenteditableAttrEnum = "false"
	FormContenteditableAttrEnumPlaintextOnly FormContenteditableAttrEnum = "plaintext-only"
)

type formAttrs map[string]any

func (e *FormElement) Autocapitalize(a FormAutocapitalizeAttrEnum) *FormElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *FormElement) Autocorrect(a FormAutocorrectAttrEnum) *FormElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *FormElement) Autofocus(b bool) *FormElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *FormElement) Class(s ...string) *FormElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *FormElement) Contenteditable(a FormContenteditableAttrEnum) *FormElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *FormElement) Id(s string) *FormElement {
	e.attributes["id"] = s

	return e
}

func (e *FormElement) Slot(s string) *FormElement {
	e.attributes["slot"] = s

	return e
}

func (e *FormElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<form")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</form>")); err != nil {
		return err
	}

	return nil
}
