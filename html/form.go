// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type FormElement struct {
	attributes formAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// Form creates a tag <form> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The form element represents a hyperlink that can be manipulated through a collection of form-associated elements, some of which can represent editable values that can be submitted to a server for processing.
func Form(children ...htemel.Node) *FormElement {
	node := &FormElement{
		children: children, attributes: make(formAttrs),
	}

	return node
}

func FormIf(condition bool, children ...htemel.Node) *FormElement {
	if condition {
		return Form(children...)
	}

	return &FormElement{
		skipRender: true,
	}
}

func FormTernary(condition bool, true htemel.Node, false htemel.Node) *FormElement {
	if condition {
		return Form(true)
	}

	return Form(false)
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *FormElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *FormElement) AddIndent(i int) {
	e.indent = i + 1
}

type FormAutocompleteEnum string

const (
	FormAutocompleteEnumOff FormAutocompleteEnum = "off"
	FormAutocompleteEnumOn  FormAutocompleteEnum = "on"
)

type FormMethodEnum string

const (
	FormMethodEnumPost   FormMethodEnum = "post"
	FormMethodEnumDialog FormMethodEnum = "dialog"
	FormMethodEnumGet    FormMethodEnum = "get"
)

type FormAutocapitalizeEnum string

const (
	FormAutocapitalizeEnumOn         FormAutocapitalizeEnum = "on"
	FormAutocapitalizeEnumSentences  FormAutocapitalizeEnum = "sentences"
	FormAutocapitalizeEnumWords      FormAutocapitalizeEnum = "words"
	FormAutocapitalizeEnumCharacters FormAutocapitalizeEnum = "characters"
	FormAutocapitalizeEnumNone       FormAutocapitalizeEnum = "none"
	FormAutocapitalizeEnumOff        FormAutocapitalizeEnum = "off"
)

type FormAutocorrectEnum string

const (
	FormAutocorrectEnumOff   FormAutocorrectEnum = "off"
	FormAutocorrectEnumOn    FormAutocorrectEnum = "on"
	FormAutocorrectEnumEmpty FormAutocorrectEnum = ""
)

type FormContenteditableEnum string

const (
	FormContenteditableEnumFalse         FormContenteditableEnum = "false"
	FormContenteditableEnumPlaintextOnly FormContenteditableEnum = "plaintext-only"
	FormContenteditableEnumTrue          FormContenteditableEnum = "true"
	FormContenteditableEnumEmpty         FormContenteditableEnum = ""
)

type FormDirEnum string

const (
	FormDirEnumAuto FormDirEnum = "auto"
	FormDirEnumLtr  FormDirEnum = "ltr"
	FormDirEnumRtl  FormDirEnum = "rtl"
)

type FormDraggableEnum string

const (
	FormDraggableEnumFalse FormDraggableEnum = "false"
	FormDraggableEnumTrue  FormDraggableEnum = "true"
)

type FormEnterkeyhintEnum string

const (
	FormEnterkeyhintEnumSend     FormEnterkeyhintEnum = "send"
	FormEnterkeyhintEnumDone     FormEnterkeyhintEnum = "done"
	FormEnterkeyhintEnumEnter    FormEnterkeyhintEnum = "enter"
	FormEnterkeyhintEnumGo       FormEnterkeyhintEnum = "go"
	FormEnterkeyhintEnumNext     FormEnterkeyhintEnum = "next"
	FormEnterkeyhintEnumPrevious FormEnterkeyhintEnum = "previous"
	FormEnterkeyhintEnumSearch   FormEnterkeyhintEnum = "search"
)

type FormHiddenEnum string

const (
	FormHiddenEnumUntilFound FormHiddenEnum = "until-found"
	FormHiddenEnumHidden     FormHiddenEnum = "hidden"
	FormHiddenEnumEmpty      FormHiddenEnum = ""
)

type FormInputmodeEnum string

const (
	FormInputmodeEnumSearch  FormInputmodeEnum = "search"
	FormInputmodeEnumTel     FormInputmodeEnum = "tel"
	FormInputmodeEnumText    FormInputmodeEnum = "text"
	FormInputmodeEnumUrl     FormInputmodeEnum = "url"
	FormInputmodeEnumDecimal FormInputmodeEnum = "decimal"
	FormInputmodeEnumEmail   FormInputmodeEnum = "email"
	FormInputmodeEnumNone    FormInputmodeEnum = "none"
	FormInputmodeEnumNumeric FormInputmodeEnum = "numeric"
)

type FormSpellcheckEnum string

const (
	FormSpellcheckEnumTrue  FormSpellcheckEnum = "true"
	FormSpellcheckEnumFalse FormSpellcheckEnum = "false"
	FormSpellcheckEnumEmpty FormSpellcheckEnum = ""
)

type FormTranslateEnum string

const (
	FormTranslateEnumNo    FormTranslateEnum = "no"
	FormTranslateEnumYes   FormTranslateEnum = "yes"
	FormTranslateEnumEmpty FormTranslateEnum = ""
)

type FormWritingsuggestionsEnum string

const (
	FormWritingsuggestionsEnumFalse FormWritingsuggestionsEnum = "false"
	FormWritingsuggestionsEnumTrue  FormWritingsuggestionsEnum = "true"
	FormWritingsuggestionsEnumEmpty FormWritingsuggestionsEnum = ""
)

type formAttrs map[string]any

func (e *FormElement) AcceptCharset(s string) *FormElement {
	e.attributes["accept-charset"] = s

	return e
}

func (e *FormElement) Action(s string) *FormElement {
	e.attributes["action"] = s

	return e
}

func (e *FormElement) Autocomplete(a FormAutocompleteEnum) *FormElement {
	e.attributes["autocomplete"] = a

	return e
}

func (e *FormElement) Enctype(s string) *FormElement {
	e.attributes["enctype"] = s

	return e
}

func (e *FormElement) Method(a FormMethodEnum) *FormElement {
	e.attributes["method"] = a

	return e
}

func (e *FormElement) Name(s string) *FormElement {
	e.attributes["name"] = s

	return e
}

func (e *FormElement) Novalidate(b bool) *FormElement {
	e.attributes["novalidate"] = b

	return e
}

func (e *FormElement) Target(s string) *FormElement {
	e.attributes["target"] = s

	return e
}

func (e *FormElement) Rel(s ...string) *FormElement {
	e.attributes["rel"] = strings.Join(s, " ")

	return e
}

func (e *FormElement) Autocapitalize(a FormAutocapitalizeEnum) *FormElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *FormElement) Autocorrect(a FormAutocorrectEnum) *FormElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *FormElement) Autofocus(b bool) *FormElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *FormElement) Class(s ...string) *FormElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *FormElement) Contenteditable(a FormContenteditableEnum) *FormElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *FormElement) DataUnsafe(name string, s string) *FormElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *FormElement) Data(name string, s string) *FormElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *FormElement) Dir(a FormDirEnum) *FormElement {
	e.attributes["dir"] = a

	return e
}

func (e *FormElement) Draggable(a FormDraggableEnum) *FormElement {
	e.attributes["draggable"] = a

	return e
}

func (e *FormElement) Enterkeyhint(a FormEnterkeyhintEnum) *FormElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *FormElement) Hidden(a FormHiddenEnum) *FormElement {
	e.attributes["hidden"] = a

	return e
}

func (e *FormElement) Id(s string) *FormElement {
	e.attributes["id"] = s

	return e
}

func (e *FormElement) Inert(b bool) *FormElement {
	e.attributes["inert"] = b

	return e
}

func (e *FormElement) Inputmode(a FormInputmodeEnum) *FormElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *FormElement) Itemid(s string) *FormElement {
	e.attributes["itemid"] = s

	return e
}

func (e *FormElement) Itemprop(s ...string) *FormElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *FormElement) Itemref(s ...string) *FormElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *FormElement) Itemscope(b bool) *FormElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *FormElement) Itemtype(s ...string) *FormElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *FormElement) Lang(s string) *FormElement {
	e.attributes["lang"] = s

	return e
}

func (e *FormElement) Nonce(s string) *FormElement {
	e.attributes["nonce"] = s

	return e
}

func (e *FormElement) Popover(s string) *FormElement {
	e.attributes["popover"] = s

	return e
}

func (e *FormElement) Slot(s string) *FormElement {
	e.attributes["slot"] = s

	return e
}

func (e *FormElement) Spellcheck(a FormSpellcheckEnum) *FormElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *FormElement) Style(s string) *FormElement {
	e.attributes["style"] = s

	return e
}

func (e *FormElement) Tabindex(i int) *FormElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *FormElement) Title(s string) *FormElement {
	e.attributes["title"] = s

	return e
}

func (e *FormElement) Translate(a FormTranslateEnum) *FormElement {
	e.attributes["translate"] = a

	return e
}

func (e *FormElement) Writingsuggestions(a FormWritingsuggestionsEnum) *FormElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *FormElement) Render(w io.Writer) error {
	indent := htemel.SetIndent(e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<form")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}
	for _, child := range e.children {
		child.AddIndent(e.Indent())
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(indent + "</form>\n")); err != nil {
		return err
	}

	return nil
}
