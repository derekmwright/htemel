// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type DataElement struct {
	attributes dataAttrs
	children []htemel.Node
	skipRender bool
}

// Data creates a tag <data> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The data element represents its contents, along with a machine-readable form of those contents in the value attribute.
func Data(children ...htemel.Node) *DataElement {
	node := &DataElement{
		children: children,
		attributes: make(dataAttrs),
	}

	return node
}

func DataIf(condition bool, children ...htemel.Node) *DataElement {
	if condition {
		return Data(children...)
	}

	return &DataElement{
		skipRender: true,
	}
}

type DataAutocapitalizeEnum string

const (
	DataAutocapitalizeEnumOff DataAutocapitalizeEnum = "off"
	DataAutocapitalizeEnumOn DataAutocapitalizeEnum = "on"
	DataAutocapitalizeEnumSentences DataAutocapitalizeEnum = "sentences"
	DataAutocapitalizeEnumWords DataAutocapitalizeEnum = "words"
	DataAutocapitalizeEnumCharacters DataAutocapitalizeEnum = "characters"
	DataAutocapitalizeEnumNone DataAutocapitalizeEnum = "none"
)

type DataAutocorrectEnum string

const (
	DataAutocorrectEnumOff DataAutocorrectEnum = "off"
	DataAutocorrectEnumOn DataAutocorrectEnum = "on"
)

type DataContenteditableEnum string

const (
	DataContenteditableEnumPlaintextOnly DataContenteditableEnum = "plaintext-only"
	DataContenteditableEnumTrue DataContenteditableEnum = "true"
	DataContenteditableEnumFalse DataContenteditableEnum = "false"
)

type DataDirEnum string

const (
	DataDirEnumAuto DataDirEnum = "auto"
	DataDirEnumLtr DataDirEnum = "ltr"
	DataDirEnumRtl DataDirEnum = "rtl"
)

type DataDraggableEnum string

const (
	DataDraggableEnumFalse DataDraggableEnum = "false"
	DataDraggableEnumTrue DataDraggableEnum = "true"
)

type DataEnterkeyhintEnum string

const (
	DataEnterkeyhintEnumNext DataEnterkeyhintEnum = "next"
	DataEnterkeyhintEnumPrevious DataEnterkeyhintEnum = "previous"
	DataEnterkeyhintEnumSearch DataEnterkeyhintEnum = "search"
	DataEnterkeyhintEnumSend DataEnterkeyhintEnum = "send"
	DataEnterkeyhintEnumDone DataEnterkeyhintEnum = "done"
	DataEnterkeyhintEnumEnter DataEnterkeyhintEnum = "enter"
	DataEnterkeyhintEnumGo DataEnterkeyhintEnum = "go"
)

type DataHiddenEnum string

const (
	DataHiddenEnumHidden DataHiddenEnum = "hidden"
	DataHiddenEnumUntilFound DataHiddenEnum = "until-found"
)

type dataAttrs map[string]any

func (e *DataElement) Autocapitalize(a DataAutocapitalizeEnum) *DataElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *DataElement) Autocorrect(a DataAutocorrectEnum) *DataElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *DataElement) Autofocus(b bool) *DataElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *DataElement) Class(s ...string) *DataElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *DataElement) Contenteditable(a DataContenteditableEnum) *DataElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *DataElement) Dir(a DataDirEnum) *DataElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *DataElement) Draggable(a DataDraggableEnum) *DataElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *DataElement) Enterkeyhint(a DataEnterkeyhintEnum) *DataElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *DataElement) Hidden(a DataHiddenEnum) *DataElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *DataElement) Id(s string) *DataElement {
	e.attributes["id"] = s
	
	return e
}

func (e *DataElement) Slot(s string) *DataElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *DataElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<data")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</data>")); err != nil {
		return err
	}

	return nil
}
