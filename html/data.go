// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
)

type DataElement struct {
	attributes dataAttrs
	children []htemel.Node
	skipRender bool
}

// Data creates a tag <data> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The data element represents its contents, along with a machine-readable form of those contents in the value attribute.
func Data(children ...htemel.Node) *DataElement {
	node := &DataElement{
		children: children,
	}

	return node
}

func DataIf(condition bool, children ...htemel.Node) *DataElement {
	if condition {
		return Data(children...)
	}

	return &DataElement{
		skipRender: true,
	}
}

type DataAutocapitalizeAttrEnum string

const (
	DataAutocapitalizeAttrEnumSentences DataAutocapitalizeAttrEnum = "sentences"
	DataAutocapitalizeAttrEnumWords DataAutocapitalizeAttrEnum = "words"
	DataAutocapitalizeAttrEnumCharacters DataAutocapitalizeAttrEnum = "characters"
	DataAutocapitalizeAttrEnumNone DataAutocapitalizeAttrEnum = "none"
	DataAutocapitalizeAttrEnumOff DataAutocapitalizeAttrEnum = "off"
	DataAutocapitalizeAttrEnumOn DataAutocapitalizeAttrEnum = "on"
)

type DataAutocorrectAttrEnum string

const (
	DataAutocorrectAttrEnumOff DataAutocorrectAttrEnum = "off"
	DataAutocorrectAttrEnumOn DataAutocorrectAttrEnum = "on"
)

type DataContenteditableAttrEnum string

const (
	DataContenteditableAttrEnumFalse DataContenteditableAttrEnum = "false"
	DataContenteditableAttrEnumPlaintextOnly DataContenteditableAttrEnum = "plaintext-only"
	DataContenteditableAttrEnumTrue DataContenteditableAttrEnum = "true"
)

type dataAttrs map[string]any

func (e *DataElement) Autocapitalize(a DataAutocapitalizeAttrEnum) *DataElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *DataElement) Autocorrect(a DataAutocorrectAttrEnum) *DataElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *DataElement) Class(s ...string) *DataElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *DataElement) Contenteditable(a DataContenteditableAttrEnum) *DataElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *DataElement) Id(s string) *DataElement {
	e.attributes["id"] = s
	
	return e
}

func (e *DataElement) Slot(s string) *DataElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *DataElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<data")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 0
	for key, v := range e.attributes {
		w.Write([]byte(key + "="))
		w.Write([]byte(html.EscapeString(fmt.Sprintf("'%v'", v))))
		if i < c {
			w.Write([]byte(" "))
		}
		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</data>")); err != nil {
		return err
	}

	return nil
}
