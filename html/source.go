// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type SourceElement struct {
	attributes sourceAttrs

	skipRender bool
	indent     int
}

// Source creates a tag <source> instance and returns it for further modification.
//
// Spec Description: The source element allows authors to specify multiple alternative source sets for img elements or multiple alternative media resources for media elements. It does not represent anything on its own.
func Source() *SourceElement {
	node := &SourceElement{
		attributes: make(sourceAttrs),
	}

	return node
}

func SourceIf(condition bool) *SourceElement {
	if condition {
		return Source()
	}

	return &SourceElement{
		skipRender: true,
	}
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *SourceElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *SourceElement) AddIndent(i int) {
	e.indent = i + 1
}

type SourceAutocapitalizeEnum string

const (
	SourceAutocapitalizeEnumCharacters SourceAutocapitalizeEnum = "characters"
	SourceAutocapitalizeEnumNone       SourceAutocapitalizeEnum = "none"
	SourceAutocapitalizeEnumOff        SourceAutocapitalizeEnum = "off"
	SourceAutocapitalizeEnumOn         SourceAutocapitalizeEnum = "on"
	SourceAutocapitalizeEnumSentences  SourceAutocapitalizeEnum = "sentences"
	SourceAutocapitalizeEnumWords      SourceAutocapitalizeEnum = "words"
)

type SourceAutocorrectEnum string

const (
	SourceAutocorrectEnumOff   SourceAutocorrectEnum = "off"
	SourceAutocorrectEnumOn    SourceAutocorrectEnum = "on"
	SourceAutocorrectEnumEmpty SourceAutocorrectEnum = ""
)

type SourceContenteditableEnum string

const (
	SourceContenteditableEnumFalse         SourceContenteditableEnum = "false"
	SourceContenteditableEnumPlaintextOnly SourceContenteditableEnum = "plaintext-only"
	SourceContenteditableEnumTrue          SourceContenteditableEnum = "true"
	SourceContenteditableEnumEmpty         SourceContenteditableEnum = ""
)

type SourceDirEnum string

const (
	SourceDirEnumAuto SourceDirEnum = "auto"
	SourceDirEnumLtr  SourceDirEnum = "ltr"
	SourceDirEnumRtl  SourceDirEnum = "rtl"
)

type SourceDraggableEnum string

const (
	SourceDraggableEnumFalse SourceDraggableEnum = "false"
	SourceDraggableEnumTrue  SourceDraggableEnum = "true"
)

type SourceEnterkeyhintEnum string

const (
	SourceEnterkeyhintEnumSend     SourceEnterkeyhintEnum = "send"
	SourceEnterkeyhintEnumDone     SourceEnterkeyhintEnum = "done"
	SourceEnterkeyhintEnumEnter    SourceEnterkeyhintEnum = "enter"
	SourceEnterkeyhintEnumGo       SourceEnterkeyhintEnum = "go"
	SourceEnterkeyhintEnumNext     SourceEnterkeyhintEnum = "next"
	SourceEnterkeyhintEnumPrevious SourceEnterkeyhintEnum = "previous"
	SourceEnterkeyhintEnumSearch   SourceEnterkeyhintEnum = "search"
)

type SourceHiddenEnum string

const (
	SourceHiddenEnumHidden     SourceHiddenEnum = "hidden"
	SourceHiddenEnumUntilFound SourceHiddenEnum = "until-found"
	SourceHiddenEnumEmpty      SourceHiddenEnum = ""
)

type SourceInputmodeEnum string

const (
	SourceInputmodeEnumNumeric SourceInputmodeEnum = "numeric"
	SourceInputmodeEnumSearch  SourceInputmodeEnum = "search"
	SourceInputmodeEnumTel     SourceInputmodeEnum = "tel"
	SourceInputmodeEnumText    SourceInputmodeEnum = "text"
	SourceInputmodeEnumUrl     SourceInputmodeEnum = "url"
	SourceInputmodeEnumDecimal SourceInputmodeEnum = "decimal"
	SourceInputmodeEnumEmail   SourceInputmodeEnum = "email"
	SourceInputmodeEnumNone    SourceInputmodeEnum = "none"
)

type SourceSpellcheckEnum string

const (
	SourceSpellcheckEnumFalse SourceSpellcheckEnum = "false"
	SourceSpellcheckEnumTrue  SourceSpellcheckEnum = "true"
	SourceSpellcheckEnumEmpty SourceSpellcheckEnum = ""
)

type SourceTranslateEnum string

const (
	SourceTranslateEnumNo    SourceTranslateEnum = "no"
	SourceTranslateEnumYes   SourceTranslateEnum = "yes"
	SourceTranslateEnumEmpty SourceTranslateEnum = ""
)

type SourceWritingsuggestionsEnum string

const (
	SourceWritingsuggestionsEnumFalse SourceWritingsuggestionsEnum = "false"
	SourceWritingsuggestionsEnumTrue  SourceWritingsuggestionsEnum = "true"
	SourceWritingsuggestionsEnumEmpty SourceWritingsuggestionsEnum = ""
)

type sourceAttrs map[string]any

func (e *SourceElement) Type(s string) *SourceElement {
	e.attributes["type"] = s

	return e
}

func (e *SourceElement) Media(s string) *SourceElement {
	e.attributes["media"] = s

	return e
}

func (e *SourceElement) Src(s string) *SourceElement {
	e.attributes["src"] = s

	return e
}

func (e *SourceElement) Srcset(s string) *SourceElement {
	e.attributes["srcset"] = s

	return e
}

func (e *SourceElement) Sizes(s string) *SourceElement {
	e.attributes["sizes"] = s

	return e
}

func (e *SourceElement) Width(i int) *SourceElement {
	e.attributes["width"] = i

	return e
}

func (e *SourceElement) Height(i int) *SourceElement {
	e.attributes["height"] = i

	return e
}

func (e *SourceElement) Autocapitalize(a SourceAutocapitalizeEnum) *SourceElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *SourceElement) Autocorrect(a SourceAutocorrectEnum) *SourceElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *SourceElement) Autofocus(b bool) *SourceElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *SourceElement) Class(s ...string) *SourceElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *SourceElement) Contenteditable(a SourceContenteditableEnum) *SourceElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *SourceElement) DataUnsafe(name string, s string) *SourceElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *SourceElement) Data(name string, s string) *SourceElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *SourceElement) Dir(a SourceDirEnum) *SourceElement {
	e.attributes["dir"] = a

	return e
}

func (e *SourceElement) Draggable(a SourceDraggableEnum) *SourceElement {
	e.attributes["draggable"] = a

	return e
}

func (e *SourceElement) Enterkeyhint(a SourceEnterkeyhintEnum) *SourceElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *SourceElement) Hidden(a SourceHiddenEnum) *SourceElement {
	e.attributes["hidden"] = a

	return e
}

func (e *SourceElement) Id(s string) *SourceElement {
	e.attributes["id"] = s

	return e
}

func (e *SourceElement) Inert(b bool) *SourceElement {
	e.attributes["inert"] = b

	return e
}

func (e *SourceElement) Inputmode(a SourceInputmodeEnum) *SourceElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *SourceElement) Itemid(s string) *SourceElement {
	e.attributes["itemid"] = s

	return e
}

func (e *SourceElement) Itemprop(s ...string) *SourceElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *SourceElement) Itemref(s ...string) *SourceElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *SourceElement) Itemscope(b bool) *SourceElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *SourceElement) Itemtype(s ...string) *SourceElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *SourceElement) Lang(s string) *SourceElement {
	e.attributes["lang"] = s

	return e
}

func (e *SourceElement) Nonce(s string) *SourceElement {
	e.attributes["nonce"] = s

	return e
}

func (e *SourceElement) Popover(s string) *SourceElement {
	e.attributes["popover"] = s

	return e
}

func (e *SourceElement) Slot(s string) *SourceElement {
	e.attributes["slot"] = s

	return e
}

func (e *SourceElement) Spellcheck(a SourceSpellcheckEnum) *SourceElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *SourceElement) Style(s string) *SourceElement {
	e.attributes["style"] = s

	return e
}

func (e *SourceElement) Tabindex(i int) *SourceElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *SourceElement) Title(s string) *SourceElement {
	e.attributes["title"] = s

	return e
}

func (e *SourceElement) Translate(a SourceTranslateEnum) *SourceElement {
	e.attributes["translate"] = a

	return e
}

func (e *SourceElement) Writingsuggestions(a SourceWritingsuggestionsEnum) *SourceElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *SourceElement) Render(w io.Writer) error {
	indent := htemel.SetIndent(e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<source")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}

	return nil
}
