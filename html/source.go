// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type SourceElement struct {
	attributes sourceAttrs
	children []htemel.Node
	skipRender bool
}

// Source creates a tag <source> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The source element allows authors to specify multiple alternative source sets for img elements or multiple alternative media resources for media elements. It does not represent anything on its own.
func Source(children ...htemel.Node) *SourceElement {
	node := &SourceElement{
		children: children,
		attributes: make(sourceAttrs),
	}

	return node
}

func SourceIf(condition bool, children ...htemel.Node) *SourceElement {
	if condition {
		return Source(children...)
	}

	return &SourceElement{
		skipRender: true,
	}
}

type SourceAutocapitalizeEnum string

const (
	SourceAutocapitalizeEnumNone SourceAutocapitalizeEnum = "none"
	SourceAutocapitalizeEnumOff SourceAutocapitalizeEnum = "off"
	SourceAutocapitalizeEnumOn SourceAutocapitalizeEnum = "on"
	SourceAutocapitalizeEnumSentences SourceAutocapitalizeEnum = "sentences"
	SourceAutocapitalizeEnumWords SourceAutocapitalizeEnum = "words"
	SourceAutocapitalizeEnumCharacters SourceAutocapitalizeEnum = "characters"
)

type SourceAutocorrectEnum string

const (
	SourceAutocorrectEnumOff SourceAutocorrectEnum = "off"
	SourceAutocorrectEnumOn SourceAutocorrectEnum = "on"
)

type SourceContenteditableEnum string

const (
	SourceContenteditableEnumFalse SourceContenteditableEnum = "false"
	SourceContenteditableEnumPlaintextOnly SourceContenteditableEnum = "plaintext-only"
	SourceContenteditableEnumTrue SourceContenteditableEnum = "true"
)

type SourceDirEnum string

const (
	SourceDirEnumAuto SourceDirEnum = "auto"
	SourceDirEnumLtr SourceDirEnum = "ltr"
	SourceDirEnumRtl SourceDirEnum = "rtl"
)

type SourceDraggableEnum string

const (
	SourceDraggableEnumFalse SourceDraggableEnum = "false"
	SourceDraggableEnumTrue SourceDraggableEnum = "true"
)

type SourceEnterkeyhintEnum string

const (
	SourceEnterkeyhintEnumEnter SourceEnterkeyhintEnum = "enter"
	SourceEnterkeyhintEnumGo SourceEnterkeyhintEnum = "go"
	SourceEnterkeyhintEnumNext SourceEnterkeyhintEnum = "next"
	SourceEnterkeyhintEnumPrevious SourceEnterkeyhintEnum = "previous"
	SourceEnterkeyhintEnumSearch SourceEnterkeyhintEnum = "search"
	SourceEnterkeyhintEnumSend SourceEnterkeyhintEnum = "send"
	SourceEnterkeyhintEnumDone SourceEnterkeyhintEnum = "done"
)

type SourceHiddenEnum string

const (
	SourceHiddenEnumHidden SourceHiddenEnum = "hidden"
	SourceHiddenEnumUntilFound SourceHiddenEnum = "until-found"
)

type sourceAttrs map[string]any

func (e *SourceElement) Autocapitalize(a SourceAutocapitalizeEnum) *SourceElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *SourceElement) Autocorrect(a SourceAutocorrectEnum) *SourceElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *SourceElement) Autofocus(b bool) *SourceElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *SourceElement) Class(s ...string) *SourceElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *SourceElement) Contenteditable(a SourceContenteditableEnum) *SourceElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *SourceElement) Dir(a SourceDirEnum) *SourceElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *SourceElement) Draggable(a SourceDraggableEnum) *SourceElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *SourceElement) Enterkeyhint(a SourceEnterkeyhintEnum) *SourceElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *SourceElement) Hidden(a SourceHiddenEnum) *SourceElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *SourceElement) Id(s string) *SourceElement {
	e.attributes["id"] = s
	
	return e
}

func (e *SourceElement) Slot(s string) *SourceElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *SourceElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<source")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</source>")); err != nil {
		return err
	}

	return nil
}
