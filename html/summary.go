// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type SummaryElement struct {
	attributes summaryAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// Summary creates a tag <summary> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The summary element represents a summary, caption, or legend for the rest of the contents of the summary element's parent details element, if any.
func Summary(children ...htemel.Node) *SummaryElement {
	node := &SummaryElement{
		children: children, attributes: make(summaryAttrs),
	}

	return node
}

func SummaryIf(condition bool, children ...htemel.Node) *SummaryElement {
	if condition {
		return Summary(children...)
	}

	return &SummaryElement{
		skipRender: true,
	}
}

func SummaryTernary(condition bool, true htemel.Node, false htemel.Node) *SummaryElement {
	if condition {
		return Summary(true)
	}

	return Summary(false)
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *SummaryElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *SummaryElement) AddIndent(i int) {
	e.indent = i + 1
}

type SummaryAutocapitalizeEnum string

const (
	SummaryAutocapitalizeEnumSentences  SummaryAutocapitalizeEnum = "sentences"
	SummaryAutocapitalizeEnumWords      SummaryAutocapitalizeEnum = "words"
	SummaryAutocapitalizeEnumCharacters SummaryAutocapitalizeEnum = "characters"
	SummaryAutocapitalizeEnumNone       SummaryAutocapitalizeEnum = "none"
	SummaryAutocapitalizeEnumOff        SummaryAutocapitalizeEnum = "off"
	SummaryAutocapitalizeEnumOn         SummaryAutocapitalizeEnum = "on"
)

type SummaryAutocorrectEnum string

const (
	SummaryAutocorrectEnumOff   SummaryAutocorrectEnum = "off"
	SummaryAutocorrectEnumOn    SummaryAutocorrectEnum = "on"
	SummaryAutocorrectEnumEmpty SummaryAutocorrectEnum = ""
)

type SummaryContenteditableEnum string

const (
	SummaryContenteditableEnumTrue          SummaryContenteditableEnum = "true"
	SummaryContenteditableEnumFalse         SummaryContenteditableEnum = "false"
	SummaryContenteditableEnumPlaintextOnly SummaryContenteditableEnum = "plaintext-only"
	SummaryContenteditableEnumEmpty         SummaryContenteditableEnum = ""
)

type SummaryDirEnum string

const (
	SummaryDirEnumAuto SummaryDirEnum = "auto"
	SummaryDirEnumLtr  SummaryDirEnum = "ltr"
	SummaryDirEnumRtl  SummaryDirEnum = "rtl"
)

type SummaryDraggableEnum string

const (
	SummaryDraggableEnumFalse SummaryDraggableEnum = "false"
	SummaryDraggableEnumTrue  SummaryDraggableEnum = "true"
)

type SummaryEnterkeyhintEnum string

const (
	SummaryEnterkeyhintEnumSearch   SummaryEnterkeyhintEnum = "search"
	SummaryEnterkeyhintEnumSend     SummaryEnterkeyhintEnum = "send"
	SummaryEnterkeyhintEnumDone     SummaryEnterkeyhintEnum = "done"
	SummaryEnterkeyhintEnumEnter    SummaryEnterkeyhintEnum = "enter"
	SummaryEnterkeyhintEnumGo       SummaryEnterkeyhintEnum = "go"
	SummaryEnterkeyhintEnumNext     SummaryEnterkeyhintEnum = "next"
	SummaryEnterkeyhintEnumPrevious SummaryEnterkeyhintEnum = "previous"
)

type SummaryHiddenEnum string

const (
	SummaryHiddenEnumHidden     SummaryHiddenEnum = "hidden"
	SummaryHiddenEnumUntilFound SummaryHiddenEnum = "until-found"
	SummaryHiddenEnumEmpty      SummaryHiddenEnum = ""
)

type SummaryInputmodeEnum string

const (
	SummaryInputmodeEnumText    SummaryInputmodeEnum = "text"
	SummaryInputmodeEnumUrl     SummaryInputmodeEnum = "url"
	SummaryInputmodeEnumDecimal SummaryInputmodeEnum = "decimal"
	SummaryInputmodeEnumEmail   SummaryInputmodeEnum = "email"
	SummaryInputmodeEnumNone    SummaryInputmodeEnum = "none"
	SummaryInputmodeEnumNumeric SummaryInputmodeEnum = "numeric"
	SummaryInputmodeEnumSearch  SummaryInputmodeEnum = "search"
	SummaryInputmodeEnumTel     SummaryInputmodeEnum = "tel"
)

type SummarySpellcheckEnum string

const (
	SummarySpellcheckEnumTrue  SummarySpellcheckEnum = "true"
	SummarySpellcheckEnumFalse SummarySpellcheckEnum = "false"
	SummarySpellcheckEnumEmpty SummarySpellcheckEnum = ""
)

type SummaryTranslateEnum string

const (
	SummaryTranslateEnumNo    SummaryTranslateEnum = "no"
	SummaryTranslateEnumYes   SummaryTranslateEnum = "yes"
	SummaryTranslateEnumEmpty SummaryTranslateEnum = ""
)

type SummaryWritingsuggestionsEnum string

const (
	SummaryWritingsuggestionsEnumFalse SummaryWritingsuggestionsEnum = "false"
	SummaryWritingsuggestionsEnumTrue  SummaryWritingsuggestionsEnum = "true"
	SummaryWritingsuggestionsEnumEmpty SummaryWritingsuggestionsEnum = ""
)

type summaryAttrs map[string]any

func (e *SummaryElement) Autocapitalize(a SummaryAutocapitalizeEnum) *SummaryElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *SummaryElement) Autocorrect(a SummaryAutocorrectEnum) *SummaryElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *SummaryElement) Autofocus(b bool) *SummaryElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *SummaryElement) Class(s ...string) *SummaryElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *SummaryElement) Contenteditable(a SummaryContenteditableEnum) *SummaryElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *SummaryElement) DataUnsafe(name string, s string) *SummaryElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *SummaryElement) Data(name string, s string) *SummaryElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *SummaryElement) Dir(a SummaryDirEnum) *SummaryElement {
	e.attributes["dir"] = a

	return e
}

func (e *SummaryElement) Draggable(a SummaryDraggableEnum) *SummaryElement {
	e.attributes["draggable"] = a

	return e
}

func (e *SummaryElement) Enterkeyhint(a SummaryEnterkeyhintEnum) *SummaryElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *SummaryElement) Hidden(a SummaryHiddenEnum) *SummaryElement {
	e.attributes["hidden"] = a

	return e
}

func (e *SummaryElement) Id(s string) *SummaryElement {
	e.attributes["id"] = s

	return e
}

func (e *SummaryElement) Inert(b bool) *SummaryElement {
	e.attributes["inert"] = b

	return e
}

func (e *SummaryElement) Inputmode(a SummaryInputmodeEnum) *SummaryElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *SummaryElement) Itemid(s string) *SummaryElement {
	e.attributes["itemid"] = s

	return e
}

func (e *SummaryElement) Itemprop(s ...string) *SummaryElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *SummaryElement) Itemref(s ...string) *SummaryElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *SummaryElement) Itemscope(b bool) *SummaryElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *SummaryElement) Itemtype(s ...string) *SummaryElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *SummaryElement) Lang(s string) *SummaryElement {
	e.attributes["lang"] = s

	return e
}

func (e *SummaryElement) Nonce(s string) *SummaryElement {
	e.attributes["nonce"] = s

	return e
}

func (e *SummaryElement) Popover(s string) *SummaryElement {
	e.attributes["popover"] = s

	return e
}

func (e *SummaryElement) Slot(s string) *SummaryElement {
	e.attributes["slot"] = s

	return e
}

func (e *SummaryElement) Spellcheck(a SummarySpellcheckEnum) *SummaryElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *SummaryElement) Style(s string) *SummaryElement {
	e.attributes["style"] = s

	return e
}

func (e *SummaryElement) Tabindex(i int) *SummaryElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *SummaryElement) Title(s string) *SummaryElement {
	e.attributes["title"] = s

	return e
}

func (e *SummaryElement) Translate(a SummaryTranslateEnum) *SummaryElement {
	e.attributes["translate"] = a

	return e
}

func (e *SummaryElement) Writingsuggestions(a SummaryWritingsuggestionsEnum) *SummaryElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *SummaryElement) Render(w io.Writer) error {
	indent := strings.Repeat("  ", e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<summary")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}
	for _, child := range e.children {
		child.AddIndent(e.Indent())
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(indent + "</summary>\n")); err != nil {
		return err
	}

	return nil
}
