// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type SummaryElement struct {
	attributes summaryAttrs
	children   []htemel.Node
	skipRender bool
}

// Summary creates a tag <summary> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The summary element represents a summary, caption, or legend for the rest of the contents of the summary element's parent details element, if any.
func Summary(children ...htemel.Node) *SummaryElement {
	node := &SummaryElement{
		children:   children,
		attributes: make(summaryAttrs),
	}

	return node
}

func SummaryIf(condition bool, children ...htemel.Node) *SummaryElement {
	if condition {
		return Summary(children...)
	}

	return &SummaryElement{
		skipRender: true,
	}
}

type SummaryAutocapitalizeAttrEnum string

const (
	SummaryAutocapitalizeAttrEnumOn         SummaryAutocapitalizeAttrEnum = "on"
	SummaryAutocapitalizeAttrEnumSentences  SummaryAutocapitalizeAttrEnum = "sentences"
	SummaryAutocapitalizeAttrEnumWords      SummaryAutocapitalizeAttrEnum = "words"
	SummaryAutocapitalizeAttrEnumCharacters SummaryAutocapitalizeAttrEnum = "characters"
	SummaryAutocapitalizeAttrEnumNone       SummaryAutocapitalizeAttrEnum = "none"
	SummaryAutocapitalizeAttrEnumOff        SummaryAutocapitalizeAttrEnum = "off"
)

type SummaryAutocorrectAttrEnum string

const (
	SummaryAutocorrectAttrEnumOff SummaryAutocorrectAttrEnum = "off"
	SummaryAutocorrectAttrEnumOn  SummaryAutocorrectAttrEnum = "on"
)

type SummaryContenteditableAttrEnum string

const (
	SummaryContenteditableAttrEnumTrue          SummaryContenteditableAttrEnum = "true"
	SummaryContenteditableAttrEnumFalse         SummaryContenteditableAttrEnum = "false"
	SummaryContenteditableAttrEnumPlaintextOnly SummaryContenteditableAttrEnum = "plaintext-only"
)

type summaryAttrs map[string]any

func (e *SummaryElement) Autocapitalize(a SummaryAutocapitalizeAttrEnum) *SummaryElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *SummaryElement) Autocorrect(a SummaryAutocorrectAttrEnum) *SummaryElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *SummaryElement) Autofocus(b bool) *SummaryElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *SummaryElement) Class(s ...string) *SummaryElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *SummaryElement) Contenteditable(a SummaryContenteditableAttrEnum) *SummaryElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *SummaryElement) Id(s string) *SummaryElement {
	e.attributes["id"] = s

	return e
}

func (e *SummaryElement) Slot(s string) *SummaryElement {
	e.attributes["slot"] = s

	return e
}

func (e *SummaryElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<summary")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</summary>")); err != nil {
		return err
	}

	return nil
}
