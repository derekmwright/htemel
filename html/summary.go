// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type SummaryElement struct {
	attributes summaryAttrs
	children []htemel.Node
	skipRender bool
}

// Summary creates a tag <summary> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The summary element represents a summary, caption, or legend for the rest of the contents of the summary element's parent details element, if any.
func Summary(children ...htemel.Node) *SummaryElement {
	node := &SummaryElement{
		children: children,
		attributes: make(summaryAttrs),
	}

	return node
}

func SummaryIf(condition bool, children ...htemel.Node) *SummaryElement {
	if condition {
		return Summary(children...)
	}

	return &SummaryElement{
		skipRender: true,
	}
}

type SummaryAutocapitalizeEnum string

const (
	SummaryAutocapitalizeEnumCharacters SummaryAutocapitalizeEnum = "characters"
	SummaryAutocapitalizeEnumNone SummaryAutocapitalizeEnum = "none"
	SummaryAutocapitalizeEnumOff SummaryAutocapitalizeEnum = "off"
	SummaryAutocapitalizeEnumOn SummaryAutocapitalizeEnum = "on"
	SummaryAutocapitalizeEnumSentences SummaryAutocapitalizeEnum = "sentences"
	SummaryAutocapitalizeEnumWords SummaryAutocapitalizeEnum = "words"
)

type SummaryAutocorrectEnum string

const (
	SummaryAutocorrectEnumOff SummaryAutocorrectEnum = "off"
	SummaryAutocorrectEnumOn SummaryAutocorrectEnum = "on"
)

type SummaryContenteditableEnum string

const (
	SummaryContenteditableEnumTrue SummaryContenteditableEnum = "true"
	SummaryContenteditableEnumFalse SummaryContenteditableEnum = "false"
	SummaryContenteditableEnumPlaintextOnly SummaryContenteditableEnum = "plaintext-only"
)

type SummaryDirEnum string

const (
	SummaryDirEnumLtr SummaryDirEnum = "ltr"
	SummaryDirEnumRtl SummaryDirEnum = "rtl"
	SummaryDirEnumAuto SummaryDirEnum = "auto"
)

type SummaryDraggableEnum string

const (
	SummaryDraggableEnumFalse SummaryDraggableEnum = "false"
	SummaryDraggableEnumTrue SummaryDraggableEnum = "true"
)

type SummaryEnterkeyhintEnum string

const (
	SummaryEnterkeyhintEnumNext SummaryEnterkeyhintEnum = "next"
	SummaryEnterkeyhintEnumPrevious SummaryEnterkeyhintEnum = "previous"
	SummaryEnterkeyhintEnumSearch SummaryEnterkeyhintEnum = "search"
	SummaryEnterkeyhintEnumSend SummaryEnterkeyhintEnum = "send"
	SummaryEnterkeyhintEnumDone SummaryEnterkeyhintEnum = "done"
	SummaryEnterkeyhintEnumEnter SummaryEnterkeyhintEnum = "enter"
	SummaryEnterkeyhintEnumGo SummaryEnterkeyhintEnum = "go"
)

type SummaryHiddenEnum string

const (
	SummaryHiddenEnumHidden SummaryHiddenEnum = "hidden"
	SummaryHiddenEnumUntilFound SummaryHiddenEnum = "until-found"
)

type summaryAttrs map[string]any

func (e *SummaryElement) Autocapitalize(a SummaryAutocapitalizeEnum) *SummaryElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *SummaryElement) Autocorrect(a SummaryAutocorrectEnum) *SummaryElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *SummaryElement) Autofocus(b bool) *SummaryElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *SummaryElement) Class(s ...string) *SummaryElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *SummaryElement) Contenteditable(a SummaryContenteditableEnum) *SummaryElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *SummaryElement) Dir(a SummaryDirEnum) *SummaryElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *SummaryElement) Draggable(a SummaryDraggableEnum) *SummaryElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *SummaryElement) Enterkeyhint(a SummaryEnterkeyhintEnum) *SummaryElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *SummaryElement) Hidden(a SummaryHiddenEnum) *SummaryElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *SummaryElement) Id(s string) *SummaryElement {
	e.attributes["id"] = s
	
	return e
}

func (e *SummaryElement) Slot(s string) *SummaryElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *SummaryElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<summary")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</summary>")); err != nil {
		return err
	}

	return nil
}
