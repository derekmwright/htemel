// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type QElement struct {
	attributes qAttrs
	children []htemel.Node
	skipRender bool
}

// Q creates a tag <q> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The q element represents some phrasing content quoted from another source.
func Q(children ...htemel.Node) *QElement {
	node := &QElement{
		children: children,
		attributes: make(qAttrs),
	}

	return node
}

func QIf(condition bool, children ...htemel.Node) *QElement {
	if condition {
		return Q(children...)
	}

	return &QElement{
		skipRender: true,
	}
}

type QAutocapitalizeEnum string

const (
	QAutocapitalizeEnumCharacters QAutocapitalizeEnum = "characters"
	QAutocapitalizeEnumNone QAutocapitalizeEnum = "none"
	QAutocapitalizeEnumOff QAutocapitalizeEnum = "off"
	QAutocapitalizeEnumOn QAutocapitalizeEnum = "on"
	QAutocapitalizeEnumSentences QAutocapitalizeEnum = "sentences"
	QAutocapitalizeEnumWords QAutocapitalizeEnum = "words"
)

type QAutocorrectEnum string

const (
	QAutocorrectEnumOff QAutocorrectEnum = "off"
	QAutocorrectEnumOn QAutocorrectEnum = "on"
)

type QContenteditableEnum string

const (
	QContenteditableEnumFalse QContenteditableEnum = "false"
	QContenteditableEnumPlaintextOnly QContenteditableEnum = "plaintext-only"
	QContenteditableEnumTrue QContenteditableEnum = "true"
)

type QDirEnum string

const (
	QDirEnumAuto QDirEnum = "auto"
	QDirEnumLtr QDirEnum = "ltr"
	QDirEnumRtl QDirEnum = "rtl"
)

type QDraggableEnum string

const (
	QDraggableEnumFalse QDraggableEnum = "false"
	QDraggableEnumTrue QDraggableEnum = "true"
)

type QEnterkeyhintEnum string

const (
	QEnterkeyhintEnumGo QEnterkeyhintEnum = "go"
	QEnterkeyhintEnumNext QEnterkeyhintEnum = "next"
	QEnterkeyhintEnumPrevious QEnterkeyhintEnum = "previous"
	QEnterkeyhintEnumSearch QEnterkeyhintEnum = "search"
	QEnterkeyhintEnumSend QEnterkeyhintEnum = "send"
	QEnterkeyhintEnumDone QEnterkeyhintEnum = "done"
	QEnterkeyhintEnumEnter QEnterkeyhintEnum = "enter"
)

type QHiddenEnum string

const (
	QHiddenEnumHidden QHiddenEnum = "hidden"
	QHiddenEnumUntilFound QHiddenEnum = "until-found"
)

type qAttrs map[string]any

func (e *QElement) Autocapitalize(a QAutocapitalizeEnum) *QElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *QElement) Autocorrect(a QAutocorrectEnum) *QElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *QElement) Autofocus(b bool) *QElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *QElement) Class(s ...string) *QElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *QElement) Contenteditable(a QContenteditableEnum) *QElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *QElement) Dir(a QDirEnum) *QElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *QElement) Draggable(a QDraggableEnum) *QElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *QElement) Enterkeyhint(a QEnterkeyhintEnum) *QElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *QElement) Hidden(a QHiddenEnum) *QElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *QElement) Id(s string) *QElement {
	e.attributes["id"] = s
	
	return e
}

func (e *QElement) Slot(s string) *QElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *QElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<q")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</q>")); err != nil {
		return err
	}

	return nil
}
