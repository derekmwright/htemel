// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type QElement struct {
	attributes qAttrs
	children   []htemel.Node
	skipRender bool
}

// Q creates a tag <q> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The q element represents some phrasing content quoted from another source.
func Q(children ...htemel.Node) *QElement {
	node := &QElement{
		children:   children,
		attributes: make(qAttrs),
	}

	return node
}

func QIf(condition bool, children ...htemel.Node) *QElement {
	if condition {
		return Q(children...)
	}

	return &QElement{
		skipRender: true,
	}
}

type QAutocapitalizeAttrEnum string

const (
	QAutocapitalizeAttrEnumNone       QAutocapitalizeAttrEnum = "none"
	QAutocapitalizeAttrEnumOff        QAutocapitalizeAttrEnum = "off"
	QAutocapitalizeAttrEnumOn         QAutocapitalizeAttrEnum = "on"
	QAutocapitalizeAttrEnumSentences  QAutocapitalizeAttrEnum = "sentences"
	QAutocapitalizeAttrEnumWords      QAutocapitalizeAttrEnum = "words"
	QAutocapitalizeAttrEnumCharacters QAutocapitalizeAttrEnum = "characters"
)

type QAutocorrectAttrEnum string

const (
	QAutocorrectAttrEnumOff QAutocorrectAttrEnum = "off"
	QAutocorrectAttrEnumOn  QAutocorrectAttrEnum = "on"
)

type QContenteditableAttrEnum string

const (
	QContenteditableAttrEnumTrue          QContenteditableAttrEnum = "true"
	QContenteditableAttrEnumFalse         QContenteditableAttrEnum = "false"
	QContenteditableAttrEnumPlaintextOnly QContenteditableAttrEnum = "plaintext-only"
)

type qAttrs map[string]any

func (e *QElement) Autocapitalize(a QAutocapitalizeAttrEnum) *QElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *QElement) Autocorrect(a QAutocorrectAttrEnum) *QElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *QElement) Autofocus(b bool) *QElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *QElement) Class(s ...string) *QElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *QElement) Contenteditable(a QContenteditableAttrEnum) *QElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *QElement) Id(s string) *QElement {
	e.attributes["id"] = s

	return e
}

func (e *QElement) Slot(s string) *QElement {
	e.attributes["slot"] = s

	return e
}

func (e *QElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<q")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</q>")); err != nil {
		return err
	}

	return nil
}
