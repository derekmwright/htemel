// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type QElement struct {
	attributes qAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// Q creates a tag <q> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The q element represents some phrasing content quoted from another source.
func Q(children ...htemel.Node) *QElement {
	node := &QElement{
		children: children, attributes: make(qAttrs),
	}

	return node
}

func QIf(condition bool, children ...htemel.Node) *QElement {
	if condition {
		return Q(children...)
	}

	return &QElement{
		skipRender: true,
	}
}

func QTernary(condition bool, true htemel.Node, false htemel.Node) *QElement {
	if condition {
		return Q(true)
	}

	return Q(false)
}

// AddIndent is called by the Render function on children elements to set their indentation.
func (e *QElement) Indent() int {
	return e.indent
}

// AddIndent is called by the Render function on children elements to set their indentation.
// The parent should pass its own indentation value and this function will increment it for itself.
func (e *QElement) AddIndent(i int) {
	e.indent = i + 1
}

type QAutocapitalizeEnum string

const (
	QAutocapitalizeEnumCharacters QAutocapitalizeEnum = "characters"
	QAutocapitalizeEnumNone       QAutocapitalizeEnum = "none"
	QAutocapitalizeEnumOff        QAutocapitalizeEnum = "off"
	QAutocapitalizeEnumOn         QAutocapitalizeEnum = "on"
	QAutocapitalizeEnumSentences  QAutocapitalizeEnum = "sentences"
	QAutocapitalizeEnumWords      QAutocapitalizeEnum = "words"
)

type QAutocorrectEnum string

const (
	QAutocorrectEnumOff   QAutocorrectEnum = "off"
	QAutocorrectEnumOn    QAutocorrectEnum = "on"
	QAutocorrectEnumEmpty QAutocorrectEnum = ""
)

type QContenteditableEnum string

const (
	QContenteditableEnumFalse         QContenteditableEnum = "false"
	QContenteditableEnumPlaintextOnly QContenteditableEnum = "plaintext-only"
	QContenteditableEnumTrue          QContenteditableEnum = "true"
	QContenteditableEnumEmpty         QContenteditableEnum = ""
)

type QDirEnum string

const (
	QDirEnumRtl  QDirEnum = "rtl"
	QDirEnumAuto QDirEnum = "auto"
	QDirEnumLtr  QDirEnum = "ltr"
)

type QDraggableEnum string

const (
	QDraggableEnumFalse QDraggableEnum = "false"
	QDraggableEnumTrue  QDraggableEnum = "true"
)

type QEnterkeyhintEnum string

const (
	QEnterkeyhintEnumPrevious QEnterkeyhintEnum = "previous"
	QEnterkeyhintEnumSearch   QEnterkeyhintEnum = "search"
	QEnterkeyhintEnumSend     QEnterkeyhintEnum = "send"
	QEnterkeyhintEnumDone     QEnterkeyhintEnum = "done"
	QEnterkeyhintEnumEnter    QEnterkeyhintEnum = "enter"
	QEnterkeyhintEnumGo       QEnterkeyhintEnum = "go"
	QEnterkeyhintEnumNext     QEnterkeyhintEnum = "next"
)

type QHiddenEnum string

const (
	QHiddenEnumHidden     QHiddenEnum = "hidden"
	QHiddenEnumUntilFound QHiddenEnum = "until-found"
	QHiddenEnumEmpty      QHiddenEnum = ""
)

type QInputmodeEnum string

const (
	QInputmodeEnumText    QInputmodeEnum = "text"
	QInputmodeEnumUrl     QInputmodeEnum = "url"
	QInputmodeEnumDecimal QInputmodeEnum = "decimal"
	QInputmodeEnumEmail   QInputmodeEnum = "email"
	QInputmodeEnumNone    QInputmodeEnum = "none"
	QInputmodeEnumNumeric QInputmodeEnum = "numeric"
	QInputmodeEnumSearch  QInputmodeEnum = "search"
	QInputmodeEnumTel     QInputmodeEnum = "tel"
)

type QSpellcheckEnum string

const (
	QSpellcheckEnumFalse QSpellcheckEnum = "false"
	QSpellcheckEnumTrue  QSpellcheckEnum = "true"
	QSpellcheckEnumEmpty QSpellcheckEnum = ""
)

type QTranslateEnum string

const (
	QTranslateEnumNo    QTranslateEnum = "no"
	QTranslateEnumYes   QTranslateEnum = "yes"
	QTranslateEnumEmpty QTranslateEnum = ""
)

type QWritingsuggestionsEnum string

const (
	QWritingsuggestionsEnumFalse QWritingsuggestionsEnum = "false"
	QWritingsuggestionsEnumTrue  QWritingsuggestionsEnum = "true"
	QWritingsuggestionsEnumEmpty QWritingsuggestionsEnum = ""
)

type qAttrs map[string]any

func (e *QElement) Cite(s string) *QElement {
	e.attributes["cite"] = s

	return e
}

func (e *QElement) Autocapitalize(a QAutocapitalizeEnum) *QElement {
	e.attributes["autocapitalize"] = a

	return e
}

func QAutocapitalizeCustom(s string) QAutocapitalizeEnum {
	return QAutocapitalizeEnum(s)
}

func (e *QElement) Autocorrect(a QAutocorrectEnum) *QElement {
	e.attributes["autocorrect"] = a

	return e
}

func QAutocorrectCustom(s string) QAutocorrectEnum {
	return QAutocorrectEnum(s)
}

func (e *QElement) Autofocus(b bool) *QElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *QElement) Class(s ...string) *QElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *QElement) Contenteditable(a QContenteditableEnum) *QElement {
	e.attributes["contenteditable"] = a

	return e
}

func QContenteditableCustom(s string) QContenteditableEnum {
	return QContenteditableEnum(s)
}

func (e *QElement) DataUnsafe(name string, s string) *QElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *QElement) Data(name string, s string) *QElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *QElement) Dir(a QDirEnum) *QElement {
	e.attributes["dir"] = a

	return e
}

func QDirCustom(s string) QDirEnum {
	return QDirEnum(s)
}

func (e *QElement) Draggable(a QDraggableEnum) *QElement {
	e.attributes["draggable"] = a

	return e
}

func QDraggableCustom(s string) QDraggableEnum {
	return QDraggableEnum(s)
}

func (e *QElement) Enterkeyhint(a QEnterkeyhintEnum) *QElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func QEnterkeyhintCustom(s string) QEnterkeyhintEnum {
	return QEnterkeyhintEnum(s)
}

func (e *QElement) Hidden(a QHiddenEnum) *QElement {
	e.attributes["hidden"] = a

	return e
}

func QHiddenCustom(s string) QHiddenEnum {
	return QHiddenEnum(s)
}

func (e *QElement) Id(s string) *QElement {
	e.attributes["id"] = s

	return e
}

func (e *QElement) Inert(b bool) *QElement {
	e.attributes["inert"] = b

	return e
}

func (e *QElement) Inputmode(a QInputmodeEnum) *QElement {
	e.attributes["inputmode"] = a

	return e
}

func QInputmodeCustom(s string) QInputmodeEnum {
	return QInputmodeEnum(s)
}

func (e *QElement) Itemid(s string) *QElement {
	e.attributes["itemid"] = s

	return e
}

func (e *QElement) Itemprop(s ...string) *QElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *QElement) Itemref(s ...string) *QElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *QElement) Itemscope(b bool) *QElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *QElement) Itemtype(s ...string) *QElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *QElement) Lang(s string) *QElement {
	e.attributes["lang"] = s

	return e
}

func (e *QElement) Nonce(s string) *QElement {
	e.attributes["nonce"] = s

	return e
}

func (e *QElement) Popover(s string) *QElement {
	e.attributes["popover"] = s

	return e
}

func (e *QElement) Slot(s string) *QElement {
	e.attributes["slot"] = s

	return e
}

func (e *QElement) Spellcheck(a QSpellcheckEnum) *QElement {
	e.attributes["spellcheck"] = a

	return e
}

func QSpellcheckCustom(s string) QSpellcheckEnum {
	return QSpellcheckEnum(s)
}

func (e *QElement) Style(s string) *QElement {
	e.attributes["style"] = s

	return e
}

func (e *QElement) Tabindex(i int) *QElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *QElement) Title(s string) *QElement {
	e.attributes["title"] = s

	return e
}

func (e *QElement) Translate(a QTranslateEnum) *QElement {
	e.attributes["translate"] = a

	return e
}

func QTranslateCustom(s string) QTranslateEnum {
	return QTranslateEnum(s)
}

func (e *QElement) Writingsuggestions(a QWritingsuggestionsEnum) *QElement {
	e.attributes["writingsuggestions"] = a

	return e
}

func QWritingsuggestionsCustom(s string) QWritingsuggestionsEnum {
	return QWritingsuggestionsEnum(s)
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *QElement) Render(w io.Writer) error {
	indent := htemel.SetIndent(e.indent)

	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte(indent + "<q")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">\n")); err != nil {
		return err
	}
	for _, child := range e.children {
		child.AddIndent(e.Indent())
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(indent + "</q>\n")); err != nil {
		return err
	}

	return nil
}
