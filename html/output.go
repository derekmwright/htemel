// Code generated by htemel. DO NOT EDIT.
package html

import (
  "fmt"
  "github.com/derekmwright/htemel"
  "golang.org/x/net/html"
  "io"
  "strings"
)

type OutputElement struct {
	attributes outputAttrs
	children []htemel.Node
	skipRender bool
}

// Output creates a tag <output> instance and returns it for further modification.
// Any children passed will be nested within the tag.
//
// Spec Description: The output element represents the result of a calculation performed by the application, or the result of a user action.
func Output(children ...htemel.Node) *OutputElement {
	node := &OutputElement{
		children: children,
		attributes: make(outputAttrs),
	}

	return node
}

func OutputIf(condition bool, children ...htemel.Node) *OutputElement {
	if condition {
		return Output(children...)
	}

	return &OutputElement{
		skipRender: true,
	}
}

type OutputAutocapitalizeEnum string

const (
	OutputAutocapitalizeEnumCharacters OutputAutocapitalizeEnum = "characters"
	OutputAutocapitalizeEnumNone OutputAutocapitalizeEnum = "none"
	OutputAutocapitalizeEnumOff OutputAutocapitalizeEnum = "off"
	OutputAutocapitalizeEnumOn OutputAutocapitalizeEnum = "on"
	OutputAutocapitalizeEnumSentences OutputAutocapitalizeEnum = "sentences"
	OutputAutocapitalizeEnumWords OutputAutocapitalizeEnum = "words"
)

type OutputAutocorrectEnum string

const (
	OutputAutocorrectEnumOff OutputAutocorrectEnum = "off"
	OutputAutocorrectEnumOn OutputAutocorrectEnum = "on"
)

type OutputContenteditableEnum string

const (
	OutputContenteditableEnumPlaintextOnly OutputContenteditableEnum = "plaintext-only"
	OutputContenteditableEnumTrue OutputContenteditableEnum = "true"
	OutputContenteditableEnumFalse OutputContenteditableEnum = "false"
)

type OutputDirEnum string

const (
	OutputDirEnumAuto OutputDirEnum = "auto"
	OutputDirEnumLtr OutputDirEnum = "ltr"
	OutputDirEnumRtl OutputDirEnum = "rtl"
)

type OutputDraggableEnum string

const (
	OutputDraggableEnumFalse OutputDraggableEnum = "false"
	OutputDraggableEnumTrue OutputDraggableEnum = "true"
)

type OutputEnterkeyhintEnum string

const (
	OutputEnterkeyhintEnumDone OutputEnterkeyhintEnum = "done"
	OutputEnterkeyhintEnumEnter OutputEnterkeyhintEnum = "enter"
	OutputEnterkeyhintEnumGo OutputEnterkeyhintEnum = "go"
	OutputEnterkeyhintEnumNext OutputEnterkeyhintEnum = "next"
	OutputEnterkeyhintEnumPrevious OutputEnterkeyhintEnum = "previous"
	OutputEnterkeyhintEnumSearch OutputEnterkeyhintEnum = "search"
	OutputEnterkeyhintEnumSend OutputEnterkeyhintEnum = "send"
)

type OutputHiddenEnum string

const (
	OutputHiddenEnumHidden OutputHiddenEnum = "hidden"
	OutputHiddenEnumUntilFound OutputHiddenEnum = "until-found"
)

type outputAttrs map[string]any

func (e *OutputElement) Autocapitalize(a OutputAutocapitalizeEnum) *OutputElement {
	e.attributes["autocapitalize"] = a
	
	return e
}

func (e *OutputElement) Autocorrect(a OutputAutocorrectEnum) *OutputElement {
	e.attributes["autocorrect"] = a
	
	return e
}

func (e *OutputElement) Autofocus(b bool) *OutputElement {
	e.attributes["autofocus"] = b
	
	return e
}

func (e *OutputElement) Class(s ...string) *OutputElement {
	e.attributes["class"] = strings.Join(s, " ")
	
	return e
}

func (e *OutputElement) Contenteditable(a OutputContenteditableEnum) *OutputElement {
	e.attributes["contenteditable"] = a
	
	return e
}

func (e *OutputElement) Dir(a OutputDirEnum) *OutputElement {
	e.attributes["dir"] = a
	
	return e
}

func (e *OutputElement) Draggable(a OutputDraggableEnum) *OutputElement {
	e.attributes["draggable"] = a
	
	return e
}

func (e *OutputElement) Enterkeyhint(a OutputEnterkeyhintEnum) *OutputElement {
	e.attributes["enterkeyhint"] = a
	
	return e
}

func (e *OutputElement) Hidden(a OutputHiddenEnum) *OutputElement {
	e.attributes["hidden"] = a
	
	return e
}

func (e *OutputElement) Id(s string) *OutputElement {
	e.attributes["id"] = s
	
	return e
}

func (e *OutputElement) Slot(s string) *OutputElement {
	e.attributes["slot"] = s
	
	return e
}

func (e *OutputElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<output")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key + "="))
		w.Write([]byte("\"" + html.EscapeString(fmt.Sprintf("%v", v)) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}

	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</output>")); err != nil {
		return err
	}

	return nil
}
