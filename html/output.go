// Code generated by htemel. DO NOT EDIT.
package html

import (
	"fmt"
	"io"
	"strings"

	"github.com/derekmwright/htemel"
	"golang.org/x/net/html"
)

type OutputElement struct {
	attributes outputAttrs
	children   []htemel.Node
	skipRender bool
	indent     int
}

// Output creates a tag <output> instance and returns it for further modification.
// Any children passed will be nested within the tag.//
// Spec Description: The output element represents the result of a calculation performed by the application, or the result of a user action.
func Output(children ...htemel.Node) *OutputElement {
	node := &OutputElement{
		children: children, attributes: make(outputAttrs),
	}

	return node
}

func OutputIf(condition bool, children ...htemel.Node) *OutputElement {
	if condition {
		return Output(children...)
	}

	return &OutputElement{
		skipRender: true,
	}
}

func OutputTernary(condition bool, true htemel.Node, false htemel.Node) *OutputElement {
	if condition {
		return Output(true)
	}

	return Output(false)
}

type OutputAutocapitalizeEnum string

const (
	OutputAutocapitalizeEnumCharacters OutputAutocapitalizeEnum = "characters"
	OutputAutocapitalizeEnumNone       OutputAutocapitalizeEnum = "none"
	OutputAutocapitalizeEnumOff        OutputAutocapitalizeEnum = "off"
	OutputAutocapitalizeEnumOn         OutputAutocapitalizeEnum = "on"
	OutputAutocapitalizeEnumSentences  OutputAutocapitalizeEnum = "sentences"
	OutputAutocapitalizeEnumWords      OutputAutocapitalizeEnum = "words"
)

type OutputAutocorrectEnum string

const (
	OutputAutocorrectEnumOff   OutputAutocorrectEnum = "off"
	OutputAutocorrectEnumOn    OutputAutocorrectEnum = "on"
	OutputAutocorrectEnumEmpty OutputAutocorrectEnum = ""
)

type OutputContenteditableEnum string

const (
	OutputContenteditableEnumFalse         OutputContenteditableEnum = "false"
	OutputContenteditableEnumPlaintextOnly OutputContenteditableEnum = "plaintext-only"
	OutputContenteditableEnumTrue          OutputContenteditableEnum = "true"
	OutputContenteditableEnumEmpty         OutputContenteditableEnum = ""
)

type OutputDirEnum string

const (
	OutputDirEnumAuto OutputDirEnum = "auto"
	OutputDirEnumLtr  OutputDirEnum = "ltr"
	OutputDirEnumRtl  OutputDirEnum = "rtl"
)

type OutputDraggableEnum string

const (
	OutputDraggableEnumTrue  OutputDraggableEnum = "true"
	OutputDraggableEnumFalse OutputDraggableEnum = "false"
)

type OutputEnterkeyhintEnum string

const (
	OutputEnterkeyhintEnumDone     OutputEnterkeyhintEnum = "done"
	OutputEnterkeyhintEnumEnter    OutputEnterkeyhintEnum = "enter"
	OutputEnterkeyhintEnumGo       OutputEnterkeyhintEnum = "go"
	OutputEnterkeyhintEnumNext     OutputEnterkeyhintEnum = "next"
	OutputEnterkeyhintEnumPrevious OutputEnterkeyhintEnum = "previous"
	OutputEnterkeyhintEnumSearch   OutputEnterkeyhintEnum = "search"
	OutputEnterkeyhintEnumSend     OutputEnterkeyhintEnum = "send"
)

type OutputHiddenEnum string

const (
	OutputHiddenEnumHidden     OutputHiddenEnum = "hidden"
	OutputHiddenEnumUntilFound OutputHiddenEnum = "until-found"
	OutputHiddenEnumEmpty      OutputHiddenEnum = ""
)

type OutputInputmodeEnum string

const (
	OutputInputmodeEnumNone    OutputInputmodeEnum = "none"
	OutputInputmodeEnumNumeric OutputInputmodeEnum = "numeric"
	OutputInputmodeEnumSearch  OutputInputmodeEnum = "search"
	OutputInputmodeEnumTel     OutputInputmodeEnum = "tel"
	OutputInputmodeEnumText    OutputInputmodeEnum = "text"
	OutputInputmodeEnumUrl     OutputInputmodeEnum = "url"
	OutputInputmodeEnumDecimal OutputInputmodeEnum = "decimal"
	OutputInputmodeEnumEmail   OutputInputmodeEnum = "email"
)

type OutputSpellcheckEnum string

const (
	OutputSpellcheckEnumFalse OutputSpellcheckEnum = "false"
	OutputSpellcheckEnumTrue  OutputSpellcheckEnum = "true"
	OutputSpellcheckEnumEmpty OutputSpellcheckEnum = ""
)

type OutputTranslateEnum string

const (
	OutputTranslateEnumNo    OutputTranslateEnum = "no"
	OutputTranslateEnumYes   OutputTranslateEnum = "yes"
	OutputTranslateEnumEmpty OutputTranslateEnum = ""
)

type OutputWritingsuggestionsEnum string

const (
	OutputWritingsuggestionsEnumFalse OutputWritingsuggestionsEnum = "false"
	OutputWritingsuggestionsEnumTrue  OutputWritingsuggestionsEnum = "true"
	OutputWritingsuggestionsEnumEmpty OutputWritingsuggestionsEnum = ""
)

type outputAttrs map[string]any

func (e *OutputElement) For(s string) *OutputElement {
	e.attributes["for"] = s

	return e
}

func (e *OutputElement) Form(s string) *OutputElement {
	e.attributes["form"] = s

	return e
}

func (e *OutputElement) Name(s string) *OutputElement {
	e.attributes["name"] = s

	return e
}

func (e *OutputElement) Autocapitalize(a OutputAutocapitalizeEnum) *OutputElement {
	e.attributes["autocapitalize"] = a

	return e
}

func (e *OutputElement) Autocorrect(a OutputAutocorrectEnum) *OutputElement {
	e.attributes["autocorrect"] = a

	return e
}

func (e *OutputElement) Autofocus(b bool) *OutputElement {
	e.attributes["autofocus"] = b

	return e
}

func (e *OutputElement) Class(s ...string) *OutputElement {
	e.attributes["class"] = strings.Join(s, " ")

	return e
}

func (e *OutputElement) Contenteditable(a OutputContenteditableEnum) *OutputElement {
	e.attributes["contenteditable"] = a

	return e
}

func (e *OutputElement) DataUnsafe(name string, s string) *OutputElement {
	tag := strings.ToLower("data-" + name)

	e.attributes[tag] = s

	return e
}

func (e *OutputElement) Data(name string, s string) *OutputElement {
	return e.DataUnsafe(name, html.EscapeString(s))
}

func (e *OutputElement) Dir(a OutputDirEnum) *OutputElement {
	e.attributes["dir"] = a

	return e
}

func (e *OutputElement) Draggable(a OutputDraggableEnum) *OutputElement {
	e.attributes["draggable"] = a

	return e
}

func (e *OutputElement) Enterkeyhint(a OutputEnterkeyhintEnum) *OutputElement {
	e.attributes["enterkeyhint"] = a

	return e
}

func (e *OutputElement) Hidden(a OutputHiddenEnum) *OutputElement {
	e.attributes["hidden"] = a

	return e
}

func (e *OutputElement) Id(s string) *OutputElement {
	e.attributes["id"] = s

	return e
}

func (e *OutputElement) Inert(b bool) *OutputElement {
	e.attributes["inert"] = b

	return e
}

func (e *OutputElement) Inputmode(a OutputInputmodeEnum) *OutputElement {
	e.attributes["inputmode"] = a

	return e
}

func (e *OutputElement) Itemid(s string) *OutputElement {
	e.attributes["itemid"] = s

	return e
}

func (e *OutputElement) Itemprop(s ...string) *OutputElement {
	e.attributes["itemprop"] = strings.Join(s, " ")

	return e
}

func (e *OutputElement) Itemref(s ...string) *OutputElement {
	e.attributes["itemref"] = strings.Join(s, " ")

	return e
}

func (e *OutputElement) Itemscope(b bool) *OutputElement {
	e.attributes["itemscope"] = b

	return e
}

func (e *OutputElement) Itemtype(s ...string) *OutputElement {
	e.attributes["itemtype"] = strings.Join(s, " ")

	return e
}

func (e *OutputElement) Lang(s string) *OutputElement {
	e.attributes["lang"] = s

	return e
}

func (e *OutputElement) Nonce(s string) *OutputElement {
	e.attributes["nonce"] = s

	return e
}

func (e *OutputElement) Popover(s string) *OutputElement {
	e.attributes["popover"] = s

	return e
}

func (e *OutputElement) Slot(s string) *OutputElement {
	e.attributes["slot"] = s

	return e
}

func (e *OutputElement) Spellcheck(a OutputSpellcheckEnum) *OutputElement {
	e.attributes["spellcheck"] = a

	return e
}

func (e *OutputElement) Style(s string) *OutputElement {
	e.attributes["style"] = s

	return e
}

func (e *OutputElement) Tabindex(i int) *OutputElement {
	e.attributes["tabindex"] = i

	return e
}

func (e *OutputElement) Title(s string) *OutputElement {
	e.attributes["title"] = s

	return e
}

func (e *OutputElement) Translate(a OutputTranslateEnum) *OutputElement {
	e.attributes["translate"] = a

	return e
}

func (e *OutputElement) Writingsuggestions(a OutputWritingsuggestionsEnum) *OutputElement {
	e.attributes["writingsuggestions"] = a

	return e
}

// Render processes the current element, and writes the initial tag.
// Then all children are processed and included within the tag.
// Finally, the tag is closed.
//
// *Except for void elements as they are self closing and do not contain children.
func (e *OutputElement) Render(w io.Writer) error {
	if e.skipRender {
		return nil
	}

	if _, err := w.Write([]byte("<output")); err != nil {
		return err
	}

	c := len(e.attributes)
	i := 1
	for key, v := range e.attributes {
		if i == 1 {
			w.Write([]byte(" "))
		}

		w.Write([]byte(key))

		// Enum types support empty attributes and can be omitted.
		if fmt.Sprintf("%s", v) == "" {
			w.Write([]byte(" "))
			continue
		}

		w.Write([]byte("="))

		w.Write([]byte("\"" + fmt.Sprintf("%v", v) + "\""))

		if i < c {
			w.Write([]byte(" "))
		}

		i++
	}

	if _, err := w.Write([]byte(">")); err != nil {
		return err
	}
	for _, child := range e.children {
		if err := child.Render(w); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("</output>")); err != nil {
		return err
	}

	return nil
}
